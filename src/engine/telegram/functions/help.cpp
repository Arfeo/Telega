// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "help.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

using namespace Tg;

Functions::Help::Help() {
}

Functions::Help::~Help() {
}

bool Functions::Help::getConfig(OutboundPkt *out) {
    out->appendInt(fncHelpGetConfig);
    return true;
}

Config Functions::Help::getConfigResult(InboundPkt *in) {
    Config result;
    if(!result.fetch(in)) return result;
    return result;
}

bool Functions::Help::getNearestDc(OutboundPkt *out) {
    out->appendInt(fncHelpGetNearestDc);
    return true;
}

NearestDc Functions::Help::getNearestDcResult(InboundPkt *in) {
    NearestDc result;
    if(!result.fetch(in)) return result;
    return result;
}

bool Functions::Help::getAppUpdate(OutboundPkt *out) {
    out->appendInt(fncHelpGetAppUpdate);
    return true;
}

HelpAppUpdate Functions::Help::getAppUpdateResult(InboundPkt *in) {
    HelpAppUpdate result;
    if(!result.fetch(in)) return result;
    return result;
}

bool Functions::Help::saveAppLog(OutboundPkt *out, const QList<InputAppEvent> &events) {
    out->appendInt(fncHelpSaveAppLog);
    out->appendInt(CoreTypes::typeVector);
    out->appendInt(events.count());
    for (qint32 i = 0; i < events.count(); i++) {
        if(!events[i].push(out)) return false;
    }
    return true;
}

bool Functions::Help::saveAppLogResult(InboundPkt *in) {
    bool result;
    result = in->fetchBool();
    return result;
}

bool Functions::Help::getInviteText(OutboundPkt *out) {
    out->appendInt(fncHelpGetInviteText);
    return true;
}

HelpInviteText Functions::Help::getInviteTextResult(InboundPkt *in) {
    HelpInviteText result;
    if(!result.fetch(in)) return result;
    return result;
}

bool Functions::Help::getSupport(OutboundPkt *out) {
    out->appendInt(fncHelpGetSupport);
    return true;
}

HelpSupport Functions::Help::getSupportResult(InboundPkt *in) {
    HelpSupport result;
    if(!result.fetch(in)) return result;
    return result;
}

bool Functions::Help::getAppChangelog(OutboundPkt *out, const QString &prevAppVersion) {
    out->appendInt(fncHelpGetAppChangelog);
    out->appendQString(prevAppVersion);
    return true;
}

UpdatesType Functions::Help::getAppChangelogResult(InboundPkt *in) {
    UpdatesType result;
    if(!result.fetch(in)) return result;
    return result;
}

bool Functions::Help::getTermsOfService(OutboundPkt *out) {
    out->appendInt(fncHelpGetTermsOfService);
    return true;
}

HelpTermsOfService Functions::Help::getTermsOfServiceResult(InboundPkt *in) {
    HelpTermsOfService result;
    if(!result.fetch(in)) return result;
    return result;
}

bool Functions::Help::setBotUpdatesStatus(OutboundPkt *out, qint32 pendingUpdatesCount, const QString &message) {
    out->appendInt(fncHelpSetBotUpdatesStatus);
    out->appendInt(pendingUpdatesCount);
    out->appendQString(message);
    return true;
}

bool Functions::Help::setBotUpdatesStatusResult(InboundPkt *in) {
    bool result;
    result = in->fetchBool();
    return result;
}

bool Functions::Help::getCdnConfig(OutboundPkt *out) {
    out->appendInt(fncHelpGetCdnConfig);
    return true;
}

CdnConfig Functions::Help::getCdnConfigResult(InboundPkt *in) {
    CdnConfig result;
    if(!result.fetch(in)) return result;
    return result;
}

