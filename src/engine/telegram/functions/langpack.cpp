// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "langpack.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

using namespace Tg;

Functions::Langpack::Langpack() {
}

Functions::Langpack::~Langpack() {
}

bool Functions::Langpack::getLangPack(OutboundPkt *out, const QString &langCode) {
    out->appendInt(fncLangpackGetLangPack);
    out->appendQString(langCode);
    return true;
}

LangPackDifference Functions::Langpack::getLangPackResult(InboundPkt *in) {
    LangPackDifference result;
    if(!result.fetch(in)) return result;
    return result;
}

bool Functions::Langpack::getStrings(OutboundPkt *out, const QString &langCode, const QList<QString> &keys) {
    out->appendInt(fncLangpackGetStrings);
    out->appendQString(langCode);
    out->appendInt(CoreTypes::typeVector);
    out->appendInt(keys.count());
    for (qint32 i = 0; i < keys.count(); i++) {
        out->appendQString(keys[i]);
    }
    return true;
}

QList<LangPackString> Functions::Langpack::getStringsResult(InboundPkt *in) {
    QList<LangPackString> result;
    if(in->fetchInt() != (qint32)CoreTypes::typeVector) return result;
    qint32 result_length = in->fetchInt();
    result.clear();
    for (qint32 i = 0; i < result_length; i++) {
        LangPackString type;
        if(!type.fetch(in)) return result;
        result.append(type);
    }
    return result;
}

bool Functions::Langpack::getDifference(OutboundPkt *out, qint32 fromVersion) {
    out->appendInt(fncLangpackGetDifference);
    out->appendInt(fromVersion);
    return true;
}

LangPackDifference Functions::Langpack::getDifferenceResult(InboundPkt *in) {
    LangPackDifference result;
    if(!result.fetch(in)) return result;
    return result;
}

bool Functions::Langpack::getLanguages(OutboundPkt *out) {
    out->appendInt(fncLangpackGetLanguages);
    return true;
}

QList<LangPackLanguage> Functions::Langpack::getLanguagesResult(InboundPkt *in) {
    QList<LangPackLanguage> result;
    if(in->fetchInt() != (qint32)CoreTypes::typeVector) return result;
    qint32 result_length = in->fetchInt();
    result.clear();
    for (qint32 i = 0; i < result_length; i++) {
        LangPackLanguage type;
        if(!type.fetch(in)) return result;
        result.append(type);
    }
    return result;
}

