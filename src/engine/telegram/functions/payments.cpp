// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "payments.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

using namespace Tg;

Functions::Payments::Payments() {
}

Functions::Payments::~Payments() {
}

bool Functions::Payments::getPaymentForm(OutboundPkt *out, qint32 msgId) {
    out->appendInt(fncPaymentsGetPaymentForm);
    out->appendInt(msgId);
    return true;
}

PaymentsPaymentForm Functions::Payments::getPaymentFormResult(InboundPkt *in) {
    PaymentsPaymentForm result;
    if(!result.fetch(in)) return result;
    return result;
}

bool Functions::Payments::getPaymentReceipt(OutboundPkt *out, qint32 msgId) {
    out->appendInt(fncPaymentsGetPaymentReceipt);
    out->appendInt(msgId);
    return true;
}

PaymentsPaymentReceipt Functions::Payments::getPaymentReceiptResult(InboundPkt *in) {
    PaymentsPaymentReceipt result;
    if(!result.fetch(in)) return result;
    return result;
}

bool Functions::Payments::validateRequestedInfo(OutboundPkt *out, bool save, qint32 msgId, const PaymentRequestedInfo &info) {
    out->appendInt(fncPaymentsValidateRequestedInfo);
    
    qint32 flags = 0;
    if(save != 0) flags = (1<<0 | flags);
    
    out->appendInt(flags);
    out->appendInt(msgId);
    if(!info.push(out)) return false;
    return true;
}

PaymentsValidatedRequestedInfo Functions::Payments::validateRequestedInfoResult(InboundPkt *in) {
    PaymentsValidatedRequestedInfo result;
    if(!result.fetch(in)) return result;
    return result;
}

bool Functions::Payments::sendPaymentForm(OutboundPkt *out, qint32 msgId, const QString &requestedInfoId, const QString &shippingOptionId, const InputPaymentCredentials &credentials) {
    out->appendInt(fncPaymentsSendPaymentForm);
    
    qint32 flags = 0;
    if(requestedInfoId != 0) flags = (1<<0 | flags);
    if(shippingOptionId != 0) flags = (1<<1 | flags);
    
    out->appendInt(flags);
    out->appendInt(msgId);
    if(flags & 1<<0) out->appendQString(requestedInfoId);
    if(flags & 1<<1) out->appendQString(shippingOptionId);
    if(!credentials.push(out)) return false;
    return true;
}

PaymentsPaymentResult Functions::Payments::sendPaymentFormResult(InboundPkt *in) {
    PaymentsPaymentResult result;
    if(!result.fetch(in)) return result;
    return result;
}

bool Functions::Payments::getSavedInfo(OutboundPkt *out) {
    out->appendInt(fncPaymentsGetSavedInfo);
    return true;
}

PaymentsSavedInfo Functions::Payments::getSavedInfoResult(InboundPkt *in) {
    PaymentsSavedInfo result;
    if(!result.fetch(in)) return result;
    return result;
}

bool Functions::Payments::clearSavedInfo(OutboundPkt *out, bool credentials, bool info) {
    out->appendInt(fncPaymentsClearSavedInfo);
    
    qint32 flags = 0;
    if(credentials != 0) flags = (1<<0 | flags);
    if(info != 0) flags = (1<<1 | flags);
    
    out->appendInt(flags);
    return true;
}

bool Functions::Payments::clearSavedInfoResult(InboundPkt *in) {
    bool result;
    result = in->fetchBool();
    return result;
}

