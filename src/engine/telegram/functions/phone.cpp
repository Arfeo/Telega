// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "phone.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

using namespace Tg;

Functions::Phone::Phone() {
}

Functions::Phone::~Phone() {
}

bool Functions::Phone::getCallConfig(OutboundPkt *out) {
    out->appendInt(fncPhoneGetCallConfig);
    return true;
}

DataJSON Functions::Phone::getCallConfigResult(InboundPkt *in) {
    DataJSON result;
    if(!result.fetch(in)) return result;
    return result;
}

bool Functions::Phone::requestCall(OutboundPkt *out, const InputUser &userId, qint32 randomId, const QByteArray &gAHash, const PhoneCallProtocol &protocol) {
    out->appendInt(fncPhoneRequestCall);
    if(!userId.push(out)) return false;
    out->appendInt(randomId);
    out->appendBytes(gAHash);
    if(!protocol.push(out)) return false;
    return true;
}

PhonePhoneCall Functions::Phone::requestCallResult(InboundPkt *in) {
    PhonePhoneCall result;
    if(!result.fetch(in)) return result;
    return result;
}

bool Functions::Phone::acceptCall(OutboundPkt *out, const InputPhoneCall &peer, const QByteArray &gB, const PhoneCallProtocol &protocol) {
    out->appendInt(fncPhoneAcceptCall);
    if(!peer.push(out)) return false;
    out->appendBytes(gB);
    if(!protocol.push(out)) return false;
    return true;
}

PhonePhoneCall Functions::Phone::acceptCallResult(InboundPkt *in) {
    PhonePhoneCall result;
    if(!result.fetch(in)) return result;
    return result;
}

bool Functions::Phone::confirmCall(OutboundPkt *out, const InputPhoneCall &peer, const QByteArray &gA, qint64 keyFingerprint, const PhoneCallProtocol &protocol) {
    out->appendInt(fncPhoneConfirmCall);
    if(!peer.push(out)) return false;
    out->appendBytes(gA);
    out->appendLong(keyFingerprint);
    if(!protocol.push(out)) return false;
    return true;
}

PhonePhoneCall Functions::Phone::confirmCallResult(InboundPkt *in) {
    PhonePhoneCall result;
    if(!result.fetch(in)) return result;
    return result;
}

bool Functions::Phone::receivedCall(OutboundPkt *out, const InputPhoneCall &peer) {
    out->appendInt(fncPhoneReceivedCall);
    if(!peer.push(out)) return false;
    return true;
}

bool Functions::Phone::receivedCallResult(InboundPkt *in) {
    bool result;
    result = in->fetchBool();
    return result;
}

bool Functions::Phone::discardCall(OutboundPkt *out, const InputPhoneCall &peer, qint32 duration, const PhoneCallDiscardReason &reason, qint64 connectionId) {
    out->appendInt(fncPhoneDiscardCall);
    if(!peer.push(out)) return false;
    out->appendInt(duration);
    if(!reason.push(out)) return false;
    out->appendLong(connectionId);
    return true;
}

UpdatesType Functions::Phone::discardCallResult(InboundPkt *in) {
    UpdatesType result;
    if(!result.fetch(in)) return result;
    return result;
}

bool Functions::Phone::setCallRating(OutboundPkt *out, const InputPhoneCall &peer, qint32 rating, const QString &comment) {
    out->appendInt(fncPhoneSetCallRating);
    if(!peer.push(out)) return false;
    out->appendInt(rating);
    out->appendQString(comment);
    return true;
}

UpdatesType Functions::Phone::setCallRatingResult(InboundPkt *in) {
    UpdatesType result;
    if(!result.fetch(in)) return result;
    return result;
}

bool Functions::Phone::saveCallDebug(OutboundPkt *out, const InputPhoneCall &peer, const DataJSON &debug) {
    out->appendInt(fncPhoneSaveCallDebug);
    if(!peer.push(out)) return false;
    if(!debug.push(out)) return false;
    return true;
}

bool Functions::Phone::saveCallDebugResult(InboundPkt *in) {
    bool result;
    result = in->fetchBool();
    return result;
}

