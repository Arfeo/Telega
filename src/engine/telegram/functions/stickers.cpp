// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "stickers.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

using namespace Tg;

Functions::Stickers::Stickers() {
}

Functions::Stickers::~Stickers() {
}

bool Functions::Stickers::createStickerSet(OutboundPkt *out, bool masks, const InputUser &userId, const QString &title, const QString &shortName, const QList<InputStickerSetItem> &stickers) {
    out->appendInt(fncStickersCreateStickerSet);
    
    qint32 flags = 0;
    if(masks != 0) flags = (1<<0 | flags);
    
    out->appendInt(flags);
    if(!userId.push(out)) return false;
    out->appendQString(title);
    out->appendQString(shortName);
    out->appendInt(CoreTypes::typeVector);
    out->appendInt(stickers.count());
    for (qint32 i = 0; i < stickers.count(); i++) {
        if(!stickers[i].push(out)) return false;
    }
    return true;
}

MessagesStickerSet Functions::Stickers::createStickerSetResult(InboundPkt *in) {
    MessagesStickerSet result;
    if(!result.fetch(in)) return result;
    return result;
}

bool Functions::Stickers::removeStickerFromSet(OutboundPkt *out, const InputDocument &sticker) {
    out->appendInt(fncStickersRemoveStickerFromSet);
    if(!sticker.push(out)) return false;
    return true;
}

bool Functions::Stickers::removeStickerFromSetResult(InboundPkt *in) {
    bool result;
    result = in->fetchBool();
    return result;
}

bool Functions::Stickers::changeStickerPosition(OutboundPkt *out, const InputDocument &sticker, qint32 position) {
    out->appendInt(fncStickersChangeStickerPosition);
    if(!sticker.push(out)) return false;
    out->appendInt(position);
    return true;
}

bool Functions::Stickers::changeStickerPositionResult(InboundPkt *in) {
    bool result;
    result = in->fetchBool();
    return result;
}

bool Functions::Stickers::addStickerToSet(OutboundPkt *out, const InputStickerSet &stickerset, const InputStickerSetItem &sticker) {
    out->appendInt(fncStickersAddStickerToSet);
    if(!stickerset.push(out)) return false;
    if(!sticker.push(out)) return false;
    return true;
}

MessagesStickerSet Functions::Stickers::addStickerToSetResult(InboundPkt *in) {
    MessagesStickerSet result;
    if(!result.fetch(in)) return result;
    return result;
}

