// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "cdnpublickeyobject.h"

CdnPublicKeyObject::CdnPublicKeyObject(const CdnPublicKey &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

CdnPublicKeyObject::CdnPublicKeyObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

CdnPublicKeyObject::~CdnPublicKeyObject() {
}

void CdnPublicKeyObject::setDcId(qint32 dcId) {
    if(m_core.dcId() == dcId) return;
    m_core.setDcId(dcId);
    Q_EMIT dcIdChanged();
    Q_EMIT coreChanged();
}

qint32 CdnPublicKeyObject::dcId() const {
    return m_core.dcId();
}

void CdnPublicKeyObject::setPublicKey(const QString &publicKey) {
    if(m_core.publicKey() == publicKey) return;
    m_core.setPublicKey(publicKey);
    Q_EMIT publicKeyChanged();
    Q_EMIT coreChanged();
}

QString CdnPublicKeyObject::publicKey() const {
    return m_core.publicKey();
}

CdnPublicKeyObject &CdnPublicKeyObject::operator =(const CdnPublicKey &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT dcIdChanged();
    Q_EMIT publicKeyChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool CdnPublicKeyObject::operator ==(const CdnPublicKey &b) const {
    return m_core == b;
}

void CdnPublicKeyObject::setClassType(quint32 classType) {
    CdnPublicKey::CdnPublicKeyClassType result;
    switch(classType) {
    case TypeCdnPublicKey:
        result = CdnPublicKey::typeCdnPublicKey;
        break;
    default:
        result = CdnPublicKey::typeCdnPublicKey;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 CdnPublicKeyObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case CdnPublicKey::typeCdnPublicKey:
        result = TypeCdnPublicKey;
        break;
    default:
        result = TypeCdnPublicKey;
        break;
    }

    return result;
}

void CdnPublicKeyObject::setCore(const CdnPublicKey &core) {
    operator =(core);
}

CdnPublicKey CdnPublicKeyObject::core() const {
    return m_core;
}

