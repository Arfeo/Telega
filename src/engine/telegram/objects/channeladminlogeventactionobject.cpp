// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "channeladminlogeventactionobject.h"

ChannelAdminLogEventActionObject::ChannelAdminLogEventActionObject(const ChannelAdminLogEventAction &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_message(0),
    m_newMessage(0),
    m_newParticipant(0),
    m_newPhoto(0),
    m_participant(0),
    m_prevMessage(0),
    m_prevParticipant(0),
    m_prevPhoto(0),
    m_core(core)
{
    m_message = new MessageObject(m_core.message(), this);
    connect(m_message.data(), SIGNAL(coreChanged()), this, SLOT(coreMessageChanged()));
    m_newMessage = new MessageObject(m_core.newMessage(), this);
    connect(m_newMessage.data(), SIGNAL(coreChanged()), this, SLOT(coreNewMessageChanged()));
    m_newParticipant = new ChannelParticipantObject(m_core.newParticipant(), this);
    connect(m_newParticipant.data(), SIGNAL(coreChanged()), this, SLOT(coreNewParticipantChanged()));
    m_newPhoto = new ChatPhotoObject(m_core.newPhoto(), this);
    connect(m_newPhoto.data(), SIGNAL(coreChanged()), this, SLOT(coreNewPhotoChanged()));
    m_participant = new ChannelParticipantObject(m_core.participant(), this);
    connect(m_participant.data(), SIGNAL(coreChanged()), this, SLOT(coreParticipantChanged()));
    m_prevMessage = new MessageObject(m_core.prevMessage(), this);
    connect(m_prevMessage.data(), SIGNAL(coreChanged()), this, SLOT(corePrevMessageChanged()));
    m_prevParticipant = new ChannelParticipantObject(m_core.prevParticipant(), this);
    connect(m_prevParticipant.data(), SIGNAL(coreChanged()), this, SLOT(corePrevParticipantChanged()));
    m_prevPhoto = new ChatPhotoObject(m_core.prevPhoto(), this);
    connect(m_prevPhoto.data(), SIGNAL(coreChanged()), this, SLOT(corePrevPhotoChanged()));
}

ChannelAdminLogEventActionObject::ChannelAdminLogEventActionObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_message(0),
    m_newMessage(0),
    m_newParticipant(0),
    m_newPhoto(0),
    m_participant(0),
    m_prevMessage(0),
    m_prevParticipant(0),
    m_prevPhoto(0),
    m_core()
{
    m_message = new MessageObject(m_core.message(), this);
    connect(m_message.data(), SIGNAL(coreChanged()), this, SLOT(coreMessageChanged()));
    m_newMessage = new MessageObject(m_core.newMessage(), this);
    connect(m_newMessage.data(), SIGNAL(coreChanged()), this, SLOT(coreNewMessageChanged()));
    m_newParticipant = new ChannelParticipantObject(m_core.newParticipant(), this);
    connect(m_newParticipant.data(), SIGNAL(coreChanged()), this, SLOT(coreNewParticipantChanged()));
    m_newPhoto = new ChatPhotoObject(m_core.newPhoto(), this);
    connect(m_newPhoto.data(), SIGNAL(coreChanged()), this, SLOT(coreNewPhotoChanged()));
    m_participant = new ChannelParticipantObject(m_core.participant(), this);
    connect(m_participant.data(), SIGNAL(coreChanged()), this, SLOT(coreParticipantChanged()));
    m_prevMessage = new MessageObject(m_core.prevMessage(), this);
    connect(m_prevMessage.data(), SIGNAL(coreChanged()), this, SLOT(corePrevMessageChanged()));
    m_prevParticipant = new ChannelParticipantObject(m_core.prevParticipant(), this);
    connect(m_prevParticipant.data(), SIGNAL(coreChanged()), this, SLOT(corePrevParticipantChanged()));
    m_prevPhoto = new ChatPhotoObject(m_core.prevPhoto(), this);
    connect(m_prevPhoto.data(), SIGNAL(coreChanged()), this, SLOT(corePrevPhotoChanged()));
}

ChannelAdminLogEventActionObject::~ChannelAdminLogEventActionObject() {
}

void ChannelAdminLogEventActionObject::setMessage(MessageObject* message) {
    if(m_message == message) return;
    if(m_message) delete m_message;
    m_message = message;
    if(m_message) {
        m_message->setParent(this);
        m_core.setMessage(m_message->core());
        connect(m_message.data(), SIGNAL(coreChanged()), this, SLOT(coreMessageChanged()));
    }
    Q_EMIT messageChanged();
    Q_EMIT coreChanged();
}

MessageObject*  ChannelAdminLogEventActionObject::message() const {
    return m_message;
}

void ChannelAdminLogEventActionObject::setNewMessage(MessageObject* newMessage) {
    if(m_newMessage == newMessage) return;
    if(m_newMessage) delete m_newMessage;
    m_newMessage = newMessage;
    if(m_newMessage) {
        m_newMessage->setParent(this);
        m_core.setNewMessage(m_newMessage->core());
        connect(m_newMessage.data(), SIGNAL(coreChanged()), this, SLOT(coreNewMessageChanged()));
    }
    Q_EMIT newMessageChanged();
    Q_EMIT coreChanged();
}

MessageObject*  ChannelAdminLogEventActionObject::newMessage() const {
    return m_newMessage;
}

void ChannelAdminLogEventActionObject::setNewParticipant(ChannelParticipantObject* newParticipant) {
    if(m_newParticipant == newParticipant) return;
    if(m_newParticipant) delete m_newParticipant;
    m_newParticipant = newParticipant;
    if(m_newParticipant) {
        m_newParticipant->setParent(this);
        m_core.setNewParticipant(m_newParticipant->core());
        connect(m_newParticipant.data(), SIGNAL(coreChanged()), this, SLOT(coreNewParticipantChanged()));
    }
    Q_EMIT newParticipantChanged();
    Q_EMIT coreChanged();
}

ChannelParticipantObject*  ChannelAdminLogEventActionObject::newParticipant() const {
    return m_newParticipant;
}

void ChannelAdminLogEventActionObject::setNewPhoto(ChatPhotoObject* newPhoto) {
    if(m_newPhoto == newPhoto) return;
    if(m_newPhoto) delete m_newPhoto;
    m_newPhoto = newPhoto;
    if(m_newPhoto) {
        m_newPhoto->setParent(this);
        m_core.setNewPhoto(m_newPhoto->core());
        connect(m_newPhoto.data(), SIGNAL(coreChanged()), this, SLOT(coreNewPhotoChanged()));
    }
    Q_EMIT newPhotoChanged();
    Q_EMIT coreChanged();
}

ChatPhotoObject*  ChannelAdminLogEventActionObject::newPhoto() const {
    return m_newPhoto;
}

void ChannelAdminLogEventActionObject::setNewValueString(const QString &newValueString) {
    if(m_core.newValueString() == newValueString) return;
    m_core.setNewValueString(newValueString);
    Q_EMIT newValueStringChanged();
    Q_EMIT coreChanged();
}

QString ChannelAdminLogEventActionObject::newValueString() const {
    return m_core.newValueString();
}

void ChannelAdminLogEventActionObject::setNewValueBool(bool newValueBool) {
    if(m_core.newValueBool() == newValueBool) return;
    m_core.setNewValueBool(newValueBool);
    Q_EMIT newValueBoolChanged();
    Q_EMIT coreChanged();
}

bool ChannelAdminLogEventActionObject::newValueBool() const {
    return m_core.newValueBool();
}

void ChannelAdminLogEventActionObject::setParticipant(ChannelParticipantObject* participant) {
    if(m_participant == participant) return;
    if(m_participant) delete m_participant;
    m_participant = participant;
    if(m_participant) {
        m_participant->setParent(this);
        m_core.setParticipant(m_participant->core());
        connect(m_participant.data(), SIGNAL(coreChanged()), this, SLOT(coreParticipantChanged()));
    }
    Q_EMIT participantChanged();
    Q_EMIT coreChanged();
}

ChannelParticipantObject*  ChannelAdminLogEventActionObject::participant() const {
    return m_participant;
}

void ChannelAdminLogEventActionObject::setPrevMessage(MessageObject* prevMessage) {
    if(m_prevMessage == prevMessage) return;
    if(m_prevMessage) delete m_prevMessage;
    m_prevMessage = prevMessage;
    if(m_prevMessage) {
        m_prevMessage->setParent(this);
        m_core.setPrevMessage(m_prevMessage->core());
        connect(m_prevMessage.data(), SIGNAL(coreChanged()), this, SLOT(corePrevMessageChanged()));
    }
    Q_EMIT prevMessageChanged();
    Q_EMIT coreChanged();
}

MessageObject*  ChannelAdminLogEventActionObject::prevMessage() const {
    return m_prevMessage;
}

void ChannelAdminLogEventActionObject::setPrevParticipant(ChannelParticipantObject* prevParticipant) {
    if(m_prevParticipant == prevParticipant) return;
    if(m_prevParticipant) delete m_prevParticipant;
    m_prevParticipant = prevParticipant;
    if(m_prevParticipant) {
        m_prevParticipant->setParent(this);
        m_core.setPrevParticipant(m_prevParticipant->core());
        connect(m_prevParticipant.data(), SIGNAL(coreChanged()), this, SLOT(corePrevParticipantChanged()));
    }
    Q_EMIT prevParticipantChanged();
    Q_EMIT coreChanged();
}

ChannelParticipantObject*  ChannelAdminLogEventActionObject::prevParticipant() const {
    return m_prevParticipant;
}

void ChannelAdminLogEventActionObject::setPrevPhoto(ChatPhotoObject* prevPhoto) {
    if(m_prevPhoto == prevPhoto) return;
    if(m_prevPhoto) delete m_prevPhoto;
    m_prevPhoto = prevPhoto;
    if(m_prevPhoto) {
        m_prevPhoto->setParent(this);
        m_core.setPrevPhoto(m_prevPhoto->core());
        connect(m_prevPhoto.data(), SIGNAL(coreChanged()), this, SLOT(corePrevPhotoChanged()));
    }
    Q_EMIT prevPhotoChanged();
    Q_EMIT coreChanged();
}

ChatPhotoObject*  ChannelAdminLogEventActionObject::prevPhoto() const {
    return m_prevPhoto;
}

void ChannelAdminLogEventActionObject::setPrevValue(const QString &prevValue) {
    if(m_core.prevValue() == prevValue) return;
    m_core.setPrevValue(prevValue);
    Q_EMIT prevValueChanged();
    Q_EMIT coreChanged();
}

QString ChannelAdminLogEventActionObject::prevValue() const {
    return m_core.prevValue();
}

ChannelAdminLogEventActionObject &ChannelAdminLogEventActionObject::operator =(const ChannelAdminLogEventAction &b) {
    if(m_core == b) return *this;
    m_core = b;
    m_message->setCore(b.message());
    m_newMessage->setCore(b.newMessage());
    m_newParticipant->setCore(b.newParticipant());
    m_newPhoto->setCore(b.newPhoto());
    m_participant->setCore(b.participant());
    m_prevMessage->setCore(b.prevMessage());
    m_prevParticipant->setCore(b.prevParticipant());
    m_prevPhoto->setCore(b.prevPhoto());

    Q_EMIT messageChanged();
    Q_EMIT newMessageChanged();
    Q_EMIT newParticipantChanged();
    Q_EMIT newPhotoChanged();
    Q_EMIT newValueStringChanged();
    Q_EMIT newValueBoolChanged();
    Q_EMIT participantChanged();
    Q_EMIT prevMessageChanged();
    Q_EMIT prevParticipantChanged();
    Q_EMIT prevPhotoChanged();
    Q_EMIT prevValueChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool ChannelAdminLogEventActionObject::operator ==(const ChannelAdminLogEventAction &b) const {
    return m_core == b;
}

void ChannelAdminLogEventActionObject::setClassType(quint32 classType) {
    ChannelAdminLogEventAction::ChannelAdminLogEventActionClassType result;
    switch(classType) {
    case TypeChannelAdminLogEventActionChangeTitle:
        result = ChannelAdminLogEventAction::typeChannelAdminLogEventActionChangeTitle;
        break;
    case TypeChannelAdminLogEventActionChangeAbout:
        result = ChannelAdminLogEventAction::typeChannelAdminLogEventActionChangeAbout;
        break;
    case TypeChannelAdminLogEventActionChangeUsername:
        result = ChannelAdminLogEventAction::typeChannelAdminLogEventActionChangeUsername;
        break;
    case TypeChannelAdminLogEventActionChangePhoto:
        result = ChannelAdminLogEventAction::typeChannelAdminLogEventActionChangePhoto;
        break;
    case TypeChannelAdminLogEventActionToggleInvites:
        result = ChannelAdminLogEventAction::typeChannelAdminLogEventActionToggleInvites;
        break;
    case TypeChannelAdminLogEventActionToggleSignatures:
        result = ChannelAdminLogEventAction::typeChannelAdminLogEventActionToggleSignatures;
        break;
    case TypeChannelAdminLogEventActionUpdatePinned:
        result = ChannelAdminLogEventAction::typeChannelAdminLogEventActionUpdatePinned;
        break;
    case TypeChannelAdminLogEventActionEditMessage:
        result = ChannelAdminLogEventAction::typeChannelAdminLogEventActionEditMessage;
        break;
    case TypeChannelAdminLogEventActionDeleteMessage:
        result = ChannelAdminLogEventAction::typeChannelAdminLogEventActionDeleteMessage;
        break;
    case TypeChannelAdminLogEventActionParticipantJoin:
        result = ChannelAdminLogEventAction::typeChannelAdminLogEventActionParticipantJoin;
        break;
    case TypeChannelAdminLogEventActionParticipantLeave:
        result = ChannelAdminLogEventAction::typeChannelAdminLogEventActionParticipantLeave;
        break;
    case TypeChannelAdminLogEventActionParticipantInvite:
        result = ChannelAdminLogEventAction::typeChannelAdminLogEventActionParticipantInvite;
        break;
    case TypeChannelAdminLogEventActionParticipantToggleBan:
        result = ChannelAdminLogEventAction::typeChannelAdminLogEventActionParticipantToggleBan;
        break;
    case TypeChannelAdminLogEventActionParticipantToggleAdmin:
        result = ChannelAdminLogEventAction::typeChannelAdminLogEventActionParticipantToggleAdmin;
        break;
    default:
        result = ChannelAdminLogEventAction::typeChannelAdminLogEventActionChangeTitle;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 ChannelAdminLogEventActionObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case ChannelAdminLogEventAction::typeChannelAdminLogEventActionChangeTitle:
        result = TypeChannelAdminLogEventActionChangeTitle;
        break;
    case ChannelAdminLogEventAction::typeChannelAdminLogEventActionChangeAbout:
        result = TypeChannelAdminLogEventActionChangeAbout;
        break;
    case ChannelAdminLogEventAction::typeChannelAdminLogEventActionChangeUsername:
        result = TypeChannelAdminLogEventActionChangeUsername;
        break;
    case ChannelAdminLogEventAction::typeChannelAdminLogEventActionChangePhoto:
        result = TypeChannelAdminLogEventActionChangePhoto;
        break;
    case ChannelAdminLogEventAction::typeChannelAdminLogEventActionToggleInvites:
        result = TypeChannelAdminLogEventActionToggleInvites;
        break;
    case ChannelAdminLogEventAction::typeChannelAdminLogEventActionToggleSignatures:
        result = TypeChannelAdminLogEventActionToggleSignatures;
        break;
    case ChannelAdminLogEventAction::typeChannelAdminLogEventActionUpdatePinned:
        result = TypeChannelAdminLogEventActionUpdatePinned;
        break;
    case ChannelAdminLogEventAction::typeChannelAdminLogEventActionEditMessage:
        result = TypeChannelAdminLogEventActionEditMessage;
        break;
    case ChannelAdminLogEventAction::typeChannelAdminLogEventActionDeleteMessage:
        result = TypeChannelAdminLogEventActionDeleteMessage;
        break;
    case ChannelAdminLogEventAction::typeChannelAdminLogEventActionParticipantJoin:
        result = TypeChannelAdminLogEventActionParticipantJoin;
        break;
    case ChannelAdminLogEventAction::typeChannelAdminLogEventActionParticipantLeave:
        result = TypeChannelAdminLogEventActionParticipantLeave;
        break;
    case ChannelAdminLogEventAction::typeChannelAdminLogEventActionParticipantInvite:
        result = TypeChannelAdminLogEventActionParticipantInvite;
        break;
    case ChannelAdminLogEventAction::typeChannelAdminLogEventActionParticipantToggleBan:
        result = TypeChannelAdminLogEventActionParticipantToggleBan;
        break;
    case ChannelAdminLogEventAction::typeChannelAdminLogEventActionParticipantToggleAdmin:
        result = TypeChannelAdminLogEventActionParticipantToggleAdmin;
        break;
    default:
        result = TypeChannelAdminLogEventActionChangeTitle;
        break;
    }

    return result;
}

void ChannelAdminLogEventActionObject::setCore(const ChannelAdminLogEventAction &core) {
    operator =(core);
}

ChannelAdminLogEventAction ChannelAdminLogEventActionObject::core() const {
    return m_core;
}

void ChannelAdminLogEventActionObject::coreMessageChanged() {
    if(m_core.message() == m_message->core()) return;
    m_core.setMessage(m_message->core());
    Q_EMIT messageChanged();
    Q_EMIT coreChanged();
}

void ChannelAdminLogEventActionObject::coreNewMessageChanged() {
    if(m_core.newMessage() == m_newMessage->core()) return;
    m_core.setNewMessage(m_newMessage->core());
    Q_EMIT newMessageChanged();
    Q_EMIT coreChanged();
}

void ChannelAdminLogEventActionObject::coreNewParticipantChanged() {
    if(m_core.newParticipant() == m_newParticipant->core()) return;
    m_core.setNewParticipant(m_newParticipant->core());
    Q_EMIT newParticipantChanged();
    Q_EMIT coreChanged();
}

void ChannelAdminLogEventActionObject::coreNewPhotoChanged() {
    if(m_core.newPhoto() == m_newPhoto->core()) return;
    m_core.setNewPhoto(m_newPhoto->core());
    Q_EMIT newPhotoChanged();
    Q_EMIT coreChanged();
}

void ChannelAdminLogEventActionObject::coreParticipantChanged() {
    if(m_core.participant() == m_participant->core()) return;
    m_core.setParticipant(m_participant->core());
    Q_EMIT participantChanged();
    Q_EMIT coreChanged();
}

void ChannelAdminLogEventActionObject::corePrevMessageChanged() {
    if(m_core.prevMessage() == m_prevMessage->core()) return;
    m_core.setPrevMessage(m_prevMessage->core());
    Q_EMIT prevMessageChanged();
    Q_EMIT coreChanged();
}

void ChannelAdminLogEventActionObject::corePrevParticipantChanged() {
    if(m_core.prevParticipant() == m_prevParticipant->core()) return;
    m_core.setPrevParticipant(m_prevParticipant->core());
    Q_EMIT prevParticipantChanged();
    Q_EMIT coreChanged();
}

void ChannelAdminLogEventActionObject::corePrevPhotoChanged() {
    if(m_core.prevPhoto() == m_prevPhoto->core()) return;
    m_core.setPrevPhoto(m_prevPhoto->core());
    Q_EMIT prevPhotoChanged();
    Q_EMIT coreChanged();
}

