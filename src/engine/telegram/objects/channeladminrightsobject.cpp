// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "channeladminrightsobject.h"

ChannelAdminRightsObject::ChannelAdminRightsObject(const ChannelAdminRights &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

ChannelAdminRightsObject::ChannelAdminRightsObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

ChannelAdminRightsObject::~ChannelAdminRightsObject() {
}

void ChannelAdminRightsObject::setAddAdmins(bool addAdmins) {
    if(m_core.addAdmins() == addAdmins) return;
    m_core.setAddAdmins(addAdmins);
    Q_EMIT addAdminsChanged();
    Q_EMIT coreChanged();
}

bool ChannelAdminRightsObject::addAdmins() const {
    return m_core.addAdmins();
}

void ChannelAdminRightsObject::setBanUsers(bool banUsers) {
    if(m_core.banUsers() == banUsers) return;
    m_core.setBanUsers(banUsers);
    Q_EMIT banUsersChanged();
    Q_EMIT coreChanged();
}

bool ChannelAdminRightsObject::banUsers() const {
    return m_core.banUsers();
}

void ChannelAdminRightsObject::setChangeInfo(bool changeInfo) {
    if(m_core.changeInfo() == changeInfo) return;
    m_core.setChangeInfo(changeInfo);
    Q_EMIT changeInfoChanged();
    Q_EMIT coreChanged();
}

bool ChannelAdminRightsObject::changeInfo() const {
    return m_core.changeInfo();
}

void ChannelAdminRightsObject::setDeleteMessages(bool deleteMessages) {
    if(m_core.deleteMessages() == deleteMessages) return;
    m_core.setDeleteMessages(deleteMessages);
    Q_EMIT deleteMessagesChanged();
    Q_EMIT coreChanged();
}

bool ChannelAdminRightsObject::deleteMessages() const {
    return m_core.deleteMessages();
}

void ChannelAdminRightsObject::setEditMessages(bool editMessages) {
    if(m_core.editMessages() == editMessages) return;
    m_core.setEditMessages(editMessages);
    Q_EMIT editMessagesChanged();
    Q_EMIT coreChanged();
}

bool ChannelAdminRightsObject::editMessages() const {
    return m_core.editMessages();
}

void ChannelAdminRightsObject::setFlags(qint32 flags) {
    if(m_core.flags() == flags) return;
    m_core.setFlags(flags);
    Q_EMIT flagsChanged();
    Q_EMIT coreChanged();
}

qint32 ChannelAdminRightsObject::flags() const {
    return m_core.flags();
}

void ChannelAdminRightsObject::setInviteLink(bool inviteLink) {
    if(m_core.inviteLink() == inviteLink) return;
    m_core.setInviteLink(inviteLink);
    Q_EMIT inviteLinkChanged();
    Q_EMIT coreChanged();
}

bool ChannelAdminRightsObject::inviteLink() const {
    return m_core.inviteLink();
}

void ChannelAdminRightsObject::setInviteUsers(bool inviteUsers) {
    if(m_core.inviteUsers() == inviteUsers) return;
    m_core.setInviteUsers(inviteUsers);
    Q_EMIT inviteUsersChanged();
    Q_EMIT coreChanged();
}

bool ChannelAdminRightsObject::inviteUsers() const {
    return m_core.inviteUsers();
}

void ChannelAdminRightsObject::setPinMessages(bool pinMessages) {
    if(m_core.pinMessages() == pinMessages) return;
    m_core.setPinMessages(pinMessages);
    Q_EMIT pinMessagesChanged();
    Q_EMIT coreChanged();
}

bool ChannelAdminRightsObject::pinMessages() const {
    return m_core.pinMessages();
}

void ChannelAdminRightsObject::setPostMessages(bool postMessages) {
    if(m_core.postMessages() == postMessages) return;
    m_core.setPostMessages(postMessages);
    Q_EMIT postMessagesChanged();
    Q_EMIT coreChanged();
}

bool ChannelAdminRightsObject::postMessages() const {
    return m_core.postMessages();
}

ChannelAdminRightsObject &ChannelAdminRightsObject::operator =(const ChannelAdminRights &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT addAdminsChanged();
    Q_EMIT banUsersChanged();
    Q_EMIT changeInfoChanged();
    Q_EMIT deleteMessagesChanged();
    Q_EMIT editMessagesChanged();
    Q_EMIT flagsChanged();
    Q_EMIT inviteLinkChanged();
    Q_EMIT inviteUsersChanged();
    Q_EMIT pinMessagesChanged();
    Q_EMIT postMessagesChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool ChannelAdminRightsObject::operator ==(const ChannelAdminRights &b) const {
    return m_core == b;
}

void ChannelAdminRightsObject::setClassType(quint32 classType) {
    ChannelAdminRights::ChannelAdminRightsClassType result;
    switch(classType) {
    case TypeChannelAdminRights:
        result = ChannelAdminRights::typeChannelAdminRights;
        break;
    default:
        result = ChannelAdminRights::typeChannelAdminRights;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 ChannelAdminRightsObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case ChannelAdminRights::typeChannelAdminRights:
        result = TypeChannelAdminRights;
        break;
    default:
        result = TypeChannelAdminRights;
        break;
    }

    return result;
}

void ChannelAdminRightsObject::setCore(const ChannelAdminRights &core) {
    operator =(core);
}

ChannelAdminRights ChannelAdminRightsObject::core() const {
    return m_core;
}

