// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "channelparticipantobject.h"

ChannelParticipantObject::ChannelParticipantObject(const ChannelParticipant &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_adminRights(0),
    m_bannedRights(0),
    m_core(core)
{
    m_adminRights = new ChannelAdminRightsObject(m_core.adminRights(), this);
    connect(m_adminRights.data(), &ChannelAdminRightsObject::coreChanged, this, &ChannelParticipantObject::coreAdminRightsChanged);
    m_bannedRights = new ChannelBannedRightsObject(m_core.bannedRights(), this);
    connect(m_bannedRights.data(), &ChannelBannedRightsObject::coreChanged, this, &ChannelParticipantObject::coreBannedRightsChanged);
}

ChannelParticipantObject::ChannelParticipantObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_adminRights(0),
    m_bannedRights(0),
    m_core()
{
    m_adminRights = new ChannelAdminRightsObject(m_core.adminRights(), this);
    connect(m_adminRights.data(), &ChannelAdminRightsObject::coreChanged, this, &ChannelParticipantObject::coreAdminRightsChanged);
    m_bannedRights = new ChannelBannedRightsObject(m_core.bannedRights(), this);
    connect(m_bannedRights.data(), &ChannelBannedRightsObject::coreChanged, this, &ChannelParticipantObject::coreBannedRightsChanged);
}

ChannelParticipantObject::~ChannelParticipantObject() {
}

void ChannelParticipantObject::setAdminRights(ChannelAdminRightsObject* adminRights) {
    if(m_adminRights == adminRights) return;
    if(m_adminRights) delete m_adminRights;
    m_adminRights = adminRights;
    if(m_adminRights) {
        m_adminRights->setParent(this);
        m_core.setAdminRights(m_adminRights->core());
        connect(m_adminRights.data(), &ChannelAdminRightsObject::coreChanged, this, &ChannelParticipantObject::coreAdminRightsChanged);
    }
    Q_EMIT adminRightsChanged();
    Q_EMIT coreChanged();
}

ChannelAdminRightsObject*  ChannelParticipantObject::adminRights() const {
    return m_adminRights;
}

void ChannelParticipantObject::setBannedRights(ChannelBannedRightsObject* bannedRights) {
    if(m_bannedRights == bannedRights) return;
    if(m_bannedRights) delete m_bannedRights;
    m_bannedRights = bannedRights;
    if(m_bannedRights) {
        m_bannedRights->setParent(this);
        m_core.setBannedRights(m_bannedRights->core());
        connect(m_bannedRights.data(), &ChannelBannedRightsObject::coreChanged, this, &ChannelParticipantObject::coreBannedRightsChanged);
    }
    Q_EMIT bannedRightsChanged();
    Q_EMIT coreChanged();
}

ChannelBannedRightsObject*  ChannelParticipantObject::bannedRights() const {
    return m_bannedRights;
}

void ChannelParticipantObject::setCanEdit(bool canEdit) {
    if(m_core.canEdit() == canEdit) return;
    m_core.setCanEdit(canEdit);
    Q_EMIT canEditChanged();
    Q_EMIT coreChanged();
}

bool ChannelParticipantObject::canEdit() const {
    return m_core.canEdit();
}

void ChannelParticipantObject::setDate(qint32 date) {
    if(m_core.date() == date) return;
    m_core.setDate(date);
    Q_EMIT dateChanged();
    Q_EMIT coreChanged();
}

qint32 ChannelParticipantObject::date() const {
    return m_core.date();
}

void ChannelParticipantObject::setFlags(qint32 flags) {
    if(m_core.flags() == flags) return;
    m_core.setFlags(flags);
    Q_EMIT flagsChanged();
    Q_EMIT coreChanged();
}

qint32 ChannelParticipantObject::flags() const {
    return m_core.flags();
}

void ChannelParticipantObject::setInviterId(qint32 inviterId) {
    if(m_core.inviterId() == inviterId) return;
    m_core.setInviterId(inviterId);
    Q_EMIT inviterIdChanged();
    Q_EMIT coreChanged();
}

qint32 ChannelParticipantObject::inviterId() const {
    return m_core.inviterId();
}

void ChannelParticipantObject::setKickedBy(qint32 kickedBy) {
    if(m_core.kickedBy() == kickedBy) return;
    m_core.setKickedBy(kickedBy);
    Q_EMIT kickedByChanged();
    Q_EMIT coreChanged();
}

qint32 ChannelParticipantObject::kickedBy() const {
    return m_core.kickedBy();
}

void ChannelParticipantObject::setLeft(bool left) {
    if(m_core.left() == left) return;
    m_core.setLeft(left);
    Q_EMIT leftChanged();
    Q_EMIT coreChanged();
}

bool ChannelParticipantObject::left() const {
    return m_core.left();
}

void ChannelParticipantObject::setPromotedBy(qint32 promotedBy) {
    if(m_core.promotedBy() == promotedBy) return;
    m_core.setPromotedBy(promotedBy);
    Q_EMIT promotedByChanged();
    Q_EMIT coreChanged();
}

qint32 ChannelParticipantObject::promotedBy() const {
    return m_core.promotedBy();
}

void ChannelParticipantObject::setUserId(qint32 userId) {
    if(m_core.userId() == userId) return;
    m_core.setUserId(userId);
    Q_EMIT userIdChanged();
    Q_EMIT coreChanged();
}

qint32 ChannelParticipantObject::userId() const {
    return m_core.userId();
}

ChannelParticipantObject &ChannelParticipantObject::operator =(const ChannelParticipant &b) {
    if(m_core == b) return *this;
    m_core = b;
    m_adminRights->setCore(b.adminRights());
    m_bannedRights->setCore(b.bannedRights());

    Q_EMIT adminRightsChanged();
    Q_EMIT bannedRightsChanged();
    Q_EMIT canEditChanged();
    Q_EMIT dateChanged();
    Q_EMIT flagsChanged();
    Q_EMIT inviterIdChanged();
    Q_EMIT kickedByChanged();
    Q_EMIT leftChanged();
    Q_EMIT promotedByChanged();
    Q_EMIT userIdChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool ChannelParticipantObject::operator ==(const ChannelParticipant &b) const {
    return m_core == b;
}

void ChannelParticipantObject::setClassType(quint32 classType) {
    ChannelParticipant::ChannelParticipantClassType result;
    switch(classType) {
    case TypeChannelParticipant:
        result = ChannelParticipant::typeChannelParticipant;
        break;
    case TypeChannelParticipantSelf:
        result = ChannelParticipant::typeChannelParticipantSelf;
        break;
    case TypeChannelParticipantCreator:
        result = ChannelParticipant::typeChannelParticipantCreator;
        break;
    case TypeChannelParticipantAdmin:
        result = ChannelParticipant::typeChannelParticipantAdmin;
        break;
    case TypeChannelParticipantBanned:
        result = ChannelParticipant::typeChannelParticipantBanned;
        break;
    default:
        result = ChannelParticipant::typeChannelParticipant;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 ChannelParticipantObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case ChannelParticipant::typeChannelParticipant:
        result = TypeChannelParticipant;
        break;
    case ChannelParticipant::typeChannelParticipantSelf:
        result = TypeChannelParticipantSelf;
        break;
    case ChannelParticipant::typeChannelParticipantCreator:
        result = TypeChannelParticipantCreator;
        break;
    case ChannelParticipant::typeChannelParticipantAdmin:
        result = TypeChannelParticipantAdmin;
        break;
    case ChannelParticipant::typeChannelParticipantBanned:
        result = TypeChannelParticipantBanned;
        break;
    default:
        result = TypeChannelParticipant;
        break;
    }

    return result;
}

void ChannelParticipantObject::setCore(const ChannelParticipant &core) {
    operator =(core);
}

ChannelParticipant ChannelParticipantObject::core() const {
    return m_core;
}

void ChannelParticipantObject::coreAdminRightsChanged() {
    if(m_core.adminRights() == m_adminRights->core()) return;
    m_core.setAdminRights(m_adminRights->core());
    Q_EMIT adminRightsChanged();
    Q_EMIT coreChanged();
}

void ChannelParticipantObject::coreBannedRightsChanged() {
    if(m_core.bannedRights() == m_bannedRights->core()) return;
    m_core.setBannedRights(m_bannedRights->core());
    Q_EMIT bannedRightsChanged();
    Q_EMIT coreChanged();
}

