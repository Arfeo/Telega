// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "channelsadminlogresultsobject.h"

ChannelsAdminLogResultsObject::ChannelsAdminLogResultsObject(const ChannelsAdminLogResults &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

ChannelsAdminLogResultsObject::ChannelsAdminLogResultsObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

ChannelsAdminLogResultsObject::~ChannelsAdminLogResultsObject() {
}

void ChannelsAdminLogResultsObject::setChats(const QList<Chat> &chats) {
    if(m_core.chats() == chats) return;
    m_core.setChats(chats);
    Q_EMIT chatsChanged();
    Q_EMIT coreChanged();
}

QList<Chat> ChannelsAdminLogResultsObject::chats() const {
    return m_core.chats();
}

void ChannelsAdminLogResultsObject::setEvents(const QList<ChannelAdminLogEvent> &events) {
    if(m_core.events() == events) return;
    m_core.setEvents(events);
    Q_EMIT eventsChanged();
    Q_EMIT coreChanged();
}

QList<ChannelAdminLogEvent> ChannelsAdminLogResultsObject::events() const {
    return m_core.events();
}

void ChannelsAdminLogResultsObject::setUsers(const QList<User> &users) {
    if(m_core.users() == users) return;
    m_core.setUsers(users);
    Q_EMIT usersChanged();
    Q_EMIT coreChanged();
}

QList<User> ChannelsAdminLogResultsObject::users() const {
    return m_core.users();
}

ChannelsAdminLogResultsObject &ChannelsAdminLogResultsObject::operator =(const ChannelsAdminLogResults &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT chatsChanged();
    Q_EMIT eventsChanged();
    Q_EMIT usersChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool ChannelsAdminLogResultsObject::operator ==(const ChannelsAdminLogResults &b) const {
    return m_core == b;
}

void ChannelsAdminLogResultsObject::setClassType(quint32 classType) {
    ChannelsAdminLogResults::ChannelsAdminLogResultsClassType result;
    switch(classType) {
    case TypeChannelsAdminLogResults:
        result = ChannelsAdminLogResults::typeChannelsAdminLogResults;
        break;
    default:
        result = ChannelsAdminLogResults::typeChannelsAdminLogResults;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 ChannelsAdminLogResultsObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case ChannelsAdminLogResults::typeChannelsAdminLogResults:
        result = TypeChannelsAdminLogResults;
        break;
    default:
        result = TypeChannelsAdminLogResults;
        break;
    }

    return result;
}

void ChannelsAdminLogResultsObject::setCore(const ChannelsAdminLogResults &core) {
    operator =(core);
}

ChannelsAdminLogResults ChannelsAdminLogResultsObject::core() const {
    return m_core;
}

