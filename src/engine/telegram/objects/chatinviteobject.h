// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_CHATINVITE_OBJECT
#define LQTG_TYPE_CHATINVITE_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/chatinvite.h"

#include <QPointer>
#include "chatobject.h"
#include "chatphotoobject.h"

class LIBQTELEGRAMSHARED_EXPORT ChatInviteObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(ChatInviteClassType)
    Q_PROPERTY(bool broadcast READ broadcast WRITE setBroadcast NOTIFY broadcastChanged)
    Q_PROPERTY(bool channel READ channel WRITE setChannel NOTIFY channelChanged)
    Q_PROPERTY(ChatObject* chat READ chat WRITE setChat NOTIFY chatChanged)
    Q_PROPERTY(qint32 flags READ flags WRITE setFlags NOTIFY flagsChanged)
    Q_PROPERTY(bool megagroup READ megagroup WRITE setMegagroup NOTIFY megagroupChanged)
    Q_PROPERTY(QList<User> participants READ participants WRITE setParticipants NOTIFY participantsChanged)
    Q_PROPERTY(qint32 participantsCount READ participantsCount WRITE setParticipantsCount NOTIFY participantsCountChanged)
    Q_PROPERTY(ChatPhotoObject* photo READ photo WRITE setPhoto NOTIFY photoChanged)
    Q_PROPERTY(bool publicValue READ publicValue WRITE setPublicValue NOTIFY publicValueChanged)
    Q_PROPERTY(QString title READ title WRITE setTitle NOTIFY titleChanged)
    Q_PROPERTY(ChatInvite core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum ChatInviteClassType {
        TypeChatInviteAlready,
        TypeChatInvite
    };

    ChatInviteObject(const ChatInvite &core, QObject *parent = 0);
    ChatInviteObject(QObject *parent = 0);
    virtual ~ChatInviteObject();

    void setBroadcast(bool broadcast);
    bool broadcast() const;

    void setChannel(bool channel);
    bool channel() const;

    void setChat(ChatObject* chat);
    ChatObject* chat() const;

    void setFlags(qint32 flags);
    qint32 flags() const;

    void setMegagroup(bool megagroup);
    bool megagroup() const;

    void setParticipants(const QList<User> &participants);
    QList<User> participants() const;

    void setParticipantsCount(qint32 participantsCount);
    qint32 participantsCount() const;

    void setPhoto(ChatPhotoObject* photo);
    ChatPhotoObject* photo() const;

    void setPublicValue(bool publicValue);
    bool publicValue() const;

    void setTitle(const QString &title);
    QString title() const;

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const ChatInvite &core);
    ChatInvite core() const;

    ChatInviteObject &operator =(const ChatInvite &b);
    bool operator ==(const ChatInvite &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();
    void broadcastChanged();
    void channelChanged();
    void chatChanged();
    void flagsChanged();
    void megagroupChanged();
    void participantsChanged();
    void participantsCountChanged();
    void photoChanged();
    void publicValueChanged();
    void titleChanged();

private Q_SLOTS:
    void coreChatChanged();
    void corePhotoChanged();

private:
    QPointer<ChatObject> m_chat;
    QPointer<ChatPhotoObject> m_photo;
    ChatInvite m_core;
};

#endif // LQTG_TYPE_CHATINVITE_OBJECT
