// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "configobject.h"

ConfigObject::ConfigObject(const Config &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

ConfigObject::ConfigObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

ConfigObject::~ConfigObject() {
}

void ConfigObject::setCallConnectTimeoutMs(qint32 callConnectTimeoutMs) {
    if(m_core.callConnectTimeoutMs() == callConnectTimeoutMs) return;
    m_core.setCallConnectTimeoutMs(callConnectTimeoutMs);
    Q_EMIT callConnectTimeoutMsChanged();
    Q_EMIT coreChanged();
}

qint32 ConfigObject::callConnectTimeoutMs() const {
    return m_core.callConnectTimeoutMs();
}

void ConfigObject::setCallPacketTimeoutMs(qint32 callPacketTimeoutMs) {
    if(m_core.callPacketTimeoutMs() == callPacketTimeoutMs) return;
    m_core.setCallPacketTimeoutMs(callPacketTimeoutMs);
    Q_EMIT callPacketTimeoutMsChanged();
    Q_EMIT coreChanged();
}

qint32 ConfigObject::callPacketTimeoutMs() const {
    return m_core.callPacketTimeoutMs();
}

void ConfigObject::setCallReceiveTimeoutMs(qint32 callReceiveTimeoutMs) {
    if(m_core.callReceiveTimeoutMs() == callReceiveTimeoutMs) return;
    m_core.setCallReceiveTimeoutMs(callReceiveTimeoutMs);
    Q_EMIT callReceiveTimeoutMsChanged();
    Q_EMIT coreChanged();
}

qint32 ConfigObject::callReceiveTimeoutMs() const {
    return m_core.callReceiveTimeoutMs();
}

void ConfigObject::setCallRingTimeoutMs(qint32 callRingTimeoutMs) {
    if(m_core.callRingTimeoutMs() == callRingTimeoutMs) return;
    m_core.setCallRingTimeoutMs(callRingTimeoutMs);
    Q_EMIT callRingTimeoutMsChanged();
    Q_EMIT coreChanged();
}

qint32 ConfigObject::callRingTimeoutMs() const {
    return m_core.callRingTimeoutMs();
}

void ConfigObject::setChatBigSize(qint32 chatBigSize) {
    if(m_core.chatBigSize() == chatBigSize) return;
    m_core.setChatBigSize(chatBigSize);
    Q_EMIT chatBigSizeChanged();
    Q_EMIT coreChanged();
}

qint32 ConfigObject::chatBigSize() const {
    return m_core.chatBigSize();
}

void ConfigObject::setChatSizeMax(qint32 chatSizeMax) {
    if(m_core.chatSizeMax() == chatSizeMax) return;
    m_core.setChatSizeMax(chatSizeMax);
    Q_EMIT chatSizeMaxChanged();
    Q_EMIT coreChanged();
}

qint32 ConfigObject::chatSizeMax() const {
    return m_core.chatSizeMax();
}

void ConfigObject::setDate(qint32 date) {
    if(m_core.date() == date) return;
    m_core.setDate(date);
    Q_EMIT dateChanged();
    Q_EMIT coreChanged();
}

qint32 ConfigObject::date() const {
    return m_core.date();
}

void ConfigObject::setDcOptions(const QList<DcOption> &dcOptions) {
    if(m_core.dcOptions() == dcOptions) return;
    m_core.setDcOptions(dcOptions);
    Q_EMIT dcOptionsChanged();
    Q_EMIT coreChanged();
}

QList<DcOption> ConfigObject::dcOptions() const {
    return m_core.dcOptions();
}

void ConfigObject::setDisabledFeatures(const QList<DisabledFeature> &disabledFeatures) {
    if(m_core.disabledFeatures() == disabledFeatures) return;
    m_core.setDisabledFeatures(disabledFeatures);
    Q_EMIT disabledFeaturesChanged();
    Q_EMIT coreChanged();
}

QList<DisabledFeature> ConfigObject::disabledFeatures() const {
    return m_core.disabledFeatures();
}

void ConfigObject::setEditTimeLimit(qint32 editTimeLimit) {
    if(m_core.editTimeLimit() == editTimeLimit) return;
    m_core.setEditTimeLimit(editTimeLimit);
    Q_EMIT editTimeLimitChanged();
    Q_EMIT coreChanged();
}

qint32 ConfigObject::editTimeLimit() const {
    return m_core.editTimeLimit();
}

void ConfigObject::setExpires(qint32 expires) {
    if(m_core.expires() == expires) return;
    m_core.setExpires(expires);
    Q_EMIT expiresChanged();
    Q_EMIT coreChanged();
}

qint32 ConfigObject::expires() const {
    return m_core.expires();
}

void ConfigObject::setFlags(qint32 flags) {
    if(m_core.flags() == flags) return;
    m_core.setFlags(flags);
    Q_EMIT flagsChanged();
    Q_EMIT coreChanged();
}

qint32 ConfigObject::flags() const {
    return m_core.flags();
}

void ConfigObject::setForwardedCountMax(qint32 forwardedCountMax) {
    if(m_core.forwardedCountMax() == forwardedCountMax) return;
    m_core.setForwardedCountMax(forwardedCountMax);
    Q_EMIT forwardedCountMaxChanged();
    Q_EMIT coreChanged();
}

qint32 ConfigObject::forwardedCountMax() const {
    return m_core.forwardedCountMax();
}

void ConfigObject::setLangPackVersion(qint32 langPackVersion) {
    if(m_core.langPackVersion() == langPackVersion) return;
    m_core.setLangPackVersion(langPackVersion);
    Q_EMIT langPackVersionChanged();
    Q_EMIT coreChanged();
}

qint32 ConfigObject::langPackVersion() const {
    return m_core.langPackVersion();
}

void ConfigObject::setMeUrlPrefix(const QString &meUrlPrefix) {
    if(m_core.meUrlPrefix() == meUrlPrefix) return;
    m_core.setMeUrlPrefix(meUrlPrefix);
    Q_EMIT meUrlPrefixChanged();
    Q_EMIT coreChanged();
}

QString ConfigObject::meUrlPrefix() const {
    return m_core.meUrlPrefix();
}

void ConfigObject::setMegagroupSizeMax(qint32 megagroupSizeMax) {
    if(m_core.megagroupSizeMax() == megagroupSizeMax) return;
    m_core.setMegagroupSizeMax(megagroupSizeMax);
    Q_EMIT megagroupSizeMaxChanged();
    Q_EMIT coreChanged();
}

qint32 ConfigObject::megagroupSizeMax() const {
    return m_core.megagroupSizeMax();
}

void ConfigObject::setNotifyCloudDelayMs(qint32 notifyCloudDelayMs) {
    if(m_core.notifyCloudDelayMs() == notifyCloudDelayMs) return;
    m_core.setNotifyCloudDelayMs(notifyCloudDelayMs);
    Q_EMIT notifyCloudDelayMsChanged();
    Q_EMIT coreChanged();
}

qint32 ConfigObject::notifyCloudDelayMs() const {
    return m_core.notifyCloudDelayMs();
}

void ConfigObject::setNotifyDefaultDelayMs(qint32 notifyDefaultDelayMs) {
    if(m_core.notifyDefaultDelayMs() == notifyDefaultDelayMs) return;
    m_core.setNotifyDefaultDelayMs(notifyDefaultDelayMs);
    Q_EMIT notifyDefaultDelayMsChanged();
    Q_EMIT coreChanged();
}

qint32 ConfigObject::notifyDefaultDelayMs() const {
    return m_core.notifyDefaultDelayMs();
}

void ConfigObject::setOfflineBlurTimeoutMs(qint32 offlineBlurTimeoutMs) {
    if(m_core.offlineBlurTimeoutMs() == offlineBlurTimeoutMs) return;
    m_core.setOfflineBlurTimeoutMs(offlineBlurTimeoutMs);
    Q_EMIT offlineBlurTimeoutMsChanged();
    Q_EMIT coreChanged();
}

qint32 ConfigObject::offlineBlurTimeoutMs() const {
    return m_core.offlineBlurTimeoutMs();
}

void ConfigObject::setOfflineIdleTimeoutMs(qint32 offlineIdleTimeoutMs) {
    if(m_core.offlineIdleTimeoutMs() == offlineIdleTimeoutMs) return;
    m_core.setOfflineIdleTimeoutMs(offlineIdleTimeoutMs);
    Q_EMIT offlineIdleTimeoutMsChanged();
    Q_EMIT coreChanged();
}

qint32 ConfigObject::offlineIdleTimeoutMs() const {
    return m_core.offlineIdleTimeoutMs();
}

void ConfigObject::setOnlineCloudTimeoutMs(qint32 onlineCloudTimeoutMs) {
    if(m_core.onlineCloudTimeoutMs() == onlineCloudTimeoutMs) return;
    m_core.setOnlineCloudTimeoutMs(onlineCloudTimeoutMs);
    Q_EMIT onlineCloudTimeoutMsChanged();
    Q_EMIT coreChanged();
}

qint32 ConfigObject::onlineCloudTimeoutMs() const {
    return m_core.onlineCloudTimeoutMs();
}

void ConfigObject::setOnlineUpdatePeriodMs(qint32 onlineUpdatePeriodMs) {
    if(m_core.onlineUpdatePeriodMs() == onlineUpdatePeriodMs) return;
    m_core.setOnlineUpdatePeriodMs(onlineUpdatePeriodMs);
    Q_EMIT onlineUpdatePeriodMsChanged();
    Q_EMIT coreChanged();
}

qint32 ConfigObject::onlineUpdatePeriodMs() const {
    return m_core.onlineUpdatePeriodMs();
}

void ConfigObject::setPhonecallsEnabled(bool phonecallsEnabled) {
    if(m_core.phonecallsEnabled() == phonecallsEnabled) return;
    m_core.setPhonecallsEnabled(phonecallsEnabled);
    Q_EMIT phonecallsEnabledChanged();
    Q_EMIT coreChanged();
}

bool ConfigObject::phonecallsEnabled() const {
    return m_core.phonecallsEnabled();
}

void ConfigObject::setPinnedDialogsCountMax(qint32 pinnedDialogsCountMax) {
    if(m_core.pinnedDialogsCountMax() == pinnedDialogsCountMax) return;
    m_core.setPinnedDialogsCountMax(pinnedDialogsCountMax);
    Q_EMIT pinnedDialogsCountMaxChanged();
    Q_EMIT coreChanged();
}

qint32 ConfigObject::pinnedDialogsCountMax() const {
    return m_core.pinnedDialogsCountMax();
}

void ConfigObject::setPushChatLimit(qint32 pushChatLimit) {
    if(m_core.pushChatLimit() == pushChatLimit) return;
    m_core.setPushChatLimit(pushChatLimit);
    Q_EMIT pushChatLimitChanged();
    Q_EMIT coreChanged();
}

qint32 ConfigObject::pushChatLimit() const {
    return m_core.pushChatLimit();
}

void ConfigObject::setPushChatPeriodMs(qint32 pushChatPeriodMs) {
    if(m_core.pushChatPeriodMs() == pushChatPeriodMs) return;
    m_core.setPushChatPeriodMs(pushChatPeriodMs);
    Q_EMIT pushChatPeriodMsChanged();
    Q_EMIT coreChanged();
}

qint32 ConfigObject::pushChatPeriodMs() const {
    return m_core.pushChatPeriodMs();
}

void ConfigObject::setRatingEDecay(qint32 ratingEDecay) {
    if(m_core.ratingEDecay() == ratingEDecay) return;
    m_core.setRatingEDecay(ratingEDecay);
    Q_EMIT ratingEDecayChanged();
    Q_EMIT coreChanged();
}

qint32 ConfigObject::ratingEDecay() const {
    return m_core.ratingEDecay();
}

void ConfigObject::setSavedGifsLimit(qint32 savedGifsLimit) {
    if(m_core.savedGifsLimit() == savedGifsLimit) return;
    m_core.setSavedGifsLimit(savedGifsLimit);
    Q_EMIT savedGifsLimitChanged();
    Q_EMIT coreChanged();
}

qint32 ConfigObject::savedGifsLimit() const {
    return m_core.savedGifsLimit();
}

void ConfigObject::setStickersRecentLimit(qint32 stickersRecentLimit) {
    if(m_core.stickersRecentLimit() == stickersRecentLimit) return;
    m_core.setStickersRecentLimit(stickersRecentLimit);
    Q_EMIT stickersRecentLimitChanged();
    Q_EMIT coreChanged();
}

qint32 ConfigObject::stickersRecentLimit() const {
    return m_core.stickersRecentLimit();
}

void ConfigObject::setSuggestedLangCode(const QString &suggestedLangCode) {
    if(m_core.suggestedLangCode() == suggestedLangCode) return;
    m_core.setSuggestedLangCode(suggestedLangCode);
    Q_EMIT suggestedLangCodeChanged();
    Q_EMIT coreChanged();
}

QString ConfigObject::suggestedLangCode() const {
    return m_core.suggestedLangCode();
}

void ConfigObject::setTestMode(bool testMode) {
    if(m_core.testMode() == testMode) return;
    m_core.setTestMode(testMode);
    Q_EMIT testModeChanged();
    Q_EMIT coreChanged();
}

bool ConfigObject::testMode() const {
    return m_core.testMode();
}

void ConfigObject::setThisDc(qint32 thisDc) {
    if(m_core.thisDc() == thisDc) return;
    m_core.setThisDc(thisDc);
    Q_EMIT thisDcChanged();
    Q_EMIT coreChanged();
}

qint32 ConfigObject::thisDc() const {
    return m_core.thisDc();
}

void ConfigObject::setTmpSessions(qint32 tmpSessions) {
    if(m_core.tmpSessions() == tmpSessions) return;
    m_core.setTmpSessions(tmpSessions);
    Q_EMIT tmpSessionsChanged();
    Q_EMIT coreChanged();
}

qint32 ConfigObject::tmpSessions() const {
    return m_core.tmpSessions();
}

ConfigObject &ConfigObject::operator =(const Config &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT callConnectTimeoutMsChanged();
    Q_EMIT callPacketTimeoutMsChanged();
    Q_EMIT callReceiveTimeoutMsChanged();
    Q_EMIT callRingTimeoutMsChanged();
    Q_EMIT chatBigSizeChanged();
    Q_EMIT chatSizeMaxChanged();
    Q_EMIT dateChanged();
    Q_EMIT dcOptionsChanged();
    Q_EMIT disabledFeaturesChanged();
    Q_EMIT editTimeLimitChanged();
    Q_EMIT expiresChanged();
    Q_EMIT flagsChanged();
    Q_EMIT forwardedCountMaxChanged();
    Q_EMIT langPackVersionChanged();
    Q_EMIT meUrlPrefixChanged();
    Q_EMIT megagroupSizeMaxChanged();
    Q_EMIT notifyCloudDelayMsChanged();
    Q_EMIT notifyDefaultDelayMsChanged();
    Q_EMIT offlineBlurTimeoutMsChanged();
    Q_EMIT offlineIdleTimeoutMsChanged();
    Q_EMIT onlineCloudTimeoutMsChanged();
    Q_EMIT onlineUpdatePeriodMsChanged();
    Q_EMIT phonecallsEnabledChanged();
    Q_EMIT pinnedDialogsCountMaxChanged();
    Q_EMIT pushChatLimitChanged();
    Q_EMIT pushChatPeriodMsChanged();
    Q_EMIT ratingEDecayChanged();
    Q_EMIT savedGifsLimitChanged();
    Q_EMIT stickersRecentLimitChanged();
    Q_EMIT suggestedLangCodeChanged();
    Q_EMIT testModeChanged();
    Q_EMIT thisDcChanged();
    Q_EMIT tmpSessionsChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool ConfigObject::operator ==(const Config &b) const {
    return m_core == b;
}

void ConfigObject::setClassType(quint32 classType) {
    Config::ConfigClassType result;
    switch(classType) {
    case TypeConfig:
        result = Config::typeConfig;
        break;
    default:
        result = Config::typeConfig;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 ConfigObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case Config::typeConfig:
        result = TypeConfig;
        break;
    default:
        result = TypeConfig;
        break;
    }

    return result;
}

void ConfigObject::setCore(const Config &core) {
    operator =(core);
}

Config ConfigObject::core() const {
    return m_core;
}

