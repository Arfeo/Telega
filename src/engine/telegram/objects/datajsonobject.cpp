// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "datajsonobject.h"

DataJSONObject::DataJSONObject(const DataJSON &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

DataJSONObject::DataJSONObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

DataJSONObject::~DataJSONObject() {
}

void DataJSONObject::setData(const QString &data) {
    if(m_core.data() == data) return;
    m_core.setData(data);
    Q_EMIT dataChanged();
    Q_EMIT coreChanged();
}

QString DataJSONObject::data() const {
    return m_core.data();
}

DataJSONObject &DataJSONObject::operator =(const DataJSON &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT dataChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool DataJSONObject::operator ==(const DataJSON &b) const {
    return m_core == b;
}

void DataJSONObject::setClassType(quint32 classType) {
    DataJSON::DataJSONClassType result;
    switch(classType) {
    case TypeDataJSON:
        result = DataJSON::typeDataJSON;
        break;
    default:
        result = DataJSON::typeDataJSON;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 DataJSONObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case DataJSON::typeDataJSON:
        result = TypeDataJSON;
        break;
    default:
        result = TypeDataJSON;
        break;
    }

    return result;
}

void DataJSONObject::setCore(const DataJSON &core) {
    operator =(core);
}

DataJSON DataJSONObject::core() const {
    return m_core;
}

