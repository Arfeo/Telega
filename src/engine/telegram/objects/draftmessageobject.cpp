// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "draftmessageobject.h"

DraftMessageObject::DraftMessageObject(const DraftMessage &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

DraftMessageObject::DraftMessageObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

DraftMessageObject::~DraftMessageObject() {
}

void DraftMessageObject::setDate(qint32 date) {
    if(m_core.date() == date) return;
    m_core.setDate(date);
    Q_EMIT dateChanged();
    Q_EMIT coreChanged();
}

qint32 DraftMessageObject::date() const {
    return m_core.date();
}

void DraftMessageObject::setEntities(const QList<MessageEntity> &entities) {
    if(m_core.entities() == entities) return;
    m_core.setEntities(entities);
    Q_EMIT entitiesChanged();
    Q_EMIT coreChanged();
}

QList<MessageEntity> DraftMessageObject::entities() const {
    return m_core.entities();
}

void DraftMessageObject::setFlags(qint32 flags) {
    if(m_core.flags() == flags) return;
    m_core.setFlags(flags);
    Q_EMIT flagsChanged();
    Q_EMIT coreChanged();
}

qint32 DraftMessageObject::flags() const {
    return m_core.flags();
}

void DraftMessageObject::setMessage(const QString &message) {
    if(m_core.message() == message) return;
    m_core.setMessage(message);
    Q_EMIT messageChanged();
    Q_EMIT coreChanged();
}

QString DraftMessageObject::message() const {
    return m_core.message();
}

void DraftMessageObject::setNoWebpage(bool noWebpage) {
    if(m_core.noWebpage() == noWebpage) return;
    m_core.setNoWebpage(noWebpage);
    Q_EMIT noWebpageChanged();
    Q_EMIT coreChanged();
}

bool DraftMessageObject::noWebpage() const {
    return m_core.noWebpage();
}

void DraftMessageObject::setReplyToMsgId(qint32 replyToMsgId) {
    if(m_core.replyToMsgId() == replyToMsgId) return;
    m_core.setReplyToMsgId(replyToMsgId);
    Q_EMIT replyToMsgIdChanged();
    Q_EMIT coreChanged();
}

qint32 DraftMessageObject::replyToMsgId() const {
    return m_core.replyToMsgId();
}

DraftMessageObject &DraftMessageObject::operator =(const DraftMessage &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT dateChanged();
    Q_EMIT entitiesChanged();
    Q_EMIT flagsChanged();
    Q_EMIT messageChanged();
    Q_EMIT noWebpageChanged();
    Q_EMIT replyToMsgIdChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool DraftMessageObject::operator ==(const DraftMessage &b) const {
    return m_core == b;
}

void DraftMessageObject::setClassType(quint32 classType) {
    DraftMessage::DraftMessageClassType result;
    switch(classType) {
    case TypeDraftMessageEmpty:
        result = DraftMessage::typeDraftMessageEmpty;
        break;
    case TypeDraftMessage:
        result = DraftMessage::typeDraftMessage;
        break;
    default:
        result = DraftMessage::typeDraftMessageEmpty;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 DraftMessageObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case DraftMessage::typeDraftMessageEmpty:
        result = TypeDraftMessageEmpty;
        break;
    case DraftMessage::typeDraftMessage:
        result = TypeDraftMessage;
        break;
    default:
        result = TypeDraftMessageEmpty;
        break;
    }

    return result;
}

void DraftMessageObject::setCore(const DraftMessage &core) {
    operator =(core);
}

DraftMessage DraftMessageObject::core() const {
    return m_core;
}

