// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "gameobject.h"

GameObject::GameObject(const Game &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_document(0),
    m_photo(0),
    m_core(core)
{
    m_document = new DocumentObject(m_core.document(), this);
    connect(m_document.data(), SIGNAL(coreChanged()), this, SLOT(coreDocumentChanged()));
    m_photo = new PhotoObject(m_core.photo(), this);
    connect(m_photo.data(), SIGNAL(coreChanged()), this, SLOT(corePhotoChanged()));
}

GameObject::GameObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_document(0),
    m_photo(0),
    m_core()
{
    m_document = new DocumentObject(m_core.document(), this);
    connect(m_document.data(), SIGNAL(coreChanged()), this, SLOT(coreDocumentChanged()));
    m_photo = new PhotoObject(m_core.photo(), this);
    connect(m_photo.data(), SIGNAL(coreChanged()), this, SLOT(corePhotoChanged()));
}

GameObject::~GameObject() {
}

void GameObject::setAccessHash(qint64 accessHash) {
    if(m_core.accessHash() == accessHash) return;
    m_core.setAccessHash(accessHash);
    Q_EMIT accessHashChanged();
    Q_EMIT coreChanged();
}

qint64 GameObject::accessHash() const {
    return m_core.accessHash();
}

void GameObject::setDescription(const QString &description) {
    if(m_core.description() == description) return;
    m_core.setDescription(description);
    Q_EMIT descriptionChanged();
    Q_EMIT coreChanged();
}

QString GameObject::description() const {
    return m_core.description();
}

void GameObject::setDocument(DocumentObject* document) {
    if(m_document == document) return;
    if(m_document) delete m_document;
    m_document = document;
    if(m_document) {
        m_document->setParent(this);
        m_core.setDocument(m_document->core());
        connect(m_document.data(), SIGNAL(coreChanged()), this, SLOT(coreDocumentChanged()));
    }
    Q_EMIT documentChanged();
    Q_EMIT coreChanged();
}

DocumentObject*  GameObject::document() const {
    return m_document;
}

void GameObject::setFlags(qint32 flags) {
    if(m_core.flags() == flags) return;
    m_core.setFlags(flags);
    Q_EMIT flagsChanged();
    Q_EMIT coreChanged();
}

qint32 GameObject::flags() const {
    return m_core.flags();
}

void GameObject::setId(qint64 id) {
    if(m_core.id() == id) return;
    m_core.setId(id);
    Q_EMIT idChanged();
    Q_EMIT coreChanged();
}

qint64 GameObject::id() const {
    return m_core.id();
}

void GameObject::setPhoto(PhotoObject* photo) {
    if(m_photo == photo) return;
    if(m_photo) delete m_photo;
    m_photo = photo;
    if(m_photo) {
        m_photo->setParent(this);
        m_core.setPhoto(m_photo->core());
        connect(m_photo.data(), SIGNAL(coreChanged()), this, SLOT(corePhotoChanged()));
    }
    Q_EMIT photoChanged();
    Q_EMIT coreChanged();
}

PhotoObject*  GameObject::photo() const {
    return m_photo;
}

void GameObject::setShortName(const QString &shortName) {
    if(m_core.shortName() == shortName) return;
    m_core.setShortName(shortName);
    Q_EMIT shortNameChanged();
    Q_EMIT coreChanged();
}

QString GameObject::shortName() const {
    return m_core.shortName();
}

void GameObject::setTitle(const QString &title) {
    if(m_core.title() == title) return;
    m_core.setTitle(title);
    Q_EMIT titleChanged();
    Q_EMIT coreChanged();
}

QString GameObject::title() const {
    return m_core.title();
}

GameObject &GameObject::operator =(const Game &b) {
    if(m_core == b) return *this;
    m_core = b;
    m_document->setCore(b.document());
    m_photo->setCore(b.photo());

    Q_EMIT accessHashChanged();
    Q_EMIT descriptionChanged();
    Q_EMIT documentChanged();
    Q_EMIT flagsChanged();
    Q_EMIT idChanged();
    Q_EMIT photoChanged();
    Q_EMIT shortNameChanged();
    Q_EMIT titleChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool GameObject::operator ==(const Game &b) const {
    return m_core == b;
}

void GameObject::setClassType(quint32 classType) {
    Game::GameClassType result;
    switch(classType) {
    case TypeGame:
        result = Game::typeGame;
        break;
    default:
        result = Game::typeGame;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 GameObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case Game::typeGame:
        result = TypeGame;
        break;
    default:
        result = TypeGame;
        break;
    }

    return result;
}

void GameObject::setCore(const Game &core) {
    operator =(core);
}

Game GameObject::core() const {
    return m_core;
}

void GameObject::coreDocumentChanged() {
    if(m_core.document() == m_document->core()) return;
    m_core.setDocument(m_document->core());
    Q_EMIT documentChanged();
    Q_EMIT coreChanged();
}

void GameObject::corePhotoChanged() {
    if(m_core.photo() == m_photo->core()) return;
    m_core.setPhoto(m_photo->core());
    Q_EMIT photoChanged();
    Q_EMIT coreChanged();
}

