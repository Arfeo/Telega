// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "inputgameobject.h"

InputGameObject::InputGameObject(const InputGame &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_botId(0),
    m_core(core)
{
    m_botId = new InputUserObject(m_core.botId(), this);
    connect(m_botId.data(), &InputUserObject::coreChanged, this, &InputGameObject::coreBotIdChanged);
}

InputGameObject::InputGameObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_botId(0),
    m_core()
{
    m_botId = new InputUserObject(m_core.botId(), this);
    connect(m_botId.data(), &InputUserObject::coreChanged, this, &InputGameObject::coreBotIdChanged);
}

InputGameObject::~InputGameObject() {
}

void InputGameObject::setAccessHash(qint64 accessHash) {
    if(m_core.accessHash() == accessHash) return;
    m_core.setAccessHash(accessHash);
    Q_EMIT accessHashChanged();
    Q_EMIT coreChanged();
}

qint64 InputGameObject::accessHash() const {
    return m_core.accessHash();
}

void InputGameObject::setBotId(InputUserObject* botId) {
    if(m_botId == botId) return;
    if(m_botId) delete m_botId;
    m_botId = botId;
    if(m_botId) {
        m_botId->setParent(this);
        m_core.setBotId(m_botId->core());
        connect(m_botId.data(), &InputUserObject::coreChanged, this, &InputGameObject::coreBotIdChanged);
    }
    Q_EMIT botIdChanged();
    Q_EMIT coreChanged();
}

InputUserObject*  InputGameObject::botId() const {
    return m_botId;
}

void InputGameObject::setId(qint64 id) {
    if(m_core.id() == id) return;
    m_core.setId(id);
    Q_EMIT idChanged();
    Q_EMIT coreChanged();
}

qint64 InputGameObject::id() const {
    return m_core.id();
}

void InputGameObject::setShortName(const QString &shortName) {
    if(m_core.shortName() == shortName) return;
    m_core.setShortName(shortName);
    Q_EMIT shortNameChanged();
    Q_EMIT coreChanged();
}

QString InputGameObject::shortName() const {
    return m_core.shortName();
}

InputGameObject &InputGameObject::operator =(const InputGame &b) {
    if(m_core == b) return *this;
    m_core = b;
    m_botId->setCore(b.botId());

    Q_EMIT accessHashChanged();
    Q_EMIT botIdChanged();
    Q_EMIT idChanged();
    Q_EMIT shortNameChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool InputGameObject::operator ==(const InputGame &b) const {
    return m_core == b;
}

void InputGameObject::setClassType(quint32 classType) {
    InputGame::InputGameClassType result;
    switch(classType) {
    case TypeInputGameID:
        result = InputGame::typeInputGameID;
        break;
    case TypeInputGameShortName:
        result = InputGame::typeInputGameShortName;
        break;
    default:
        result = InputGame::typeInputGameID;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 InputGameObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case InputGame::typeInputGameID:
        result = TypeInputGameID;
        break;
    case InputGame::typeInputGameShortName:
        result = TypeInputGameShortName;
        break;
    default:
        result = TypeInputGameID;
        break;
    }

    return result;
}

void InputGameObject::setCore(const InputGame &core) {
    operator =(core);
}

InputGame InputGameObject::core() const {
    return m_core;
}

void InputGameObject::coreBotIdChanged() {
    if(m_core.botId() == m_botId->core()) return;
    m_core.setBotId(m_botId->core());
    Q_EMIT botIdChanged();
    Q_EMIT coreChanged();
}

