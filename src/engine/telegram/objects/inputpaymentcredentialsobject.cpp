// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "inputpaymentcredentialsobject.h"

InputPaymentCredentialsObject::InputPaymentCredentialsObject(const InputPaymentCredentials &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_data(0),
    m_core(core)
{
    m_data = new DataJSONObject(m_core.data(), this);
    connect(m_data.data(), SIGNAL(coreChanged()), this, SLOT(coreDataChanged()));
}

InputPaymentCredentialsObject::InputPaymentCredentialsObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_data(0),
    m_core()
{
    m_data = new DataJSONObject(m_core.data(), this);
    connect(m_data.data(), SIGNAL(coreChanged()), this, SLOT(coreDataChanged()));
}

InputPaymentCredentialsObject::~InputPaymentCredentialsObject() {
}

void InputPaymentCredentialsObject::setData(DataJSONObject* data) {
    if(m_data == data) return;
    if(m_data) delete m_data;
    m_data = data;
    if(m_data) {
        m_data->setParent(this);
        m_core.setData(m_data->core());
        connect(m_data.data(), SIGNAL(coreChanged()), this, SLOT(coreDataChanged()));
    }
    Q_EMIT dataChanged();
    Q_EMIT coreChanged();
}

DataJSONObject*  InputPaymentCredentialsObject::data() const {
    return m_data;
}

void InputPaymentCredentialsObject::setFlags(qint32 flags) {
    if(m_core.flags() == flags) return;
    m_core.setFlags(flags);
    Q_EMIT flagsChanged();
    Q_EMIT coreChanged();
}

qint32 InputPaymentCredentialsObject::flags() const {
    return m_core.flags();
}

void InputPaymentCredentialsObject::setId(const QString &id) {
    if(m_core.id() == id) return;
    m_core.setId(id);
    Q_EMIT idChanged();
    Q_EMIT coreChanged();
}

QString InputPaymentCredentialsObject::id() const {
    return m_core.id();
}

void InputPaymentCredentialsObject::setSave(bool save) {
    if(m_core.save() == save) return;
    m_core.setSave(save);
    Q_EMIT saveChanged();
    Q_EMIT coreChanged();
}

bool InputPaymentCredentialsObject::save() const {
    return m_core.save();
}

void InputPaymentCredentialsObject::setTmpPassword(const QByteArray &tmpPassword) {
    if(m_core.tmpPassword() == tmpPassword) return;
    m_core.setTmpPassword(tmpPassword);
    Q_EMIT tmpPasswordChanged();
    Q_EMIT coreChanged();
}

QByteArray InputPaymentCredentialsObject::tmpPassword() const {
    return m_core.tmpPassword();
}

InputPaymentCredentialsObject &InputPaymentCredentialsObject::operator =(const InputPaymentCredentials &b) {
    if(m_core == b) return *this;
    m_core = b;
    m_data->setCore(b.data());

    Q_EMIT dataChanged();
    Q_EMIT flagsChanged();
    Q_EMIT idChanged();
    Q_EMIT saveChanged();
    Q_EMIT tmpPasswordChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool InputPaymentCredentialsObject::operator ==(const InputPaymentCredentials &b) const {
    return m_core == b;
}

void InputPaymentCredentialsObject::setClassType(quint32 classType) {
    InputPaymentCredentials::InputPaymentCredentialsClassType result;
    switch(classType) {
    case TypeInputPaymentCredentialsSaved:
        result = InputPaymentCredentials::typeInputPaymentCredentialsSaved;
        break;
    case TypeInputPaymentCredentials:
        result = InputPaymentCredentials::typeInputPaymentCredentials;
        break;
    default:
        result = InputPaymentCredentials::typeInputPaymentCredentialsSaved;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 InputPaymentCredentialsObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case InputPaymentCredentials::typeInputPaymentCredentialsSaved:
        result = TypeInputPaymentCredentialsSaved;
        break;
    case InputPaymentCredentials::typeInputPaymentCredentials:
        result = TypeInputPaymentCredentials;
        break;
    default:
        result = TypeInputPaymentCredentialsSaved;
        break;
    }

    return result;
}

void InputPaymentCredentialsObject::setCore(const InputPaymentCredentials &core) {
    operator =(core);
}

InputPaymentCredentials InputPaymentCredentialsObject::core() const {
    return m_core;
}

void InputPaymentCredentialsObject::coreDataChanged() {
    if(m_core.data() == m_data->core()) return;
    m_core.setData(m_data->core());
    Q_EMIT dataChanged();
    Q_EMIT coreChanged();
}

