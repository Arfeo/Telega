// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "inputstickeredmediaobject.h"

InputStickeredMediaObject::InputStickeredMediaObject(const InputStickeredMedia &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_idInputDocument(0),
    m_idInputPhoto(0),
    m_core(core)
{
    m_idInputDocument = new InputDocumentObject(m_core.idInputDocument(), this);
    connect(m_idInputDocument.data(), SIGNAL(coreChanged()), this, SLOT(coreIdInputDocumentChanged()));
    m_idInputPhoto = new InputPhotoObject(m_core.idInputPhoto(), this);
    connect(m_idInputPhoto.data(), SIGNAL(coreChanged()), this, SLOT(coreIdInputPhotoChanged()));
}

InputStickeredMediaObject::InputStickeredMediaObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_idInputDocument(0),
    m_idInputPhoto(0),
    m_core()
{
    m_idInputDocument = new InputDocumentObject(m_core.idInputDocument(), this);
    connect(m_idInputDocument.data(), SIGNAL(coreChanged()), this, SLOT(coreIdInputDocumentChanged()));
    m_idInputPhoto = new InputPhotoObject(m_core.idInputPhoto(), this);
    connect(m_idInputPhoto.data(), SIGNAL(coreChanged()), this, SLOT(coreIdInputPhotoChanged()));
}

InputStickeredMediaObject::~InputStickeredMediaObject() {
}

void InputStickeredMediaObject::setIdInputDocument(InputDocumentObject* idInputDocument) {
    if(m_idInputDocument == idInputDocument) return;
    if(m_idInputDocument) delete m_idInputDocument;
    m_idInputDocument = idInputDocument;
    if(m_idInputDocument) {
        m_idInputDocument->setParent(this);
        m_core.setIdInputDocument(m_idInputDocument->core());
        connect(m_idInputDocument.data(), SIGNAL(coreChanged()), this, SLOT(coreIdInputDocumentChanged()));
    }
    Q_EMIT idInputDocumentChanged();
    Q_EMIT coreChanged();
}

InputDocumentObject*  InputStickeredMediaObject::idInputDocument() const {
    return m_idInputDocument;
}

void InputStickeredMediaObject::setIdInputPhoto(InputPhotoObject* idInputPhoto) {
    if(m_idInputPhoto == idInputPhoto) return;
    if(m_idInputPhoto) delete m_idInputPhoto;
    m_idInputPhoto = idInputPhoto;
    if(m_idInputPhoto) {
        m_idInputPhoto->setParent(this);
        m_core.setIdInputPhoto(m_idInputPhoto->core());
        connect(m_idInputPhoto.data(), SIGNAL(coreChanged()), this, SLOT(coreIdInputPhotoChanged()));
    }
    Q_EMIT idInputPhotoChanged();
    Q_EMIT coreChanged();
}

InputPhotoObject*  InputStickeredMediaObject::idInputPhoto() const {
    return m_idInputPhoto;
}

InputStickeredMediaObject &InputStickeredMediaObject::operator =(const InputStickeredMedia &b) {
    if(m_core == b) return *this;
    m_core = b;
    m_idInputDocument->setCore(b.idInputDocument());
    m_idInputPhoto->setCore(b.idInputPhoto());

    Q_EMIT idInputDocumentChanged();
    Q_EMIT idInputPhotoChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool InputStickeredMediaObject::operator ==(const InputStickeredMedia &b) const {
    return m_core == b;
}

void InputStickeredMediaObject::setClassType(quint32 classType) {
    InputStickeredMedia::InputStickeredMediaClassType result;
    switch(classType) {
    case TypeInputStickeredMediaPhoto:
        result = InputStickeredMedia::typeInputStickeredMediaPhoto;
        break;
    case TypeInputStickeredMediaDocument:
        result = InputStickeredMedia::typeInputStickeredMediaDocument;
        break;
    default:
        result = InputStickeredMedia::typeInputStickeredMediaPhoto;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 InputStickeredMediaObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case InputStickeredMedia::typeInputStickeredMediaPhoto:
        result = TypeInputStickeredMediaPhoto;
        break;
    case InputStickeredMedia::typeInputStickeredMediaDocument:
        result = TypeInputStickeredMediaDocument;
        break;
    default:
        result = TypeInputStickeredMediaPhoto;
        break;
    }

    return result;
}

void InputStickeredMediaObject::setCore(const InputStickeredMedia &core) {
    operator =(core);
}

InputStickeredMedia InputStickeredMediaObject::core() const {
    return m_core;
}

void InputStickeredMediaObject::coreIdInputDocumentChanged() {
    if(m_core.idInputDocument() == m_idInputDocument->core()) return;
    m_core.setIdInputDocument(m_idInputDocument->core());
    Q_EMIT idInputDocumentChanged();
    Q_EMIT coreChanged();
}

void InputStickeredMediaObject::coreIdInputPhotoChanged() {
    if(m_core.idInputPhoto() == m_idInputPhoto->core()) return;
    m_core.setIdInputPhoto(m_idInputPhoto->core());
    Q_EMIT idInputPhotoChanged();
    Q_EMIT coreChanged();
}

