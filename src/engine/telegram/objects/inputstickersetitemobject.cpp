// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "inputstickersetitemobject.h"

InputStickerSetItemObject::InputStickerSetItemObject(const InputStickerSetItem &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_document(0),
    m_maskCoords(0),
    m_core(core)
{
    m_document = new InputDocumentObject(m_core.document(), this);
    connect(m_document.data(), &InputDocumentObject::coreChanged, this, &InputStickerSetItemObject::coreDocumentChanged);
    m_maskCoords = new MaskCoordsObject(m_core.maskCoords(), this);
    connect(m_maskCoords.data(), &MaskCoordsObject::coreChanged, this, &InputStickerSetItemObject::coreMaskCoordsChanged);
}

InputStickerSetItemObject::InputStickerSetItemObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_document(0),
    m_maskCoords(0),
    m_core()
{
    m_document = new InputDocumentObject(m_core.document(), this);
    connect(m_document.data(), &InputDocumentObject::coreChanged, this, &InputStickerSetItemObject::coreDocumentChanged);
    m_maskCoords = new MaskCoordsObject(m_core.maskCoords(), this);
    connect(m_maskCoords.data(), &MaskCoordsObject::coreChanged, this, &InputStickerSetItemObject::coreMaskCoordsChanged);
}

InputStickerSetItemObject::~InputStickerSetItemObject() {
}

void InputStickerSetItemObject::setDocument(InputDocumentObject* document) {
    if(m_document == document) return;
    if(m_document) delete m_document;
    m_document = document;
    if(m_document) {
        m_document->setParent(this);
        m_core.setDocument(m_document->core());
        connect(m_document.data(), &InputDocumentObject::coreChanged, this, &InputStickerSetItemObject::coreDocumentChanged);
    }
    Q_EMIT documentChanged();
    Q_EMIT coreChanged();
}

InputDocumentObject*  InputStickerSetItemObject::document() const {
    return m_document;
}

void InputStickerSetItemObject::setEmoji(const QString &emoji) {
    if(m_core.emoji() == emoji) return;
    m_core.setEmoji(emoji);
    Q_EMIT emojiChanged();
    Q_EMIT coreChanged();
}

QString InputStickerSetItemObject::emoji() const {
    return m_core.emoji();
}

void InputStickerSetItemObject::setFlags(qint32 flags) {
    if(m_core.flags() == flags) return;
    m_core.setFlags(flags);
    Q_EMIT flagsChanged();
    Q_EMIT coreChanged();
}

qint32 InputStickerSetItemObject::flags() const {
    return m_core.flags();
}

void InputStickerSetItemObject::setMaskCoords(MaskCoordsObject* maskCoords) {
    if(m_maskCoords == maskCoords) return;
    if(m_maskCoords) delete m_maskCoords;
    m_maskCoords = maskCoords;
    if(m_maskCoords) {
        m_maskCoords->setParent(this);
        m_core.setMaskCoords(m_maskCoords->core());
        connect(m_maskCoords.data(), &MaskCoordsObject::coreChanged, this, &InputStickerSetItemObject::coreMaskCoordsChanged);
    }
    Q_EMIT maskCoordsChanged();
    Q_EMIT coreChanged();
}

MaskCoordsObject*  InputStickerSetItemObject::maskCoords() const {
    return m_maskCoords;
}

InputStickerSetItemObject &InputStickerSetItemObject::operator =(const InputStickerSetItem &b) {
    if(m_core == b) return *this;
    m_core = b;
    m_document->setCore(b.document());
    m_maskCoords->setCore(b.maskCoords());

    Q_EMIT documentChanged();
    Q_EMIT emojiChanged();
    Q_EMIT flagsChanged();
    Q_EMIT maskCoordsChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool InputStickerSetItemObject::operator ==(const InputStickerSetItem &b) const {
    return m_core == b;
}

void InputStickerSetItemObject::setClassType(quint32 classType) {
    InputStickerSetItem::InputStickerSetItemClassType result;
    switch(classType) {
    case TypeInputStickerSetItem:
        result = InputStickerSetItem::typeInputStickerSetItem;
        break;
    default:
        result = InputStickerSetItem::typeInputStickerSetItem;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 InputStickerSetItemObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case InputStickerSetItem::typeInputStickerSetItem:
        result = TypeInputStickerSetItem;
        break;
    default:
        result = TypeInputStickerSetItem;
        break;
    }

    return result;
}

void InputStickerSetItemObject::setCore(const InputStickerSetItem &core) {
    operator =(core);
}

InputStickerSetItem InputStickerSetItemObject::core() const {
    return m_core;
}

void InputStickerSetItemObject::coreDocumentChanged() {
    if(m_core.document() == m_document->core()) return;
    m_core.setDocument(m_document->core());
    Q_EMIT documentChanged();
    Q_EMIT coreChanged();
}

void InputStickerSetItemObject::coreMaskCoordsChanged() {
    if(m_core.maskCoords() == m_maskCoords->core()) return;
    m_core.setMaskCoords(m_maskCoords->core());
    Q_EMIT maskCoordsChanged();
    Q_EMIT coreChanged();
}

