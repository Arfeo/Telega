// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "inputwebfilelocationobject.h"

InputWebFileLocationObject::InputWebFileLocationObject(const InputWebFileLocation &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

InputWebFileLocationObject::InputWebFileLocationObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

InputWebFileLocationObject::~InputWebFileLocationObject() {
}

void InputWebFileLocationObject::setAccessHash(qint64 accessHash) {
    if(m_core.accessHash() == accessHash) return;
    m_core.setAccessHash(accessHash);
    Q_EMIT accessHashChanged();
    Q_EMIT coreChanged();
}

qint64 InputWebFileLocationObject::accessHash() const {
    return m_core.accessHash();
}

void InputWebFileLocationObject::setUrl(const QString &url) {
    if(m_core.url() == url) return;
    m_core.setUrl(url);
    Q_EMIT urlChanged();
    Q_EMIT coreChanged();
}

QString InputWebFileLocationObject::url() const {
    return m_core.url();
}

InputWebFileLocationObject &InputWebFileLocationObject::operator =(const InputWebFileLocation &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT accessHashChanged();
    Q_EMIT urlChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool InputWebFileLocationObject::operator ==(const InputWebFileLocation &b) const {
    return m_core == b;
}

void InputWebFileLocationObject::setClassType(quint32 classType) {
    InputWebFileLocation::InputWebFileLocationClassType result;
    switch(classType) {
    case TypeInputWebFileLocation:
        result = InputWebFileLocation::typeInputWebFileLocation;
        break;
    default:
        result = InputWebFileLocation::typeInputWebFileLocation;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 InputWebFileLocationObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case InputWebFileLocation::typeInputWebFileLocation:
        result = TypeInputWebFileLocation;
        break;
    default:
        result = TypeInputWebFileLocation;
        break;
    }

    return result;
}

void InputWebFileLocationObject::setCore(const InputWebFileLocation &core) {
    operator =(core);
}

InputWebFileLocation InputWebFileLocationObject::core() const {
    return m_core;
}

