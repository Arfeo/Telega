// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "labeledpriceobject.h"

LabeledPriceObject::LabeledPriceObject(const LabeledPrice &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

LabeledPriceObject::LabeledPriceObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

LabeledPriceObject::~LabeledPriceObject() {
}

void LabeledPriceObject::setAmount(qint64 amount) {
    if(m_core.amount() == amount) return;
    m_core.setAmount(amount);
    Q_EMIT amountChanged();
    Q_EMIT coreChanged();
}

qint64 LabeledPriceObject::amount() const {
    return m_core.amount();
}

void LabeledPriceObject::setLabel(const QString &label) {
    if(m_core.label() == label) return;
    m_core.setLabel(label);
    Q_EMIT labelChanged();
    Q_EMIT coreChanged();
}

QString LabeledPriceObject::label() const {
    return m_core.label();
}

LabeledPriceObject &LabeledPriceObject::operator =(const LabeledPrice &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT amountChanged();
    Q_EMIT labelChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool LabeledPriceObject::operator ==(const LabeledPrice &b) const {
    return m_core == b;
}

void LabeledPriceObject::setClassType(quint32 classType) {
    LabeledPrice::LabeledPriceClassType result;
    switch(classType) {
    case TypeLabeledPrice:
        result = LabeledPrice::typeLabeledPrice;
        break;
    default:
        result = LabeledPrice::typeLabeledPrice;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 LabeledPriceObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case LabeledPrice::typeLabeledPrice:
        result = TypeLabeledPrice;
        break;
    default:
        result = TypeLabeledPrice;
        break;
    }

    return result;
}

void LabeledPriceObject::setCore(const LabeledPrice &core) {
    operator =(core);
}

LabeledPrice LabeledPriceObject::core() const {
    return m_core;
}

