// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "langpackdifferenceobject.h"

LangPackDifferenceObject::LangPackDifferenceObject(const LangPackDifference &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

LangPackDifferenceObject::LangPackDifferenceObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

LangPackDifferenceObject::~LangPackDifferenceObject() {
}

void LangPackDifferenceObject::setFromVersion(qint32 fromVersion) {
    if(m_core.fromVersion() == fromVersion) return;
    m_core.setFromVersion(fromVersion);
    Q_EMIT fromVersionChanged();
    Q_EMIT coreChanged();
}

qint32 LangPackDifferenceObject::fromVersion() const {
    return m_core.fromVersion();
}

void LangPackDifferenceObject::setLangCode(const QString &langCode) {
    if(m_core.langCode() == langCode) return;
    m_core.setLangCode(langCode);
    Q_EMIT langCodeChanged();
    Q_EMIT coreChanged();
}

QString LangPackDifferenceObject::langCode() const {
    return m_core.langCode();
}

void LangPackDifferenceObject::setStrings(const QList<LangPackString> &strings) {
    if(m_core.strings() == strings) return;
    m_core.setStrings(strings);
    Q_EMIT stringsChanged();
    Q_EMIT coreChanged();
}

QList<LangPackString> LangPackDifferenceObject::strings() const {
    return m_core.strings();
}

void LangPackDifferenceObject::setVersion(qint32 version) {
    if(m_core.version() == version) return;
    m_core.setVersion(version);
    Q_EMIT versionChanged();
    Q_EMIT coreChanged();
}

qint32 LangPackDifferenceObject::version() const {
    return m_core.version();
}

LangPackDifferenceObject &LangPackDifferenceObject::operator =(const LangPackDifference &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT fromVersionChanged();
    Q_EMIT langCodeChanged();
    Q_EMIT stringsChanged();
    Q_EMIT versionChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool LangPackDifferenceObject::operator ==(const LangPackDifference &b) const {
    return m_core == b;
}

void LangPackDifferenceObject::setClassType(quint32 classType) {
    LangPackDifference::LangPackDifferenceClassType result;
    switch(classType) {
    case TypeLangPackDifference:
        result = LangPackDifference::typeLangPackDifference;
        break;
    default:
        result = LangPackDifference::typeLangPackDifference;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 LangPackDifferenceObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case LangPackDifference::typeLangPackDifference:
        result = TypeLangPackDifference;
        break;
    default:
        result = TypeLangPackDifference;
        break;
    }

    return result;
}

void LangPackDifferenceObject::setCore(const LangPackDifference &core) {
    operator =(core);
}

LangPackDifference LangPackDifferenceObject::core() const {
    return m_core;
}

