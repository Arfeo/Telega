// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "langpacklanguageobject.h"

LangPackLanguageObject::LangPackLanguageObject(const LangPackLanguage &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

LangPackLanguageObject::LangPackLanguageObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

LangPackLanguageObject::~LangPackLanguageObject() {
}

void LangPackLanguageObject::setLangCode(const QString &langCode) {
    if(m_core.langCode() == langCode) return;
    m_core.setLangCode(langCode);
    Q_EMIT langCodeChanged();
    Q_EMIT coreChanged();
}

QString LangPackLanguageObject::langCode() const {
    return m_core.langCode();
}

void LangPackLanguageObject::setName(const QString &name) {
    if(m_core.name() == name) return;
    m_core.setName(name);
    Q_EMIT nameChanged();
    Q_EMIT coreChanged();
}

QString LangPackLanguageObject::name() const {
    return m_core.name();
}

void LangPackLanguageObject::setNativeName(const QString &nativeName) {
    if(m_core.nativeName() == nativeName) return;
    m_core.setNativeName(nativeName);
    Q_EMIT nativeNameChanged();
    Q_EMIT coreChanged();
}

QString LangPackLanguageObject::nativeName() const {
    return m_core.nativeName();
}

LangPackLanguageObject &LangPackLanguageObject::operator =(const LangPackLanguage &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT langCodeChanged();
    Q_EMIT nameChanged();
    Q_EMIT nativeNameChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool LangPackLanguageObject::operator ==(const LangPackLanguage &b) const {
    return m_core == b;
}

void LangPackLanguageObject::setClassType(quint32 classType) {
    LangPackLanguage::LangPackLanguageClassType result;
    switch(classType) {
    case TypeLangPackLanguage:
        result = LangPackLanguage::typeLangPackLanguage;
        break;
    default:
        result = LangPackLanguage::typeLangPackLanguage;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 LangPackLanguageObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case LangPackLanguage::typeLangPackLanguage:
        result = TypeLangPackLanguage;
        break;
    default:
        result = TypeLangPackLanguage;
        break;
    }

    return result;
}

void LangPackLanguageObject::setCore(const LangPackLanguage &core) {
    operator =(core);
}

LangPackLanguage LangPackLanguageObject::core() const {
    return m_core;
}

