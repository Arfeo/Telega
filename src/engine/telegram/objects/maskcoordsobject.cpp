// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "maskcoordsobject.h"

MaskCoordsObject::MaskCoordsObject(const MaskCoords &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

MaskCoordsObject::MaskCoordsObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

MaskCoordsObject::~MaskCoordsObject() {
}

void MaskCoordsObject::setN(qint32 n) {
    if(m_core.n() == n) return;
    m_core.setN(n);
    Q_EMIT nChanged();
    Q_EMIT coreChanged();
}

qint32 MaskCoordsObject::n() const {
    return m_core.n();
}

void MaskCoordsObject::setX(qreal x) {
    if(m_core.x() == x) return;
    m_core.setX(x);
    Q_EMIT xChanged();
    Q_EMIT coreChanged();
}

qreal MaskCoordsObject::x() const {
    return m_core.x();
}

void MaskCoordsObject::setY(qreal y) {
    if(m_core.y() == y) return;
    m_core.setY(y);
    Q_EMIT yChanged();
    Q_EMIT coreChanged();
}

qreal MaskCoordsObject::y() const {
    return m_core.y();
}

void MaskCoordsObject::setZoom(qreal zoom) {
    if(m_core.zoom() == zoom) return;
    m_core.setZoom(zoom);
    Q_EMIT zoomChanged();
    Q_EMIT coreChanged();
}

qreal MaskCoordsObject::zoom() const {
    return m_core.zoom();
}

MaskCoordsObject &MaskCoordsObject::operator =(const MaskCoords &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT nChanged();
    Q_EMIT xChanged();
    Q_EMIT yChanged();
    Q_EMIT zoomChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool MaskCoordsObject::operator ==(const MaskCoords &b) const {
    return m_core == b;
}

void MaskCoordsObject::setClassType(quint32 classType) {
    MaskCoords::MaskCoordsClassType result;
    switch(classType) {
    case TypeMaskCoords:
        result = MaskCoords::typeMaskCoords;
        break;
    default:
        result = MaskCoords::typeMaskCoords;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 MaskCoordsObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case MaskCoords::typeMaskCoords:
        result = TypeMaskCoords;
        break;
    default:
        result = TypeMaskCoords;
        break;
    }

    return result;
}

void MaskCoordsObject::setCore(const MaskCoords &core) {
    operator =(core);
}

MaskCoords MaskCoordsObject::core() const {
    return m_core;
}

