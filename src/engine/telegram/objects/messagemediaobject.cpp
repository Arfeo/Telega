// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "messagemediaobject.h"

MessageMediaObject::MessageMediaObject(const MessageMedia &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_document(0),
    m_game(0),
    m_geo(0),
    m_photo(0),
    m_photoWebDocument(0),
    m_webpage(0),
    m_core(core)
{
    m_document = new DocumentObject(m_core.document(), this);
    connect(m_document.data(), SIGNAL(coreChanged()), this, SLOT(coreDocumentChanged()));
    m_game = new GameObject(m_core.game(), this);
    connect(m_game.data(), SIGNAL(coreChanged()), this, SLOT(coreGameChanged()));
    m_geo = new GeoPointObject(m_core.geo(), this);
    connect(m_geo.data(), SIGNAL(coreChanged()), this, SLOT(coreGeoChanged()));
    m_photo = new PhotoObject(m_core.photo(), this);
    connect(m_photo.data(), SIGNAL(coreChanged()), this, SLOT(corePhotoChanged()));
    m_photoWebDocument = new WebDocumentObject(m_core.photoWebDocument(), this);
    connect(m_photoWebDocument.data(), SIGNAL(coreChanged()), this, SLOT(corePhotoWebDocumentChanged()));
    m_webpage = new WebPageObject(m_core.webpage(), this);
    connect(m_webpage.data(), SIGNAL(coreChanged()), this, SLOT(coreWebpageChanged()));
}

MessageMediaObject::MessageMediaObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_document(0),
    m_game(0),
    m_geo(0),
    m_photo(0),
    m_photoWebDocument(0),
    m_webpage(0),
    m_core()
{
    m_document = new DocumentObject(m_core.document(), this);
    connect(m_document.data(), SIGNAL(coreChanged()), this, SLOT(coreDocumentChanged()));
    m_game = new GameObject(m_core.game(), this);
    connect(m_game.data(), SIGNAL(coreChanged()), this, SLOT(coreGameChanged()));
    m_geo = new GeoPointObject(m_core.geo(), this);
    connect(m_geo.data(), SIGNAL(coreChanged()), this, SLOT(coreGeoChanged()));
    m_photo = new PhotoObject(m_core.photo(), this);
    connect(m_photo.data(), SIGNAL(coreChanged()), this, SLOT(corePhotoChanged()));
    m_photoWebDocument = new WebDocumentObject(m_core.photoWebDocument(), this);
    connect(m_photoWebDocument.data(), SIGNAL(coreChanged()), this, SLOT(corePhotoWebDocumentChanged()));
    m_webpage = new WebPageObject(m_core.webpage(), this);
    connect(m_webpage.data(), SIGNAL(coreChanged()), this, SLOT(coreWebpageChanged()));
}

MessageMediaObject::~MessageMediaObject() {
}

void MessageMediaObject::setAddress(const QString &address) {
    if(m_core.address() == address) return;
    m_core.setAddress(address);
    Q_EMIT addressChanged();
    Q_EMIT coreChanged();
}

QString MessageMediaObject::address() const {
    return m_core.address();
}

void MessageMediaObject::setCaption(const QString &caption) {
    if(m_core.caption() == caption) return;
    m_core.setCaption(caption);
    Q_EMIT captionChanged();
    Q_EMIT coreChanged();
}

QString MessageMediaObject::caption() const {
    return m_core.caption();
}

void MessageMediaObject::setCurrency(const QString &currency) {
    if(m_core.currency() == currency) return;
    m_core.setCurrency(currency);
    Q_EMIT currencyChanged();
    Q_EMIT coreChanged();
}

QString MessageMediaObject::currency() const {
    return m_core.currency();
}

void MessageMediaObject::setDescription(const QString &description) {
    if(m_core.description() == description) return;
    m_core.setDescription(description);
    Q_EMIT descriptionChanged();
    Q_EMIT coreChanged();
}

QString MessageMediaObject::description() const {
    return m_core.description();
}

void MessageMediaObject::setDocument(DocumentObject* document) {
    if(m_document == document) return;
    if(m_document) delete m_document;
    m_document = document;
    if(m_document) {
        m_document->setParent(this);
        m_core.setDocument(m_document->core());
        connect(m_document.data(), SIGNAL(coreChanged()), this, SLOT(coreDocumentChanged()));
    }
    Q_EMIT documentChanged();
    Q_EMIT coreChanged();
}

DocumentObject*  MessageMediaObject::document() const {
    return m_document;
}

void MessageMediaObject::setFirstName(const QString &firstName) {
    if(m_core.firstName() == firstName) return;
    m_core.setFirstName(firstName);
    Q_EMIT firstNameChanged();
    Q_EMIT coreChanged();
}

QString MessageMediaObject::firstName() const {
    return m_core.firstName();
}

void MessageMediaObject::setFlags(qint32 flags) {
    if(m_core.flags() == flags) return;
    m_core.setFlags(flags);
    Q_EMIT flagsChanged();
    Q_EMIT coreChanged();
}

qint32 MessageMediaObject::flags() const {
    return m_core.flags();
}

void MessageMediaObject::setGame(GameObject* game) {
    if(m_game == game) return;
    if(m_game) delete m_game;
    m_game = game;
    if(m_game) {
        m_game->setParent(this);
        m_core.setGame(m_game->core());
        connect(m_game.data(), SIGNAL(coreChanged()), this, SLOT(coreGameChanged()));
    }
    Q_EMIT gameChanged();
    Q_EMIT coreChanged();
}

GameObject*  MessageMediaObject::game() const {
    return m_game;
}

void MessageMediaObject::setGeo(GeoPointObject* geo) {
    if(m_geo == geo) return;
    if(m_geo) delete m_geo;
    m_geo = geo;
    if(m_geo) {
        m_geo->setParent(this);
        m_core.setGeo(m_geo->core());
        connect(m_geo.data(), SIGNAL(coreChanged()), this, SLOT(coreGeoChanged()));
    }
    Q_EMIT geoChanged();
    Q_EMIT coreChanged();
}

GeoPointObject*  MessageMediaObject::geo() const {
    return m_geo;
}

void MessageMediaObject::setLastName(const QString &lastName) {
    if(m_core.lastName() == lastName) return;
    m_core.setLastName(lastName);
    Q_EMIT lastNameChanged();
    Q_EMIT coreChanged();
}

QString MessageMediaObject::lastName() const {
    return m_core.lastName();
}

void MessageMediaObject::setPhoneNumber(const QString &phoneNumber) {
    if(m_core.phoneNumber() == phoneNumber) return;
    m_core.setPhoneNumber(phoneNumber);
    Q_EMIT phoneNumberChanged();
    Q_EMIT coreChanged();
}

QString MessageMediaObject::phoneNumber() const {
    return m_core.phoneNumber();
}

void MessageMediaObject::setPhoto(PhotoObject* photo) {
    if(m_photo == photo) return;
    if(m_photo) delete m_photo;
    m_photo = photo;
    if(m_photo) {
        m_photo->setParent(this);
        m_core.setPhoto(m_photo->core());
        connect(m_photo.data(), SIGNAL(coreChanged()), this, SLOT(corePhotoChanged()));
    }
    Q_EMIT photoChanged();
    Q_EMIT coreChanged();
}

PhotoObject*  MessageMediaObject::photo() const {
    return m_photo;
}

void MessageMediaObject::setPhotoWebDocument(WebDocumentObject* photoWebDocument) {
    if(m_photoWebDocument == photoWebDocument) return;
    if(m_photoWebDocument) delete m_photoWebDocument;
    m_photoWebDocument = photoWebDocument;
    if(m_photoWebDocument) {
        m_photoWebDocument->setParent(this);
        m_core.setPhotoWebDocument(m_photoWebDocument->core());
        connect(m_photoWebDocument.data(), SIGNAL(coreChanged()), this, SLOT(corePhotoWebDocumentChanged()));
    }
    Q_EMIT photoWebDocumentChanged();
    Q_EMIT coreChanged();
}

WebDocumentObject*  MessageMediaObject::photoWebDocument() const {
    return m_photoWebDocument;
}

void MessageMediaObject::setProvider(const QString &provider) {
    if(m_core.provider() == provider) return;
    m_core.setProvider(provider);
    Q_EMIT providerChanged();
    Q_EMIT coreChanged();
}

QString MessageMediaObject::provider() const {
    return m_core.provider();
}

void MessageMediaObject::setReceiptMsgId(qint32 receiptMsgId) {
    if(m_core.receiptMsgId() == receiptMsgId) return;
    m_core.setReceiptMsgId(receiptMsgId);
    Q_EMIT receiptMsgIdChanged();
    Q_EMIT coreChanged();
}

qint32 MessageMediaObject::receiptMsgId() const {
    return m_core.receiptMsgId();
}

void MessageMediaObject::setShippingAddressRequested(bool shippingAddressRequested) {
    if(m_core.shippingAddressRequested() == shippingAddressRequested) return;
    m_core.setShippingAddressRequested(shippingAddressRequested);
    Q_EMIT shippingAddressRequestedChanged();
    Q_EMIT coreChanged();
}

bool MessageMediaObject::shippingAddressRequested() const {
    return m_core.shippingAddressRequested();
}

void MessageMediaObject::setStartParam(const QString &startParam) {
    if(m_core.startParam() == startParam) return;
    m_core.setStartParam(startParam);
    Q_EMIT startParamChanged();
    Q_EMIT coreChanged();
}

QString MessageMediaObject::startParam() const {
    return m_core.startParam();
}

void MessageMediaObject::setTest(bool test) {
    if(m_core.test() == test) return;
    m_core.setTest(test);
    Q_EMIT testChanged();
    Q_EMIT coreChanged();
}

bool MessageMediaObject::test() const {
    return m_core.test();
}

void MessageMediaObject::setTitle(const QString &title) {
    if(m_core.title() == title) return;
    m_core.setTitle(title);
    Q_EMIT titleChanged();
    Q_EMIT coreChanged();
}

QString MessageMediaObject::title() const {
    return m_core.title();
}

void MessageMediaObject::setTotalAmount(qint64 totalAmount) {
    if(m_core.totalAmount() == totalAmount) return;
    m_core.setTotalAmount(totalAmount);
    Q_EMIT totalAmountChanged();
    Q_EMIT coreChanged();
}

qint64 MessageMediaObject::totalAmount() const {
    return m_core.totalAmount();
}

void MessageMediaObject::setUserId(qint32 userId) {
    if(m_core.userId() == userId) return;
    m_core.setUserId(userId);
    Q_EMIT userIdChanged();
    Q_EMIT coreChanged();
}

qint32 MessageMediaObject::userId() const {
    return m_core.userId();
}

void MessageMediaObject::setVenueId(const QString &venueId) {
    if(m_core.venueId() == venueId) return;
    m_core.setVenueId(venueId);
    Q_EMIT venueIdChanged();
    Q_EMIT coreChanged();
}

QString MessageMediaObject::venueId() const {
    return m_core.venueId();
}

void MessageMediaObject::setWebpage(WebPageObject* webpage) {
    if(m_webpage == webpage) return;
    if(m_webpage) delete m_webpage;
    m_webpage = webpage;
    if(m_webpage) {
        m_webpage->setParent(this);
        m_core.setWebpage(m_webpage->core());
        connect(m_webpage.data(), SIGNAL(coreChanged()), this, SLOT(coreWebpageChanged()));
    }
    Q_EMIT webpageChanged();
    Q_EMIT coreChanged();
}

WebPageObject*  MessageMediaObject::webpage() const {
    return m_webpage;
}

MessageMediaObject &MessageMediaObject::operator =(const MessageMedia &b) {
    if(m_core == b) return *this;
    m_core = b;
    m_document->setCore(b.document());
    m_game->setCore(b.game());
    m_geo->setCore(b.geo());
    m_photo->setCore(b.photo());
    m_photoWebDocument->setCore(b.photoWebDocument());
    m_webpage->setCore(b.webpage());

    Q_EMIT addressChanged();
    Q_EMIT captionChanged();
    Q_EMIT currencyChanged();
    Q_EMIT descriptionChanged();
    Q_EMIT documentChanged();
    Q_EMIT firstNameChanged();
    Q_EMIT flagsChanged();
    Q_EMIT gameChanged();
    Q_EMIT geoChanged();
    Q_EMIT lastNameChanged();
    Q_EMIT phoneNumberChanged();
    Q_EMIT photoChanged();
    Q_EMIT photoWebDocumentChanged();
    Q_EMIT providerChanged();
    Q_EMIT receiptMsgIdChanged();
    Q_EMIT shippingAddressRequestedChanged();
    Q_EMIT startParamChanged();
    Q_EMIT testChanged();
    Q_EMIT titleChanged();
    Q_EMIT totalAmountChanged();
    Q_EMIT userIdChanged();
    Q_EMIT venueIdChanged();
    Q_EMIT webpageChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool MessageMediaObject::operator ==(const MessageMedia &b) const {
    return m_core == b;
}

void MessageMediaObject::setClassType(quint32 classType) {
    MessageMedia::MessageMediaClassType result;
    switch(classType) {
    case TypeMessageMediaEmpty:
        result = MessageMedia::typeMessageMediaEmpty;
        break;
    case TypeMessageMediaPhoto:
        result = MessageMedia::typeMessageMediaPhoto;
        break;
    case TypeMessageMediaGeo:
        result = MessageMedia::typeMessageMediaGeo;
        break;
    case TypeMessageMediaContact:
        result = MessageMedia::typeMessageMediaContact;
        break;
    case TypeMessageMediaUnsupported:
        result = MessageMedia::typeMessageMediaUnsupported;
        break;
    case TypeMessageMediaDocument:
        result = MessageMedia::typeMessageMediaDocument;
        break;
    case TypeMessageMediaWebPage:
        result = MessageMedia::typeMessageMediaWebPage;
        break;
    case TypeMessageMediaVenue:
        result = MessageMedia::typeMessageMediaVenue;
        break;
    case TypeMessageMediaGame:
        result = MessageMedia::typeMessageMediaGame;
        break;
    case TypeMessageMediaInvoice:
        result = MessageMedia::typeMessageMediaInvoice;
        break;
    default:
        result = MessageMedia::typeMessageMediaEmpty;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 MessageMediaObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case MessageMedia::typeMessageMediaEmpty:
        result = TypeMessageMediaEmpty;
        break;
    case MessageMedia::typeMessageMediaPhoto:
        result = TypeMessageMediaPhoto;
        break;
    case MessageMedia::typeMessageMediaGeo:
        result = TypeMessageMediaGeo;
        break;
    case MessageMedia::typeMessageMediaContact:
        result = TypeMessageMediaContact;
        break;
    case MessageMedia::typeMessageMediaUnsupported:
        result = TypeMessageMediaUnsupported;
        break;
    case MessageMedia::typeMessageMediaDocument:
        result = TypeMessageMediaDocument;
        break;
    case MessageMedia::typeMessageMediaWebPage:
        result = TypeMessageMediaWebPage;
        break;
    case MessageMedia::typeMessageMediaVenue:
        result = TypeMessageMediaVenue;
        break;
    case MessageMedia::typeMessageMediaGame:
        result = TypeMessageMediaGame;
        break;
    case MessageMedia::typeMessageMediaInvoice:
        result = TypeMessageMediaInvoice;
        break;
    default:
        result = TypeMessageMediaEmpty;
        break;
    }

    return result;
}

void MessageMediaObject::setCore(const MessageMedia &core) {
    operator =(core);
}

MessageMedia MessageMediaObject::core() const {
    return m_core;
}

void MessageMediaObject::coreDocumentChanged() {
    if(m_core.document() == m_document->core()) return;
    m_core.setDocument(m_document->core());
    Q_EMIT documentChanged();
    Q_EMIT coreChanged();
}

void MessageMediaObject::coreGameChanged() {
    if(m_core.game() == m_game->core()) return;
    m_core.setGame(m_game->core());
    Q_EMIT gameChanged();
    Q_EMIT coreChanged();
}

void MessageMediaObject::coreGeoChanged() {
    if(m_core.geo() == m_geo->core()) return;
    m_core.setGeo(m_geo->core());
    Q_EMIT geoChanged();
    Q_EMIT coreChanged();
}

void MessageMediaObject::corePhotoChanged() {
    if(m_core.photo() == m_photo->core()) return;
    m_core.setPhoto(m_photo->core());
    Q_EMIT photoChanged();
    Q_EMIT coreChanged();
}

void MessageMediaObject::corePhotoWebDocumentChanged() {
    if(m_core.photoWebDocument() == m_photoWebDocument->core()) return;
    m_core.setPhotoWebDocument(m_photoWebDocument->core());
    Q_EMIT photoWebDocumentChanged();
    Q_EMIT coreChanged();
}

void MessageMediaObject::coreWebpageChanged() {
    if(m_core.webpage() == m_webpage->core()) return;
    m_core.setWebpage(m_webpage->core());
    Q_EMIT webpageChanged();
    Q_EMIT coreChanged();
}

