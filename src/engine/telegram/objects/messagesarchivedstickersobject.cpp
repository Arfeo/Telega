// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "messagesarchivedstickersobject.h"

MessagesArchivedStickersObject::MessagesArchivedStickersObject(const MessagesArchivedStickers &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

MessagesArchivedStickersObject::MessagesArchivedStickersObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

MessagesArchivedStickersObject::~MessagesArchivedStickersObject() {
}

void MessagesArchivedStickersObject::setCount(qint32 count) {
    if(m_core.count() == count) return;
    m_core.setCount(count);
    Q_EMIT countChanged();
    Q_EMIT coreChanged();
}

qint32 MessagesArchivedStickersObject::count() const {
    return m_core.count();
}

void MessagesArchivedStickersObject::setSets(const QList<StickerSetCovered> &sets) {
    if(m_core.sets() == sets) return;
    m_core.setSets(sets);
    Q_EMIT setsChanged();
    Q_EMIT coreChanged();
}

QList<StickerSetCovered> MessagesArchivedStickersObject::sets() const {
    return m_core.sets();
}

MessagesArchivedStickersObject &MessagesArchivedStickersObject::operator =(const MessagesArchivedStickers &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT countChanged();
    Q_EMIT setsChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool MessagesArchivedStickersObject::operator ==(const MessagesArchivedStickers &b) const {
    return m_core == b;
}

void MessagesArchivedStickersObject::setClassType(quint32 classType) {
    MessagesArchivedStickers::MessagesArchivedStickersClassType result;
    switch(classType) {
    case TypeMessagesArchivedStickers:
        result = MessagesArchivedStickers::typeMessagesArchivedStickers;
        break;
    default:
        result = MessagesArchivedStickers::typeMessagesArchivedStickers;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 MessagesArchivedStickersObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case MessagesArchivedStickers::typeMessagesArchivedStickers:
        result = TypeMessagesArchivedStickers;
        break;
    default:
        result = TypeMessagesArchivedStickers;
        break;
    }

    return result;
}

void MessagesArchivedStickersObject::setCore(const MessagesArchivedStickers &core) {
    operator =(core);
}

MessagesArchivedStickers MessagesArchivedStickersObject::core() const {
    return m_core;
}

