// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "messagesfeaturedstickersobject.h"

MessagesFeaturedStickersObject::MessagesFeaturedStickersObject(const MessagesFeaturedStickers &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

MessagesFeaturedStickersObject::MessagesFeaturedStickersObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

MessagesFeaturedStickersObject::~MessagesFeaturedStickersObject() {
}

void MessagesFeaturedStickersObject::setHash(qint32 hash) {
    if(m_core.hash() == hash) return;
    m_core.setHash(hash);
    Q_EMIT hashChanged();
    Q_EMIT coreChanged();
}

qint32 MessagesFeaturedStickersObject::hash() const {
    return m_core.hash();
}

void MessagesFeaturedStickersObject::setSets(const QList<StickerSetCovered> &sets) {
    if(m_core.sets() == sets) return;
    m_core.setSets(sets);
    Q_EMIT setsChanged();
    Q_EMIT coreChanged();
}

QList<StickerSetCovered> MessagesFeaturedStickersObject::sets() const {
    return m_core.sets();
}

void MessagesFeaturedStickersObject::setUnread(const QList<qint64> &unread) {
    if(m_core.unread() == unread) return;
    m_core.setUnread(unread);
    Q_EMIT unreadChanged();
    Q_EMIT coreChanged();
}

QList<qint64> MessagesFeaturedStickersObject::unread() const {
    return m_core.unread();
}

MessagesFeaturedStickersObject &MessagesFeaturedStickersObject::operator =(const MessagesFeaturedStickers &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT hashChanged();
    Q_EMIT setsChanged();
    Q_EMIT unreadChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool MessagesFeaturedStickersObject::operator ==(const MessagesFeaturedStickers &b) const {
    return m_core == b;
}

void MessagesFeaturedStickersObject::setClassType(quint32 classType) {
    MessagesFeaturedStickers::MessagesFeaturedStickersClassType result;
    switch(classType) {
    case TypeMessagesFeaturedStickersNotModified:
        result = MessagesFeaturedStickers::typeMessagesFeaturedStickersNotModified;
        break;
    case TypeMessagesFeaturedStickers:
        result = MessagesFeaturedStickers::typeMessagesFeaturedStickers;
        break;
    default:
        result = MessagesFeaturedStickers::typeMessagesFeaturedStickersNotModified;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 MessagesFeaturedStickersObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case MessagesFeaturedStickers::typeMessagesFeaturedStickersNotModified:
        result = TypeMessagesFeaturedStickersNotModified;
        break;
    case MessagesFeaturedStickers::typeMessagesFeaturedStickers:
        result = TypeMessagesFeaturedStickers;
        break;
    default:
        result = TypeMessagesFeaturedStickersNotModified;
        break;
    }

    return result;
}

void MessagesFeaturedStickersObject::setCore(const MessagesFeaturedStickers &core) {
    operator =(core);
}

MessagesFeaturedStickers MessagesFeaturedStickersObject::core() const {
    return m_core;
}

