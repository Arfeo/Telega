// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "messageshighscoresobject.h"

MessagesHighScoresObject::MessagesHighScoresObject(const MessagesHighScores &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

MessagesHighScoresObject::MessagesHighScoresObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

MessagesHighScoresObject::~MessagesHighScoresObject() {
}

void MessagesHighScoresObject::setScores(const QList<HighScore> &scores) {
    if(m_core.scores() == scores) return;
    m_core.setScores(scores);
    Q_EMIT scoresChanged();
    Q_EMIT coreChanged();
}

QList<HighScore> MessagesHighScoresObject::scores() const {
    return m_core.scores();
}

void MessagesHighScoresObject::setUsers(const QList<User> &users) {
    if(m_core.users() == users) return;
    m_core.setUsers(users);
    Q_EMIT usersChanged();
    Q_EMIT coreChanged();
}

QList<User> MessagesHighScoresObject::users() const {
    return m_core.users();
}

MessagesHighScoresObject &MessagesHighScoresObject::operator =(const MessagesHighScores &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT scoresChanged();
    Q_EMIT usersChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool MessagesHighScoresObject::operator ==(const MessagesHighScores &b) const {
    return m_core == b;
}

void MessagesHighScoresObject::setClassType(quint32 classType) {
    MessagesHighScores::MessagesHighScoresClassType result;
    switch(classType) {
    case TypeMessagesHighScores:
        result = MessagesHighScores::typeMessagesHighScores;
        break;
    default:
        result = MessagesHighScores::typeMessagesHighScores;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 MessagesHighScoresObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case MessagesHighScores::typeMessagesHighScores:
        result = TypeMessagesHighScores;
        break;
    default:
        result = TypeMessagesHighScores;
        break;
    }

    return result;
}

void MessagesHighScoresObject::setCore(const MessagesHighScores &core) {
    operator =(core);
}

MessagesHighScores MessagesHighScoresObject::core() const {
    return m_core;
}

