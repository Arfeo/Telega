// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "messagesrecentstickersobject.h"

MessagesRecentStickersObject::MessagesRecentStickersObject(const MessagesRecentStickers &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

MessagesRecentStickersObject::MessagesRecentStickersObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

MessagesRecentStickersObject::~MessagesRecentStickersObject() {
}

void MessagesRecentStickersObject::setHash(qint32 hash) {
    if(m_core.hash() == hash) return;
    m_core.setHash(hash);
    Q_EMIT hashChanged();
    Q_EMIT coreChanged();
}

qint32 MessagesRecentStickersObject::hash() const {
    return m_core.hash();
}

void MessagesRecentStickersObject::setStickers(const QList<Document> &stickers) {
    if(m_core.stickers() == stickers) return;
    m_core.setStickers(stickers);
    Q_EMIT stickersChanged();
    Q_EMIT coreChanged();
}

QList<Document> MessagesRecentStickersObject::stickers() const {
    return m_core.stickers();
}

MessagesRecentStickersObject &MessagesRecentStickersObject::operator =(const MessagesRecentStickers &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT hashChanged();
    Q_EMIT stickersChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool MessagesRecentStickersObject::operator ==(const MessagesRecentStickers &b) const {
    return m_core == b;
}

void MessagesRecentStickersObject::setClassType(quint32 classType) {
    MessagesRecentStickers::MessagesRecentStickersClassType result;
    switch(classType) {
    case TypeMessagesRecentStickersNotModified:
        result = MessagesRecentStickers::typeMessagesRecentStickersNotModified;
        break;
    case TypeMessagesRecentStickers:
        result = MessagesRecentStickers::typeMessagesRecentStickers;
        break;
    default:
        result = MessagesRecentStickers::typeMessagesRecentStickersNotModified;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 MessagesRecentStickersObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case MessagesRecentStickers::typeMessagesRecentStickersNotModified:
        result = TypeMessagesRecentStickersNotModified;
        break;
    case MessagesRecentStickers::typeMessagesRecentStickers:
        result = TypeMessagesRecentStickers;
        break;
    default:
        result = TypeMessagesRecentStickersNotModified;
        break;
    }

    return result;
}

void MessagesRecentStickersObject::setCore(const MessagesRecentStickers &core) {
    operator =(core);
}

MessagesRecentStickers MessagesRecentStickersObject::core() const {
    return m_core;
}

