// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "messagesstickersetinstallresultobject.h"

MessagesStickerSetInstallResultObject::MessagesStickerSetInstallResultObject(const MessagesStickerSetInstallResult &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

MessagesStickerSetInstallResultObject::MessagesStickerSetInstallResultObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

MessagesStickerSetInstallResultObject::~MessagesStickerSetInstallResultObject() {
}

void MessagesStickerSetInstallResultObject::setSets(const QList<StickerSetCovered> &sets) {
    if(m_core.sets() == sets) return;
    m_core.setSets(sets);
    Q_EMIT setsChanged();
    Q_EMIT coreChanged();
}

QList<StickerSetCovered> MessagesStickerSetInstallResultObject::sets() const {
    return m_core.sets();
}

MessagesStickerSetInstallResultObject &MessagesStickerSetInstallResultObject::operator =(const MessagesStickerSetInstallResult &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT setsChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool MessagesStickerSetInstallResultObject::operator ==(const MessagesStickerSetInstallResult &b) const {
    return m_core == b;
}

void MessagesStickerSetInstallResultObject::setClassType(quint32 classType) {
    MessagesStickerSetInstallResult::MessagesStickerSetInstallResultClassType result;
    switch(classType) {
    case TypeMessagesStickerSetInstallResultSuccess:
        result = MessagesStickerSetInstallResult::typeMessagesStickerSetInstallResultSuccess;
        break;
    case TypeMessagesStickerSetInstallResultArchive:
        result = MessagesStickerSetInstallResult::typeMessagesStickerSetInstallResultArchive;
        break;
    default:
        result = MessagesStickerSetInstallResult::typeMessagesStickerSetInstallResultSuccess;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 MessagesStickerSetInstallResultObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case MessagesStickerSetInstallResult::typeMessagesStickerSetInstallResultSuccess:
        result = TypeMessagesStickerSetInstallResultSuccess;
        break;
    case MessagesStickerSetInstallResult::typeMessagesStickerSetInstallResultArchive:
        result = TypeMessagesStickerSetInstallResultArchive;
        break;
    default:
        result = TypeMessagesStickerSetInstallResultSuccess;
        break;
    }

    return result;
}

void MessagesStickerSetInstallResultObject::setCore(const MessagesStickerSetInstallResult &core) {
    operator =(core);
}

MessagesStickerSetInstallResult MessagesStickerSetInstallResultObject::core() const {
    return m_core;
}

