// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "pageblockobject.h"

PageBlockObject::PageBlockObject(const PageBlock &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_authorRichText(0),
    m_caption(0),
    m_channel(0),
    m_cover(0),
    m_text(0),
    m_core(core)
{
    m_authorRichText = new RichTextObject(m_core.authorRichText(), this);
    connect(m_authorRichText.data(), SIGNAL(coreChanged()), this, SLOT(coreAuthorRichTextChanged()));
    m_caption = new RichTextObject(m_core.caption(), this);
    connect(m_caption.data(), SIGNAL(coreChanged()), this, SLOT(coreCaptionChanged()));
    m_channel = new ChatObject(m_core.channel(), this);
    connect(m_channel.data(), SIGNAL(coreChanged()), this, SLOT(coreChannelChanged()));
    m_cover = new PageBlockObject(m_core.cover(), this);
    connect(m_cover.data(), SIGNAL(coreChanged()), this, SLOT(coreCoverChanged()));
    m_text = new RichTextObject(m_core.text(), this);
    connect(m_text.data(), SIGNAL(coreChanged()), this, SLOT(coreTextChanged()));
}

PageBlockObject::PageBlockObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_authorRichText(0),
    m_caption(0),
    m_channel(0),
    m_cover(0),
    m_text(0),
    m_core()
{
    m_authorRichText = new RichTextObject(m_core.authorRichText(), this);
    connect(m_authorRichText.data(), SIGNAL(coreChanged()), this, SLOT(coreAuthorRichTextChanged()));
    m_caption = new RichTextObject(m_core.caption(), this);
    connect(m_caption.data(), SIGNAL(coreChanged()), this, SLOT(coreCaptionChanged()));
    m_channel = new ChatObject(m_core.channel(), this);
    connect(m_channel.data(), SIGNAL(coreChanged()), this, SLOT(coreChannelChanged()));
    m_cover = new PageBlockObject(m_core.cover(), this);
    connect(m_cover.data(), SIGNAL(coreChanged()), this, SLOT(coreCoverChanged()));
    m_text = new RichTextObject(m_core.text(), this);
    connect(m_text.data(), SIGNAL(coreChanged()), this, SLOT(coreTextChanged()));
}

PageBlockObject::~PageBlockObject() {
}

void PageBlockObject::setAllowScrolling(bool allowScrolling) {
    if(m_core.allowScrolling() == allowScrolling) return;
    m_core.setAllowScrolling(allowScrolling);
    Q_EMIT allowScrollingChanged();
    Q_EMIT coreChanged();
}

bool PageBlockObject::allowScrolling() const {
    return m_core.allowScrolling();
}

void PageBlockObject::setAudioId(qint64 audioId) {
    if(m_core.audioId() == audioId) return;
    m_core.setAudioId(audioId);
    Q_EMIT audioIdChanged();
    Q_EMIT coreChanged();
}

qint64 PageBlockObject::audioId() const {
    return m_core.audioId();
}

void PageBlockObject::setAuthorString(const QString &authorString) {
    if(m_core.authorString() == authorString) return;
    m_core.setAuthorString(authorString);
    Q_EMIT authorStringChanged();
    Q_EMIT coreChanged();
}

QString PageBlockObject::authorString() const {
    return m_core.authorString();
}

void PageBlockObject::setAuthorRichText(RichTextObject* authorRichText) {
    if(m_authorRichText == authorRichText) return;
    if(m_authorRichText) delete m_authorRichText;
    m_authorRichText = authorRichText;
    if(m_authorRichText) {
        m_authorRichText->setParent(this);
        m_core.setAuthorRichText(m_authorRichText->core());
        connect(m_authorRichText.data(), SIGNAL(coreChanged()), this, SLOT(coreAuthorRichTextChanged()));
    }
    Q_EMIT authorRichTextChanged();
    Q_EMIT coreChanged();
}

RichTextObject*  PageBlockObject::authorRichText() const {
    return m_authorRichText;
}

void PageBlockObject::setAuthorPhotoId(qint64 authorPhotoId) {
    if(m_core.authorPhotoId() == authorPhotoId) return;
    m_core.setAuthorPhotoId(authorPhotoId);
    Q_EMIT authorPhotoIdChanged();
    Q_EMIT coreChanged();
}

qint64 PageBlockObject::authorPhotoId() const {
    return m_core.authorPhotoId();
}

void PageBlockObject::setAutoplay(bool autoplay) {
    if(m_core.autoplay() == autoplay) return;
    m_core.setAutoplay(autoplay);
    Q_EMIT autoplayChanged();
    Q_EMIT coreChanged();
}

bool PageBlockObject::autoplay() const {
    return m_core.autoplay();
}

void PageBlockObject::setBlocks(const QList<PageBlock> &blocks) {
    if(m_core.blocks() == blocks) return;
    m_core.setBlocks(blocks);
    Q_EMIT blocksChanged();
    Q_EMIT coreChanged();
}

QList<PageBlock> PageBlockObject::blocks() const {
    return m_core.blocks();
}

void PageBlockObject::setCaption(RichTextObject* caption) {
    if(m_caption == caption) return;
    if(m_caption) delete m_caption;
    m_caption = caption;
    if(m_caption) {
        m_caption->setParent(this);
        m_core.setCaption(m_caption->core());
        connect(m_caption.data(), SIGNAL(coreChanged()), this, SLOT(coreCaptionChanged()));
    }
    Q_EMIT captionChanged();
    Q_EMIT coreChanged();
}

RichTextObject*  PageBlockObject::caption() const {
    return m_caption;
}

void PageBlockObject::setChannel(ChatObject* channel) {
    if(m_channel == channel) return;
    if(m_channel) delete m_channel;
    m_channel = channel;
    if(m_channel) {
        m_channel->setParent(this);
        m_core.setChannel(m_channel->core());
        connect(m_channel.data(), SIGNAL(coreChanged()), this, SLOT(coreChannelChanged()));
    }
    Q_EMIT channelChanged();
    Q_EMIT coreChanged();
}

ChatObject*  PageBlockObject::channel() const {
    return m_channel;
}

void PageBlockObject::setCover(PageBlockObject* cover) {
    if(m_cover == cover) return;
    if(m_cover) delete m_cover;
    m_cover = cover;
    if(m_cover) {
        m_cover->setParent(this);
        m_core.setCover(m_cover->core());
        connect(m_cover.data(), SIGNAL(coreChanged()), this, SLOT(coreCoverChanged()));
    }
    Q_EMIT coverChanged();
    Q_EMIT coreChanged();
}

PageBlockObject*  PageBlockObject::cover() const {
    return m_cover;
}

void PageBlockObject::setDate(qint32 date) {
    if(m_core.date() == date) return;
    m_core.setDate(date);
    Q_EMIT dateChanged();
    Q_EMIT coreChanged();
}

qint32 PageBlockObject::date() const {
    return m_core.date();
}

void PageBlockObject::setFlags(qint32 flags) {
    if(m_core.flags() == flags) return;
    m_core.setFlags(flags);
    Q_EMIT flagsChanged();
    Q_EMIT coreChanged();
}

qint32 PageBlockObject::flags() const {
    return m_core.flags();
}

void PageBlockObject::setFullWidth(bool fullWidth) {
    if(m_core.fullWidth() == fullWidth) return;
    m_core.setFullWidth(fullWidth);
    Q_EMIT fullWidthChanged();
    Q_EMIT coreChanged();
}

bool PageBlockObject::fullWidth() const {
    return m_core.fullWidth();
}

void PageBlockObject::setH(qint32 h) {
    if(m_core.h() == h) return;
    m_core.setH(h);
    Q_EMIT hChanged();
    Q_EMIT coreChanged();
}

qint32 PageBlockObject::h() const {
    return m_core.h();
}

void PageBlockObject::setHtml(const QString &html) {
    if(m_core.html() == html) return;
    m_core.setHtml(html);
    Q_EMIT htmlChanged();
    Q_EMIT coreChanged();
}

QString PageBlockObject::html() const {
    return m_core.html();
}

void PageBlockObject::setItemsVectorPageBlock(const QList<PageBlock> &itemsVectorPageBlock) {
    if(m_core.itemsVectorPageBlock() == itemsVectorPageBlock) return;
    m_core.setItemsVectorPageBlock(itemsVectorPageBlock);
    Q_EMIT itemsVectorPageBlockChanged();
    Q_EMIT coreChanged();
}

QList<PageBlock> PageBlockObject::itemsVectorPageBlock() const {
    return m_core.itemsVectorPageBlock();
}

void PageBlockObject::setItemsVectorRichText(const QList<RichText> &itemsVectorRichText) {
    if(m_core.itemsVectorRichText() == itemsVectorRichText) return;
    m_core.setItemsVectorRichText(itemsVectorRichText);
    Q_EMIT itemsVectorRichTextChanged();
    Q_EMIT coreChanged();
}

QList<RichText> PageBlockObject::itemsVectorRichText() const {
    return m_core.itemsVectorRichText();
}

void PageBlockObject::setLanguage(const QString &language) {
    if(m_core.language() == language) return;
    m_core.setLanguage(language);
    Q_EMIT languageChanged();
    Q_EMIT coreChanged();
}

QString PageBlockObject::language() const {
    return m_core.language();
}

void PageBlockObject::setLoop(bool loop) {
    if(m_core.loop() == loop) return;
    m_core.setLoop(loop);
    Q_EMIT loopChanged();
    Q_EMIT coreChanged();
}

bool PageBlockObject::loop() const {
    return m_core.loop();
}

void PageBlockObject::setName(const QString &name) {
    if(m_core.name() == name) return;
    m_core.setName(name);
    Q_EMIT nameChanged();
    Q_EMIT coreChanged();
}

QString PageBlockObject::name() const {
    return m_core.name();
}

void PageBlockObject::setOrdered(bool ordered) {
    if(m_core.ordered() == ordered) return;
    m_core.setOrdered(ordered);
    Q_EMIT orderedChanged();
    Q_EMIT coreChanged();
}

bool PageBlockObject::ordered() const {
    return m_core.ordered();
}

void PageBlockObject::setPhotoId(qint64 photoId) {
    if(m_core.photoId() == photoId) return;
    m_core.setPhotoId(photoId);
    Q_EMIT photoIdChanged();
    Q_EMIT coreChanged();
}

qint64 PageBlockObject::photoId() const {
    return m_core.photoId();
}

void PageBlockObject::setPosterPhotoId(qint64 posterPhotoId) {
    if(m_core.posterPhotoId() == posterPhotoId) return;
    m_core.setPosterPhotoId(posterPhotoId);
    Q_EMIT posterPhotoIdChanged();
    Q_EMIT coreChanged();
}

qint64 PageBlockObject::posterPhotoId() const {
    return m_core.posterPhotoId();
}

void PageBlockObject::setPublishedDate(qint32 publishedDate) {
    if(m_core.publishedDate() == publishedDate) return;
    m_core.setPublishedDate(publishedDate);
    Q_EMIT publishedDateChanged();
    Q_EMIT coreChanged();
}

qint32 PageBlockObject::publishedDate() const {
    return m_core.publishedDate();
}

void PageBlockObject::setText(RichTextObject* text) {
    if(m_text == text) return;
    if(m_text) delete m_text;
    m_text = text;
    if(m_text) {
        m_text->setParent(this);
        m_core.setText(m_text->core());
        connect(m_text.data(), SIGNAL(coreChanged()), this, SLOT(coreTextChanged()));
    }
    Q_EMIT textChanged();
    Q_EMIT coreChanged();
}

RichTextObject*  PageBlockObject::text() const {
    return m_text;
}

void PageBlockObject::setUrl(const QString &url) {
    if(m_core.url() == url) return;
    m_core.setUrl(url);
    Q_EMIT urlChanged();
    Q_EMIT coreChanged();
}

QString PageBlockObject::url() const {
    return m_core.url();
}

void PageBlockObject::setVideoId(qint64 videoId) {
    if(m_core.videoId() == videoId) return;
    m_core.setVideoId(videoId);
    Q_EMIT videoIdChanged();
    Q_EMIT coreChanged();
}

qint64 PageBlockObject::videoId() const {
    return m_core.videoId();
}

void PageBlockObject::setW(qint32 w) {
    if(m_core.w() == w) return;
    m_core.setW(w);
    Q_EMIT wChanged();
    Q_EMIT coreChanged();
}

qint32 PageBlockObject::w() const {
    return m_core.w();
}

void PageBlockObject::setWebpageId(qint64 webpageId) {
    if(m_core.webpageId() == webpageId) return;
    m_core.setWebpageId(webpageId);
    Q_EMIT webpageIdChanged();
    Q_EMIT coreChanged();
}

qint64 PageBlockObject::webpageId() const {
    return m_core.webpageId();
}

PageBlockObject &PageBlockObject::operator =(const PageBlock &b) {
    if(m_core == b) return *this;
    m_core = b;
    m_authorRichText->setCore(b.authorRichText());
    m_caption->setCore(b.caption());
    m_channel->setCore(b.channel());
    m_cover->setCore(b.cover());
    m_text->setCore(b.text());

    Q_EMIT allowScrollingChanged();
    Q_EMIT audioIdChanged();
    Q_EMIT authorStringChanged();
    Q_EMIT authorRichTextChanged();
    Q_EMIT authorPhotoIdChanged();
    Q_EMIT autoplayChanged();
    Q_EMIT blocksChanged();
    Q_EMIT captionChanged();
    Q_EMIT channelChanged();
    Q_EMIT coverChanged();
    Q_EMIT dateChanged();
    Q_EMIT flagsChanged();
    Q_EMIT fullWidthChanged();
    Q_EMIT hChanged();
    Q_EMIT htmlChanged();
    Q_EMIT itemsVectorPageBlockChanged();
    Q_EMIT itemsVectorRichTextChanged();
    Q_EMIT languageChanged();
    Q_EMIT loopChanged();
    Q_EMIT nameChanged();
    Q_EMIT orderedChanged();
    Q_EMIT photoIdChanged();
    Q_EMIT posterPhotoIdChanged();
    Q_EMIT publishedDateChanged();
    Q_EMIT textChanged();
    Q_EMIT urlChanged();
    Q_EMIT videoIdChanged();
    Q_EMIT wChanged();
    Q_EMIT webpageIdChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool PageBlockObject::operator ==(const PageBlock &b) const {
    return m_core == b;
}

void PageBlockObject::setClassType(quint32 classType) {
    PageBlock::PageBlockClassType result;
    switch(classType) {
    case TypePageBlockUnsupported:
        result = PageBlock::typePageBlockUnsupported;
        break;
    case TypePageBlockTitle:
        result = PageBlock::typePageBlockTitle;
        break;
    case TypePageBlockSubtitle:
        result = PageBlock::typePageBlockSubtitle;
        break;
    case TypePageBlockAuthorDate:
        result = PageBlock::typePageBlockAuthorDate;
        break;
    case TypePageBlockHeader:
        result = PageBlock::typePageBlockHeader;
        break;
    case TypePageBlockSubheader:
        result = PageBlock::typePageBlockSubheader;
        break;
    case TypePageBlockParagraph:
        result = PageBlock::typePageBlockParagraph;
        break;
    case TypePageBlockPreformatted:
        result = PageBlock::typePageBlockPreformatted;
        break;
    case TypePageBlockFooter:
        result = PageBlock::typePageBlockFooter;
        break;
    case TypePageBlockDivider:
        result = PageBlock::typePageBlockDivider;
        break;
    case TypePageBlockAnchor:
        result = PageBlock::typePageBlockAnchor;
        break;
    case TypePageBlockList:
        result = PageBlock::typePageBlockList;
        break;
    case TypePageBlockBlockquote:
        result = PageBlock::typePageBlockBlockquote;
        break;
    case TypePageBlockPullquote:
        result = PageBlock::typePageBlockPullquote;
        break;
    case TypePageBlockPhoto:
        result = PageBlock::typePageBlockPhoto;
        break;
    case TypePageBlockVideo:
        result = PageBlock::typePageBlockVideo;
        break;
    case TypePageBlockCover:
        result = PageBlock::typePageBlockCover;
        break;
    case TypePageBlockEmbed:
        result = PageBlock::typePageBlockEmbed;
        break;
    case TypePageBlockEmbedPost:
        result = PageBlock::typePageBlockEmbedPost;
        break;
    case TypePageBlockCollage:
        result = PageBlock::typePageBlockCollage;
        break;
    case TypePageBlockSlideshow:
        result = PageBlock::typePageBlockSlideshow;
        break;
    case TypePageBlockChannel:
        result = PageBlock::typePageBlockChannel;
        break;
    case TypePageBlockAudio:
        result = PageBlock::typePageBlockAudio;
        break;
    default:
        result = PageBlock::typePageBlockUnsupported;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 PageBlockObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case PageBlock::typePageBlockUnsupported:
        result = TypePageBlockUnsupported;
        break;
    case PageBlock::typePageBlockTitle:
        result = TypePageBlockTitle;
        break;
    case PageBlock::typePageBlockSubtitle:
        result = TypePageBlockSubtitle;
        break;
    case PageBlock::typePageBlockAuthorDate:
        result = TypePageBlockAuthorDate;
        break;
    case PageBlock::typePageBlockHeader:
        result = TypePageBlockHeader;
        break;
    case PageBlock::typePageBlockSubheader:
        result = TypePageBlockSubheader;
        break;
    case PageBlock::typePageBlockParagraph:
        result = TypePageBlockParagraph;
        break;
    case PageBlock::typePageBlockPreformatted:
        result = TypePageBlockPreformatted;
        break;
    case PageBlock::typePageBlockFooter:
        result = TypePageBlockFooter;
        break;
    case PageBlock::typePageBlockDivider:
        result = TypePageBlockDivider;
        break;
    case PageBlock::typePageBlockAnchor:
        result = TypePageBlockAnchor;
        break;
    case PageBlock::typePageBlockList:
        result = TypePageBlockList;
        break;
    case PageBlock::typePageBlockBlockquote:
        result = TypePageBlockBlockquote;
        break;
    case PageBlock::typePageBlockPullquote:
        result = TypePageBlockPullquote;
        break;
    case PageBlock::typePageBlockPhoto:
        result = TypePageBlockPhoto;
        break;
    case PageBlock::typePageBlockVideo:
        result = TypePageBlockVideo;
        break;
    case PageBlock::typePageBlockCover:
        result = TypePageBlockCover;
        break;
    case PageBlock::typePageBlockEmbed:
        result = TypePageBlockEmbed;
        break;
    case PageBlock::typePageBlockEmbedPost:
        result = TypePageBlockEmbedPost;
        break;
    case PageBlock::typePageBlockCollage:
        result = TypePageBlockCollage;
        break;
    case PageBlock::typePageBlockSlideshow:
        result = TypePageBlockSlideshow;
        break;
    case PageBlock::typePageBlockChannel:
        result = TypePageBlockChannel;
        break;
    case PageBlock::typePageBlockAudio:
        result = TypePageBlockAudio;
        break;
    default:
        result = TypePageBlockUnsupported;
        break;
    }

    return result;
}

void PageBlockObject::setCore(const PageBlock &core) {
    operator =(core);
}

PageBlock PageBlockObject::core() const {
    return m_core;
}

void PageBlockObject::coreAuthorRichTextChanged() {
    if(m_core.authorRichText() == m_authorRichText->core()) return;
    m_core.setAuthorRichText(m_authorRichText->core());
    Q_EMIT authorRichTextChanged();
    Q_EMIT coreChanged();
}

void PageBlockObject::coreCaptionChanged() {
    if(m_core.caption() == m_caption->core()) return;
    m_core.setCaption(m_caption->core());
    Q_EMIT captionChanged();
    Q_EMIT coreChanged();
}

void PageBlockObject::coreChannelChanged() {
    if(m_core.channel() == m_channel->core()) return;
    m_core.setChannel(m_channel->core());
    Q_EMIT channelChanged();
    Q_EMIT coreChanged();
}

void PageBlockObject::coreCoverChanged() {
    if(m_core.cover() == m_cover->core()) return;
    m_core.setCover(m_cover->core());
    Q_EMIT coverChanged();
    Q_EMIT coreChanged();
}

void PageBlockObject::coreTextChanged() {
    if(m_core.text() == m_text->core()) return;
    m_core.setText(m_text->core());
    Q_EMIT textChanged();
    Q_EMIT coreChanged();
}

