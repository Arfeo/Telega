// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "pageobject.h"

PageObject::PageObject(const Page &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

PageObject::PageObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

PageObject::~PageObject() {
}

void PageObject::setBlocks(const QList<PageBlock> &blocks) {
    if(m_core.blocks() == blocks) return;
    m_core.setBlocks(blocks);
    Q_EMIT blocksChanged();
    Q_EMIT coreChanged();
}

QList<PageBlock> PageObject::blocks() const {
    return m_core.blocks();
}

void PageObject::setDocuments(const QList<Document> &documents) {
    if(m_core.documents() == documents) return;
    m_core.setDocuments(documents);
    Q_EMIT documentsChanged();
    Q_EMIT coreChanged();
}

QList<Document> PageObject::documents() const {
    return m_core.documents();
}

void PageObject::setPhotos(const QList<Photo> &photos) {
    if(m_core.photos() == photos) return;
    m_core.setPhotos(photos);
    Q_EMIT photosChanged();
    Q_EMIT coreChanged();
}

QList<Photo> PageObject::photos() const {
    return m_core.photos();
}

PageObject &PageObject::operator =(const Page &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT blocksChanged();
    Q_EMIT documentsChanged();
    Q_EMIT photosChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool PageObject::operator ==(const Page &b) const {
    return m_core == b;
}

void PageObject::setClassType(quint32 classType) {
    Page::PageClassType result;
    switch(classType) {
    case TypePagePart:
        result = Page::typePagePart;
        break;
    case TypePageFull:
        result = Page::typePageFull;
        break;
    default:
        result = Page::typePagePart;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 PageObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case Page::typePagePart:
        result = TypePagePart;
        break;
    case Page::typePageFull:
        result = TypePageFull;
        break;
    default:
        result = TypePagePart;
        break;
    }

    return result;
}

void PageObject::setCore(const Page &core) {
    operator =(core);
}

Page PageObject::core() const {
    return m_core;
}

