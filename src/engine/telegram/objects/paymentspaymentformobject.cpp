// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "paymentspaymentformobject.h"

PaymentsPaymentFormObject::PaymentsPaymentFormObject(const PaymentsPaymentForm &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_invoice(0),
    m_nativeParams(0),
    m_savedCredentials(0),
    m_savedInfo(0),
    m_core(core)
{
    m_invoice = new InvoiceObject(m_core.invoice(), this);
    connect(m_invoice.data(), SIGNAL(coreChanged()), this, SLOT(coreInvoiceChanged()));
    m_nativeParams = new DataJSONObject(m_core.nativeParams(), this);
    connect(m_nativeParams.data(), SIGNAL(coreChanged()), this, SLOT(coreNativeParamsChanged()));
    m_savedCredentials = new PaymentSavedCredentialsObject(m_core.savedCredentials(), this);
    connect(m_savedCredentials.data(), SIGNAL(coreChanged()), this, SLOT(coreSavedCredentialsChanged()));
    m_savedInfo = new PaymentRequestedInfoObject(m_core.savedInfo(), this);
    connect(m_savedInfo.data(), SIGNAL(coreChanged()), this, SLOT(coreSavedInfoChanged()));
}

PaymentsPaymentFormObject::PaymentsPaymentFormObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_invoice(0),
    m_nativeParams(0),
    m_savedCredentials(0),
    m_savedInfo(0),
    m_core()
{
    m_invoice = new InvoiceObject(m_core.invoice(), this);
    connect(m_invoice.data(), SIGNAL(coreChanged()), this, SLOT(coreInvoiceChanged()));
    m_nativeParams = new DataJSONObject(m_core.nativeParams(), this);
    connect(m_nativeParams.data(), SIGNAL(coreChanged()), this, SLOT(coreNativeParamsChanged()));
    m_savedCredentials = new PaymentSavedCredentialsObject(m_core.savedCredentials(), this);
    connect(m_savedCredentials.data(), SIGNAL(coreChanged()), this, SLOT(coreSavedCredentialsChanged()));
    m_savedInfo = new PaymentRequestedInfoObject(m_core.savedInfo(), this);
    connect(m_savedInfo.data(), SIGNAL(coreChanged()), this, SLOT(coreSavedInfoChanged()));
}

PaymentsPaymentFormObject::~PaymentsPaymentFormObject() {
}

void PaymentsPaymentFormObject::setBotId(qint32 botId) {
    if(m_core.botId() == botId) return;
    m_core.setBotId(botId);
    Q_EMIT botIdChanged();
    Q_EMIT coreChanged();
}

qint32 PaymentsPaymentFormObject::botId() const {
    return m_core.botId();
}

void PaymentsPaymentFormObject::setCanSaveCredentials(bool canSaveCredentials) {
    if(m_core.canSaveCredentials() == canSaveCredentials) return;
    m_core.setCanSaveCredentials(canSaveCredentials);
    Q_EMIT canSaveCredentialsChanged();
    Q_EMIT coreChanged();
}

bool PaymentsPaymentFormObject::canSaveCredentials() const {
    return m_core.canSaveCredentials();
}

void PaymentsPaymentFormObject::setFlags(qint32 flags) {
    if(m_core.flags() == flags) return;
    m_core.setFlags(flags);
    Q_EMIT flagsChanged();
    Q_EMIT coreChanged();
}

qint32 PaymentsPaymentFormObject::flags() const {
    return m_core.flags();
}

void PaymentsPaymentFormObject::setInvoice(InvoiceObject* invoice) {
    if(m_invoice == invoice) return;
    if(m_invoice) delete m_invoice;
    m_invoice = invoice;
    if(m_invoice) {
        m_invoice->setParent(this);
        m_core.setInvoice(m_invoice->core());
        connect(m_invoice.data(), SIGNAL(coreChanged()), this, SLOT(coreInvoiceChanged()));
    }
    Q_EMIT invoiceChanged();
    Q_EMIT coreChanged();
}

InvoiceObject*  PaymentsPaymentFormObject::invoice() const {
    return m_invoice;
}

void PaymentsPaymentFormObject::setNativeParams(DataJSONObject* nativeParams) {
    if(m_nativeParams == nativeParams) return;
    if(m_nativeParams) delete m_nativeParams;
    m_nativeParams = nativeParams;
    if(m_nativeParams) {
        m_nativeParams->setParent(this);
        m_core.setNativeParams(m_nativeParams->core());
        connect(m_nativeParams.data(), SIGNAL(coreChanged()), this, SLOT(coreNativeParamsChanged()));
    }
    Q_EMIT nativeParamsChanged();
    Q_EMIT coreChanged();
}

DataJSONObject*  PaymentsPaymentFormObject::nativeParams() const {
    return m_nativeParams;
}

void PaymentsPaymentFormObject::setNativeProvider(const QString &nativeProvider) {
    if(m_core.nativeProvider() == nativeProvider) return;
    m_core.setNativeProvider(nativeProvider);
    Q_EMIT nativeProviderChanged();
    Q_EMIT coreChanged();
}

QString PaymentsPaymentFormObject::nativeProvider() const {
    return m_core.nativeProvider();
}

void PaymentsPaymentFormObject::setPasswordMissing(bool passwordMissing) {
    if(m_core.passwordMissing() == passwordMissing) return;
    m_core.setPasswordMissing(passwordMissing);
    Q_EMIT passwordMissingChanged();
    Q_EMIT coreChanged();
}

bool PaymentsPaymentFormObject::passwordMissing() const {
    return m_core.passwordMissing();
}

void PaymentsPaymentFormObject::setProviderId(qint32 providerId) {
    if(m_core.providerId() == providerId) return;
    m_core.setProviderId(providerId);
    Q_EMIT providerIdChanged();
    Q_EMIT coreChanged();
}

qint32 PaymentsPaymentFormObject::providerId() const {
    return m_core.providerId();
}

void PaymentsPaymentFormObject::setSavedCredentials(PaymentSavedCredentialsObject* savedCredentials) {
    if(m_savedCredentials == savedCredentials) return;
    if(m_savedCredentials) delete m_savedCredentials;
    m_savedCredentials = savedCredentials;
    if(m_savedCredentials) {
        m_savedCredentials->setParent(this);
        m_core.setSavedCredentials(m_savedCredentials->core());
        connect(m_savedCredentials.data(), SIGNAL(coreChanged()), this, SLOT(coreSavedCredentialsChanged()));
    }
    Q_EMIT savedCredentialsChanged();
    Q_EMIT coreChanged();
}

PaymentSavedCredentialsObject*  PaymentsPaymentFormObject::savedCredentials() const {
    return m_savedCredentials;
}

void PaymentsPaymentFormObject::setSavedInfo(PaymentRequestedInfoObject* savedInfo) {
    if(m_savedInfo == savedInfo) return;
    if(m_savedInfo) delete m_savedInfo;
    m_savedInfo = savedInfo;
    if(m_savedInfo) {
        m_savedInfo->setParent(this);
        m_core.setSavedInfo(m_savedInfo->core());
        connect(m_savedInfo.data(), SIGNAL(coreChanged()), this, SLOT(coreSavedInfoChanged()));
    }
    Q_EMIT savedInfoChanged();
    Q_EMIT coreChanged();
}

PaymentRequestedInfoObject*  PaymentsPaymentFormObject::savedInfo() const {
    return m_savedInfo;
}

void PaymentsPaymentFormObject::setUrl(const QString &url) {
    if(m_core.url() == url) return;
    m_core.setUrl(url);
    Q_EMIT urlChanged();
    Q_EMIT coreChanged();
}

QString PaymentsPaymentFormObject::url() const {
    return m_core.url();
}

void PaymentsPaymentFormObject::setUsers(const QList<User> &users) {
    if(m_core.users() == users) return;
    m_core.setUsers(users);
    Q_EMIT usersChanged();
    Q_EMIT coreChanged();
}

QList<User> PaymentsPaymentFormObject::users() const {
    return m_core.users();
}

PaymentsPaymentFormObject &PaymentsPaymentFormObject::operator =(const PaymentsPaymentForm &b) {
    if(m_core == b) return *this;
    m_core = b;
    m_invoice->setCore(b.invoice());
    m_nativeParams->setCore(b.nativeParams());
    m_savedCredentials->setCore(b.savedCredentials());
    m_savedInfo->setCore(b.savedInfo());

    Q_EMIT botIdChanged();
    Q_EMIT canSaveCredentialsChanged();
    Q_EMIT flagsChanged();
    Q_EMIT invoiceChanged();
    Q_EMIT nativeParamsChanged();
    Q_EMIT nativeProviderChanged();
    Q_EMIT passwordMissingChanged();
    Q_EMIT providerIdChanged();
    Q_EMIT savedCredentialsChanged();
    Q_EMIT savedInfoChanged();
    Q_EMIT urlChanged();
    Q_EMIT usersChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool PaymentsPaymentFormObject::operator ==(const PaymentsPaymentForm &b) const {
    return m_core == b;
}

void PaymentsPaymentFormObject::setClassType(quint32 classType) {
    PaymentsPaymentForm::PaymentsPaymentFormClassType result;
    switch(classType) {
    case TypePaymentsPaymentForm:
        result = PaymentsPaymentForm::typePaymentsPaymentForm;
        break;
    default:
        result = PaymentsPaymentForm::typePaymentsPaymentForm;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 PaymentsPaymentFormObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case PaymentsPaymentForm::typePaymentsPaymentForm:
        result = TypePaymentsPaymentForm;
        break;
    default:
        result = TypePaymentsPaymentForm;
        break;
    }

    return result;
}

void PaymentsPaymentFormObject::setCore(const PaymentsPaymentForm &core) {
    operator =(core);
}

PaymentsPaymentForm PaymentsPaymentFormObject::core() const {
    return m_core;
}

void PaymentsPaymentFormObject::coreInvoiceChanged() {
    if(m_core.invoice() == m_invoice->core()) return;
    m_core.setInvoice(m_invoice->core());
    Q_EMIT invoiceChanged();
    Q_EMIT coreChanged();
}

void PaymentsPaymentFormObject::coreNativeParamsChanged() {
    if(m_core.nativeParams() == m_nativeParams->core()) return;
    m_core.setNativeParams(m_nativeParams->core());
    Q_EMIT nativeParamsChanged();
    Q_EMIT coreChanged();
}

void PaymentsPaymentFormObject::coreSavedCredentialsChanged() {
    if(m_core.savedCredentials() == m_savedCredentials->core()) return;
    m_core.setSavedCredentials(m_savedCredentials->core());
    Q_EMIT savedCredentialsChanged();
    Q_EMIT coreChanged();
}

void PaymentsPaymentFormObject::coreSavedInfoChanged() {
    if(m_core.savedInfo() == m_savedInfo->core()) return;
    m_core.setSavedInfo(m_savedInfo->core());
    Q_EMIT savedInfoChanged();
    Q_EMIT coreChanged();
}

