// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "paymentspaymentreceiptobject.h"

PaymentsPaymentReceiptObject::PaymentsPaymentReceiptObject(const PaymentsPaymentReceipt &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_info(0),
    m_invoice(0),
    m_shipping(0),
    m_core(core)
{
    m_info = new PaymentRequestedInfoObject(m_core.info(), this);
    connect(m_info.data(), &PaymentRequestedInfoObject::coreChanged, this, &PaymentsPaymentReceiptObject::coreInfoChanged);
    m_invoice = new InvoiceObject(m_core.invoice(), this);
    connect(m_invoice.data(), &InvoiceObject::coreChanged, this, &PaymentsPaymentReceiptObject::coreInvoiceChanged);
    m_shipping = new ShippingOptionObject(m_core.shipping(), this);
    connect(m_shipping.data(), &ShippingOptionObject::coreChanged, this, &PaymentsPaymentReceiptObject::coreShippingChanged);
}

PaymentsPaymentReceiptObject::PaymentsPaymentReceiptObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_info(0),
    m_invoice(0),
    m_shipping(0),
    m_core()
{
    m_info = new PaymentRequestedInfoObject(m_core.info(), this);
    connect(m_info.data(), &PaymentRequestedInfoObject::coreChanged, this, &PaymentsPaymentReceiptObject::coreInfoChanged);
    m_invoice = new InvoiceObject(m_core.invoice(), this);
    connect(m_invoice.data(), &InvoiceObject::coreChanged, this, &PaymentsPaymentReceiptObject::coreInvoiceChanged);
    m_shipping = new ShippingOptionObject(m_core.shipping(), this);
    connect(m_shipping.data(), &ShippingOptionObject::coreChanged, this, &PaymentsPaymentReceiptObject::coreShippingChanged);
}

PaymentsPaymentReceiptObject::~PaymentsPaymentReceiptObject() {
}

void PaymentsPaymentReceiptObject::setBotId(qint32 botId) {
    if(m_core.botId() == botId) return;
    m_core.setBotId(botId);
    Q_EMIT botIdChanged();
    Q_EMIT coreChanged();
}

qint32 PaymentsPaymentReceiptObject::botId() const {
    return m_core.botId();
}

void PaymentsPaymentReceiptObject::setCredentialsTitle(const QString &credentialsTitle) {
    if(m_core.credentialsTitle() == credentialsTitle) return;
    m_core.setCredentialsTitle(credentialsTitle);
    Q_EMIT credentialsTitleChanged();
    Q_EMIT coreChanged();
}

QString PaymentsPaymentReceiptObject::credentialsTitle() const {
    return m_core.credentialsTitle();
}

void PaymentsPaymentReceiptObject::setCurrency(const QString &currency) {
    if(m_core.currency() == currency) return;
    m_core.setCurrency(currency);
    Q_EMIT currencyChanged();
    Q_EMIT coreChanged();
}

QString PaymentsPaymentReceiptObject::currency() const {
    return m_core.currency();
}

void PaymentsPaymentReceiptObject::setDate(qint32 date) {
    if(m_core.date() == date) return;
    m_core.setDate(date);
    Q_EMIT dateChanged();
    Q_EMIT coreChanged();
}

qint32 PaymentsPaymentReceiptObject::date() const {
    return m_core.date();
}

void PaymentsPaymentReceiptObject::setFlags(qint32 flags) {
    if(m_core.flags() == flags) return;
    m_core.setFlags(flags);
    Q_EMIT flagsChanged();
    Q_EMIT coreChanged();
}

qint32 PaymentsPaymentReceiptObject::flags() const {
    return m_core.flags();
}

void PaymentsPaymentReceiptObject::setInfo(PaymentRequestedInfoObject* info) {
    if(m_info == info) return;
    if(m_info) delete m_info;
    m_info = info;
    if(m_info) {
        m_info->setParent(this);
        m_core.setInfo(m_info->core());
        connect(m_info.data(), &PaymentRequestedInfoObject::coreChanged, this, &PaymentsPaymentReceiptObject::coreInfoChanged);
    }
    Q_EMIT infoChanged();
    Q_EMIT coreChanged();
}

PaymentRequestedInfoObject*  PaymentsPaymentReceiptObject::info() const {
    return m_info;
}

void PaymentsPaymentReceiptObject::setInvoice(InvoiceObject* invoice) {
    if(m_invoice == invoice) return;
    if(m_invoice) delete m_invoice;
    m_invoice = invoice;
    if(m_invoice) {
        m_invoice->setParent(this);
        m_core.setInvoice(m_invoice->core());
        connect(m_invoice.data(), &InvoiceObject::coreChanged, this, &PaymentsPaymentReceiptObject::coreInvoiceChanged);
    }
    Q_EMIT invoiceChanged();
    Q_EMIT coreChanged();
}

InvoiceObject*  PaymentsPaymentReceiptObject::invoice() const {
    return m_invoice;
}

void PaymentsPaymentReceiptObject::setProviderId(qint32 providerId) {
    if(m_core.providerId() == providerId) return;
    m_core.setProviderId(providerId);
    Q_EMIT providerIdChanged();
    Q_EMIT coreChanged();
}

qint32 PaymentsPaymentReceiptObject::providerId() const {
    return m_core.providerId();
}

void PaymentsPaymentReceiptObject::setShipping(ShippingOptionObject* shipping) {
    if(m_shipping == shipping) return;
    if(m_shipping) delete m_shipping;
    m_shipping = shipping;
    if(m_shipping) {
        m_shipping->setParent(this);
        m_core.setShipping(m_shipping->core());
        connect(m_shipping.data(), &ShippingOptionObject::coreChanged, this, &PaymentsPaymentReceiptObject::coreShippingChanged);
    }
    Q_EMIT shippingChanged();
    Q_EMIT coreChanged();
}

ShippingOptionObject*  PaymentsPaymentReceiptObject::shipping() const {
    return m_shipping;
}

void PaymentsPaymentReceiptObject::setTotalAmount(qint64 totalAmount) {
    if(m_core.totalAmount() == totalAmount) return;
    m_core.setTotalAmount(totalAmount);
    Q_EMIT totalAmountChanged();
    Q_EMIT coreChanged();
}

qint64 PaymentsPaymentReceiptObject::totalAmount() const {
    return m_core.totalAmount();
}

void PaymentsPaymentReceiptObject::setUsers(const QList<User> &users) {
    if(m_core.users() == users) return;
    m_core.setUsers(users);
    Q_EMIT usersChanged();
    Q_EMIT coreChanged();
}

QList<User> PaymentsPaymentReceiptObject::users() const {
    return m_core.users();
}

PaymentsPaymentReceiptObject &PaymentsPaymentReceiptObject::operator =(const PaymentsPaymentReceipt &b) {
    if(m_core == b) return *this;
    m_core = b;
    m_info->setCore(b.info());
    m_invoice->setCore(b.invoice());
    m_shipping->setCore(b.shipping());

    Q_EMIT botIdChanged();
    Q_EMIT credentialsTitleChanged();
    Q_EMIT currencyChanged();
    Q_EMIT dateChanged();
    Q_EMIT flagsChanged();
    Q_EMIT infoChanged();
    Q_EMIT invoiceChanged();
    Q_EMIT providerIdChanged();
    Q_EMIT shippingChanged();
    Q_EMIT totalAmountChanged();
    Q_EMIT usersChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool PaymentsPaymentReceiptObject::operator ==(const PaymentsPaymentReceipt &b) const {
    return m_core == b;
}

void PaymentsPaymentReceiptObject::setClassType(quint32 classType) {
    PaymentsPaymentReceipt::PaymentsPaymentReceiptClassType result;
    switch(classType) {
    case TypePaymentsPaymentReceipt:
        result = PaymentsPaymentReceipt::typePaymentsPaymentReceipt;
        break;
    default:
        result = PaymentsPaymentReceipt::typePaymentsPaymentReceipt;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 PaymentsPaymentReceiptObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case PaymentsPaymentReceipt::typePaymentsPaymentReceipt:
        result = TypePaymentsPaymentReceipt;
        break;
    default:
        result = TypePaymentsPaymentReceipt;
        break;
    }

    return result;
}

void PaymentsPaymentReceiptObject::setCore(const PaymentsPaymentReceipt &core) {
    operator =(core);
}

PaymentsPaymentReceipt PaymentsPaymentReceiptObject::core() const {
    return m_core;
}

void PaymentsPaymentReceiptObject::coreInfoChanged() {
    if(m_core.info() == m_info->core()) return;
    m_core.setInfo(m_info->core());
    Q_EMIT infoChanged();
    Q_EMIT coreChanged();
}

void PaymentsPaymentReceiptObject::coreInvoiceChanged() {
    if(m_core.invoice() == m_invoice->core()) return;
    m_core.setInvoice(m_invoice->core());
    Q_EMIT invoiceChanged();
    Q_EMIT coreChanged();
}

void PaymentsPaymentReceiptObject::coreShippingChanged() {
    if(m_core.shipping() == m_shipping->core()) return;
    m_core.setShipping(m_shipping->core());
    Q_EMIT shippingChanged();
    Q_EMIT coreChanged();
}

