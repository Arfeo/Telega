// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "paymentspaymentresultobject.h"

PaymentsPaymentResultObject::PaymentsPaymentResultObject(const PaymentsPaymentResult &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_updates(0),
    m_core(core)
{
    m_updates = new UpdatesTypeObject(m_core.updates(), this);
    connect(m_updates.data(), SIGNAL(coreChanged()), this, SLOT(coreUpdatesChanged()));
}

PaymentsPaymentResultObject::PaymentsPaymentResultObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_updates(0),
    m_core()
{
    m_updates = new UpdatesTypeObject(m_core.updates(), this);
    connect(m_updates.data(), SIGNAL(coreChanged()), this, SLOT(coreUpdatesChanged()));
}

PaymentsPaymentResultObject::~PaymentsPaymentResultObject() {
}

void PaymentsPaymentResultObject::setUpdates(UpdatesTypeObject* updates) {
    if(m_updates == updates) return;
    if(m_updates) delete m_updates;
    m_updates = updates;
    if(m_updates) {
        m_updates->setParent(this);
        m_core.setUpdates(m_updates->core());
        connect(m_updates.data(), SIGNAL(coreChanged()), this, SLOT(coreUpdatesChanged()));
    }
    Q_EMIT updatesChanged();
    Q_EMIT coreChanged();
}

UpdatesTypeObject*  PaymentsPaymentResultObject::updates() const {
    return m_updates;
}

void PaymentsPaymentResultObject::setUrl(const QString &url) {
    if(m_core.url() == url) return;
    m_core.setUrl(url);
    Q_EMIT urlChanged();
    Q_EMIT coreChanged();
}

QString PaymentsPaymentResultObject::url() const {
    return m_core.url();
}

PaymentsPaymentResultObject &PaymentsPaymentResultObject::operator =(const PaymentsPaymentResult &b) {
    if(m_core == b) return *this;
    m_core = b;
    m_updates->setCore(b.updates());

    Q_EMIT updatesChanged();
    Q_EMIT urlChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool PaymentsPaymentResultObject::operator ==(const PaymentsPaymentResult &b) const {
    return m_core == b;
}

void PaymentsPaymentResultObject::setClassType(quint32 classType) {
    PaymentsPaymentResult::PaymentsPaymentResultClassType result;
    switch(classType) {
    case TypePaymentsPaymentResult:
        result = PaymentsPaymentResult::typePaymentsPaymentResult;
        break;
    case TypePaymentsPaymentVerficationNeeded:
        result = PaymentsPaymentResult::typePaymentsPaymentVerficationNeeded;
        break;
    default:
        result = PaymentsPaymentResult::typePaymentsPaymentResult;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 PaymentsPaymentResultObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case PaymentsPaymentResult::typePaymentsPaymentResult:
        result = TypePaymentsPaymentResult;
        break;
    case PaymentsPaymentResult::typePaymentsPaymentVerficationNeeded:
        result = TypePaymentsPaymentVerficationNeeded;
        break;
    default:
        result = TypePaymentsPaymentResult;
        break;
    }

    return result;
}

void PaymentsPaymentResultObject::setCore(const PaymentsPaymentResult &core) {
    operator =(core);
}

PaymentsPaymentResult PaymentsPaymentResultObject::core() const {
    return m_core;
}

void PaymentsPaymentResultObject::coreUpdatesChanged() {
    if(m_core.updates() == m_updates->core()) return;
    m_core.setUpdates(m_updates->core());
    Q_EMIT updatesChanged();
    Q_EMIT coreChanged();
}

