// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "paymentssavedinfoobject.h"

PaymentsSavedInfoObject::PaymentsSavedInfoObject(const PaymentsSavedInfo &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_savedInfo(0),
    m_core(core)
{
    m_savedInfo = new PaymentRequestedInfoObject(m_core.savedInfo(), this);
    connect(m_savedInfo.data(), &PaymentRequestedInfoObject::coreChanged, this, &PaymentsSavedInfoObject::coreSavedInfoChanged);
}

PaymentsSavedInfoObject::PaymentsSavedInfoObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_savedInfo(0),
    m_core()
{
    m_savedInfo = new PaymentRequestedInfoObject(m_core.savedInfo(), this);
    connect(m_savedInfo.data(), &PaymentRequestedInfoObject::coreChanged, this, &PaymentsSavedInfoObject::coreSavedInfoChanged);
}

PaymentsSavedInfoObject::~PaymentsSavedInfoObject() {
}

void PaymentsSavedInfoObject::setFlags(qint32 flags) {
    if(m_core.flags() == flags) return;
    m_core.setFlags(flags);
    Q_EMIT flagsChanged();
    Q_EMIT coreChanged();
}

qint32 PaymentsSavedInfoObject::flags() const {
    return m_core.flags();
}

void PaymentsSavedInfoObject::setHasSavedCredentials(bool hasSavedCredentials) {
    if(m_core.hasSavedCredentials() == hasSavedCredentials) return;
    m_core.setHasSavedCredentials(hasSavedCredentials);
    Q_EMIT hasSavedCredentialsChanged();
    Q_EMIT coreChanged();
}

bool PaymentsSavedInfoObject::hasSavedCredentials() const {
    return m_core.hasSavedCredentials();
}

void PaymentsSavedInfoObject::setSavedInfo(PaymentRequestedInfoObject* savedInfo) {
    if(m_savedInfo == savedInfo) return;
    if(m_savedInfo) delete m_savedInfo;
    m_savedInfo = savedInfo;
    if(m_savedInfo) {
        m_savedInfo->setParent(this);
        m_core.setSavedInfo(m_savedInfo->core());
        connect(m_savedInfo.data(), &PaymentRequestedInfoObject::coreChanged, this, &PaymentsSavedInfoObject::coreSavedInfoChanged);
    }
    Q_EMIT savedInfoChanged();
    Q_EMIT coreChanged();
}

PaymentRequestedInfoObject*  PaymentsSavedInfoObject::savedInfo() const {
    return m_savedInfo;
}

PaymentsSavedInfoObject &PaymentsSavedInfoObject::operator =(const PaymentsSavedInfo &b) {
    if(m_core == b) return *this;
    m_core = b;
    m_savedInfo->setCore(b.savedInfo());

    Q_EMIT flagsChanged();
    Q_EMIT hasSavedCredentialsChanged();
    Q_EMIT savedInfoChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool PaymentsSavedInfoObject::operator ==(const PaymentsSavedInfo &b) const {
    return m_core == b;
}

void PaymentsSavedInfoObject::setClassType(quint32 classType) {
    PaymentsSavedInfo::PaymentsSavedInfoClassType result;
    switch(classType) {
    case TypePaymentsSavedInfo:
        result = PaymentsSavedInfo::typePaymentsSavedInfo;
        break;
    default:
        result = PaymentsSavedInfo::typePaymentsSavedInfo;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 PaymentsSavedInfoObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case PaymentsSavedInfo::typePaymentsSavedInfo:
        result = TypePaymentsSavedInfo;
        break;
    default:
        result = TypePaymentsSavedInfo;
        break;
    }

    return result;
}

void PaymentsSavedInfoObject::setCore(const PaymentsSavedInfo &core) {
    operator =(core);
}

PaymentsSavedInfo PaymentsSavedInfoObject::core() const {
    return m_core;
}

void PaymentsSavedInfoObject::coreSavedInfoChanged() {
    if(m_core.savedInfo() == m_savedInfo->core()) return;
    m_core.setSavedInfo(m_savedInfo->core());
    Q_EMIT savedInfoChanged();
    Q_EMIT coreChanged();
}

