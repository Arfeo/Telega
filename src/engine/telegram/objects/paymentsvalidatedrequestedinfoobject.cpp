// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "paymentsvalidatedrequestedinfoobject.h"

PaymentsValidatedRequestedInfoObject::PaymentsValidatedRequestedInfoObject(const PaymentsValidatedRequestedInfo &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

PaymentsValidatedRequestedInfoObject::PaymentsValidatedRequestedInfoObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

PaymentsValidatedRequestedInfoObject::~PaymentsValidatedRequestedInfoObject() {
}

void PaymentsValidatedRequestedInfoObject::setFlags(qint32 flags) {
    if(m_core.flags() == flags) return;
    m_core.setFlags(flags);
    Q_EMIT flagsChanged();
    Q_EMIT coreChanged();
}

qint32 PaymentsValidatedRequestedInfoObject::flags() const {
    return m_core.flags();
}

void PaymentsValidatedRequestedInfoObject::setId(const QString &id) {
    if(m_core.id() == id) return;
    m_core.setId(id);
    Q_EMIT idChanged();
    Q_EMIT coreChanged();
}

QString PaymentsValidatedRequestedInfoObject::id() const {
    return m_core.id();
}

void PaymentsValidatedRequestedInfoObject::setShippingOptions(const QList<ShippingOption> &shippingOptions) {
    if(m_core.shippingOptions() == shippingOptions) return;
    m_core.setShippingOptions(shippingOptions);
    Q_EMIT shippingOptionsChanged();
    Q_EMIT coreChanged();
}

QList<ShippingOption> PaymentsValidatedRequestedInfoObject::shippingOptions() const {
    return m_core.shippingOptions();
}

PaymentsValidatedRequestedInfoObject &PaymentsValidatedRequestedInfoObject::operator =(const PaymentsValidatedRequestedInfo &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT flagsChanged();
    Q_EMIT idChanged();
    Q_EMIT shippingOptionsChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool PaymentsValidatedRequestedInfoObject::operator ==(const PaymentsValidatedRequestedInfo &b) const {
    return m_core == b;
}

void PaymentsValidatedRequestedInfoObject::setClassType(quint32 classType) {
    PaymentsValidatedRequestedInfo::PaymentsValidatedRequestedInfoClassType result;
    switch(classType) {
    case TypePaymentsValidatedRequestedInfo:
        result = PaymentsValidatedRequestedInfo::typePaymentsValidatedRequestedInfo;
        break;
    default:
        result = PaymentsValidatedRequestedInfo::typePaymentsValidatedRequestedInfo;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 PaymentsValidatedRequestedInfoObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case PaymentsValidatedRequestedInfo::typePaymentsValidatedRequestedInfo:
        result = TypePaymentsValidatedRequestedInfo;
        break;
    default:
        result = TypePaymentsValidatedRequestedInfo;
        break;
    }

    return result;
}

void PaymentsValidatedRequestedInfoObject::setCore(const PaymentsValidatedRequestedInfo &core) {
    operator =(core);
}

PaymentsValidatedRequestedInfo PaymentsValidatedRequestedInfoObject::core() const {
    return m_core;
}

