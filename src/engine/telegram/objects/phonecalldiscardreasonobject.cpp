// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "phonecalldiscardreasonobject.h"

PhoneCallDiscardReasonObject::PhoneCallDiscardReasonObject(const PhoneCallDiscardReason &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

PhoneCallDiscardReasonObject::PhoneCallDiscardReasonObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

PhoneCallDiscardReasonObject::~PhoneCallDiscardReasonObject() {
}

PhoneCallDiscardReasonObject &PhoneCallDiscardReasonObject::operator =(const PhoneCallDiscardReason &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT coreChanged();
    return *this;
}

bool PhoneCallDiscardReasonObject::operator ==(const PhoneCallDiscardReason &b) const {
    return m_core == b;
}

void PhoneCallDiscardReasonObject::setClassType(quint32 classType) {
    PhoneCallDiscardReason::PhoneCallDiscardReasonClassType result;
    switch(classType) {
    case TypePhoneCallDiscardReasonMissed:
        result = PhoneCallDiscardReason::typePhoneCallDiscardReasonMissed;
        break;
    case TypePhoneCallDiscardReasonDisconnect:
        result = PhoneCallDiscardReason::typePhoneCallDiscardReasonDisconnect;
        break;
    case TypePhoneCallDiscardReasonHangup:
        result = PhoneCallDiscardReason::typePhoneCallDiscardReasonHangup;
        break;
    case TypePhoneCallDiscardReasonBusy:
        result = PhoneCallDiscardReason::typePhoneCallDiscardReasonBusy;
        break;
    default:
        result = PhoneCallDiscardReason::typePhoneCallDiscardReasonMissed;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 PhoneCallDiscardReasonObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case PhoneCallDiscardReason::typePhoneCallDiscardReasonMissed:
        result = TypePhoneCallDiscardReasonMissed;
        break;
    case PhoneCallDiscardReason::typePhoneCallDiscardReasonDisconnect:
        result = TypePhoneCallDiscardReasonDisconnect;
        break;
    case PhoneCallDiscardReason::typePhoneCallDiscardReasonHangup:
        result = TypePhoneCallDiscardReasonHangup;
        break;
    case PhoneCallDiscardReason::typePhoneCallDiscardReasonBusy:
        result = TypePhoneCallDiscardReasonBusy;
        break;
    default:
        result = TypePhoneCallDiscardReasonMissed;
        break;
    }

    return result;
}

void PhoneCallDiscardReasonObject::setCore(const PhoneCallDiscardReason &core) {
    operator =(core);
}

PhoneCallDiscardReason PhoneCallDiscardReasonObject::core() const {
    return m_core;
}

