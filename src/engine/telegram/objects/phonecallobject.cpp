// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "phonecallobject.h"

PhoneCallObject::PhoneCallObject(const PhoneCall &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_connection(0),
    m_protocol(0),
    m_reason(0),
    m_core(core)
{
    m_connection = new PhoneConnectionObject(m_core.connection(), this);
    connect(m_connection.data(), SIGNAL(coreChanged()), this, SLOT(coreConnectionChanged()));
    m_protocol = new PhoneCallProtocolObject(m_core.protocol(), this);
    connect(m_protocol.data(), SIGNAL(coreChanged()), this, SLOT(coreProtocolChanged()));
    m_reason = new PhoneCallDiscardReasonObject(m_core.reason(), this);
    connect(m_reason.data(), SIGNAL(coreChanged()), this, SLOT(coreReasonChanged()));
}

PhoneCallObject::PhoneCallObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_connection(0),
    m_protocol(0),
    m_reason(0),
    m_core()
{
    m_connection = new PhoneConnectionObject(m_core.connection(), this);
    connect(m_connection.data(), SIGNAL(coreChanged()), this, SLOT(coreConnectionChanged()));
    m_protocol = new PhoneCallProtocolObject(m_core.protocol(), this);
    connect(m_protocol.data(), SIGNAL(coreChanged()), this, SLOT(coreProtocolChanged()));
    m_reason = new PhoneCallDiscardReasonObject(m_core.reason(), this);
    connect(m_reason.data(), SIGNAL(coreChanged()), this, SLOT(coreReasonChanged()));
}

PhoneCallObject::~PhoneCallObject() {
}

void PhoneCallObject::setAccessHash(qint64 accessHash) {
    if(m_core.accessHash() == accessHash) return;
    m_core.setAccessHash(accessHash);
    Q_EMIT accessHashChanged();
    Q_EMIT coreChanged();
}

qint64 PhoneCallObject::accessHash() const {
    return m_core.accessHash();
}

void PhoneCallObject::setAdminId(qint32 adminId) {
    if(m_core.adminId() == adminId) return;
    m_core.setAdminId(adminId);
    Q_EMIT adminIdChanged();
    Q_EMIT coreChanged();
}

qint32 PhoneCallObject::adminId() const {
    return m_core.adminId();
}

void PhoneCallObject::setAlternativeConnections(const QList<PhoneConnection> &alternativeConnections) {
    if(m_core.alternativeConnections() == alternativeConnections) return;
    m_core.setAlternativeConnections(alternativeConnections);
    Q_EMIT alternativeConnectionsChanged();
    Q_EMIT coreChanged();
}

QList<PhoneConnection> PhoneCallObject::alternativeConnections() const {
    return m_core.alternativeConnections();
}

void PhoneCallObject::setConnection(PhoneConnectionObject* connection) {
    if(m_connection == connection) return;
    if(m_connection) delete m_connection;
    m_connection = connection;
    if(m_connection) {
        m_connection->setParent(this);
        m_core.setConnection(m_connection->core());
        connect(m_connection.data(), SIGNAL(coreChanged()), this, SLOT(coreConnectionChanged()));
    }
    Q_EMIT connectionChanged();
    Q_EMIT coreChanged();
}

PhoneConnectionObject*  PhoneCallObject::connection() const {
    return m_connection;
}

void PhoneCallObject::setDate(qint32 date) {
    if(m_core.date() == date) return;
    m_core.setDate(date);
    Q_EMIT dateChanged();
    Q_EMIT coreChanged();
}

qint32 PhoneCallObject::date() const {
    return m_core.date();
}

void PhoneCallObject::setDuration(qint32 duration) {
    if(m_core.duration() == duration) return;
    m_core.setDuration(duration);
    Q_EMIT durationChanged();
    Q_EMIT coreChanged();
}

qint32 PhoneCallObject::duration() const {
    return m_core.duration();
}

void PhoneCallObject::setFlags(qint32 flags) {
    if(m_core.flags() == flags) return;
    m_core.setFlags(flags);
    Q_EMIT flagsChanged();
    Q_EMIT coreChanged();
}

qint32 PhoneCallObject::flags() const {
    return m_core.flags();
}

void PhoneCallObject::setGAHash(const QByteArray &gAHash) {
    if(m_core.gAHash() == gAHash) return;
    m_core.setGAHash(gAHash);
    Q_EMIT gAHashChanged();
    Q_EMIT coreChanged();
}

QByteArray PhoneCallObject::gAHash() const {
    return m_core.gAHash();
}

void PhoneCallObject::setGAOrB(const QByteArray &gAOrB) {
    if(m_core.gAOrB() == gAOrB) return;
    m_core.setGAOrB(gAOrB);
    Q_EMIT gAOrBChanged();
    Q_EMIT coreChanged();
}

QByteArray PhoneCallObject::gAOrB() const {
    return m_core.gAOrB();
}

void PhoneCallObject::setGB(const QByteArray &gB) {
    if(m_core.gB() == gB) return;
    m_core.setGB(gB);
    Q_EMIT gBChanged();
    Q_EMIT coreChanged();
}

QByteArray PhoneCallObject::gB() const {
    return m_core.gB();
}

void PhoneCallObject::setId(qint64 id) {
    if(m_core.id() == id) return;
    m_core.setId(id);
    Q_EMIT idChanged();
    Q_EMIT coreChanged();
}

qint64 PhoneCallObject::id() const {
    return m_core.id();
}

void PhoneCallObject::setKeyFingerprint(qint64 keyFingerprint) {
    if(m_core.keyFingerprint() == keyFingerprint) return;
    m_core.setKeyFingerprint(keyFingerprint);
    Q_EMIT keyFingerprintChanged();
    Q_EMIT coreChanged();
}

qint64 PhoneCallObject::keyFingerprint() const {
    return m_core.keyFingerprint();
}

void PhoneCallObject::setNeedDebug(bool needDebug) {
    if(m_core.needDebug() == needDebug) return;
    m_core.setNeedDebug(needDebug);
    Q_EMIT needDebugChanged();
    Q_EMIT coreChanged();
}

bool PhoneCallObject::needDebug() const {
    return m_core.needDebug();
}

void PhoneCallObject::setNeedRating(bool needRating) {
    if(m_core.needRating() == needRating) return;
    m_core.setNeedRating(needRating);
    Q_EMIT needRatingChanged();
    Q_EMIT coreChanged();
}

bool PhoneCallObject::needRating() const {
    return m_core.needRating();
}

void PhoneCallObject::setParticipantId(qint32 participantId) {
    if(m_core.participantId() == participantId) return;
    m_core.setParticipantId(participantId);
    Q_EMIT participantIdChanged();
    Q_EMIT coreChanged();
}

qint32 PhoneCallObject::participantId() const {
    return m_core.participantId();
}

void PhoneCallObject::setProtocol(PhoneCallProtocolObject* protocol) {
    if(m_protocol == protocol) return;
    if(m_protocol) delete m_protocol;
    m_protocol = protocol;
    if(m_protocol) {
        m_protocol->setParent(this);
        m_core.setProtocol(m_protocol->core());
        connect(m_protocol.data(), SIGNAL(coreChanged()), this, SLOT(coreProtocolChanged()));
    }
    Q_EMIT protocolChanged();
    Q_EMIT coreChanged();
}

PhoneCallProtocolObject*  PhoneCallObject::protocol() const {
    return m_protocol;
}

void PhoneCallObject::setReason(PhoneCallDiscardReasonObject* reason) {
    if(m_reason == reason) return;
    if(m_reason) delete m_reason;
    m_reason = reason;
    if(m_reason) {
        m_reason->setParent(this);
        m_core.setReason(m_reason->core());
        connect(m_reason.data(), SIGNAL(coreChanged()), this, SLOT(coreReasonChanged()));
    }
    Q_EMIT reasonChanged();
    Q_EMIT coreChanged();
}

PhoneCallDiscardReasonObject*  PhoneCallObject::reason() const {
    return m_reason;
}

void PhoneCallObject::setReceiveDate(qint32 receiveDate) {
    if(m_core.receiveDate() == receiveDate) return;
    m_core.setReceiveDate(receiveDate);
    Q_EMIT receiveDateChanged();
    Q_EMIT coreChanged();
}

qint32 PhoneCallObject::receiveDate() const {
    return m_core.receiveDate();
}

void PhoneCallObject::setStartDate(qint32 startDate) {
    if(m_core.startDate() == startDate) return;
    m_core.setStartDate(startDate);
    Q_EMIT startDateChanged();
    Q_EMIT coreChanged();
}

qint32 PhoneCallObject::startDate() const {
    return m_core.startDate();
}

PhoneCallObject &PhoneCallObject::operator =(const PhoneCall &b) {
    if(m_core == b) return *this;
    m_core = b;
    m_connection->setCore(b.connection());
    m_protocol->setCore(b.protocol());
    m_reason->setCore(b.reason());

    Q_EMIT accessHashChanged();
    Q_EMIT adminIdChanged();
    Q_EMIT alternativeConnectionsChanged();
    Q_EMIT connectionChanged();
    Q_EMIT dateChanged();
    Q_EMIT durationChanged();
    Q_EMIT flagsChanged();
    Q_EMIT gAHashChanged();
    Q_EMIT gAOrBChanged();
    Q_EMIT gBChanged();
    Q_EMIT idChanged();
    Q_EMIT keyFingerprintChanged();
    Q_EMIT needDebugChanged();
    Q_EMIT needRatingChanged();
    Q_EMIT participantIdChanged();
    Q_EMIT protocolChanged();
    Q_EMIT reasonChanged();
    Q_EMIT receiveDateChanged();
    Q_EMIT startDateChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool PhoneCallObject::operator ==(const PhoneCall &b) const {
    return m_core == b;
}

void PhoneCallObject::setClassType(quint32 classType) {
    PhoneCall::PhoneCallClassType result;
    switch(classType) {
    case TypePhoneCallEmpty:
        result = PhoneCall::typePhoneCallEmpty;
        break;
    case TypePhoneCallWaiting:
        result = PhoneCall::typePhoneCallWaiting;
        break;
    case TypePhoneCallRequested:
        result = PhoneCall::typePhoneCallRequested;
        break;
    case TypePhoneCallAccepted:
        result = PhoneCall::typePhoneCallAccepted;
        break;
    case TypePhoneCall:
        result = PhoneCall::typePhoneCall;
        break;
    case TypePhoneCallDiscarded:
        result = PhoneCall::typePhoneCallDiscarded;
        break;
    default:
        result = PhoneCall::typePhoneCallEmpty;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 PhoneCallObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case PhoneCall::typePhoneCallEmpty:
        result = TypePhoneCallEmpty;
        break;
    case PhoneCall::typePhoneCallWaiting:
        result = TypePhoneCallWaiting;
        break;
    case PhoneCall::typePhoneCallRequested:
        result = TypePhoneCallRequested;
        break;
    case PhoneCall::typePhoneCallAccepted:
        result = TypePhoneCallAccepted;
        break;
    case PhoneCall::typePhoneCall:
        result = TypePhoneCall;
        break;
    case PhoneCall::typePhoneCallDiscarded:
        result = TypePhoneCallDiscarded;
        break;
    default:
        result = TypePhoneCallEmpty;
        break;
    }

    return result;
}

void PhoneCallObject::setCore(const PhoneCall &core) {
    operator =(core);
}

PhoneCall PhoneCallObject::core() const {
    return m_core;
}

void PhoneCallObject::coreConnectionChanged() {
    if(m_core.connection() == m_connection->core()) return;
    m_core.setConnection(m_connection->core());
    Q_EMIT connectionChanged();
    Q_EMIT coreChanged();
}

void PhoneCallObject::coreProtocolChanged() {
    if(m_core.protocol() == m_protocol->core()) return;
    m_core.setProtocol(m_protocol->core());
    Q_EMIT protocolChanged();
    Q_EMIT coreChanged();
}

void PhoneCallObject::coreReasonChanged() {
    if(m_core.reason() == m_reason->core()) return;
    m_core.setReason(m_reason->core());
    Q_EMIT reasonChanged();
    Q_EMIT coreChanged();
}

