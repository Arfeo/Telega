// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "phonecallprotocolobject.h"

PhoneCallProtocolObject::PhoneCallProtocolObject(const PhoneCallProtocol &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

PhoneCallProtocolObject::PhoneCallProtocolObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

PhoneCallProtocolObject::~PhoneCallProtocolObject() {
}

void PhoneCallProtocolObject::setFlags(qint32 flags) {
    if(m_core.flags() == flags) return;
    m_core.setFlags(flags);
    Q_EMIT flagsChanged();
    Q_EMIT coreChanged();
}

qint32 PhoneCallProtocolObject::flags() const {
    return m_core.flags();
}

void PhoneCallProtocolObject::setMaxLayer(qint32 maxLayer) {
    if(m_core.maxLayer() == maxLayer) return;
    m_core.setMaxLayer(maxLayer);
    Q_EMIT maxLayerChanged();
    Q_EMIT coreChanged();
}

qint32 PhoneCallProtocolObject::maxLayer() const {
    return m_core.maxLayer();
}

void PhoneCallProtocolObject::setMinLayer(qint32 minLayer) {
    if(m_core.minLayer() == minLayer) return;
    m_core.setMinLayer(minLayer);
    Q_EMIT minLayerChanged();
    Q_EMIT coreChanged();
}

qint32 PhoneCallProtocolObject::minLayer() const {
    return m_core.minLayer();
}

void PhoneCallProtocolObject::setUdpP2p(bool udpP2p) {
    if(m_core.udpP2p() == udpP2p) return;
    m_core.setUdpP2p(udpP2p);
    Q_EMIT udpP2pChanged();
    Q_EMIT coreChanged();
}

bool PhoneCallProtocolObject::udpP2p() const {
    return m_core.udpP2p();
}

void PhoneCallProtocolObject::setUdpReflector(bool udpReflector) {
    if(m_core.udpReflector() == udpReflector) return;
    m_core.setUdpReflector(udpReflector);
    Q_EMIT udpReflectorChanged();
    Q_EMIT coreChanged();
}

bool PhoneCallProtocolObject::udpReflector() const {
    return m_core.udpReflector();
}

PhoneCallProtocolObject &PhoneCallProtocolObject::operator =(const PhoneCallProtocol &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT flagsChanged();
    Q_EMIT maxLayerChanged();
    Q_EMIT minLayerChanged();
    Q_EMIT udpP2pChanged();
    Q_EMIT udpReflectorChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool PhoneCallProtocolObject::operator ==(const PhoneCallProtocol &b) const {
    return m_core == b;
}

void PhoneCallProtocolObject::setClassType(quint32 classType) {
    PhoneCallProtocol::PhoneCallProtocolClassType result;
    switch(classType) {
    case TypePhoneCallProtocol:
        result = PhoneCallProtocol::typePhoneCallProtocol;
        break;
    default:
        result = PhoneCallProtocol::typePhoneCallProtocol;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 PhoneCallProtocolObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case PhoneCallProtocol::typePhoneCallProtocol:
        result = TypePhoneCallProtocol;
        break;
    default:
        result = TypePhoneCallProtocol;
        break;
    }

    return result;
}

void PhoneCallProtocolObject::setCore(const PhoneCallProtocol &core) {
    operator =(core);
}

PhoneCallProtocol PhoneCallProtocolObject::core() const {
    return m_core;
}

