// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "phoneconnectionobject.h"

PhoneConnectionObject::PhoneConnectionObject(const PhoneConnection &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

PhoneConnectionObject::PhoneConnectionObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

PhoneConnectionObject::~PhoneConnectionObject() {
}

void PhoneConnectionObject::setId(qint64 id) {
    if(m_core.id() == id) return;
    m_core.setId(id);
    Q_EMIT idChanged();
    Q_EMIT coreChanged();
}

qint64 PhoneConnectionObject::id() const {
    return m_core.id();
}

void PhoneConnectionObject::setIp(const QString &ip) {
    if(m_core.ip() == ip) return;
    m_core.setIp(ip);
    Q_EMIT ipChanged();
    Q_EMIT coreChanged();
}

QString PhoneConnectionObject::ip() const {
    return m_core.ip();
}

void PhoneConnectionObject::setIpv6(const QString &ipv6) {
    if(m_core.ipv6() == ipv6) return;
    m_core.setIpv6(ipv6);
    Q_EMIT ipv6Changed();
    Q_EMIT coreChanged();
}

QString PhoneConnectionObject::ipv6() const {
    return m_core.ipv6();
}

void PhoneConnectionObject::setPeerTag(const QByteArray &peerTag) {
    if(m_core.peerTag() == peerTag) return;
    m_core.setPeerTag(peerTag);
    Q_EMIT peerTagChanged();
    Q_EMIT coreChanged();
}

QByteArray PhoneConnectionObject::peerTag() const {
    return m_core.peerTag();
}

void PhoneConnectionObject::setPort(qint32 port) {
    if(m_core.port() == port) return;
    m_core.setPort(port);
    Q_EMIT portChanged();
    Q_EMIT coreChanged();
}

qint32 PhoneConnectionObject::port() const {
    return m_core.port();
}

PhoneConnectionObject &PhoneConnectionObject::operator =(const PhoneConnection &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT idChanged();
    Q_EMIT ipChanged();
    Q_EMIT ipv6Changed();
    Q_EMIT peerTagChanged();
    Q_EMIT portChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool PhoneConnectionObject::operator ==(const PhoneConnection &b) const {
    return m_core == b;
}

void PhoneConnectionObject::setClassType(quint32 classType) {
    PhoneConnection::PhoneConnectionClassType result;
    switch(classType) {
    case TypePhoneConnection:
        result = PhoneConnection::typePhoneConnection;
        break;
    default:
        result = PhoneConnection::typePhoneConnection;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 PhoneConnectionObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case PhoneConnection::typePhoneConnection:
        result = TypePhoneConnection;
        break;
    default:
        result = TypePhoneConnection;
        break;
    }

    return result;
}

void PhoneConnectionObject::setCore(const PhoneConnection &core) {
    operator =(core);
}

PhoneConnection PhoneConnectionObject::core() const {
    return m_core;
}

