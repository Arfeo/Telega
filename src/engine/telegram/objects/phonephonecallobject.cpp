// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "phonephonecallobject.h"

PhonePhoneCallObject::PhonePhoneCallObject(const PhonePhoneCall &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_phoneCall(0),
    m_core(core)
{
    m_phoneCall = new PhoneCallObject(m_core.phoneCall(), this);
    connect(m_phoneCall.data(), &PhoneCallObject::coreChanged, this, &PhonePhoneCallObject::corePhoneCallChanged);
}

PhonePhoneCallObject::PhonePhoneCallObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_phoneCall(0),
    m_core()
{
    m_phoneCall = new PhoneCallObject(m_core.phoneCall(), this);
    connect(m_phoneCall.data(), &PhoneCallObject::coreChanged, this, &PhonePhoneCallObject::corePhoneCallChanged);
}

PhonePhoneCallObject::~PhonePhoneCallObject() {
}

void PhonePhoneCallObject::setPhoneCall(PhoneCallObject* phoneCall) {
    if(m_phoneCall == phoneCall) return;
    if(m_phoneCall) delete m_phoneCall;
    m_phoneCall = phoneCall;
    if(m_phoneCall) {
        m_phoneCall->setParent(this);
        m_core.setPhoneCall(m_phoneCall->core());
        connect(m_phoneCall.data(), &PhoneCallObject::coreChanged, this, &PhonePhoneCallObject::corePhoneCallChanged);
    }
    Q_EMIT phoneCallChanged();
    Q_EMIT coreChanged();
}

PhoneCallObject*  PhonePhoneCallObject::phoneCall() const {
    return m_phoneCall;
}

void PhonePhoneCallObject::setUsers(const QList<User> &users) {
    if(m_core.users() == users) return;
    m_core.setUsers(users);
    Q_EMIT usersChanged();
    Q_EMIT coreChanged();
}

QList<User> PhonePhoneCallObject::users() const {
    return m_core.users();
}

PhonePhoneCallObject &PhonePhoneCallObject::operator =(const PhonePhoneCall &b) {
    if(m_core == b) return *this;
    m_core = b;
    m_phoneCall->setCore(b.phoneCall());

    Q_EMIT phoneCallChanged();
    Q_EMIT usersChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool PhonePhoneCallObject::operator ==(const PhonePhoneCall &b) const {
    return m_core == b;
}

void PhonePhoneCallObject::setClassType(quint32 classType) {
    PhonePhoneCall::PhonePhoneCallClassType result;
    switch(classType) {
    case TypePhonePhoneCall:
        result = PhonePhoneCall::typePhonePhoneCall;
        break;
    default:
        result = PhonePhoneCall::typePhonePhoneCall;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 PhonePhoneCallObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case PhonePhoneCall::typePhonePhoneCall:
        result = TypePhonePhoneCall;
        break;
    default:
        result = TypePhonePhoneCall;
        break;
    }

    return result;
}

void PhonePhoneCallObject::setCore(const PhonePhoneCall &core) {
    operator =(core);
}

PhonePhoneCall PhonePhoneCallObject::core() const {
    return m_core;
}

void PhonePhoneCallObject::corePhoneCallChanged() {
    if(m_core.phoneCall() == m_phoneCall->core()) return;
    m_core.setPhoneCall(m_phoneCall->core());
    Q_EMIT phoneCallChanged();
    Q_EMIT coreChanged();
}

