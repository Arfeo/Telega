// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "postaddressobject.h"

PostAddressObject::PostAddressObject(const PostAddress &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

PostAddressObject::PostAddressObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

PostAddressObject::~PostAddressObject() {
}

void PostAddressObject::setCity(const QString &city) {
    if(m_core.city() == city) return;
    m_core.setCity(city);
    Q_EMIT cityChanged();
    Q_EMIT coreChanged();
}

QString PostAddressObject::city() const {
    return m_core.city();
}

void PostAddressObject::setCountryIso2(const QString &countryIso2) {
    if(m_core.countryIso2() == countryIso2) return;
    m_core.setCountryIso2(countryIso2);
    Q_EMIT countryIso2Changed();
    Q_EMIT coreChanged();
}

QString PostAddressObject::countryIso2() const {
    return m_core.countryIso2();
}

void PostAddressObject::setPostCode(const QString &postCode) {
    if(m_core.postCode() == postCode) return;
    m_core.setPostCode(postCode);
    Q_EMIT postCodeChanged();
    Q_EMIT coreChanged();
}

QString PostAddressObject::postCode() const {
    return m_core.postCode();
}

void PostAddressObject::setState(const QString &state) {
    if(m_core.state() == state) return;
    m_core.setState(state);
    Q_EMIT stateChanged();
    Q_EMIT coreChanged();
}

QString PostAddressObject::state() const {
    return m_core.state();
}

void PostAddressObject::setStreetLine1(const QString &streetLine1) {
    if(m_core.streetLine1() == streetLine1) return;
    m_core.setStreetLine1(streetLine1);
    Q_EMIT streetLine1Changed();
    Q_EMIT coreChanged();
}

QString PostAddressObject::streetLine1() const {
    return m_core.streetLine1();
}

void PostAddressObject::setStreetLine2(const QString &streetLine2) {
    if(m_core.streetLine2() == streetLine2) return;
    m_core.setStreetLine2(streetLine2);
    Q_EMIT streetLine2Changed();
    Q_EMIT coreChanged();
}

QString PostAddressObject::streetLine2() const {
    return m_core.streetLine2();
}

PostAddressObject &PostAddressObject::operator =(const PostAddress &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT cityChanged();
    Q_EMIT countryIso2Changed();
    Q_EMIT postCodeChanged();
    Q_EMIT stateChanged();
    Q_EMIT streetLine1Changed();
    Q_EMIT streetLine2Changed();
    Q_EMIT coreChanged();
    return *this;
}

bool PostAddressObject::operator ==(const PostAddress &b) const {
    return m_core == b;
}

void PostAddressObject::setClassType(quint32 classType) {
    PostAddress::PostAddressClassType result;
    switch(classType) {
    case TypePostAddress:
        result = PostAddress::typePostAddress;
        break;
    default:
        result = PostAddress::typePostAddress;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 PostAddressObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case PostAddress::typePostAddress:
        result = TypePostAddress;
        break;
    default:
        result = TypePostAddress;
        break;
    }

    return result;
}

void PostAddressObject::setCore(const PostAddress &core) {
    operator =(core);
}

PostAddress PostAddressObject::core() const {
    return m_core;
}

