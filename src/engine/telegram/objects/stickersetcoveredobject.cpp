// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "stickersetcoveredobject.h"

StickerSetCoveredObject::StickerSetCoveredObject(const StickerSetCovered &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_cover(0),
    m_set(0),
    m_core(core)
{
    m_cover = new DocumentObject(m_core.cover(), this);
    connect(m_cover.data(), SIGNAL(coreChanged()), this, SLOT(coreCoverChanged()));
    m_set = new StickerSetObject(m_core.set(), this);
    connect(m_set.data(), SIGNAL(coreChanged()), this, SLOT(coreSetChanged()));
}

StickerSetCoveredObject::StickerSetCoveredObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_cover(0),
    m_set(0),
    m_core()
{
    m_cover = new DocumentObject(m_core.cover(), this);
    connect(m_cover.data(), SIGNAL(coreChanged()), this, SLOT(coreCoverChanged()));
    m_set = new StickerSetObject(m_core.set(), this);
    connect(m_set.data(), SIGNAL(coreChanged()), this, SLOT(coreSetChanged()));
}

StickerSetCoveredObject::~StickerSetCoveredObject() {
}

void StickerSetCoveredObject::setCover(DocumentObject* cover) {
    if(m_cover == cover) return;
    if(m_cover) delete m_cover;
    m_cover = cover;
    if(m_cover) {
        m_cover->setParent(this);
        m_core.setCover(m_cover->core());
        connect(m_cover.data(), SIGNAL(coreChanged()), this, SLOT(coreCoverChanged()));
    }
    Q_EMIT coverChanged();
    Q_EMIT coreChanged();
}

DocumentObject*  StickerSetCoveredObject::cover() const {
    return m_cover;
}

void StickerSetCoveredObject::setCovers(const QList<Document> &covers) {
    if(m_core.covers() == covers) return;
    m_core.setCovers(covers);
    Q_EMIT coversChanged();
    Q_EMIT coreChanged();
}

QList<Document> StickerSetCoveredObject::covers() const {
    return m_core.covers();
}

void StickerSetCoveredObject::setSet(StickerSetObject* set) {
    if(m_set == set) return;
    if(m_set) delete m_set;
    m_set = set;
    if(m_set) {
        m_set->setParent(this);
        m_core.setSet(m_set->core());
        connect(m_set.data(), SIGNAL(coreChanged()), this, SLOT(coreSetChanged()));
    }
    Q_EMIT setChanged();
    Q_EMIT coreChanged();
}

StickerSetObject*  StickerSetCoveredObject::set() const {
    return m_set;
}

StickerSetCoveredObject &StickerSetCoveredObject::operator =(const StickerSetCovered &b) {
    if(m_core == b) return *this;
    m_core = b;
    m_cover->setCore(b.cover());
    m_set->setCore(b.set());

    Q_EMIT coverChanged();
    Q_EMIT coversChanged();
    Q_EMIT setChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool StickerSetCoveredObject::operator ==(const StickerSetCovered &b) const {
    return m_core == b;
}

void StickerSetCoveredObject::setClassType(quint32 classType) {
    StickerSetCovered::StickerSetCoveredClassType result;
    switch(classType) {
    case TypeStickerSetCovered:
        result = StickerSetCovered::typeStickerSetCovered;
        break;
    case TypeStickerSetMultiCovered:
        result = StickerSetCovered::typeStickerSetMultiCovered;
        break;
    default:
        result = StickerSetCovered::typeStickerSetCovered;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 StickerSetCoveredObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case StickerSetCovered::typeStickerSetCovered:
        result = TypeStickerSetCovered;
        break;
    case StickerSetCovered::typeStickerSetMultiCovered:
        result = TypeStickerSetMultiCovered;
        break;
    default:
        result = TypeStickerSetCovered;
        break;
    }

    return result;
}

void StickerSetCoveredObject::setCore(const StickerSetCovered &core) {
    operator =(core);
}

StickerSetCovered StickerSetCoveredObject::core() const {
    return m_core;
}

void StickerSetCoveredObject::coreCoverChanged() {
    if(m_core.cover() == m_cover->core()) return;
    m_core.setCover(m_cover->core());
    Q_EMIT coverChanged();
    Q_EMIT coreChanged();
}

void StickerSetCoveredObject::coreSetChanged() {
    if(m_core.set() == m_set->core()) return;
    m_core.setSet(m_set->core());
    Q_EMIT setChanged();
    Q_EMIT coreChanged();
}

