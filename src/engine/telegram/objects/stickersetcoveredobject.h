// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_STICKERSETCOVERED_OBJECT
#define LQTG_TYPE_STICKERSETCOVERED_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/stickersetcovered.h"

#include <QPointer>
#include "documentobject.h"
#include "stickersetobject.h"

class LIBQTELEGRAMSHARED_EXPORT StickerSetCoveredObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(StickerSetCoveredClassType)
    Q_PROPERTY(DocumentObject* cover READ cover WRITE setCover NOTIFY coverChanged)
    Q_PROPERTY(QList<Document> covers READ covers WRITE setCovers NOTIFY coversChanged)
    Q_PROPERTY(StickerSetObject* set READ set WRITE setSet NOTIFY setChanged)
    Q_PROPERTY(StickerSetCovered core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum StickerSetCoveredClassType {
        TypeStickerSetCovered,
        TypeStickerSetMultiCovered
    };

    StickerSetCoveredObject(const StickerSetCovered &core, QObject *parent = 0);
    StickerSetCoveredObject(QObject *parent = 0);
    virtual ~StickerSetCoveredObject();

    void setCover(DocumentObject* cover);
    DocumentObject* cover() const;

    void setCovers(const QList<Document> &covers);
    QList<Document> covers() const;

    void setSet(StickerSetObject* set);
    StickerSetObject* set() const;

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const StickerSetCovered &core);
    StickerSetCovered core() const;

    StickerSetCoveredObject &operator =(const StickerSetCovered &b);
    bool operator ==(const StickerSetCovered &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();
    void coverChanged();
    void coversChanged();
    void setChanged();

private Q_SLOTS:
    void coreCoverChanged();
    void coreSetChanged();

private:
    QPointer<DocumentObject> m_cover;
    QPointer<StickerSetObject> m_set;
    StickerSetCovered m_core;
};

#endif // LQTG_TYPE_STICKERSETCOVERED_OBJECT
