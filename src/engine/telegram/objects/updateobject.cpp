// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "updateobject.h"

UpdateObject::UpdateObject(const Update &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_action(0),
    m_chat(0),
    m_dataJSON(0),
    m_difference(0),
    m_draft(0),
    m_foreignLink(0),
    m_geo(0),
    m_info(0),
    m_key(0),
    m_media(0),
    m_messageEncrypted(0),
    m_message(0),
    m_msgIdInputBotInlineMessageID(0),
    m_myLink(0),
    m_notifySettings(0),
    m_participants(0),
    m_peerNotify(0),
    m_peer(0),
    m_phoneCall(0),
    m_photo(0),
    m_shippingAddress(0),
    m_status(0),
    m_stickerset(0),
    m_webpage(0),
    m_core(core)
{
    m_action = new SendMessageActionObject(m_core.action(), this);
    connect(m_action.data(), SIGNAL(coreChanged()), this, SLOT(coreActionChanged()));
    m_chat = new EncryptedChatObject(m_core.chat(), this);
    connect(m_chat.data(), SIGNAL(coreChanged()), this, SLOT(coreChatChanged()));
    m_dataJSON = new DataJSONObject(m_core.dataJSON(), this);
    connect(m_dataJSON.data(), SIGNAL(coreChanged()), this, SLOT(coreDataJSONChanged()));
    m_difference = new LangPackDifferenceObject(m_core.difference(), this);
    connect(m_difference.data(), SIGNAL(coreChanged()), this, SLOT(coreDifferenceChanged()));
    m_draft = new DraftMessageObject(m_core.draft(), this);
    connect(m_draft.data(), SIGNAL(coreChanged()), this, SLOT(coreDraftChanged()));
    m_foreignLink = new ContactLinkObject(m_core.foreignLink(), this);
    connect(m_foreignLink.data(), SIGNAL(coreChanged()), this, SLOT(coreForeignLinkChanged()));
    m_geo = new GeoPointObject(m_core.geo(), this);
    connect(m_geo.data(), SIGNAL(coreChanged()), this, SLOT(coreGeoChanged()));
    m_info = new PaymentRequestedInfoObject(m_core.info(), this);
    connect(m_info.data(), SIGNAL(coreChanged()), this, SLOT(coreInfoChanged()));
    m_key = new PrivacyKeyObject(m_core.key(), this);
    connect(m_key.data(), SIGNAL(coreChanged()), this, SLOT(coreKeyChanged()));
    m_media = new MessageMediaObject(m_core.media(), this);
    connect(m_media.data(), SIGNAL(coreChanged()), this, SLOT(coreMediaChanged()));
    m_messageEncrypted = new EncryptedMessageObject(m_core.messageEncrypted(), this);
    connect(m_messageEncrypted.data(), SIGNAL(coreChanged()), this, SLOT(coreMessageEncryptedChanged()));
    m_message = new MessageObject(m_core.message(), this);
    connect(m_message.data(), SIGNAL(coreChanged()), this, SLOT(coreMessageChanged()));
    m_msgIdInputBotInlineMessageID = new InputBotInlineMessageIDObject(m_core.msgIdInputBotInlineMessageID(), this);
    connect(m_msgIdInputBotInlineMessageID.data(), SIGNAL(coreChanged()), this, SLOT(coreMsgIdInputBotInlineMessageIDChanged()));
    m_myLink = new ContactLinkObject(m_core.myLink(), this);
    connect(m_myLink.data(), SIGNAL(coreChanged()), this, SLOT(coreMyLinkChanged()));
    m_notifySettings = new PeerNotifySettingsObject(m_core.notifySettings(), this);
    connect(m_notifySettings.data(), SIGNAL(coreChanged()), this, SLOT(coreNotifySettingsChanged()));
    m_participants = new ChatParticipantsObject(m_core.participants(), this);
    connect(m_participants.data(), SIGNAL(coreChanged()), this, SLOT(coreParticipantsChanged()));
    m_peerNotify = new NotifyPeerObject(m_core.peerNotify(), this);
    connect(m_peerNotify.data(), SIGNAL(coreChanged()), this, SLOT(corePeerNotifyChanged()));
    m_peer = new PeerObject(m_core.peer(), this);
    connect(m_peer.data(), SIGNAL(coreChanged()), this, SLOT(corePeerChanged()));
    m_phoneCall = new PhoneCallObject(m_core.phoneCall(), this);
    connect(m_phoneCall.data(), SIGNAL(coreChanged()), this, SLOT(corePhoneCallChanged()));
    m_photo = new UserProfilePhotoObject(m_core.photo(), this);
    connect(m_photo.data(), SIGNAL(coreChanged()), this, SLOT(corePhotoChanged()));
    m_shippingAddress = new PostAddressObject(m_core.shippingAddress(), this);
    connect(m_shippingAddress.data(), SIGNAL(coreChanged()), this, SLOT(coreShippingAddressChanged()));
    m_status = new UserStatusObject(m_core.status(), this);
    connect(m_status.data(), SIGNAL(coreChanged()), this, SLOT(coreStatusChanged()));
    m_stickerset = new MessagesStickerSetObject(m_core.stickerset(), this);
    connect(m_stickerset.data(), SIGNAL(coreChanged()), this, SLOT(coreStickersetChanged()));
    m_webpage = new WebPageObject(m_core.webpage(), this);
    connect(m_webpage.data(), SIGNAL(coreChanged()), this, SLOT(coreWebpageChanged()));
}

UpdateObject::UpdateObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_action(0),
    m_chat(0),
    m_dataJSON(0),
    m_difference(0),
    m_draft(0),
    m_foreignLink(0),
    m_geo(0),
    m_info(0),
    m_key(0),
    m_media(0),
    m_messageEncrypted(0),
    m_message(0),
    m_msgIdInputBotInlineMessageID(0),
    m_myLink(0),
    m_notifySettings(0),
    m_participants(0),
    m_peerNotify(0),
    m_peer(0),
    m_phoneCall(0),
    m_photo(0),
    m_shippingAddress(0),
    m_status(0),
    m_stickerset(0),
    m_webpage(0),
    m_core()
{
    m_action = new SendMessageActionObject(m_core.action(), this);
    connect(m_action.data(), SIGNAL(coreChanged()), this, SLOT(coreActionChanged()));
    m_chat = new EncryptedChatObject(m_core.chat(), this);
    connect(m_chat.data(), SIGNAL(coreChanged()), this, SLOT(coreChatChanged()));
    m_dataJSON = new DataJSONObject(m_core.dataJSON(), this);
    connect(m_dataJSON.data(), SIGNAL(coreChanged()), this, SLOT(coreDataJSONChanged()));
    m_difference = new LangPackDifferenceObject(m_core.difference(), this);
    connect(m_difference.data(), SIGNAL(coreChanged()), this, SLOT(coreDifferenceChanged()));
    m_draft = new DraftMessageObject(m_core.draft(), this);
    connect(m_draft.data(), SIGNAL(coreChanged()), this, SLOT(coreDraftChanged()));
    m_foreignLink = new ContactLinkObject(m_core.foreignLink(), this);
    connect(m_foreignLink.data(), SIGNAL(coreChanged()), this, SLOT(coreForeignLinkChanged()));
    m_geo = new GeoPointObject(m_core.geo(), this);
    connect(m_geo.data(), SIGNAL(coreChanged()), this, SLOT(coreGeoChanged()));
    m_info = new PaymentRequestedInfoObject(m_core.info(), this);
    connect(m_info.data(), SIGNAL(coreChanged()), this, SLOT(coreInfoChanged()));
    m_key = new PrivacyKeyObject(m_core.key(), this);
    connect(m_key.data(), SIGNAL(coreChanged()), this, SLOT(coreKeyChanged()));
    m_media = new MessageMediaObject(m_core.media(), this);
    connect(m_media.data(), SIGNAL(coreChanged()), this, SLOT(coreMediaChanged()));
    m_messageEncrypted = new EncryptedMessageObject(m_core.messageEncrypted(), this);
    connect(m_messageEncrypted.data(), SIGNAL(coreChanged()), this, SLOT(coreMessageEncryptedChanged()));
    m_message = new MessageObject(m_core.message(), this);
    connect(m_message.data(), SIGNAL(coreChanged()), this, SLOT(coreMessageChanged()));
    m_msgIdInputBotInlineMessageID = new InputBotInlineMessageIDObject(m_core.msgIdInputBotInlineMessageID(), this);
    connect(m_msgIdInputBotInlineMessageID.data(), SIGNAL(coreChanged()), this, SLOT(coreMsgIdInputBotInlineMessageIDChanged()));
    m_myLink = new ContactLinkObject(m_core.myLink(), this);
    connect(m_myLink.data(), SIGNAL(coreChanged()), this, SLOT(coreMyLinkChanged()));
    m_notifySettings = new PeerNotifySettingsObject(m_core.notifySettings(), this);
    connect(m_notifySettings.data(), SIGNAL(coreChanged()), this, SLOT(coreNotifySettingsChanged()));
    m_participants = new ChatParticipantsObject(m_core.participants(), this);
    connect(m_participants.data(), SIGNAL(coreChanged()), this, SLOT(coreParticipantsChanged()));
    m_peerNotify = new NotifyPeerObject(m_core.peerNotify(), this);
    connect(m_peerNotify.data(), SIGNAL(coreChanged()), this, SLOT(corePeerNotifyChanged()));
    m_peer = new PeerObject(m_core.peer(), this);
    connect(m_peer.data(), SIGNAL(coreChanged()), this, SLOT(corePeerChanged()));
    m_phoneCall = new PhoneCallObject(m_core.phoneCall(), this);
    connect(m_phoneCall.data(), SIGNAL(coreChanged()), this, SLOT(corePhoneCallChanged()));
    m_photo = new UserProfilePhotoObject(m_core.photo(), this);
    connect(m_photo.data(), SIGNAL(coreChanged()), this, SLOT(corePhotoChanged()));
    m_shippingAddress = new PostAddressObject(m_core.shippingAddress(), this);
    connect(m_shippingAddress.data(), SIGNAL(coreChanged()), this, SLOT(coreShippingAddressChanged()));
    m_status = new UserStatusObject(m_core.status(), this);
    connect(m_status.data(), SIGNAL(coreChanged()), this, SLOT(coreStatusChanged()));
    m_stickerset = new MessagesStickerSetObject(m_core.stickerset(), this);
    connect(m_stickerset.data(), SIGNAL(coreChanged()), this, SLOT(coreStickersetChanged()));
    m_webpage = new WebPageObject(m_core.webpage(), this);
    connect(m_webpage.data(), SIGNAL(coreChanged()), this, SLOT(coreWebpageChanged()));
}

UpdateObject::~UpdateObject() {
}

void UpdateObject::setAction(SendMessageActionObject* action) {
    if(m_action == action) return;
    if(m_action) delete m_action;
    m_action = action;
    if(m_action) {
        m_action->setParent(this);
        m_core.setAction(m_action->core());
        connect(m_action.data(), SIGNAL(coreChanged()), this, SLOT(coreActionChanged()));
    }
    Q_EMIT actionChanged();
    Q_EMIT coreChanged();
}

SendMessageActionObject*  UpdateObject::action() const {
    return m_action;
}

void UpdateObject::setBlocked(bool blocked) {
    if(m_core.blocked() == blocked) return;
    m_core.setBlocked(blocked);
    Q_EMIT blockedChanged();
    Q_EMIT coreChanged();
}

bool UpdateObject::blocked() const {
    return m_core.blocked();
}

void UpdateObject::setChannelId(qint32 channelId) {
    if(m_core.channelId() == channelId) return;
    m_core.setChannelId(channelId);
    Q_EMIT channelIdChanged();
    Q_EMIT coreChanged();
}

qint32 UpdateObject::channelId() const {
    return m_core.channelId();
}

void UpdateObject::setChat(EncryptedChatObject* chat) {
    if(m_chat == chat) return;
    if(m_chat) delete m_chat;
    m_chat = chat;
    if(m_chat) {
        m_chat->setParent(this);
        m_core.setChat(m_chat->core());
        connect(m_chat.data(), SIGNAL(coreChanged()), this, SLOT(coreChatChanged()));
    }
    Q_EMIT chatChanged();
    Q_EMIT coreChanged();
}

EncryptedChatObject*  UpdateObject::chat() const {
    return m_chat;
}

void UpdateObject::setChatId(qint32 chatId) {
    if(m_core.chatId() == chatId) return;
    m_core.setChatId(chatId);
    Q_EMIT chatIdChanged();
    Q_EMIT coreChanged();
}

qint32 UpdateObject::chatId() const {
    return m_core.chatId();
}

void UpdateObject::setChatInstance(qint64 chatInstance) {
    if(m_core.chatInstance() == chatInstance) return;
    m_core.setChatInstance(chatInstance);
    Q_EMIT chatInstanceChanged();
    Q_EMIT coreChanged();
}

qint64 UpdateObject::chatInstance() const {
    return m_core.chatInstance();
}

void UpdateObject::setCurrency(const QString &currency) {
    if(m_core.currency() == currency) return;
    m_core.setCurrency(currency);
    Q_EMIT currencyChanged();
    Q_EMIT coreChanged();
}

QString UpdateObject::currency() const {
    return m_core.currency();
}

void UpdateObject::setDataJSON(DataJSONObject* dataJSON) {
    if(m_dataJSON == dataJSON) return;
    if(m_dataJSON) delete m_dataJSON;
    m_dataJSON = dataJSON;
    if(m_dataJSON) {
        m_dataJSON->setParent(this);
        m_core.setDataJSON(m_dataJSON->core());
        connect(m_dataJSON.data(), SIGNAL(coreChanged()), this, SLOT(coreDataJSONChanged()));
    }
    Q_EMIT dataJSONChanged();
    Q_EMIT coreChanged();
}

DataJSONObject*  UpdateObject::dataJSON() const {
    return m_dataJSON;
}

void UpdateObject::setDataBytes(const QByteArray &dataBytes) {
    if(m_core.dataBytes() == dataBytes) return;
    m_core.setDataBytes(dataBytes);
    Q_EMIT dataBytesChanged();
    Q_EMIT coreChanged();
}

QByteArray UpdateObject::dataBytes() const {
    return m_core.dataBytes();
}

void UpdateObject::setDate(qint32 date) {
    if(m_core.date() == date) return;
    m_core.setDate(date);
    Q_EMIT dateChanged();
    Q_EMIT coreChanged();
}

qint32 UpdateObject::date() const {
    return m_core.date();
}

void UpdateObject::setDcOptions(const QList<DcOption> &dcOptions) {
    if(m_core.dcOptions() == dcOptions) return;
    m_core.setDcOptions(dcOptions);
    Q_EMIT dcOptionsChanged();
    Q_EMIT coreChanged();
}

QList<DcOption> UpdateObject::dcOptions() const {
    return m_core.dcOptions();
}

void UpdateObject::setDifference(LangPackDifferenceObject* difference) {
    if(m_difference == difference) return;
    if(m_difference) delete m_difference;
    m_difference = difference;
    if(m_difference) {
        m_difference->setParent(this);
        m_core.setDifference(m_difference->core());
        connect(m_difference.data(), SIGNAL(coreChanged()), this, SLOT(coreDifferenceChanged()));
    }
    Q_EMIT differenceChanged();
    Q_EMIT coreChanged();
}

LangPackDifferenceObject*  UpdateObject::difference() const {
    return m_difference;
}

void UpdateObject::setDraft(DraftMessageObject* draft) {
    if(m_draft == draft) return;
    if(m_draft) delete m_draft;
    m_draft = draft;
    if(m_draft) {
        m_draft->setParent(this);
        m_core.setDraft(m_draft->core());
        connect(m_draft.data(), SIGNAL(coreChanged()), this, SLOT(coreDraftChanged()));
    }
    Q_EMIT draftChanged();
    Q_EMIT coreChanged();
}

DraftMessageObject*  UpdateObject::draft() const {
    return m_draft;
}

void UpdateObject::setEnabled(bool enabled) {
    if(m_core.enabled() == enabled) return;
    m_core.setEnabled(enabled);
    Q_EMIT enabledChanged();
    Q_EMIT coreChanged();
}

bool UpdateObject::enabled() const {
    return m_core.enabled();
}

void UpdateObject::setEntities(const QList<MessageEntity> &entities) {
    if(m_core.entities() == entities) return;
    m_core.setEntities(entities);
    Q_EMIT entitiesChanged();
    Q_EMIT coreChanged();
}

QList<MessageEntity> UpdateObject::entities() const {
    return m_core.entities();
}

void UpdateObject::setFirstName(const QString &firstName) {
    if(m_core.firstName() == firstName) return;
    m_core.setFirstName(firstName);
    Q_EMIT firstNameChanged();
    Q_EMIT coreChanged();
}

QString UpdateObject::firstName() const {
    return m_core.firstName();
}

void UpdateObject::setFlags(qint32 flags) {
    if(m_core.flags() == flags) return;
    m_core.setFlags(flags);
    Q_EMIT flagsChanged();
    Q_EMIT coreChanged();
}

qint32 UpdateObject::flags() const {
    return m_core.flags();
}

void UpdateObject::setForeignLink(ContactLinkObject* foreignLink) {
    if(m_foreignLink == foreignLink) return;
    if(m_foreignLink) delete m_foreignLink;
    m_foreignLink = foreignLink;
    if(m_foreignLink) {
        m_foreignLink->setParent(this);
        m_core.setForeignLink(m_foreignLink->core());
        connect(m_foreignLink.data(), SIGNAL(coreChanged()), this, SLOT(coreForeignLinkChanged()));
    }
    Q_EMIT foreignLinkChanged();
    Q_EMIT coreChanged();
}

ContactLinkObject*  UpdateObject::foreignLink() const {
    return m_foreignLink;
}

void UpdateObject::setGameShortName(const QString &gameShortName) {
    if(m_core.gameShortName() == gameShortName) return;
    m_core.setGameShortName(gameShortName);
    Q_EMIT gameShortNameChanged();
    Q_EMIT coreChanged();
}

QString UpdateObject::gameShortName() const {
    return m_core.gameShortName();
}

void UpdateObject::setGeo(GeoPointObject* geo) {
    if(m_geo == geo) return;
    if(m_geo) delete m_geo;
    m_geo = geo;
    if(m_geo) {
        m_geo->setParent(this);
        m_core.setGeo(m_geo->core());
        connect(m_geo.data(), SIGNAL(coreChanged()), this, SLOT(coreGeoChanged()));
    }
    Q_EMIT geoChanged();
    Q_EMIT coreChanged();
}

GeoPointObject*  UpdateObject::geo() const {
    return m_geo;
}

void UpdateObject::setIdString(const QString &idString) {
    if(m_core.idString() == idString) return;
    m_core.setIdString(idString);
    Q_EMIT idStringChanged();
    Q_EMIT coreChanged();
}

QString UpdateObject::idString() const {
    return m_core.idString();
}

void UpdateObject::setIdInt(qint32 idInt) {
    if(m_core.idInt() == idInt) return;
    m_core.setIdInt(idInt);
    Q_EMIT idIntChanged();
    Q_EMIT coreChanged();
}

qint32 UpdateObject::idInt() const {
    return m_core.idInt();
}

void UpdateObject::setInboxDate(qint32 inboxDate) {
    if(m_core.inboxDate() == inboxDate) return;
    m_core.setInboxDate(inboxDate);
    Q_EMIT inboxDateChanged();
    Q_EMIT coreChanged();
}

qint32 UpdateObject::inboxDate() const {
    return m_core.inboxDate();
}

void UpdateObject::setInfo(PaymentRequestedInfoObject* info) {
    if(m_info == info) return;
    if(m_info) delete m_info;
    m_info = info;
    if(m_info) {
        m_info->setParent(this);
        m_core.setInfo(m_info->core());
        connect(m_info.data(), SIGNAL(coreChanged()), this, SLOT(coreInfoChanged()));
    }
    Q_EMIT infoChanged();
    Q_EMIT coreChanged();
}

PaymentRequestedInfoObject*  UpdateObject::info() const {
    return m_info;
}

void UpdateObject::setInviterId(qint32 inviterId) {
    if(m_core.inviterId() == inviterId) return;
    m_core.setInviterId(inviterId);
    Q_EMIT inviterIdChanged();
    Q_EMIT coreChanged();
}

qint32 UpdateObject::inviterId() const {
    return m_core.inviterId();
}

void UpdateObject::setIsAdmin(bool isAdmin) {
    if(m_core.isAdmin() == isAdmin) return;
    m_core.setIsAdmin(isAdmin);
    Q_EMIT isAdminChanged();
    Q_EMIT coreChanged();
}

bool UpdateObject::isAdmin() const {
    return m_core.isAdmin();
}

void UpdateObject::setKey(PrivacyKeyObject* key) {
    if(m_key == key) return;
    if(m_key) delete m_key;
    m_key = key;
    if(m_key) {
        m_key->setParent(this);
        m_core.setKey(m_key->core());
        connect(m_key.data(), SIGNAL(coreChanged()), this, SLOT(coreKeyChanged()));
    }
    Q_EMIT keyChanged();
    Q_EMIT coreChanged();
}

PrivacyKeyObject*  UpdateObject::key() const {
    return m_key;
}

void UpdateObject::setLastName(const QString &lastName) {
    if(m_core.lastName() == lastName) return;
    m_core.setLastName(lastName);
    Q_EMIT lastNameChanged();
    Q_EMIT coreChanged();
}

QString UpdateObject::lastName() const {
    return m_core.lastName();
}

void UpdateObject::setMasks(bool masks) {
    if(m_core.masks() == masks) return;
    m_core.setMasks(masks);
    Q_EMIT masksChanged();
    Q_EMIT coreChanged();
}

bool UpdateObject::masks() const {
    return m_core.masks();
}

void UpdateObject::setMaxDate(qint32 maxDate) {
    if(m_core.maxDate() == maxDate) return;
    m_core.setMaxDate(maxDate);
    Q_EMIT maxDateChanged();
    Q_EMIT coreChanged();
}

qint32 UpdateObject::maxDate() const {
    return m_core.maxDate();
}

void UpdateObject::setMaxId(qint32 maxId) {
    if(m_core.maxId() == maxId) return;
    m_core.setMaxId(maxId);
    Q_EMIT maxIdChanged();
    Q_EMIT coreChanged();
}

qint32 UpdateObject::maxId() const {
    return m_core.maxId();
}

void UpdateObject::setMedia(MessageMediaObject* media) {
    if(m_media == media) return;
    if(m_media) delete m_media;
    m_media = media;
    if(m_media) {
        m_media->setParent(this);
        m_core.setMedia(m_media->core());
        connect(m_media.data(), SIGNAL(coreChanged()), this, SLOT(coreMediaChanged()));
    }
    Q_EMIT mediaChanged();
    Q_EMIT coreChanged();
}

MessageMediaObject*  UpdateObject::media() const {
    return m_media;
}

void UpdateObject::setMessageEncrypted(EncryptedMessageObject* messageEncrypted) {
    if(m_messageEncrypted == messageEncrypted) return;
    if(m_messageEncrypted) delete m_messageEncrypted;
    m_messageEncrypted = messageEncrypted;
    if(m_messageEncrypted) {
        m_messageEncrypted->setParent(this);
        m_core.setMessageEncrypted(m_messageEncrypted->core());
        connect(m_messageEncrypted.data(), SIGNAL(coreChanged()), this, SLOT(coreMessageEncryptedChanged()));
    }
    Q_EMIT messageEncryptedChanged();
    Q_EMIT coreChanged();
}

EncryptedMessageObject*  UpdateObject::messageEncrypted() const {
    return m_messageEncrypted;
}

void UpdateObject::setMessage(MessageObject* message) {
    if(m_message == message) return;
    if(m_message) delete m_message;
    m_message = message;
    if(m_message) {
        m_message->setParent(this);
        m_core.setMessage(m_message->core());
        connect(m_message.data(), SIGNAL(coreChanged()), this, SLOT(coreMessageChanged()));
    }
    Q_EMIT messageChanged();
    Q_EMIT coreChanged();
}

MessageObject*  UpdateObject::message() const {
    return m_message;
}

void UpdateObject::setMessageString(const QString &messageString) {
    if(m_core.messageString() == messageString) return;
    m_core.setMessageString(messageString);
    Q_EMIT messageStringChanged();
    Q_EMIT coreChanged();
}

QString UpdateObject::messageString() const {
    return m_core.messageString();
}

void UpdateObject::setMessages(const QList<qint32> &messages) {
    if(m_core.messages() == messages) return;
    m_core.setMessages(messages);
    Q_EMIT messagesChanged();
    Q_EMIT coreChanged();
}

QList<qint32> UpdateObject::messages() const {
    return m_core.messages();
}

void UpdateObject::setMsgIdInputBotInlineMessageID(InputBotInlineMessageIDObject* msgIdInputBotInlineMessageID) {
    if(m_msgIdInputBotInlineMessageID == msgIdInputBotInlineMessageID) return;
    if(m_msgIdInputBotInlineMessageID) delete m_msgIdInputBotInlineMessageID;
    m_msgIdInputBotInlineMessageID = msgIdInputBotInlineMessageID;
    if(m_msgIdInputBotInlineMessageID) {
        m_msgIdInputBotInlineMessageID->setParent(this);
        m_core.setMsgIdInputBotInlineMessageID(m_msgIdInputBotInlineMessageID->core());
        connect(m_msgIdInputBotInlineMessageID.data(), SIGNAL(coreChanged()), this, SLOT(coreMsgIdInputBotInlineMessageIDChanged()));
    }
    Q_EMIT msgIdInputBotInlineMessageIDChanged();
    Q_EMIT coreChanged();
}

InputBotInlineMessageIDObject*  UpdateObject::msgIdInputBotInlineMessageID() const {
    return m_msgIdInputBotInlineMessageID;
}

void UpdateObject::setMsgIdInt(qint32 msgIdInt) {
    if(m_core.msgIdInt() == msgIdInt) return;
    m_core.setMsgIdInt(msgIdInt);
    Q_EMIT msgIdIntChanged();
    Q_EMIT coreChanged();
}

qint32 UpdateObject::msgIdInt() const {
    return m_core.msgIdInt();
}

void UpdateObject::setMyLink(ContactLinkObject* myLink) {
    if(m_myLink == myLink) return;
    if(m_myLink) delete m_myLink;
    m_myLink = myLink;
    if(m_myLink) {
        m_myLink->setParent(this);
        m_core.setMyLink(m_myLink->core());
        connect(m_myLink.data(), SIGNAL(coreChanged()), this, SLOT(coreMyLinkChanged()));
    }
    Q_EMIT myLinkChanged();
    Q_EMIT coreChanged();
}

ContactLinkObject*  UpdateObject::myLink() const {
    return m_myLink;
}

void UpdateObject::setNotifySettings(PeerNotifySettingsObject* notifySettings) {
    if(m_notifySettings == notifySettings) return;
    if(m_notifySettings) delete m_notifySettings;
    m_notifySettings = notifySettings;
    if(m_notifySettings) {
        m_notifySettings->setParent(this);
        m_core.setNotifySettings(m_notifySettings->core());
        connect(m_notifySettings.data(), SIGNAL(coreChanged()), this, SLOT(coreNotifySettingsChanged()));
    }
    Q_EMIT notifySettingsChanged();
    Q_EMIT coreChanged();
}

PeerNotifySettingsObject*  UpdateObject::notifySettings() const {
    return m_notifySettings;
}

void UpdateObject::setOffset(const QString &offset) {
    if(m_core.offset() == offset) return;
    m_core.setOffset(offset);
    Q_EMIT offsetChanged();
    Q_EMIT coreChanged();
}

QString UpdateObject::offset() const {
    return m_core.offset();
}

void UpdateObject::setOrderVectorPeer(const QList<Peer> &orderVectorPeer) {
    if(m_core.orderVectorPeer() == orderVectorPeer) return;
    m_core.setOrderVectorPeer(orderVectorPeer);
    Q_EMIT orderVectorPeerChanged();
    Q_EMIT coreChanged();
}

QList<Peer> UpdateObject::orderVectorPeer() const {
    return m_core.orderVectorPeer();
}

void UpdateObject::setOrderVectorlong(const QList<qint64> &orderVectorlong) {
    if(m_core.orderVectorlong() == orderVectorlong) return;
    m_core.setOrderVectorlong(orderVectorlong);
    Q_EMIT orderVectorlongChanged();
    Q_EMIT coreChanged();
}

QList<qint64> UpdateObject::orderVectorlong() const {
    return m_core.orderVectorlong();
}

void UpdateObject::setParticipants(ChatParticipantsObject* participants) {
    if(m_participants == participants) return;
    if(m_participants) delete m_participants;
    m_participants = participants;
    if(m_participants) {
        m_participants->setParent(this);
        m_core.setParticipants(m_participants->core());
        connect(m_participants.data(), SIGNAL(coreChanged()), this, SLOT(coreParticipantsChanged()));
    }
    Q_EMIT participantsChanged();
    Q_EMIT coreChanged();
}

ChatParticipantsObject*  UpdateObject::participants() const {
    return m_participants;
}

void UpdateObject::setPayload(const QByteArray &payload) {
    if(m_core.payload() == payload) return;
    m_core.setPayload(payload);
    Q_EMIT payloadChanged();
    Q_EMIT coreChanged();
}

QByteArray UpdateObject::payload() const {
    return m_core.payload();
}

void UpdateObject::setPeerNotify(NotifyPeerObject* peerNotify) {
    if(m_peerNotify == peerNotify) return;
    if(m_peerNotify) delete m_peerNotify;
    m_peerNotify = peerNotify;
    if(m_peerNotify) {
        m_peerNotify->setParent(this);
        m_core.setPeerNotify(m_peerNotify->core());
        connect(m_peerNotify.data(), SIGNAL(coreChanged()), this, SLOT(corePeerNotifyChanged()));
    }
    Q_EMIT peerNotifyChanged();
    Q_EMIT coreChanged();
}

NotifyPeerObject*  UpdateObject::peerNotify() const {
    return m_peerNotify;
}

void UpdateObject::setPeer(PeerObject* peer) {
    if(m_peer == peer) return;
    if(m_peer) delete m_peer;
    m_peer = peer;
    if(m_peer) {
        m_peer->setParent(this);
        m_core.setPeer(m_peer->core());
        connect(m_peer.data(), SIGNAL(coreChanged()), this, SLOT(corePeerChanged()));
    }
    Q_EMIT peerChanged();
    Q_EMIT coreChanged();
}

PeerObject*  UpdateObject::peer() const {
    return m_peer;
}

void UpdateObject::setPhone(const QString &phone) {
    if(m_core.phone() == phone) return;
    m_core.setPhone(phone);
    Q_EMIT phoneChanged();
    Q_EMIT coreChanged();
}

QString UpdateObject::phone() const {
    return m_core.phone();
}

void UpdateObject::setPhoneCall(PhoneCallObject* phoneCall) {
    if(m_phoneCall == phoneCall) return;
    if(m_phoneCall) delete m_phoneCall;
    m_phoneCall = phoneCall;
    if(m_phoneCall) {
        m_phoneCall->setParent(this);
        m_core.setPhoneCall(m_phoneCall->core());
        connect(m_phoneCall.data(), SIGNAL(coreChanged()), this, SLOT(corePhoneCallChanged()));
    }
    Q_EMIT phoneCallChanged();
    Q_EMIT coreChanged();
}

PhoneCallObject*  UpdateObject::phoneCall() const {
    return m_phoneCall;
}

void UpdateObject::setPhoto(UserProfilePhotoObject* photo) {
    if(m_photo == photo) return;
    if(m_photo) delete m_photo;
    m_photo = photo;
    if(m_photo) {
        m_photo->setParent(this);
        m_core.setPhoto(m_photo->core());
        connect(m_photo.data(), SIGNAL(coreChanged()), this, SLOT(corePhotoChanged()));
    }
    Q_EMIT photoChanged();
    Q_EMIT coreChanged();
}

UserProfilePhotoObject*  UpdateObject::photo() const {
    return m_photo;
}

void UpdateObject::setPinned(bool pinned) {
    if(m_core.pinned() == pinned) return;
    m_core.setPinned(pinned);
    Q_EMIT pinnedChanged();
    Q_EMIT coreChanged();
}

bool UpdateObject::pinned() const {
    return m_core.pinned();
}

void UpdateObject::setPopup(bool popup) {
    if(m_core.popup() == popup) return;
    m_core.setPopup(popup);
    Q_EMIT popupChanged();
    Q_EMIT coreChanged();
}

bool UpdateObject::popup() const {
    return m_core.popup();
}

void UpdateObject::setPrevious(bool previous) {
    if(m_core.previous() == previous) return;
    m_core.setPrevious(previous);
    Q_EMIT previousChanged();
    Q_EMIT coreChanged();
}

bool UpdateObject::previous() const {
    return m_core.previous();
}

void UpdateObject::setPts(qint32 pts) {
    if(m_core.pts() == pts) return;
    m_core.setPts(pts);
    Q_EMIT ptsChanged();
    Q_EMIT coreChanged();
}

qint32 UpdateObject::pts() const {
    return m_core.pts();
}

void UpdateObject::setPtsCount(qint32 ptsCount) {
    if(m_core.ptsCount() == ptsCount) return;
    m_core.setPtsCount(ptsCount);
    Q_EMIT ptsCountChanged();
    Q_EMIT coreChanged();
}

qint32 UpdateObject::ptsCount() const {
    return m_core.ptsCount();
}

void UpdateObject::setQts(qint32 qts) {
    if(m_core.qts() == qts) return;
    m_core.setQts(qts);
    Q_EMIT qtsChanged();
    Q_EMIT coreChanged();
}

qint32 UpdateObject::qts() const {
    return m_core.qts();
}

void UpdateObject::setQuery(const QString &query) {
    if(m_core.query() == query) return;
    m_core.setQuery(query);
    Q_EMIT queryChanged();
    Q_EMIT coreChanged();
}

QString UpdateObject::query() const {
    return m_core.query();
}

void UpdateObject::setQueryId(qint64 queryId) {
    if(m_core.queryId() == queryId) return;
    m_core.setQueryId(queryId);
    Q_EMIT queryIdChanged();
    Q_EMIT coreChanged();
}

qint64 UpdateObject::queryId() const {
    return m_core.queryId();
}

void UpdateObject::setRandomId(qint64 randomId) {
    if(m_core.randomId() == randomId) return;
    m_core.setRandomId(randomId);
    Q_EMIT randomIdChanged();
    Q_EMIT coreChanged();
}

qint64 UpdateObject::randomId() const {
    return m_core.randomId();
}

void UpdateObject::setRules(const QList<PrivacyRule> &rules) {
    if(m_core.rules() == rules) return;
    m_core.setRules(rules);
    Q_EMIT rulesChanged();
    Q_EMIT coreChanged();
}

QList<PrivacyRule> UpdateObject::rules() const {
    return m_core.rules();
}

void UpdateObject::setShippingAddress(PostAddressObject* shippingAddress) {
    if(m_shippingAddress == shippingAddress) return;
    if(m_shippingAddress) delete m_shippingAddress;
    m_shippingAddress = shippingAddress;
    if(m_shippingAddress) {
        m_shippingAddress->setParent(this);
        m_core.setShippingAddress(m_shippingAddress->core());
        connect(m_shippingAddress.data(), SIGNAL(coreChanged()), this, SLOT(coreShippingAddressChanged()));
    }
    Q_EMIT shippingAddressChanged();
    Q_EMIT coreChanged();
}

PostAddressObject*  UpdateObject::shippingAddress() const {
    return m_shippingAddress;
}

void UpdateObject::setShippingOptionId(const QString &shippingOptionId) {
    if(m_core.shippingOptionId() == shippingOptionId) return;
    m_core.setShippingOptionId(shippingOptionId);
    Q_EMIT shippingOptionIdChanged();
    Q_EMIT coreChanged();
}

QString UpdateObject::shippingOptionId() const {
    return m_core.shippingOptionId();
}

void UpdateObject::setStatus(UserStatusObject* status) {
    if(m_status == status) return;
    if(m_status) delete m_status;
    m_status = status;
    if(m_status) {
        m_status->setParent(this);
        m_core.setStatus(m_status->core());
        connect(m_status.data(), SIGNAL(coreChanged()), this, SLOT(coreStatusChanged()));
    }
    Q_EMIT statusChanged();
    Q_EMIT coreChanged();
}

UserStatusObject*  UpdateObject::status() const {
    return m_status;
}

void UpdateObject::setStickerset(MessagesStickerSetObject* stickerset) {
    if(m_stickerset == stickerset) return;
    if(m_stickerset) delete m_stickerset;
    m_stickerset = stickerset;
    if(m_stickerset) {
        m_stickerset->setParent(this);
        m_core.setStickerset(m_stickerset->core());
        connect(m_stickerset.data(), SIGNAL(coreChanged()), this, SLOT(coreStickersetChanged()));
    }
    Q_EMIT stickersetChanged();
    Q_EMIT coreChanged();
}

MessagesStickerSetObject*  UpdateObject::stickerset() const {
    return m_stickerset;
}

void UpdateObject::setTimeout(qint32 timeout) {
    if(m_core.timeout() == timeout) return;
    m_core.setTimeout(timeout);
    Q_EMIT timeoutChanged();
    Q_EMIT coreChanged();
}

qint32 UpdateObject::timeout() const {
    return m_core.timeout();
}

void UpdateObject::setTotalAmount(qint64 totalAmount) {
    if(m_core.totalAmount() == totalAmount) return;
    m_core.setTotalAmount(totalAmount);
    Q_EMIT totalAmountChanged();
    Q_EMIT coreChanged();
}

qint64 UpdateObject::totalAmount() const {
    return m_core.totalAmount();
}

void UpdateObject::setType(const QString &type) {
    if(m_core.type() == type) return;
    m_core.setType(type);
    Q_EMIT typeChanged();
    Q_EMIT coreChanged();
}

QString UpdateObject::type() const {
    return m_core.type();
}

void UpdateObject::setUserId(qint32 userId) {
    if(m_core.userId() == userId) return;
    m_core.setUserId(userId);
    Q_EMIT userIdChanged();
    Q_EMIT coreChanged();
}

qint32 UpdateObject::userId() const {
    return m_core.userId();
}

void UpdateObject::setUsername(const QString &username) {
    if(m_core.username() == username) return;
    m_core.setUsername(username);
    Q_EMIT usernameChanged();
    Q_EMIT coreChanged();
}

QString UpdateObject::username() const {
    return m_core.username();
}

void UpdateObject::setVersion(qint32 version) {
    if(m_core.version() == version) return;
    m_core.setVersion(version);
    Q_EMIT versionChanged();
    Q_EMIT coreChanged();
}

qint32 UpdateObject::version() const {
    return m_core.version();
}

void UpdateObject::setViews(qint32 views) {
    if(m_core.views() == views) return;
    m_core.setViews(views);
    Q_EMIT viewsChanged();
    Q_EMIT coreChanged();
}

qint32 UpdateObject::views() const {
    return m_core.views();
}

void UpdateObject::setWebpage(WebPageObject* webpage) {
    if(m_webpage == webpage) return;
    if(m_webpage) delete m_webpage;
    m_webpage = webpage;
    if(m_webpage) {
        m_webpage->setParent(this);
        m_core.setWebpage(m_webpage->core());
        connect(m_webpage.data(), SIGNAL(coreChanged()), this, SLOT(coreWebpageChanged()));
    }
    Q_EMIT webpageChanged();
    Q_EMIT coreChanged();
}

WebPageObject*  UpdateObject::webpage() const {
    return m_webpage;
}

UpdateObject &UpdateObject::operator =(const Update &b) {
    if(m_core == b) return *this;
    m_core = b;
    m_action->setCore(b.action());
    m_chat->setCore(b.chat());
    m_dataJSON->setCore(b.dataJSON());
    m_difference->setCore(b.difference());
    m_draft->setCore(b.draft());
    m_foreignLink->setCore(b.foreignLink());
    m_geo->setCore(b.geo());
    m_info->setCore(b.info());
    m_key->setCore(b.key());
    m_media->setCore(b.media());
    m_messageEncrypted->setCore(b.messageEncrypted());
    m_message->setCore(b.message());
    m_msgIdInputBotInlineMessageID->setCore(b.msgIdInputBotInlineMessageID());
    m_myLink->setCore(b.myLink());
    m_notifySettings->setCore(b.notifySettings());
    m_participants->setCore(b.participants());
    m_peerNotify->setCore(b.peerNotify());
    m_peer->setCore(b.peer());
    m_phoneCall->setCore(b.phoneCall());
    m_photo->setCore(b.photo());
    m_shippingAddress->setCore(b.shippingAddress());
    m_status->setCore(b.status());
    m_stickerset->setCore(b.stickerset());
    m_webpage->setCore(b.webpage());

    Q_EMIT actionChanged();
    Q_EMIT blockedChanged();
    Q_EMIT channelIdChanged();
    Q_EMIT chatChanged();
    Q_EMIT chatIdChanged();
    Q_EMIT chatInstanceChanged();
    Q_EMIT currencyChanged();
    Q_EMIT dataJSONChanged();
    Q_EMIT dataBytesChanged();
    Q_EMIT dateChanged();
    Q_EMIT dcOptionsChanged();
    Q_EMIT differenceChanged();
    Q_EMIT draftChanged();
    Q_EMIT enabledChanged();
    Q_EMIT entitiesChanged();
    Q_EMIT firstNameChanged();
    Q_EMIT flagsChanged();
    Q_EMIT foreignLinkChanged();
    Q_EMIT gameShortNameChanged();
    Q_EMIT geoChanged();
    Q_EMIT idStringChanged();
    Q_EMIT idIntChanged();
    Q_EMIT inboxDateChanged();
    Q_EMIT infoChanged();
    Q_EMIT inviterIdChanged();
    Q_EMIT isAdminChanged();
    Q_EMIT keyChanged();
    Q_EMIT lastNameChanged();
    Q_EMIT masksChanged();
    Q_EMIT maxDateChanged();
    Q_EMIT maxIdChanged();
    Q_EMIT mediaChanged();
    Q_EMIT messageEncryptedChanged();
    Q_EMIT messageChanged();
    Q_EMIT messageStringChanged();
    Q_EMIT messagesChanged();
    Q_EMIT msgIdInputBotInlineMessageIDChanged();
    Q_EMIT msgIdIntChanged();
    Q_EMIT myLinkChanged();
    Q_EMIT notifySettingsChanged();
    Q_EMIT offsetChanged();
    Q_EMIT orderVectorPeerChanged();
    Q_EMIT orderVectorlongChanged();
    Q_EMIT participantsChanged();
    Q_EMIT payloadChanged();
    Q_EMIT peerNotifyChanged();
    Q_EMIT peerChanged();
    Q_EMIT phoneChanged();
    Q_EMIT phoneCallChanged();
    Q_EMIT photoChanged();
    Q_EMIT pinnedChanged();
    Q_EMIT popupChanged();
    Q_EMIT previousChanged();
    Q_EMIT ptsChanged();
    Q_EMIT ptsCountChanged();
    Q_EMIT qtsChanged();
    Q_EMIT queryChanged();
    Q_EMIT queryIdChanged();
    Q_EMIT randomIdChanged();
    Q_EMIT rulesChanged();
    Q_EMIT shippingAddressChanged();
    Q_EMIT shippingOptionIdChanged();
    Q_EMIT statusChanged();
    Q_EMIT stickersetChanged();
    Q_EMIT timeoutChanged();
    Q_EMIT totalAmountChanged();
    Q_EMIT typeChanged();
    Q_EMIT userIdChanged();
    Q_EMIT usernameChanged();
    Q_EMIT versionChanged();
    Q_EMIT viewsChanged();
    Q_EMIT webpageChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool UpdateObject::operator ==(const Update &b) const {
    return m_core == b;
}

void UpdateObject::setClassType(quint32 classType) {
    Update::UpdateClassType result;
    switch(classType) {
    case TypeUpdateNewMessage:
        result = Update::typeUpdateNewMessage;
        break;
    case TypeUpdateMessageID:
        result = Update::typeUpdateMessageID;
        break;
    case TypeUpdateDeleteMessages:
        result = Update::typeUpdateDeleteMessages;
        break;
    case TypeUpdateUserTyping:
        result = Update::typeUpdateUserTyping;
        break;
    case TypeUpdateChatUserTyping:
        result = Update::typeUpdateChatUserTyping;
        break;
    case TypeUpdateChatParticipants:
        result = Update::typeUpdateChatParticipants;
        break;
    case TypeUpdateUserStatus:
        result = Update::typeUpdateUserStatus;
        break;
    case TypeUpdateUserName:
        result = Update::typeUpdateUserName;
        break;
    case TypeUpdateUserPhoto:
        result = Update::typeUpdateUserPhoto;
        break;
    case TypeUpdateContactRegistered:
        result = Update::typeUpdateContactRegistered;
        break;
    case TypeUpdateContactLink:
        result = Update::typeUpdateContactLink;
        break;
    case TypeUpdateNewEncryptedMessage:
        result = Update::typeUpdateNewEncryptedMessage;
        break;
    case TypeUpdateEncryptedChatTyping:
        result = Update::typeUpdateEncryptedChatTyping;
        break;
    case TypeUpdateEncryption:
        result = Update::typeUpdateEncryption;
        break;
    case TypeUpdateEncryptedMessagesRead:
        result = Update::typeUpdateEncryptedMessagesRead;
        break;
    case TypeUpdateChatParticipantAdd:
        result = Update::typeUpdateChatParticipantAdd;
        break;
    case TypeUpdateChatParticipantDelete:
        result = Update::typeUpdateChatParticipantDelete;
        break;
    case TypeUpdateDcOptions:
        result = Update::typeUpdateDcOptions;
        break;
    case TypeUpdateUserBlocked:
        result = Update::typeUpdateUserBlocked;
        break;
    case TypeUpdateNotifySettings:
        result = Update::typeUpdateNotifySettings;
        break;
    case TypeUpdateServiceNotification:
        result = Update::typeUpdateServiceNotification;
        break;
    case TypeUpdatePrivacy:
        result = Update::typeUpdatePrivacy;
        break;
    case TypeUpdateUserPhone:
        result = Update::typeUpdateUserPhone;
        break;
    case TypeUpdateReadHistoryInbox:
        result = Update::typeUpdateReadHistoryInbox;
        break;
    case TypeUpdateReadHistoryOutbox:
        result = Update::typeUpdateReadHistoryOutbox;
        break;
    case TypeUpdateWebPage:
        result = Update::typeUpdateWebPage;
        break;
    case TypeUpdateReadMessagesContents:
        result = Update::typeUpdateReadMessagesContents;
        break;
    case TypeUpdateChannelTooLong:
        result = Update::typeUpdateChannelTooLong;
        break;
    case TypeUpdateChannel:
        result = Update::typeUpdateChannel;
        break;
    case TypeUpdateNewChannelMessage:
        result = Update::typeUpdateNewChannelMessage;
        break;
    case TypeUpdateReadChannelInbox:
        result = Update::typeUpdateReadChannelInbox;
        break;
    case TypeUpdateDeleteChannelMessages:
        result = Update::typeUpdateDeleteChannelMessages;
        break;
    case TypeUpdateChannelMessageViews:
        result = Update::typeUpdateChannelMessageViews;
        break;
    case TypeUpdateChatAdmins:
        result = Update::typeUpdateChatAdmins;
        break;
    case TypeUpdateChatParticipantAdmin:
        result = Update::typeUpdateChatParticipantAdmin;
        break;
    case TypeUpdateNewStickerSet:
        result = Update::typeUpdateNewStickerSet;
        break;
    case TypeUpdateStickerSetsOrder:
        result = Update::typeUpdateStickerSetsOrder;
        break;
    case TypeUpdateStickerSets:
        result = Update::typeUpdateStickerSets;
        break;
    case TypeUpdateSavedGifs:
        result = Update::typeUpdateSavedGifs;
        break;
    case TypeUpdateBotInlineQuery:
        result = Update::typeUpdateBotInlineQuery;
        break;
    case TypeUpdateBotInlineSend:
        result = Update::typeUpdateBotInlineSend;
        break;
    case TypeUpdateEditChannelMessage:
        result = Update::typeUpdateEditChannelMessage;
        break;
    case TypeUpdateChannelPinnedMessage:
        result = Update::typeUpdateChannelPinnedMessage;
        break;
    case TypeUpdateBotCallbackQuery:
        result = Update::typeUpdateBotCallbackQuery;
        break;
    case TypeUpdateEditMessage:
        result = Update::typeUpdateEditMessage;
        break;
    case TypeUpdateInlineBotCallbackQuery:
        result = Update::typeUpdateInlineBotCallbackQuery;
        break;
    case TypeUpdateReadChannelOutbox:
        result = Update::typeUpdateReadChannelOutbox;
        break;
    case TypeUpdateDraftMessage:
        result = Update::typeUpdateDraftMessage;
        break;
    case TypeUpdateReadFeaturedStickers:
        result = Update::typeUpdateReadFeaturedStickers;
        break;
    case TypeUpdateRecentStickers:
        result = Update::typeUpdateRecentStickers;
        break;
    case TypeUpdateConfig:
        result = Update::typeUpdateConfig;
        break;
    case TypeUpdatePtsChanged:
        result = Update::typeUpdatePtsChanged;
        break;
    case TypeUpdateChannelWebPage:
        result = Update::typeUpdateChannelWebPage;
        break;
    case TypeUpdateDialogPinned:
        result = Update::typeUpdateDialogPinned;
        break;
    case TypeUpdatePinnedDialogs:
        result = Update::typeUpdatePinnedDialogs;
        break;
    case TypeUpdateBotWebhookJSON:
        result = Update::typeUpdateBotWebhookJSON;
        break;
    case TypeUpdateBotWebhookJSONQuery:
        result = Update::typeUpdateBotWebhookJSONQuery;
        break;
    case TypeUpdateBotShippingQuery:
        result = Update::typeUpdateBotShippingQuery;
        break;
    case TypeUpdateBotPrecheckoutQuery:
        result = Update::typeUpdateBotPrecheckoutQuery;
        break;
    case TypeUpdatePhoneCall:
        result = Update::typeUpdatePhoneCall;
        break;
    case TypeUpdateLangPackTooLong:
        result = Update::typeUpdateLangPackTooLong;
        break;
    case TypeUpdateLangPack:
        result = Update::typeUpdateLangPack;
        break;
    default:
        result = Update::typeUpdateNewMessage;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 UpdateObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case Update::typeUpdateNewMessage:
        result = TypeUpdateNewMessage;
        break;
    case Update::typeUpdateMessageID:
        result = TypeUpdateMessageID;
        break;
    case Update::typeUpdateDeleteMessages:
        result = TypeUpdateDeleteMessages;
        break;
    case Update::typeUpdateUserTyping:
        result = TypeUpdateUserTyping;
        break;
    case Update::typeUpdateChatUserTyping:
        result = TypeUpdateChatUserTyping;
        break;
    case Update::typeUpdateChatParticipants:
        result = TypeUpdateChatParticipants;
        break;
    case Update::typeUpdateUserStatus:
        result = TypeUpdateUserStatus;
        break;
    case Update::typeUpdateUserName:
        result = TypeUpdateUserName;
        break;
    case Update::typeUpdateUserPhoto:
        result = TypeUpdateUserPhoto;
        break;
    case Update::typeUpdateContactRegistered:
        result = TypeUpdateContactRegistered;
        break;
    case Update::typeUpdateContactLink:
        result = TypeUpdateContactLink;
        break;
    case Update::typeUpdateNewEncryptedMessage:
        result = TypeUpdateNewEncryptedMessage;
        break;
    case Update::typeUpdateEncryptedChatTyping:
        result = TypeUpdateEncryptedChatTyping;
        break;
    case Update::typeUpdateEncryption:
        result = TypeUpdateEncryption;
        break;
    case Update::typeUpdateEncryptedMessagesRead:
        result = TypeUpdateEncryptedMessagesRead;
        break;
    case Update::typeUpdateChatParticipantAdd:
        result = TypeUpdateChatParticipantAdd;
        break;
    case Update::typeUpdateChatParticipantDelete:
        result = TypeUpdateChatParticipantDelete;
        break;
    case Update::typeUpdateDcOptions:
        result = TypeUpdateDcOptions;
        break;
    case Update::typeUpdateUserBlocked:
        result = TypeUpdateUserBlocked;
        break;
    case Update::typeUpdateNotifySettings:
        result = TypeUpdateNotifySettings;
        break;
    case Update::typeUpdateServiceNotification:
        result = TypeUpdateServiceNotification;
        break;
    case Update::typeUpdatePrivacy:
        result = TypeUpdatePrivacy;
        break;
    case Update::typeUpdateUserPhone:
        result = TypeUpdateUserPhone;
        break;
    case Update::typeUpdateReadHistoryInbox:
        result = TypeUpdateReadHistoryInbox;
        break;
    case Update::typeUpdateReadHistoryOutbox:
        result = TypeUpdateReadHistoryOutbox;
        break;
    case Update::typeUpdateWebPage:
        result = TypeUpdateWebPage;
        break;
    case Update::typeUpdateReadMessagesContents:
        result = TypeUpdateReadMessagesContents;
        break;
    case Update::typeUpdateChannelTooLong:
        result = TypeUpdateChannelTooLong;
        break;
    case Update::typeUpdateChannel:
        result = TypeUpdateChannel;
        break;
    case Update::typeUpdateNewChannelMessage:
        result = TypeUpdateNewChannelMessage;
        break;
    case Update::typeUpdateReadChannelInbox:
        result = TypeUpdateReadChannelInbox;
        break;
    case Update::typeUpdateDeleteChannelMessages:
        result = TypeUpdateDeleteChannelMessages;
        break;
    case Update::typeUpdateChannelMessageViews:
        result = TypeUpdateChannelMessageViews;
        break;
    case Update::typeUpdateChatAdmins:
        result = TypeUpdateChatAdmins;
        break;
    case Update::typeUpdateChatParticipantAdmin:
        result = TypeUpdateChatParticipantAdmin;
        break;
    case Update::typeUpdateNewStickerSet:
        result = TypeUpdateNewStickerSet;
        break;
    case Update::typeUpdateStickerSetsOrder:
        result = TypeUpdateStickerSetsOrder;
        break;
    case Update::typeUpdateStickerSets:
        result = TypeUpdateStickerSets;
        break;
    case Update::typeUpdateSavedGifs:
        result = TypeUpdateSavedGifs;
        break;
    case Update::typeUpdateBotInlineQuery:
        result = TypeUpdateBotInlineQuery;
        break;
    case Update::typeUpdateBotInlineSend:
        result = TypeUpdateBotInlineSend;
        break;
    case Update::typeUpdateEditChannelMessage:
        result = TypeUpdateEditChannelMessage;
        break;
    case Update::typeUpdateChannelPinnedMessage:
        result = TypeUpdateChannelPinnedMessage;
        break;
    case Update::typeUpdateBotCallbackQuery:
        result = TypeUpdateBotCallbackQuery;
        break;
    case Update::typeUpdateEditMessage:
        result = TypeUpdateEditMessage;
        break;
    case Update::typeUpdateInlineBotCallbackQuery:
        result = TypeUpdateInlineBotCallbackQuery;
        break;
    case Update::typeUpdateReadChannelOutbox:
        result = TypeUpdateReadChannelOutbox;
        break;
    case Update::typeUpdateDraftMessage:
        result = TypeUpdateDraftMessage;
        break;
    case Update::typeUpdateReadFeaturedStickers:
        result = TypeUpdateReadFeaturedStickers;
        break;
    case Update::typeUpdateRecentStickers:
        result = TypeUpdateRecentStickers;
        break;
    case Update::typeUpdateConfig:
        result = TypeUpdateConfig;
        break;
    case Update::typeUpdatePtsChanged:
        result = TypeUpdatePtsChanged;
        break;
    case Update::typeUpdateChannelWebPage:
        result = TypeUpdateChannelWebPage;
        break;
    case Update::typeUpdateDialogPinned:
        result = TypeUpdateDialogPinned;
        break;
    case Update::typeUpdatePinnedDialogs:
        result = TypeUpdatePinnedDialogs;
        break;
    case Update::typeUpdateBotWebhookJSON:
        result = TypeUpdateBotWebhookJSON;
        break;
    case Update::typeUpdateBotWebhookJSONQuery:
        result = TypeUpdateBotWebhookJSONQuery;
        break;
    case Update::typeUpdateBotShippingQuery:
        result = TypeUpdateBotShippingQuery;
        break;
    case Update::typeUpdateBotPrecheckoutQuery:
        result = TypeUpdateBotPrecheckoutQuery;
        break;
    case Update::typeUpdatePhoneCall:
        result = TypeUpdatePhoneCall;
        break;
    case Update::typeUpdateLangPackTooLong:
        result = TypeUpdateLangPackTooLong;
        break;
    case Update::typeUpdateLangPack:
        result = TypeUpdateLangPack;
        break;
    default:
        result = TypeUpdateNewMessage;
        break;
    }

    return result;
}

void UpdateObject::setCore(const Update &core) {
    operator =(core);
}

Update UpdateObject::core() const {
    return m_core;
}

void UpdateObject::coreActionChanged() {
    if(m_core.action() == m_action->core()) return;
    m_core.setAction(m_action->core());
    Q_EMIT actionChanged();
    Q_EMIT coreChanged();
}

void UpdateObject::coreChatChanged() {
    if(m_core.chat() == m_chat->core()) return;
    m_core.setChat(m_chat->core());
    Q_EMIT chatChanged();
    Q_EMIT coreChanged();
}

void UpdateObject::coreDataJSONChanged() {
    if(m_core.dataJSON() == m_dataJSON->core()) return;
    m_core.setDataJSON(m_dataJSON->core());
    Q_EMIT dataJSONChanged();
    Q_EMIT coreChanged();
}

void UpdateObject::coreDifferenceChanged() {
    if(m_core.difference() == m_difference->core()) return;
    m_core.setDifference(m_difference->core());
    Q_EMIT differenceChanged();
    Q_EMIT coreChanged();
}

void UpdateObject::coreDraftChanged() {
    if(m_core.draft() == m_draft->core()) return;
    m_core.setDraft(m_draft->core());
    Q_EMIT draftChanged();
    Q_EMIT coreChanged();
}

void UpdateObject::coreForeignLinkChanged() {
    if(m_core.foreignLink() == m_foreignLink->core()) return;
    m_core.setForeignLink(m_foreignLink->core());
    Q_EMIT foreignLinkChanged();
    Q_EMIT coreChanged();
}

void UpdateObject::coreGeoChanged() {
    if(m_core.geo() == m_geo->core()) return;
    m_core.setGeo(m_geo->core());
    Q_EMIT geoChanged();
    Q_EMIT coreChanged();
}

void UpdateObject::coreInfoChanged() {
    if(m_core.info() == m_info->core()) return;
    m_core.setInfo(m_info->core());
    Q_EMIT infoChanged();
    Q_EMIT coreChanged();
}

void UpdateObject::coreKeyChanged() {
    if(m_core.key() == m_key->core()) return;
    m_core.setKey(m_key->core());
    Q_EMIT keyChanged();
    Q_EMIT coreChanged();
}

void UpdateObject::coreMediaChanged() {
    if(m_core.media() == m_media->core()) return;
    m_core.setMedia(m_media->core());
    Q_EMIT mediaChanged();
    Q_EMIT coreChanged();
}

void UpdateObject::coreMessageEncryptedChanged() {
    if(m_core.messageEncrypted() == m_messageEncrypted->core()) return;
    m_core.setMessageEncrypted(m_messageEncrypted->core());
    Q_EMIT messageEncryptedChanged();
    Q_EMIT coreChanged();
}

void UpdateObject::coreMessageChanged() {
    if(m_core.message() == m_message->core()) return;
    m_core.setMessage(m_message->core());
    Q_EMIT messageChanged();
    Q_EMIT coreChanged();
}

void UpdateObject::coreMsgIdInputBotInlineMessageIDChanged() {
    if(m_core.msgIdInputBotInlineMessageID() == m_msgIdInputBotInlineMessageID->core()) return;
    m_core.setMsgIdInputBotInlineMessageID(m_msgIdInputBotInlineMessageID->core());
    Q_EMIT msgIdInputBotInlineMessageIDChanged();
    Q_EMIT coreChanged();
}

void UpdateObject::coreMyLinkChanged() {
    if(m_core.myLink() == m_myLink->core()) return;
    m_core.setMyLink(m_myLink->core());
    Q_EMIT myLinkChanged();
    Q_EMIT coreChanged();
}

void UpdateObject::coreNotifySettingsChanged() {
    if(m_core.notifySettings() == m_notifySettings->core()) return;
    m_core.setNotifySettings(m_notifySettings->core());
    Q_EMIT notifySettingsChanged();
    Q_EMIT coreChanged();
}

void UpdateObject::coreParticipantsChanged() {
    if(m_core.participants() == m_participants->core()) return;
    m_core.setParticipants(m_participants->core());
    Q_EMIT participantsChanged();
    Q_EMIT coreChanged();
}

void UpdateObject::corePeerNotifyChanged() {
    if(m_core.peerNotify() == m_peerNotify->core()) return;
    m_core.setPeerNotify(m_peerNotify->core());
    Q_EMIT peerNotifyChanged();
    Q_EMIT coreChanged();
}

void UpdateObject::corePeerChanged() {
    if(m_core.peer() == m_peer->core()) return;
    m_core.setPeer(m_peer->core());
    Q_EMIT peerChanged();
    Q_EMIT coreChanged();
}

void UpdateObject::corePhoneCallChanged() {
    if(m_core.phoneCall() == m_phoneCall->core()) return;
    m_core.setPhoneCall(m_phoneCall->core());
    Q_EMIT phoneCallChanged();
    Q_EMIT coreChanged();
}

void UpdateObject::corePhotoChanged() {
    if(m_core.photo() == m_photo->core()) return;
    m_core.setPhoto(m_photo->core());
    Q_EMIT photoChanged();
    Q_EMIT coreChanged();
}

void UpdateObject::coreShippingAddressChanged() {
    if(m_core.shippingAddress() == m_shippingAddress->core()) return;
    m_core.setShippingAddress(m_shippingAddress->core());
    Q_EMIT shippingAddressChanged();
    Q_EMIT coreChanged();
}

void UpdateObject::coreStatusChanged() {
    if(m_core.status() == m_status->core()) return;
    m_core.setStatus(m_status->core());
    Q_EMIT statusChanged();
    Q_EMIT coreChanged();
}

void UpdateObject::coreStickersetChanged() {
    if(m_core.stickerset() == m_stickerset->core()) return;
    m_core.setStickerset(m_stickerset->core());
    Q_EMIT stickersetChanged();
    Q_EMIT coreChanged();
}

void UpdateObject::coreWebpageChanged() {
    if(m_core.webpage() == m_webpage->core()) return;
    m_core.setWebpage(m_webpage->core());
    Q_EMIT webpageChanged();
    Q_EMIT coreChanged();
}

