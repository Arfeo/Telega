// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "webdocumentobject.h"

WebDocumentObject::WebDocumentObject(const WebDocument &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

WebDocumentObject::WebDocumentObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

WebDocumentObject::~WebDocumentObject() {
}

void WebDocumentObject::setAccessHash(qint64 accessHash) {
    if(m_core.accessHash() == accessHash) return;
    m_core.setAccessHash(accessHash);
    Q_EMIT accessHashChanged();
    Q_EMIT coreChanged();
}

qint64 WebDocumentObject::accessHash() const {
    return m_core.accessHash();
}

void WebDocumentObject::setAttributes(const QList<DocumentAttribute> &attributes) {
    if(m_core.attributes() == attributes) return;
    m_core.setAttributes(attributes);
    Q_EMIT attributesChanged();
    Q_EMIT coreChanged();
}

QList<DocumentAttribute> WebDocumentObject::attributes() const {
    return m_core.attributes();
}

void WebDocumentObject::setDcId(qint32 dcId) {
    if(m_core.dcId() == dcId) return;
    m_core.setDcId(dcId);
    Q_EMIT dcIdChanged();
    Q_EMIT coreChanged();
}

qint32 WebDocumentObject::dcId() const {
    return m_core.dcId();
}

void WebDocumentObject::setMimeType(const QString &mimeType) {
    if(m_core.mimeType() == mimeType) return;
    m_core.setMimeType(mimeType);
    Q_EMIT mimeTypeChanged();
    Q_EMIT coreChanged();
}

QString WebDocumentObject::mimeType() const {
    return m_core.mimeType();
}

void WebDocumentObject::setSize(qint32 size) {
    if(m_core.size() == size) return;
    m_core.setSize(size);
    Q_EMIT sizeChanged();
    Q_EMIT coreChanged();
}

qint32 WebDocumentObject::size() const {
    return m_core.size();
}

void WebDocumentObject::setUrl(const QString &url) {
    if(m_core.url() == url) return;
    m_core.setUrl(url);
    Q_EMIT urlChanged();
    Q_EMIT coreChanged();
}

QString WebDocumentObject::url() const {
    return m_core.url();
}

WebDocumentObject &WebDocumentObject::operator =(const WebDocument &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT accessHashChanged();
    Q_EMIT attributesChanged();
    Q_EMIT dcIdChanged();
    Q_EMIT mimeTypeChanged();
    Q_EMIT sizeChanged();
    Q_EMIT urlChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool WebDocumentObject::operator ==(const WebDocument &b) const {
    return m_core == b;
}

void WebDocumentObject::setClassType(quint32 classType) {
    WebDocument::WebDocumentClassType result;
    switch(classType) {
    case TypeWebDocument:
        result = WebDocument::typeWebDocument;
        break;
    default:
        result = WebDocument::typeWebDocument;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 WebDocumentObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case WebDocument::typeWebDocument:
        result = TypeWebDocument;
        break;
    default:
        result = TypeWebDocument;
        break;
    }

    return result;
}

void WebDocumentObject::setCore(const WebDocument &core) {
    operator =(core);
}

WebDocument WebDocumentObject::core() const {
    return m_core;
}

