// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "accountpasswordinputsettings.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

AccountPasswordInputSettings::AccountPasswordInputSettings(AccountPasswordInputSettingsClassType classType, InboundPkt *in) :
    m_flags(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

AccountPasswordInputSettings::AccountPasswordInputSettings(InboundPkt *in) :
    m_flags(0),
    m_classType(typeAccountPasswordInputSettings)
{
    fetch(in);
}

AccountPasswordInputSettings::AccountPasswordInputSettings(const AccountPasswordInputSettings &another) :
    TelegramTypeObject(),
    m_flags(0),
    m_classType(typeAccountPasswordInputSettings)
{
    operator=(another);
}

AccountPasswordInputSettings::AccountPasswordInputSettings(const Null &null) :
    TelegramTypeObject(null),
    m_flags(0),
    m_classType(typeAccountPasswordInputSettings)
{
}

AccountPasswordInputSettings::~AccountPasswordInputSettings() {

}

void AccountPasswordInputSettings::setEmail(const QString &email) {
    if(!email.isNull()) m_flags = (m_flags | (1<<1));
    else m_flags = (m_flags & ~(1<<1));
    m_email = email;
}

QString AccountPasswordInputSettings::email() const {
    return m_email;
}

void AccountPasswordInputSettings::setFlags(qint32 flags) {
    m_flags = flags;
}

qint32 AccountPasswordInputSettings::flags() const {
    return m_flags;
}

void AccountPasswordInputSettings::setHint(const QString &hint) {
    if(!hint.isNull()) m_flags = (m_flags | (1<<0));
    else m_flags = (m_flags & ~(1<<0));
    m_hint = hint;
}

QString AccountPasswordInputSettings::hint() const {
    return m_hint;
}

void AccountPasswordInputSettings::setNewPasswordHash(const QByteArray &newPasswordHash) {
    if(!newPasswordHash.isNull()) m_flags = (m_flags | (1<<0));
    else m_flags = (m_flags & ~(1<<0));
    m_newPasswordHash = newPasswordHash;
}

QByteArray AccountPasswordInputSettings::newPasswordHash() const {
    return m_newPasswordHash;
}

void AccountPasswordInputSettings::setNewSalt(const QByteArray &newSalt) {
    if(!newSalt.isNull()) m_flags = (m_flags | (1<<0));
    else m_flags = (m_flags & ~(1<<0));
    m_newSalt = newSalt;
}

QByteArray AccountPasswordInputSettings::newSalt() const {
    return m_newSalt;
}

bool AccountPasswordInputSettings::operator ==(const AccountPasswordInputSettings &b) const {
    return m_classType == b.m_classType &&
           m_email == b.m_email &&
           m_flags == b.m_flags &&
           m_hint == b.m_hint &&
           m_newPasswordHash == b.m_newPasswordHash &&
           m_newSalt == b.m_newSalt;
}

AccountPasswordInputSettings &AccountPasswordInputSettings::operator =(const AccountPasswordInputSettings &b) {
    m_classType = b.m_classType;
    m_email = b.m_email;
    m_flags = b.m_flags;
    m_hint = b.m_hint;
    m_newPasswordHash = b.m_newPasswordHash;
    m_newSalt = b.m_newSalt;
    setNull(b.isNull());
    return *this;
}

void AccountPasswordInputSettings::setClassType(AccountPasswordInputSettings::AccountPasswordInputSettingsClassType classType) {
    m_classType = classType;
}

AccountPasswordInputSettings::AccountPasswordInputSettingsClassType AccountPasswordInputSettings::classType() const {
    return m_classType;
}

bool AccountPasswordInputSettings::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeAccountPasswordInputSettings: {
        m_flags = in->fetchInt();
        if(m_flags & 1<<0) {
            m_newSalt = in->fetchBytes();
        }
        if(m_flags & 1<<0) {
            m_newPasswordHash = in->fetchBytes();
        }
        if(m_flags & 1<<0) {
            m_hint = in->fetchQString();
        }
        if(m_flags & 1<<1) {
            m_email = in->fetchQString();
        }
        m_classType = static_cast<AccountPasswordInputSettingsClassType>(x);
        return true;
    }
        break;

    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool AccountPasswordInputSettings::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeAccountPasswordInputSettings: {
        out->appendInt(m_flags);
        if(m_flags & 1<<0) {
            out->appendBytes(m_newSalt);
        }
        if(m_flags & 1<<0) {
            out->appendBytes(m_newPasswordHash);
        }
        if(m_flags & 1<<0) {
            out->appendQString(m_hint);
        }
        if(m_flags & 1<<1) {
            out->appendQString(m_email);
        }
        return true;
    }
        break;

    default:
        return false;
    }
}

QMap<QString, QVariant> AccountPasswordInputSettings::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeAccountPasswordInputSettings: {
        result["classType"] = "AccountPasswordInputSettings::typeAccountPasswordInputSettings";
        if( !m_newSalt.isEmpty() ) result["newSalt"] = QVariant::fromValue<QByteArray>(m_newSalt);
        if( !m_newPasswordHash.isEmpty() ) result["newPasswordHash"] = QVariant::fromValue<QByteArray>(m_newPasswordHash);
        if( !m_hint.isEmpty() ) result["hint"] = QVariant::fromValue<QString>(m_hint);
        if( !m_email.isEmpty() ) result["email"] = QVariant::fromValue<QString>(m_email);
        return result;
    }
        break;

    default:
        return result;
    }
}

AccountPasswordInputSettings AccountPasswordInputSettings::fromMap(const QMap<QString, QVariant> &map) {
    AccountPasswordInputSettings result;
    if(map.value("classType").toString() == "AccountPasswordInputSettings::typeAccountPasswordInputSettings") {
        result.setClassType(typeAccountPasswordInputSettings);
        QVariant _newSalt_var = map.value("newSalt");
        if( !_newSalt_var.isNull() ) {
            _newSalt_var.convert( QVariant::nameToType("QByteArray") );
            result.setNewSalt( _newSalt_var.value<QByteArray>() );
        }

        QVariant _newPasswordHash_var = map.value("newPasswordHash");
        if( !_newPasswordHash_var.isNull() ) {
            _newPasswordHash_var.convert( QVariant::nameToType("QByteArray") );
            result.setNewPasswordHash( _newPasswordHash_var.value<QByteArray>() );
        }

        QVariant _hint_var = map.value("hint");
        if( !_hint_var.isNull() ) {
            _hint_var.convert( QVariant::nameToType("QString") );
            result.setHint( _hint_var.value<QString>() );
        }

        QVariant _email_var = map.value("email");
        if( !_email_var.isNull() ) {
            _email_var.convert( QVariant::nameToType("QString") );
            result.setEmail( _email_var.value<QString>() );
        }

        return result;
    }
    return result;
}

AccountPasswordInputSettings AccountPasswordInputSettings::fromJson(const QString &json) {
    return AccountPasswordInputSettings::fromMap(QJsonDocument::fromJson(json.toUtf8()).toVariant().toMap());
}

QByteArray AccountPasswordInputSettings::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const AccountPasswordInputSettings &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case AccountPasswordInputSettings::typeAccountPasswordInputSettings:
        stream << item.flags();
        stream << item.newSalt();
        stream << item.newPasswordHash();
        stream << item.hint();
        stream << item.email();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, AccountPasswordInputSettings &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<AccountPasswordInputSettings::AccountPasswordInputSettingsClassType>(type));
    switch(type) {
    case AccountPasswordInputSettings::typeAccountPasswordInputSettings: {
        qint32 m_flags;
        stream >> m_flags;
        item.setFlags(m_flags);
        QByteArray m_new_salt;
        stream >> m_new_salt;
        item.setNewSalt(m_new_salt);
        QByteArray m_new_password_hash;
        stream >> m_new_password_hash;
        item.setNewPasswordHash(m_new_password_hash);
        QString m_hint;
        stream >> m_hint;
        item.setHint(m_hint);
        QString m_email;
        stream >> m_email;
        item.setEmail(m_email);
    }
        break;
    }
    return stream;
}

/*
QDebug operator<<(QDebug debug,  const AccountPasswordInputSettings &item) {
    QDebugStateSaver saver(debug);
    Q_UNUSED(saver)
    debug.nospace() << "Telegram.AccountPasswordInputSettings(";
    switch(item.classType()) {
    case AccountPasswordInputSettings::typeAccountPasswordInputSettings:
        debug.nospace() << "classType: typeAccountPasswordInputSettings";
        debug.nospace() << ", flags: " << item.flags();
        debug.nospace() << ", newSalt: " << item.newSalt();
        debug.nospace() << ", newPasswordHash: " << item.newPasswordHash();
        debug.nospace() << ", hint: " << item.hint();
        debug.nospace() << ", email: " << item.email();
        break;
    }
    debug.nospace() << ")";
    return debug;
}
*/
