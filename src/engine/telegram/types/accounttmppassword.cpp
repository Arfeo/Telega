// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "accounttmppassword.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

AccountTmpPassword::AccountTmpPassword(AccountTmpPasswordClassType classType, InboundPkt *in) :
    m_validUntil(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

AccountTmpPassword::AccountTmpPassword(InboundPkt *in) :
    m_validUntil(0),
    m_classType(typeAccountTmpPassword)
{
    fetch(in);
}

AccountTmpPassword::AccountTmpPassword(const AccountTmpPassword &another) :
    TelegramTypeObject(),
    m_validUntil(0),
    m_classType(typeAccountTmpPassword)
{
    operator=(another);
}

AccountTmpPassword::AccountTmpPassword(const Null &null) :
    TelegramTypeObject(null),
    m_validUntil(0),
    m_classType(typeAccountTmpPassword)
{
}

AccountTmpPassword::~AccountTmpPassword() {
    
}

void AccountTmpPassword::setTmpPassword(const QByteArray &tmpPassword) {
    m_tmpPassword = tmpPassword;
}

QByteArray AccountTmpPassword::tmpPassword() const {
    return m_tmpPassword;
}

void AccountTmpPassword::setValidUntil(qint32 validUntil) {
    m_validUntil = validUntil;
}

qint32 AccountTmpPassword::validUntil() const {
    return m_validUntil;
}

bool AccountTmpPassword::operator ==(const AccountTmpPassword &b) const {
    return m_classType == b.m_classType &&
           m_tmpPassword == b.m_tmpPassword &&
           m_validUntil == b.m_validUntil;
}

AccountTmpPassword &AccountTmpPassword::operator =(const AccountTmpPassword &b) {
    m_classType = b.m_classType;
    m_tmpPassword = b.m_tmpPassword;
    m_validUntil = b.m_validUntil;
    setNull(b.isNull());
    return *this;
}

void AccountTmpPassword::setClassType(AccountTmpPassword::AccountTmpPasswordClassType classType) {
    m_classType = classType;
}

AccountTmpPassword::AccountTmpPasswordClassType AccountTmpPassword::classType() const {
    return m_classType;
}

bool AccountTmpPassword::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeAccountTmpPassword: {
        m_tmpPassword = in->fetchBytes();
        m_validUntil = in->fetchInt();
        m_classType = static_cast<AccountTmpPasswordClassType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool AccountTmpPassword::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeAccountTmpPassword: {
        out->appendBytes(m_tmpPassword);
        out->appendInt(m_validUntil);
        return true;
    }
        break;
    
    default:
        return false;
    }
}

QMap<QString, QVariant> AccountTmpPassword::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeAccountTmpPassword: {
        result["classType"] = "AccountTmpPassword::typeAccountTmpPassword";
        if( !m_tmpPassword.isEmpty() ) result["tmpPassword"] = QVariant::fromValue<QByteArray>(m_tmpPassword);
        if( validUntil() ) result["validUntil"] = QString::number(validUntil());
        return result;
    }
        break;
    
    default:
        return result;
    }
}

AccountTmpPassword AccountTmpPassword::fromMap(const QMap<QString, QVariant> &map) {
    AccountTmpPassword result;
    if(map.value("classType").toString() == "AccountTmpPassword::typeAccountTmpPassword") {
        result.setClassType(typeAccountTmpPassword);
        QVariant _tmpPassword_var = map.value("tmpPassword");
        if( !_tmpPassword_var.isNull() ) {
            _tmpPassword_var.convert( QVariant::nameToType("QByteArray") );
            result.setTmpPassword( _tmpPassword_var.value<QByteArray>() );
        }
        
        QVariant _validUntil_var = map.value("validUntil");
        if( !_validUntil_var.isNull() ) {
            _validUntil_var.convert( QVariant::nameToType("qint32") );
            result.setValidUntil( _validUntil_var.value<qint32>() );
        }
        
        return result;
    }
    return result;
}

AccountTmpPassword AccountTmpPassword::fromJson(const QString &json) {
    return AccountTmpPassword::fromMap(QJsonDocument::fromJson(json.toUtf8()).toVariant().toMap());
}

QByteArray AccountTmpPassword::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const AccountTmpPassword &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case AccountTmpPassword::typeAccountTmpPassword:
        stream << item.tmpPassword();
        stream << item.validUntil();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, AccountTmpPassword &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<AccountTmpPassword::AccountTmpPasswordClassType>(type));
    switch(type) {
    case AccountTmpPassword::typeAccountTmpPassword: {
        QByteArray m_tmp_password;
        stream >> m_tmp_password;
        item.setTmpPassword(m_tmp_password);
        qint32 m_valid_until;
        stream >> m_valid_until;
        item.setValidUntil(m_valid_until);
    }
        break;
    }
    return stream;
}

QDebug operator<<(QDebug debug,  const AccountTmpPassword &item) {
    QDebugStateSaver saver(debug);
    Q_UNUSED(saver)
    debug.nospace() << "Telegram.AccountTmpPassword(";
    switch(item.classType()) {
    case AccountTmpPassword::typeAccountTmpPassword:
        debug.nospace() << "classType: typeAccountTmpPassword";
        debug.nospace() << ", tmpPassword: " << item.tmpPassword();
        debug.nospace() << ", validUntil: " << item.validUntil();
        break;
    }
    debug.nospace() << ")";
    return debug;
}

