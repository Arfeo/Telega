// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "authauthorization.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

AuthAuthorization::AuthAuthorization(AuthAuthorizationClassType classType, InboundPkt *in) :
    m_flags(0),
    m_tmpSessions(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

AuthAuthorization::AuthAuthorization(InboundPkt *in) :
    m_flags(0),
    m_tmpSessions(0),
    m_classType(typeAuthAuthorization)
{
    fetch(in);
}

AuthAuthorization::AuthAuthorization(const AuthAuthorization &another) :
    TelegramTypeObject(),
    m_flags(0),
    m_tmpSessions(0),
    m_classType(typeAuthAuthorization)
{
    operator=(another);
}

AuthAuthorization::AuthAuthorization(const Null &null) :
    TelegramTypeObject(null),
    m_flags(0),
    m_tmpSessions(0),
    m_classType(typeAuthAuthorization)
{
}

AuthAuthorization::~AuthAuthorization() {

}

void AuthAuthorization::setFlags(qint32 flags) {
    m_flags = flags;
}

qint32 AuthAuthorization::flags() const {
    return m_flags;
}

void AuthAuthorization::setTmpSessions(qint32 tmpSessions) {
    if(tmpSessions) m_flags = (m_flags | (1<<0));
    else m_flags = (m_flags & ~(1<<0));
    m_tmpSessions = tmpSessions;
}

qint32 AuthAuthorization::tmpSessions() const {
    return m_tmpSessions;
}

void AuthAuthorization::setUser(const User &user) {
    m_user = user;
}

User AuthAuthorization::user() const {
    return m_user;
}

bool AuthAuthorization::operator ==(const AuthAuthorization &b) const {
    return m_classType == b.m_classType &&
           m_flags == b.m_flags &&
           m_tmpSessions == b.m_tmpSessions &&
           m_user == b.m_user;
}

AuthAuthorization &AuthAuthorization::operator =(const AuthAuthorization &b) {
    m_classType = b.m_classType;
    m_flags = b.m_flags;
    m_tmpSessions = b.m_tmpSessions;
    m_user = b.m_user;
    setNull(b.isNull());
    return *this;
}

void AuthAuthorization::setClassType(AuthAuthorization::AuthAuthorizationClassType classType) {
    m_classType = classType;
}

AuthAuthorization::AuthAuthorizationClassType AuthAuthorization::classType() const {
    return m_classType;
}

bool AuthAuthorization::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeAuthAuthorization: {
        m_flags = in->fetchInt();
        if(m_flags & 1<<0) {
            m_tmpSessions = in->fetchInt();
        }
        m_user.fetch(in);
        m_classType = static_cast<AuthAuthorizationClassType>(x);
        return true;
    }
        break;

    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool AuthAuthorization::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeAuthAuthorization: {
        out->appendInt(m_flags);
        if(m_flags & 1<<0) {
            out->appendInt(m_tmpSessions);
        }
        m_user.push(out);
        return true;
    }
        break;

    default:
        return false;
    }
}

QMap<QString, QVariant> AuthAuthorization::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeAuthAuthorization: {
        result["classType"] = "AuthAuthorization::typeAuthAuthorization";
        if( tmpSessions() ) result["tmpSessions"] = QString::number(tmpSessions());
        if( !m_user.isNull() ) result["user"] = m_user.toMap();
        return result;
    }
        break;

    default:
        return result;
    }
}

AuthAuthorization AuthAuthorization::fromMap(const QMap<QString, QVariant> &map) {
    AuthAuthorization result;
    if(map.value("classType").toString() == "AuthAuthorization::typeAuthAuthorization") {
        result.setClassType(typeAuthAuthorization);
        QVariant _tmpSessions_var = map.value("tmpSessions");
        if( !_tmpSessions_var.isNull() ) {
            _tmpSessions_var.convert( QVariant::nameToType("qint32") );
            result.setTmpSessions( _tmpSessions_var.value<qint32>() );
        }

        QVariant _user_var = map.value("user");
        if( !_user_var.isNull() )
            result.setUser( User::fromMap(_user_var.toMap()) );

        return result;
    }
    return result;
}

AuthAuthorization AuthAuthorization::fromJson(const QString &json) {
    return AuthAuthorization::fromMap(QJsonDocument::fromJson(json.toUtf8()).toVariant().toMap());
}

QByteArray AuthAuthorization::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const AuthAuthorization &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case AuthAuthorization::typeAuthAuthorization:
        stream << item.flags();
        stream << item.tmpSessions();
        stream << item.user();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, AuthAuthorization &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<AuthAuthorization::AuthAuthorizationClassType>(type));
    switch(type) {
    case AuthAuthorization::typeAuthAuthorization: {
        qint32 m_flags;
        stream >> m_flags;
        item.setFlags(m_flags);
        qint32 m_tmp_sessions;
        stream >> m_tmp_sessions;
        item.setTmpSessions(m_tmp_sessions);
        User m_user;
        stream >> m_user;
        item.setUser(m_user);
    }
        break;
    }
    return stream;
}

/*
QDebug operator<<(QDebug debug,  const AuthAuthorization &item) {
    QDebugStateSaver saver(debug);
    Q_UNUSED(saver)
    debug.nospace() << "Telegram.AuthAuthorization(";
    switch(item.classType()) {
    case AuthAuthorization::typeAuthAuthorization:
        debug.nospace() << "classType: typeAuthAuthorization";
        debug.nospace() << ", flags: " << item.flags();
        debug.nospace() << ", tmpSessions: " << item.tmpSessions();
        debug.nospace() << ", user: " << item.user();
        break;
    }
    debug.nospace() << ")";
    return debug;
}
*/
