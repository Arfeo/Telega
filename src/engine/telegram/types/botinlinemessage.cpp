// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "botinlinemessage.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

BotInlineMessage::BotInlineMessage(BotInlineMessageClassType classType, InboundPkt *in) :
    m_flags(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

BotInlineMessage::BotInlineMessage(InboundPkt *in) :
    m_flags(0),
    m_classType(typeBotInlineMessageMediaAuto)
{
    fetch(in);
}

BotInlineMessage::BotInlineMessage(const BotInlineMessage &another) :
    TelegramTypeObject(),
    m_flags(0),
    m_classType(typeBotInlineMessageMediaAuto)
{
    operator=(another);
}

BotInlineMessage::BotInlineMessage(const Null &null) :
    TelegramTypeObject(null),
    m_flags(0),
    m_classType(typeBotInlineMessageMediaAuto)
{
}

BotInlineMessage::~BotInlineMessage() {

}

void BotInlineMessage::setAddress(const QString &address) {
    m_address = address;
}

QString BotInlineMessage::address() const {
    return m_address;
}

void BotInlineMessage::setCaption(const QString &caption) {
    m_caption = caption;
}

QString BotInlineMessage::caption() const {
    return m_caption;
}

void BotInlineMessage::setEntities(const QList<MessageEntity> &entities) {
    if(entities.length()) m_flags = (m_flags | (1<<1));
    else m_flags = (m_flags & ~(1<<1));
    m_entities = entities;
}

QList<MessageEntity> BotInlineMessage::entities() const {
    return m_entities;
}

void BotInlineMessage::setFirstName(const QString &firstName) {
    m_firstName = firstName;
}

QString BotInlineMessage::firstName() const {
    return m_firstName;
}

void BotInlineMessage::setFlags(qint32 flags) {
    m_flags = flags;
}

qint32 BotInlineMessage::flags() const {
    return m_flags;
}

void BotInlineMessage::setGeo(const GeoPoint &geo) {
    m_geo = geo;
}

GeoPoint BotInlineMessage::geo() const {
    return m_geo;
}

void BotInlineMessage::setLastName(const QString &lastName) {
    m_lastName = lastName;
}

QString BotInlineMessage::lastName() const {
    return m_lastName;
}

void BotInlineMessage::setMessage(const QString &message) {
    m_message = message;
}

QString BotInlineMessage::message() const {
    return m_message;
}

void BotInlineMessage::setNoWebpage(bool noWebpage) {
    if(noWebpage) m_flags = (m_flags | (1<<0));
    else m_flags = (m_flags & ~(1<<0));
}

bool BotInlineMessage::noWebpage() const {
    return (m_flags & 1<<0);
}

void BotInlineMessage::setPhoneNumber(const QString &phoneNumber) {
    m_phoneNumber = phoneNumber;
}

QString BotInlineMessage::phoneNumber() const {
    return m_phoneNumber;
}

void BotInlineMessage::setProvider(const QString &provider) {
    m_provider = provider;
}

QString BotInlineMessage::provider() const {
    return m_provider;
}

void BotInlineMessage::setReplyMarkup(const ReplyMarkup &replyMarkup) {
    if(!replyMarkup.isNull()) m_flags = (m_flags | (1<<2));
    else m_flags = (m_flags & ~(1<<2));
    m_replyMarkup = replyMarkup;
}

ReplyMarkup BotInlineMessage::replyMarkup() const {
    return m_replyMarkup;
}

void BotInlineMessage::setTitle(const QString &title) {
    m_title = title;
}

QString BotInlineMessage::title() const {
    return m_title;
}

void BotInlineMessage::setVenueId(const QString &venueId) {
    m_venueId = venueId;
}

QString BotInlineMessage::venueId() const {
    return m_venueId;
}

bool BotInlineMessage::operator ==(const BotInlineMessage &b) const {
    return m_classType == b.m_classType &&
           m_address == b.m_address &&
           m_caption == b.m_caption &&
           m_entities == b.m_entities &&
           m_firstName == b.m_firstName &&
           m_flags == b.m_flags &&
           m_geo == b.m_geo &&
           m_lastName == b.m_lastName &&
           m_message == b.m_message &&
           m_phoneNumber == b.m_phoneNumber &&
           m_provider == b.m_provider &&
           m_replyMarkup == b.m_replyMarkup &&
           m_title == b.m_title &&
           m_venueId == b.m_venueId;
}

BotInlineMessage &BotInlineMessage::operator =(const BotInlineMessage &b) {
    m_classType = b.m_classType;
    m_address = b.m_address;
    m_caption = b.m_caption;
    m_entities = b.m_entities;
    m_firstName = b.m_firstName;
    m_flags = b.m_flags;
    m_geo = b.m_geo;
    m_lastName = b.m_lastName;
    m_message = b.m_message;
    m_phoneNumber = b.m_phoneNumber;
    m_provider = b.m_provider;
    m_replyMarkup = b.m_replyMarkup;
    m_title = b.m_title;
    m_venueId = b.m_venueId;
    setNull(b.isNull());
    return *this;
}

void BotInlineMessage::setClassType(BotInlineMessage::BotInlineMessageClassType classType) {
    m_classType = classType;
}

BotInlineMessage::BotInlineMessageClassType BotInlineMessage::classType() const {
    return m_classType;
}

bool BotInlineMessage::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeBotInlineMessageMediaAuto: {
        m_flags = in->fetchInt();
        m_caption = in->fetchQString();
        if(m_flags & 1<<2) {
            m_replyMarkup.fetch(in);
        }
        m_classType = static_cast<BotInlineMessageClassType>(x);
        return true;
    }
        break;

    case typeBotInlineMessageText: {
        m_flags = in->fetchInt();
        m_message = in->fetchQString();
        if(m_flags & 1<<1) {
            if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
            qint32 m_entities_length = in->fetchInt();
            m_entities.clear();
            for (qint32 i = 0; i < m_entities_length; i++) {
                MessageEntity type;
                if(m_flags & 1<<1) {
                type.fetch(in);
            }
                m_entities.append(type);
            }
        }
        if(m_flags & 1<<2) {
            m_replyMarkup.fetch(in);
        }
        m_classType = static_cast<BotInlineMessageClassType>(x);
        return true;
    }
        break;

    case typeBotInlineMessageMediaGeo: {
        m_flags = in->fetchInt();
        m_geo.fetch(in);
        if(m_flags & 1<<2) {
            m_replyMarkup.fetch(in);
        }
        m_classType = static_cast<BotInlineMessageClassType>(x);
        return true;
    }
        break;

    case typeBotInlineMessageMediaVenue: {
        m_flags = in->fetchInt();
        m_geo.fetch(in);
        m_title = in->fetchQString();
        m_address = in->fetchQString();
        m_provider = in->fetchQString();
        m_venueId = in->fetchQString();
        if(m_flags & 1<<2) {
            m_replyMarkup.fetch(in);
        }
        m_classType = static_cast<BotInlineMessageClassType>(x);
        return true;
    }
        break;

    case typeBotInlineMessageMediaContact: {
        m_flags = in->fetchInt();
        m_phoneNumber = in->fetchQString();
        m_firstName = in->fetchQString();
        m_lastName = in->fetchQString();
        if(m_flags & 1<<2) {
            m_replyMarkup.fetch(in);
        }
        m_classType = static_cast<BotInlineMessageClassType>(x);
        return true;
    }
        break;

    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool BotInlineMessage::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeBotInlineMessageMediaAuto: {
        out->appendInt(m_flags);
        out->appendQString(m_caption);
        if(m_flags & 1<<2) {
            m_replyMarkup.push(out);
        }
        return true;
    }
        break;

    case typeBotInlineMessageText: {
        out->appendInt(m_flags);
        out->appendQString(m_message);
        if(m_flags & 1<<1) {
            out->appendInt(CoreTypes::typeVector);
            out->appendInt(m_entities.count());
            for (qint32 i = 0; i < m_entities.count(); i++) {
                m_entities[i].push(out);
            }
        }
        if(m_flags & 1<<2) {
            m_replyMarkup.push(out);
        }
        return true;
    }
        break;

    case typeBotInlineMessageMediaGeo: {
        out->appendInt(m_flags);
        m_geo.push(out);
        if(m_flags & 1<<2) {
            m_replyMarkup.push(out);
        }
        return true;
    }
        break;

    case typeBotInlineMessageMediaVenue: {
        out->appendInt(m_flags);
        m_geo.push(out);
        out->appendQString(m_title);
        out->appendQString(m_address);
        out->appendQString(m_provider);
        out->appendQString(m_venueId);
        if(m_flags & 1<<2) {
            m_replyMarkup.push(out);
        }
        return true;
    }
        break;

    case typeBotInlineMessageMediaContact: {
        out->appendInt(m_flags);
        out->appendQString(m_phoneNumber);
        out->appendQString(m_firstName);
        out->appendQString(m_lastName);
        if(m_flags & 1<<2) {
            m_replyMarkup.push(out);
        }
        return true;
    }
        break;

    default:
        return false;
    }
}

QMap<QString, QVariant> BotInlineMessage::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeBotInlineMessageMediaAuto: {
        result["classType"] = "BotInlineMessage::typeBotInlineMessageMediaAuto";
        if( !m_caption.isEmpty() ) result["caption"] = QVariant::fromValue<QString>(m_caption);
        if( !m_replyMarkup.isNull() ) result["replyMarkup"] = m_replyMarkup.toMap();
        return result;
    }
        break;

    case typeBotInlineMessageText: {
        result["classType"] = "BotInlineMessage::typeBotInlineMessageText";
        if( noWebpage() ) result["noWebpage"] = QString::number(noWebpage());
        if( !m_message.isEmpty() ) result["message"] = QVariant::fromValue<QString>(m_message);
        QList<QVariant> _entities;
        //for(const MessageEntity &m__type: m_entities)
        for(int i = 0; i < m_entities.size(); ++i) {
            const MessageEntity &m__type = m_entities[i];
            if( !m__type.isNull() ) _entities << m__type.toMap();
        }
        result["entities"] = _entities;
        if( !m_replyMarkup.isNull() ) result["replyMarkup"] = m_replyMarkup.toMap();
        return result;
    }
        break;

    case typeBotInlineMessageMediaGeo: {
        result["classType"] = "BotInlineMessage::typeBotInlineMessageMediaGeo";
        if( !m_geo.isNull() ) result["geo"] = m_geo.toMap();
        if( !m_replyMarkup.isNull() ) result["replyMarkup"] = m_replyMarkup.toMap();
        return result;
    }
        break;

    case typeBotInlineMessageMediaVenue: {
        result["classType"] = "BotInlineMessage::typeBotInlineMessageMediaVenue";
        if( !m_geo.isNull() ) result["geo"] = m_geo.toMap();
        if( !m_title.isEmpty() ) result["title"] = QVariant::fromValue<QString>(m_title);
        if( !m_address.isEmpty() ) result["address"] = QVariant::fromValue<QString>(m_address);
        if( !m_provider.isEmpty() ) result["provider"] = QVariant::fromValue<QString>(m_provider);
        if( !m_venueId.isEmpty() ) result["venueId"] = QVariant::fromValue<QString>(m_venueId);
        if( !m_replyMarkup.isNull() ) result["replyMarkup"] = m_replyMarkup.toMap();
        return result;
    }
        break;

    case typeBotInlineMessageMediaContact: {
        result["classType"] = "BotInlineMessage::typeBotInlineMessageMediaContact";
        if( !m_phoneNumber.isEmpty() ) result["phoneNumber"] = QVariant::fromValue<QString>(m_phoneNumber);
        if( !m_firstName.isEmpty() ) result["firstName"] = QVariant::fromValue<QString>(m_firstName);
        if( !m_lastName.isEmpty() ) result["lastName"] = QVariant::fromValue<QString>(m_lastName);
        if( !m_replyMarkup.isNull() ) result["replyMarkup"] = m_replyMarkup.toMap();
        return result;
    }
        break;

    default:
        return result;
    }
}

BotInlineMessage BotInlineMessage::fromMap(const QMap<QString, QVariant> &map) {
    BotInlineMessage result;
    if(map.value("classType").toString() == "BotInlineMessage::typeBotInlineMessageMediaAuto") {
        result.setClassType(typeBotInlineMessageMediaAuto);
        QVariant _caption_var = map.value("caption");
        if( !_caption_var.isNull() ) {
            _caption_var.convert( QVariant::nameToType("QString") );
            result.setCaption( _caption_var.value<QString>() );
        }

        QVariant _replyMarkup_var = map.value("replyMarkup");
        if( !_replyMarkup_var.isNull() )
            result.setReplyMarkup( ReplyMarkup::fromMap(_replyMarkup_var.toMap()) );

        return result;
    }
    if(map.value("classType").toString() == "BotInlineMessage::typeBotInlineMessageText") {
        result.setClassType(typeBotInlineMessageText);
        QVariant _noWebpage_var = map.value("noWebpage");
        if( !_noWebpage_var.isNull() ) {
            _noWebpage_var.convert( QVariant::nameToType("bool") );
            result.setNoWebpage( _noWebpage_var.value<bool>() );
        }

        QVariant _message_var = map.value("message");
        if( !_message_var.isNull() ) {
            _message_var.convert( QVariant::nameToType("QString") );
            result.setMessage( _message_var.value<QString>() );
        }

        QList<QVariant> map_entities = map["entities"].toList();
        QList<MessageEntity> _entities;
        //for(const QVariant &var: map_entities)
        for(int i = 0; i < map_entities.size(); ++i) {
            const QVariant &var = map_entities[i];
            _entities << MessageEntity::fromMap(var.toMap());
        }
        result.setEntities(_entities);
        QVariant _replyMarkup_var = map.value("replyMarkup");
        if( !_replyMarkup_var.isNull() )
            result.setReplyMarkup( ReplyMarkup::fromMap(_replyMarkup_var.toMap()) );

        return result;
    }
    if(map.value("classType").toString() == "BotInlineMessage::typeBotInlineMessageMediaGeo") {
        result.setClassType(typeBotInlineMessageMediaGeo);
        QVariant _geo_var = map.value("geo");
        if( !_geo_var.isNull() )
            result.setGeo( GeoPoint::fromMap(_geo_var.toMap()) );

        QVariant _replyMarkup_var = map.value("replyMarkup");
        if( !_replyMarkup_var.isNull() )
            result.setReplyMarkup( ReplyMarkup::fromMap(_replyMarkup_var.toMap()) );

        return result;
    }
    if(map.value("classType").toString() == "BotInlineMessage::typeBotInlineMessageMediaVenue") {
        result.setClassType(typeBotInlineMessageMediaVenue);
        QVariant _geo_var = map.value("geo");
        if( !_geo_var.isNull() )
            result.setGeo( GeoPoint::fromMap(_geo_var.toMap()) );

        QVariant _title_var = map.value("title");
        if( !_title_var.isNull() ) {
            _title_var.convert( QVariant::nameToType("QString") );
            result.setTitle( _title_var.value<QString>() );
        }

        QVariant _address_var = map.value("address");
        if( !_address_var.isNull() ) {
            _address_var.convert( QVariant::nameToType("QString") );
            result.setAddress( _address_var.value<QString>() );
        }

        QVariant _provider_var = map.value("provider");
        if( !_provider_var.isNull() ) {
            _provider_var.convert( QVariant::nameToType("QString") );
            result.setProvider( _provider_var.value<QString>() );
        }

        QVariant _venueId_var = map.value("venueId");
        if( !_venueId_var.isNull() ) {
            _venueId_var.convert( QVariant::nameToType("QString") );
            result.setVenueId( _venueId_var.value<QString>() );
        }

        QVariant _replyMarkup_var = map.value("replyMarkup");
        if( !_replyMarkup_var.isNull() )
            result.setReplyMarkup( ReplyMarkup::fromMap(_replyMarkup_var.toMap()) );

        return result;
    }
    if(map.value("classType").toString() == "BotInlineMessage::typeBotInlineMessageMediaContact") {
        result.setClassType(typeBotInlineMessageMediaContact);
        QVariant _phoneNumber_var = map.value("phoneNumber");
        if( !_phoneNumber_var.isNull() ) {
            _phoneNumber_var.convert( QVariant::nameToType("QString") );
            result.setPhoneNumber( _phoneNumber_var.value<QString>() );
        }

        QVariant _firstName_var = map.value("firstName");
        if( !_firstName_var.isNull() ) {
            _firstName_var.convert( QVariant::nameToType("QString") );
            result.setFirstName( _firstName_var.value<QString>() );
        }

        QVariant _lastName_var = map.value("lastName");
        if( !_lastName_var.isNull() ) {
            _lastName_var.convert( QVariant::nameToType("QString") );
            result.setLastName( _lastName_var.value<QString>() );
        }

        QVariant _replyMarkup_var = map.value("replyMarkup");
        if( !_replyMarkup_var.isNull() )
            result.setReplyMarkup( ReplyMarkup::fromMap(_replyMarkup_var.toMap()) );

        return result;
    }
    return result;
}

BotInlineMessage BotInlineMessage::fromJson(const QString &json) {
    return BotInlineMessage::fromMap(QJsonDocument::fromJson(json.toUtf8()).toVariant().toMap());
}

QByteArray BotInlineMessage::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const BotInlineMessage &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case BotInlineMessage::typeBotInlineMessageMediaAuto:
        stream << item.flags();
        stream << item.caption();
        stream << item.replyMarkup();
        break;
    case BotInlineMessage::typeBotInlineMessageText:
        stream << item.flags();
        stream << item.message();
        stream << item.entities();
        stream << item.replyMarkup();
        break;
    case BotInlineMessage::typeBotInlineMessageMediaGeo:
        stream << item.flags();
        stream << item.geo();
        stream << item.replyMarkup();
        break;
    case BotInlineMessage::typeBotInlineMessageMediaVenue:
        stream << item.flags();
        stream << item.geo();
        stream << item.title();
        stream << item.address();
        stream << item.provider();
        stream << item.venueId();
        stream << item.replyMarkup();
        break;
    case BotInlineMessage::typeBotInlineMessageMediaContact:
        stream << item.flags();
        stream << item.phoneNumber();
        stream << item.firstName();
        stream << item.lastName();
        stream << item.replyMarkup();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, BotInlineMessage &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<BotInlineMessage::BotInlineMessageClassType>(type));
    switch(type) {
    case BotInlineMessage::typeBotInlineMessageMediaAuto: {
        qint32 m_flags;
        stream >> m_flags;
        item.setFlags(m_flags);
        QString m_caption;
        stream >> m_caption;
        item.setCaption(m_caption);
        ReplyMarkup m_reply_markup;
        stream >> m_reply_markup;
        item.setReplyMarkup(m_reply_markup);
    }
        break;
    case BotInlineMessage::typeBotInlineMessageText: {
        qint32 m_flags;
        stream >> m_flags;
        item.setFlags(m_flags);
        QString m_message;
        stream >> m_message;
        item.setMessage(m_message);
        QList<MessageEntity> m_entities;
        stream >> m_entities;
        item.setEntities(m_entities);
        ReplyMarkup m_reply_markup;
        stream >> m_reply_markup;
        item.setReplyMarkup(m_reply_markup);
    }
        break;
    case BotInlineMessage::typeBotInlineMessageMediaGeo: {
        qint32 m_flags;
        stream >> m_flags;
        item.setFlags(m_flags);
        GeoPoint m_geo;
        stream >> m_geo;
        item.setGeo(m_geo);
        ReplyMarkup m_reply_markup;
        stream >> m_reply_markup;
        item.setReplyMarkup(m_reply_markup);
    }
        break;
    case BotInlineMessage::typeBotInlineMessageMediaVenue: {
        qint32 m_flags;
        stream >> m_flags;
        item.setFlags(m_flags);
        GeoPoint m_geo;
        stream >> m_geo;
        item.setGeo(m_geo);
        QString m_title;
        stream >> m_title;
        item.setTitle(m_title);
        QString m_address;
        stream >> m_address;
        item.setAddress(m_address);
        QString m_provider;
        stream >> m_provider;
        item.setProvider(m_provider);
        QString m_venue_id;
        stream >> m_venue_id;
        item.setVenueId(m_venue_id);
        ReplyMarkup m_reply_markup;
        stream >> m_reply_markup;
        item.setReplyMarkup(m_reply_markup);
    }
        break;
    case BotInlineMessage::typeBotInlineMessageMediaContact: {
        qint32 m_flags;
        stream >> m_flags;
        item.setFlags(m_flags);
        QString m_phone_number;
        stream >> m_phone_number;
        item.setPhoneNumber(m_phone_number);
        QString m_first_name;
        stream >> m_first_name;
        item.setFirstName(m_first_name);
        QString m_last_name;
        stream >> m_last_name;
        item.setLastName(m_last_name);
        ReplyMarkup m_reply_markup;
        stream >> m_reply_markup;
        item.setReplyMarkup(m_reply_markup);
    }
        break;
    }
    return stream;
}

/*QDebug operator<<(QDebug debug,  const BotInlineMessage &item) {
    QDebugStateSaver saver(debug);
    Q_UNUSED(saver)
    debug.nospace() << "Telegram.BotInlineMessage(";
    switch(item.classType()) {
    case BotInlineMessage::typeBotInlineMessageMediaAuto:
        debug.nospace() << "classType: typeBotInlineMessageMediaAuto";
        debug.nospace() << ", flags: " << item.flags();
        debug.nospace() << ", caption: " << item.caption();
        debug.nospace() << ", replyMarkup: " << item.replyMarkup();
        break;
    case BotInlineMessage::typeBotInlineMessageText:
        debug.nospace() << "classType: typeBotInlineMessageText";
        debug.nospace() << ", flags: " << item.flags();
        debug.nospace() << ", message: " << item.message();
        debug.nospace() << ", entities: " << item.entities();
        debug.nospace() << ", replyMarkup: " << item.replyMarkup();
        break;
    case BotInlineMessage::typeBotInlineMessageMediaGeo:
        debug.nospace() << "classType: typeBotInlineMessageMediaGeo";
        debug.nospace() << ", flags: " << item.flags();
        debug.nospace() << ", geo: " << item.geo();
        debug.nospace() << ", replyMarkup: " << item.replyMarkup();
        break;
    case BotInlineMessage::typeBotInlineMessageMediaVenue:
        debug.nospace() << "classType: typeBotInlineMessageMediaVenue";
        debug.nospace() << ", flags: " << item.flags();
        debug.nospace() << ", geo: " << item.geo();
        debug.nospace() << ", title: " << item.title();
        debug.nospace() << ", address: " << item.address();
        debug.nospace() << ", provider: " << item.provider();
        debug.nospace() << ", venueId: " << item.venueId();
        debug.nospace() << ", replyMarkup: " << item.replyMarkup();
        break;
    case BotInlineMessage::typeBotInlineMessageMediaContact:
        debug.nospace() << "classType: typeBotInlineMessageMediaContact";
        debug.nospace() << ", flags: " << item.flags();
        debug.nospace() << ", phoneNumber: " << item.phoneNumber();
        debug.nospace() << ", firstName: " << item.firstName();
        debug.nospace() << ", lastName: " << item.lastName();
        debug.nospace() << ", replyMarkup: " << item.replyMarkup();
        break;
    }
    debug.nospace() << ")";
    return debug;
}
*/
