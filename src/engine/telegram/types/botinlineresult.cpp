// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "botinlineresult.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

BotInlineResult::BotInlineResult(BotInlineResultClassType classType, InboundPkt *in) :
    m_duration(0),
    m_flags(0),
    m_h(0),
    m_w(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

BotInlineResult::BotInlineResult(InboundPkt *in) :
    m_duration(0),
    m_flags(0),
    m_h(0),
    m_w(0),
    m_classType(typeBotInlineResult)
{
    fetch(in);
}

BotInlineResult::BotInlineResult(const BotInlineResult &another) :
    TelegramTypeObject(),
    m_duration(0),
    m_flags(0),
    m_h(0),
    m_w(0),
    m_classType(typeBotInlineResult)
{
    operator=(another);
}

BotInlineResult::BotInlineResult(const Null &null) :
    TelegramTypeObject(null),
    m_duration(0),
    m_flags(0),
    m_h(0),
    m_w(0),
    m_classType(typeBotInlineResult)
{
}

BotInlineResult::~BotInlineResult() {

}

void BotInlineResult::setContentType(const QString &contentType) {
    if(!contentType.isNull()) m_flags = (m_flags | (1<<5));
    else m_flags = (m_flags & ~(1<<5));
    m_contentType = contentType;
}

QString BotInlineResult::contentType() const {
    return m_contentType;
}

void BotInlineResult::setContentUrl(const QString &contentUrl) {
    if(!contentUrl.isNull()) m_flags = (m_flags | (1<<5));
    else m_flags = (m_flags & ~(1<<5));
    m_contentUrl = contentUrl;
}

QString BotInlineResult::contentUrl() const {
    return m_contentUrl;
}

void BotInlineResult::setDescription(const QString &description) {
    if(!description.isNull()) m_flags = (m_flags | (1<<2));
    else m_flags = (m_flags & ~(1<<2));
    m_description = description;
}

QString BotInlineResult::description() const {
    return m_description;
}

void BotInlineResult::setDocument(const Document &document) {
    if(!document.isNull()) m_flags = (m_flags | (1<<1));
    else m_flags = (m_flags & ~(1<<1));
    m_document = document;
}

Document BotInlineResult::document() const {
    return m_document;
}

void BotInlineResult::setDuration(qint32 duration) {
    if(duration) m_flags = (m_flags | (1<<7));
    else m_flags = (m_flags & ~(1<<7));
    m_duration = duration;
}

qint32 BotInlineResult::duration() const {
    return m_duration;
}

void BotInlineResult::setFlags(qint32 flags) {
    m_flags = flags;
}

qint32 BotInlineResult::flags() const {
    return m_flags;
}

void BotInlineResult::setH(qint32 h) {
    if(h) m_flags = (m_flags | (1<<6));
    else m_flags = (m_flags & ~(1<<6));
    m_h = h;
}

qint32 BotInlineResult::h() const {
    return m_h;
}

void BotInlineResult::setId(const QString &id) {
    m_id = id;
}

QString BotInlineResult::id() const {
    return m_id;
}

void BotInlineResult::setPhoto(const Photo &photo) {
    if(!photo.isNull()) m_flags = (m_flags | (1<<0));
    else m_flags = (m_flags & ~(1<<0));
    m_photo = photo;
}

Photo BotInlineResult::photo() const {
    return m_photo;
}

void BotInlineResult::setSendMessage(const BotInlineMessage &sendMessage) {
    m_sendMessage = sendMessage;
}

BotInlineMessage BotInlineResult::sendMessage() const {
    return m_sendMessage;
}

void BotInlineResult::setThumbUrl(const QString &thumbUrl) {
    if(!thumbUrl.isNull()) m_flags = (m_flags | (1<<4));
    else m_flags = (m_flags & ~(1<<4));
    m_thumbUrl = thumbUrl;
}

QString BotInlineResult::thumbUrl() const {
    return m_thumbUrl;
}

void BotInlineResult::setTitle(const QString &title) {
    if(!title.isNull()) m_flags = (m_flags | (1<<1));
    else m_flags = (m_flags & ~(1<<1));
    m_title = title;
}

QString BotInlineResult::title() const {
    return m_title;
}

void BotInlineResult::setType(const QString &type) {
    m_type = type;
}

QString BotInlineResult::type() const {
    return m_type;
}

void BotInlineResult::setUrl(const QString &url) {
    if(!url.isNull()) m_flags = (m_flags | (1<<3));
    else m_flags = (m_flags & ~(1<<3));
    m_url = url;
}

QString BotInlineResult::url() const {
    return m_url;
}

void BotInlineResult::setW(qint32 w) {
    if(w) m_flags = (m_flags | (1<<6));
    else m_flags = (m_flags & ~(1<<6));
    m_w = w;
}

qint32 BotInlineResult::w() const {
    return m_w;
}

bool BotInlineResult::operator ==(const BotInlineResult &b) const {
    return m_classType == b.m_classType &&
           m_contentType == b.m_contentType &&
           m_contentUrl == b.m_contentUrl &&
           m_description == b.m_description &&
           m_document == b.m_document &&
           m_duration == b.m_duration &&
           m_flags == b.m_flags &&
           m_h == b.m_h &&
           m_id == b.m_id &&
           m_photo == b.m_photo &&
           m_sendMessage == b.m_sendMessage &&
           m_thumbUrl == b.m_thumbUrl &&
           m_title == b.m_title &&
           m_type == b.m_type &&
           m_url == b.m_url &&
           m_w == b.m_w;
}

BotInlineResult &BotInlineResult::operator =(const BotInlineResult &b) {
    m_classType = b.m_classType;
    m_contentType = b.m_contentType;
    m_contentUrl = b.m_contentUrl;
    m_description = b.m_description;
    m_document = b.m_document;
    m_duration = b.m_duration;
    m_flags = b.m_flags;
    m_h = b.m_h;
    m_id = b.m_id;
    m_photo = b.m_photo;
    m_sendMessage = b.m_sendMessage;
    m_thumbUrl = b.m_thumbUrl;
    m_title = b.m_title;
    m_type = b.m_type;
    m_url = b.m_url;
    m_w = b.m_w;
    setNull(b.isNull());
    return *this;
}

void BotInlineResult::setClassType(BotInlineResult::BotInlineResultClassType classType) {
    m_classType = classType;
}

BotInlineResult::BotInlineResultClassType BotInlineResult::classType() const {
    return m_classType;
}

bool BotInlineResult::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeBotInlineResult: {
        m_flags = in->fetchInt();
        m_id = in->fetchQString();
        m_type = in->fetchQString();
        if(m_flags & 1<<1) {
            m_title = in->fetchQString();
        }
        if(m_flags & 1<<2) {
            m_description = in->fetchQString();
        }
        if(m_flags & 1<<3) {
            m_url = in->fetchQString();
        }
        if(m_flags & 1<<4) {
            m_thumbUrl = in->fetchQString();
        }
        if(m_flags & 1<<5) {
            m_contentUrl = in->fetchQString();
        }
        if(m_flags & 1<<5) {
            m_contentType = in->fetchQString();
        }
        if(m_flags & 1<<6) {
            m_w = in->fetchInt();
        }
        if(m_flags & 1<<6) {
            m_h = in->fetchInt();
        }
        if(m_flags & 1<<7) {
            m_duration = in->fetchInt();
        }
        m_sendMessage.fetch(in);
        m_classType = static_cast<BotInlineResultClassType>(x);
        return true;
    }
        break;

    case typeBotInlineMediaResult: {
        m_flags = in->fetchInt();
        m_id = in->fetchQString();
        m_type = in->fetchQString();
        if(m_flags & 1<<0) {
            m_photo.fetch(in);
        }
        if(m_flags & 1<<1) {
            m_document.fetch(in);
        }
        if(m_flags & 1<<2) {
            m_title = in->fetchQString();
        }
        if(m_flags & 1<<3) {
            m_description = in->fetchQString();
        }
        m_sendMessage.fetch(in);
        m_classType = static_cast<BotInlineResultClassType>(x);
        return true;
    }
        break;

    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool BotInlineResult::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeBotInlineResult: {
        out->appendInt(m_flags);
        out->appendQString(m_id);
        out->appendQString(m_type);
        if(m_flags & 1<<1) {
            out->appendQString(m_title);
        }
        if(m_flags & 1<<2) {
            out->appendQString(m_description);
        }
        if(m_flags & 1<<3) {
            out->appendQString(m_url);
        }
        if(m_flags & 1<<4) {
            out->appendQString(m_thumbUrl);
        }
        if(m_flags & 1<<5) {
            out->appendQString(m_contentUrl);
        }
        if(m_flags & 1<<5) {
            out->appendQString(m_contentType);
        }
        if(m_flags & 1<<6) {
            out->appendInt(m_w);
        }
        if(m_flags & 1<<6) {
            out->appendInt(m_h);
        }
        if(m_flags & 1<<7) {
            out->appendInt(m_duration);
        }
        m_sendMessage.push(out);
        return true;
    }
        break;

    case typeBotInlineMediaResult: {
        out->appendInt(m_flags);
        out->appendQString(m_id);
        out->appendQString(m_type);
        if(m_flags & 1<<0) {
            m_photo.push(out);
        }
        if(m_flags & 1<<1) {
            m_document.push(out);
        }
        if(m_flags & 1<<2) {
            out->appendQString(m_title);
        }
        if(m_flags & 1<<3) {
            out->appendQString(m_description);
        }
        m_sendMessage.push(out);
        return true;
    }
        break;

    default:
        return false;
    }
}

QMap<QString, QVariant> BotInlineResult::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeBotInlineResult: {
        result["classType"] = "BotInlineResult::typeBotInlineResult";
        if( !m_id.isEmpty() ) result["id"] = QVariant::fromValue<QString>(m_id);
        if( !m_type.isEmpty() ) result["type"] = QVariant::fromValue<QString>(m_type);
        if( !m_title.isEmpty() ) result["title"] = QVariant::fromValue<QString>(m_title);
        if( !m_description.isEmpty() ) result["description"] = QVariant::fromValue<QString>(m_description);
        if( !m_url.isEmpty() ) result["url"] = QVariant::fromValue<QString>(m_url);
        if( !m_thumbUrl.isEmpty() ) result["thumbUrl"] = QVariant::fromValue<QString>(m_thumbUrl);
        if( !m_contentUrl.isEmpty() ) result["contentUrl"] = QVariant::fromValue<QString>(m_contentUrl);
        if( !m_contentType.isEmpty() ) result["contentType"] = QVariant::fromValue<QString>(m_contentType);
        if( w() ) result["w"] = QString::number(w());
        if( h() ) result["h"] = QString::number(h());
        if( duration() ) result["duration"] = QString::number(duration());
        if( !m_sendMessage.isNull() ) result["sendMessage"] = m_sendMessage.toMap();
        return result;
    }
        break;

    case typeBotInlineMediaResult: {
        result["classType"] = "BotInlineResult::typeBotInlineMediaResult";
        if( !m_id.isEmpty() ) result["id"] = QVariant::fromValue<QString>(m_id);
        if( !m_type.isEmpty() ) result["type"] = QVariant::fromValue<QString>(m_type);
        if( !m_photo.isNull() ) result["photo"] = m_photo.toMap();
        if( !m_document.isNull() ) result["document"] = m_document.toMap();
        if( !m_title.isEmpty() ) result["title"] = QVariant::fromValue<QString>(m_title);
        if( !m_description.isEmpty() ) result["description"] = QVariant::fromValue<QString>(m_description);
        if( !m_sendMessage.isNull() ) result["sendMessage"] = m_sendMessage.toMap();
        return result;
    }
        break;

    default:
        return result;
    }
}

BotInlineResult BotInlineResult::fromMap(const QMap<QString, QVariant> &map) {
    BotInlineResult result;
    if(map.value("classType").toString() == "BotInlineResult::typeBotInlineResult") {
        result.setClassType(typeBotInlineResult);
        QVariant _id_var = map.value("id");
        if( !_id_var.isNull() ) {
            _id_var.convert( QVariant::nameToType("QString") );
            result.setId( _id_var.value<QString>() );
        }

        QVariant _type_var = map.value("type");
        if( !_type_var.isNull() ) {
            _type_var.convert( QVariant::nameToType("QString") );
            result.setType( _type_var.value<QString>() );
        }

        QVariant _title_var = map.value("title");
        if( !_title_var.isNull() ) {
            _title_var.convert( QVariant::nameToType("QString") );
            result.setTitle( _title_var.value<QString>() );
        }

        QVariant _description_var = map.value("description");
        if( !_description_var.isNull() ) {
            _description_var.convert( QVariant::nameToType("QString") );
            result.setDescription( _description_var.value<QString>() );
        }

        QVariant _url_var = map.value("url");
        if( !_url_var.isNull() ) {
            _url_var.convert( QVariant::nameToType("QString") );
            result.setUrl( _url_var.value<QString>() );
        }

        QVariant _thumbUrl_var = map.value("thumbUrl");
        if( !_thumbUrl_var.isNull() ) {
            _thumbUrl_var.convert( QVariant::nameToType("QString") );
            result.setThumbUrl( _thumbUrl_var.value<QString>() );
        }

        QVariant _contentUrl_var = map.value("contentUrl");
        if( !_contentUrl_var.isNull() ) {
            _contentUrl_var.convert( QVariant::nameToType("QString") );
            result.setContentUrl( _contentUrl_var.value<QString>() );
        }

        QVariant _contentType_var = map.value("contentType");
        if( !_contentType_var.isNull() ) {
            _contentType_var.convert( QVariant::nameToType("QString") );
            result.setContentType( _contentType_var.value<QString>() );
        }

        QVariant _w_var = map.value("w");
        if( !_w_var.isNull() ) {
            _w_var.convert( QVariant::nameToType("qint32") );
            result.setW( _w_var.value<qint32>() );
        }

        QVariant _h_var = map.value("h");
        if( !_h_var.isNull() ) {
            _h_var.convert( QVariant::nameToType("qint32") );
            result.setH( _h_var.value<qint32>() );
        }

        QVariant _duration_var = map.value("duration");
        if( !_duration_var.isNull() ) {
            _duration_var.convert( QVariant::nameToType("qint32") );
            result.setDuration( _duration_var.value<qint32>() );
        }

        QVariant _sendMessage_var = map.value("sendMessage");
        if( !_sendMessage_var.isNull() )
            result.setSendMessage( BotInlineMessage::fromMap(_sendMessage_var.toMap()) );

        return result;
    }
    if(map.value("classType").toString() == "BotInlineResult::typeBotInlineMediaResult") {
        result.setClassType(typeBotInlineMediaResult);
        QVariant _id_var = map.value("id");
        if( !_id_var.isNull() ) {
            _id_var.convert( QVariant::nameToType("QString") );
            result.setId( _id_var.value<QString>() );
        }

        QVariant _type_var = map.value("type");
        if( !_type_var.isNull() ) {
            _type_var.convert( QVariant::nameToType("QString") );
            result.setType( _type_var.value<QString>() );
        }

        QVariant _photo_var = map.value("photo");
        if( !_photo_var.isNull() )
            result.setPhoto( Photo::fromMap(_photo_var.toMap()) );

        QVariant _document_var = map.value("document");
        if( !_document_var.isNull() )
            result.setDocument( Document::fromMap(_document_var.toMap()) );

        QVariant _title_var = map.value("title");
        if( !_title_var.isNull() ) {
            _title_var.convert( QVariant::nameToType("QString") );
            result.setTitle( _title_var.value<QString>() );
        }

        QVariant _description_var = map.value("description");
        if( !_description_var.isNull() ) {
            _description_var.convert( QVariant::nameToType("QString") );
            result.setDescription( _description_var.value<QString>() );
        }

        QVariant _sendMessage_var = map.value("sendMessage");
        if( !_sendMessage_var.isNull() )
            result.setSendMessage( BotInlineMessage::fromMap(_sendMessage_var.toMap()) );

        return result;
    }
    return result;
}

BotInlineResult BotInlineResult::fromJson(const QString &json) {
    return BotInlineResult::fromMap(QJsonDocument::fromJson(json.toUtf8()).toVariant().toMap());
}

QByteArray BotInlineResult::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const BotInlineResult &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case BotInlineResult::typeBotInlineResult:
        stream << item.flags();
        stream << item.id();
        stream << item.type();
        stream << item.title();
        stream << item.description();
        stream << item.url();
        stream << item.thumbUrl();
        stream << item.contentUrl();
        stream << item.contentType();
        stream << item.w();
        stream << item.h();
        stream << item.duration();
        stream << item.sendMessage();
        break;
    case BotInlineResult::typeBotInlineMediaResult:
        stream << item.flags();
        stream << item.id();
        stream << item.type();
        stream << item.photo();
        stream << item.document();
        stream << item.title();
        stream << item.description();
        stream << item.sendMessage();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, BotInlineResult &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<BotInlineResult::BotInlineResultClassType>(type));
    switch(type) {
    case BotInlineResult::typeBotInlineResult: {
        qint32 m_flags;
        stream >> m_flags;
        item.setFlags(m_flags);
        QString m_id;
        stream >> m_id;
        item.setId(m_id);
        QString m_type;
        stream >> m_type;
        item.setType(m_type);
        QString m_title;
        stream >> m_title;
        item.setTitle(m_title);
        QString m_description;
        stream >> m_description;
        item.setDescription(m_description);
        QString m_url;
        stream >> m_url;
        item.setUrl(m_url);
        QString m_thumb_url;
        stream >> m_thumb_url;
        item.setThumbUrl(m_thumb_url);
        QString m_content_url;
        stream >> m_content_url;
        item.setContentUrl(m_content_url);
        QString m_content_type;
        stream >> m_content_type;
        item.setContentType(m_content_type);
        qint32 m_w;
        stream >> m_w;
        item.setW(m_w);
        qint32 m_h;
        stream >> m_h;
        item.setH(m_h);
        qint32 m_duration;
        stream >> m_duration;
        item.setDuration(m_duration);
        BotInlineMessage m_send_message;
        stream >> m_send_message;
        item.setSendMessage(m_send_message);
    }
        break;
    case BotInlineResult::typeBotInlineMediaResult: {
        qint32 m_flags;
        stream >> m_flags;
        item.setFlags(m_flags);
        QString m_id;
        stream >> m_id;
        item.setId(m_id);
        QString m_type;
        stream >> m_type;
        item.setType(m_type);
        Photo m_photo;
        stream >> m_photo;
        item.setPhoto(m_photo);
        Document m_document;
        stream >> m_document;
        item.setDocument(m_document);
        QString m_title;
        stream >> m_title;
        item.setTitle(m_title);
        QString m_description;
        stream >> m_description;
        item.setDescription(m_description);
        BotInlineMessage m_send_message;
        stream >> m_send_message;
        item.setSendMessage(m_send_message);
    }
        break;
    }
    return stream;
}

/*QDebug operator<<(QDebug debug,  const BotInlineResult &item) {
    QDebugStateSaver saver(debug);
    Q_UNUSED(saver)
    debug.nospace() << "Telegram.BotInlineResult(";
    switch(item.classType()) {
    case BotInlineResult::typeBotInlineResult:
        debug.nospace() << "classType: typeBotInlineResult";
        debug.nospace() << ", flags: " << item.flags();
        debug.nospace() << ", id: " << item.id();
        debug.nospace() << ", type: " << item.type();
        debug.nospace() << ", title: " << item.title();
        debug.nospace() << ", description: " << item.description();
        debug.nospace() << ", url: " << item.url();
        debug.nospace() << ", thumbUrl: " << item.thumbUrl();
        debug.nospace() << ", contentUrl: " << item.contentUrl();
        debug.nospace() << ", contentType: " << item.contentType();
        debug.nospace() << ", w: " << item.w();
        debug.nospace() << ", h: " << item.h();
        debug.nospace() << ", duration: " << item.duration();
        debug.nospace() << ", sendMessage: " << item.sendMessage();
        break;
    case BotInlineResult::typeBotInlineMediaResult:
        debug.nospace() << "classType: typeBotInlineMediaResult";
        debug.nospace() << ", flags: " << item.flags();
        debug.nospace() << ", id: " << item.id();
        debug.nospace() << ", type: " << item.type();
        debug.nospace() << ", photo: " << item.photo();
        debug.nospace() << ", document: " << item.document();
        debug.nospace() << ", title: " << item.title();
        debug.nospace() << ", description: " << item.description();
        debug.nospace() << ", sendMessage: " << item.sendMessage();
        break;
    }
    debug.nospace() << ")";
    return debug;
}
*/
