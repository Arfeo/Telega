// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "cdnpublickey.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

CdnPublicKey::CdnPublicKey(CdnPublicKeyClassType classType, InboundPkt *in) :
    m_dcId(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

CdnPublicKey::CdnPublicKey(InboundPkt *in) :
    m_dcId(0),
    m_classType(typeCdnPublicKey)
{
    fetch(in);
}

CdnPublicKey::CdnPublicKey(const CdnPublicKey &another) :
    TelegramTypeObject(),
    m_dcId(0),
    m_classType(typeCdnPublicKey)
{
    operator=(another);
}

CdnPublicKey::CdnPublicKey(const Null &null) :
    TelegramTypeObject(null),
    m_dcId(0),
    m_classType(typeCdnPublicKey)
{
}

CdnPublicKey::~CdnPublicKey() {
    
}

void CdnPublicKey::setDcId(qint32 dcId) {
    m_dcId = dcId;
}

qint32 CdnPublicKey::dcId() const {
    return m_dcId;
}

void CdnPublicKey::setPublicKey(const QString &publicKey) {
    m_publicKey = publicKey;
}

QString CdnPublicKey::publicKey() const {
    return m_publicKey;
}

bool CdnPublicKey::operator ==(const CdnPublicKey &b) const {
    return m_classType == b.m_classType &&
           m_dcId == b.m_dcId &&
           m_publicKey == b.m_publicKey;
}

CdnPublicKey &CdnPublicKey::operator =(const CdnPublicKey &b) {
    m_classType = b.m_classType;
    m_dcId = b.m_dcId;
    m_publicKey = b.m_publicKey;
    setNull(b.isNull());
    return *this;
}

void CdnPublicKey::setClassType(CdnPublicKey::CdnPublicKeyClassType classType) {
    m_classType = classType;
}

CdnPublicKey::CdnPublicKeyClassType CdnPublicKey::classType() const {
    return m_classType;
}

bool CdnPublicKey::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeCdnPublicKey: {
        m_dcId = in->fetchInt();
        m_publicKey = in->fetchQString();
        m_classType = static_cast<CdnPublicKeyClassType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool CdnPublicKey::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeCdnPublicKey: {
        out->appendInt(m_dcId);
        out->appendQString(m_publicKey);
        return true;
    }
        break;
    
    default:
        return false;
    }
}

QMap<QString, QVariant> CdnPublicKey::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeCdnPublicKey: {
        result["classType"] = "CdnPublicKey::typeCdnPublicKey";
        if( dcId() ) result["dcId"] = QString::number(dcId());
        if( !m_publicKey.isEmpty() ) result["publicKey"] = QVariant::fromValue<QString>(m_publicKey);
        return result;
    }
        break;
    
    default:
        return result;
    }
}

CdnPublicKey CdnPublicKey::fromMap(const QMap<QString, QVariant> &map) {
    CdnPublicKey result;
    if(map.value("classType").toString() == "CdnPublicKey::typeCdnPublicKey") {
        result.setClassType(typeCdnPublicKey);
        QVariant _dcId_var = map.value("dcId");
        if( !_dcId_var.isNull() ) {
            _dcId_var.convert( QVariant::nameToType("qint32") );
            result.setDcId( _dcId_var.value<qint32>() );
        }
        
        QVariant _publicKey_var = map.value("publicKey");
        if( !_publicKey_var.isNull() ) {
            _publicKey_var.convert( QVariant::nameToType("QString") );
            result.setPublicKey( _publicKey_var.value<QString>() );
        }
        
        return result;
    }
    return result;
}

CdnPublicKey CdnPublicKey::fromJson(const QString &json) {
    return CdnPublicKey::fromMap(QJsonDocument::fromJson(json.toUtf8()).toVariant().toMap());
}

QByteArray CdnPublicKey::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const CdnPublicKey &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case CdnPublicKey::typeCdnPublicKey:
        stream << item.dcId();
        stream << item.publicKey();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, CdnPublicKey &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<CdnPublicKey::CdnPublicKeyClassType>(type));
    switch(type) {
    case CdnPublicKey::typeCdnPublicKey: {
        qint32 m_dc_id;
        stream >> m_dc_id;
        item.setDcId(m_dc_id);
        QString m_public_key;
        stream >> m_public_key;
        item.setPublicKey(m_public_key);
    }
        break;
    }
    return stream;
}

QDebug operator<<(QDebug debug,  const CdnPublicKey &item) {
    QDebugStateSaver saver(debug);
    Q_UNUSED(saver)
    debug.nospace() << "Telegram.CdnPublicKey(";
    switch(item.classType()) {
    case CdnPublicKey::typeCdnPublicKey:
        debug.nospace() << "classType: typeCdnPublicKey";
        debug.nospace() << ", dcId: " << item.dcId();
        debug.nospace() << ", publicKey: " << item.publicKey();
        break;
    }
    debug.nospace() << ")";
    return debug;
}

