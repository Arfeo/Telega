// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "channeladminlogevent.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

ChannelAdminLogEvent::ChannelAdminLogEvent(ChannelAdminLogEventClassType classType, InboundPkt *in) :
    m_date(0),
    m_id(0),
    m_userId(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

ChannelAdminLogEvent::ChannelAdminLogEvent(InboundPkt *in) :
    m_date(0),
    m_id(0),
    m_userId(0),
    m_classType(typeChannelAdminLogEvent)
{
    fetch(in);
}

ChannelAdminLogEvent::ChannelAdminLogEvent(const ChannelAdminLogEvent &another) :
    TelegramTypeObject(),
    m_date(0),
    m_id(0),
    m_userId(0),
    m_classType(typeChannelAdminLogEvent)
{
    operator=(another);
}

ChannelAdminLogEvent::ChannelAdminLogEvent(const Null &null) :
    TelegramTypeObject(null),
    m_date(0),
    m_id(0),
    m_userId(0),
    m_classType(typeChannelAdminLogEvent)
{
}

ChannelAdminLogEvent::~ChannelAdminLogEvent() {

}

void ChannelAdminLogEvent::setAction(const ChannelAdminLogEventAction &action) {
    m_action = action;
}

ChannelAdminLogEventAction ChannelAdminLogEvent::action() const {
    return m_action;
}

void ChannelAdminLogEvent::setDate(qint32 date) {
    m_date = date;
}

qint32 ChannelAdminLogEvent::date() const {
    return m_date;
}

void ChannelAdminLogEvent::setId(qint64 id) {
    m_id = id;
}

qint64 ChannelAdminLogEvent::id() const {
    return m_id;
}

void ChannelAdminLogEvent::setUserId(qint32 userId) {
    m_userId = userId;
}

qint32 ChannelAdminLogEvent::userId() const {
    return m_userId;
}

bool ChannelAdminLogEvent::operator ==(const ChannelAdminLogEvent &b) const {
    return m_classType == b.m_classType &&
           m_action == b.m_action &&
           m_date == b.m_date &&
           m_id == b.m_id &&
           m_userId == b.m_userId;
}

ChannelAdminLogEvent &ChannelAdminLogEvent::operator =(const ChannelAdminLogEvent &b) {
    m_classType = b.m_classType;
    m_action = b.m_action;
    m_date = b.m_date;
    m_id = b.m_id;
    m_userId = b.m_userId;
    setNull(b.isNull());
    return *this;
}

void ChannelAdminLogEvent::setClassType(ChannelAdminLogEvent::ChannelAdminLogEventClassType classType) {
    m_classType = classType;
}

ChannelAdminLogEvent::ChannelAdminLogEventClassType ChannelAdminLogEvent::classType() const {
    return m_classType;
}

bool ChannelAdminLogEvent::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeChannelAdminLogEvent: {
        m_id = in->fetchLong();
        m_date = in->fetchInt();
        m_userId = in->fetchInt();
        m_action.fetch(in);
        m_classType = static_cast<ChannelAdminLogEventClassType>(x);
        return true;
    }
        break;

    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool ChannelAdminLogEvent::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeChannelAdminLogEvent: {
        out->appendLong(m_id);
        out->appendInt(m_date);
        out->appendInt(m_userId);
        m_action.push(out);
        return true;
    }
        break;

    default:
        return false;
    }
}

QMap<QString, QVariant> ChannelAdminLogEvent::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeChannelAdminLogEvent: {
        result["classType"] = "ChannelAdminLogEvent::typeChannelAdminLogEvent";
        if( id() ) result["id"] = QString::number(id());
        if( date() ) result["date"] = QString::number(date());
        if( userId() ) result["userId"] = QString::number(userId());
        if( !m_action.isNull() ) result["action"] = m_action.toMap();
        return result;
    }
        break;

    default:
        return result;
    }
}

ChannelAdminLogEvent ChannelAdminLogEvent::fromMap(const QMap<QString, QVariant> &map) {
    ChannelAdminLogEvent result;
    if(map.value("classType").toString() == "ChannelAdminLogEvent::typeChannelAdminLogEvent") {
        result.setClassType(typeChannelAdminLogEvent);
        QVariant _id_var = map.value("id");
        if( !_id_var.isNull() ) {
            _id_var.convert( QVariant::nameToType("qint64") );
            result.setId( _id_var.value<qint64>() );
        }

        QVariant _date_var = map.value("date");
        if( !_date_var.isNull() ) {
            _date_var.convert( QVariant::nameToType("qint32") );
            result.setDate( _date_var.value<qint32>() );
        }

        QVariant _userId_var = map.value("userId");
        if( !_userId_var.isNull() ) {
            _userId_var.convert( QVariant::nameToType("qint32") );
            result.setUserId( _userId_var.value<qint32>() );
        }

        QVariant _action_var = map.value("action");
        if( !_action_var.isNull() )
            result.setAction( ChannelAdminLogEventAction::fromMap(_action_var.toMap()) );

        return result;
    }
    return result;
}

ChannelAdminLogEvent ChannelAdminLogEvent::fromJson(const QString &json) {
    return ChannelAdminLogEvent::fromMap(QJsonDocument::fromJson(json.toUtf8()).toVariant().toMap());
}

QByteArray ChannelAdminLogEvent::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const ChannelAdminLogEvent &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case ChannelAdminLogEvent::typeChannelAdminLogEvent:
        stream << item.id();
        stream << item.date();
        stream << item.userId();
        stream << item.action();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, ChannelAdminLogEvent &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<ChannelAdminLogEvent::ChannelAdminLogEventClassType>(type));
    switch(type) {
    case ChannelAdminLogEvent::typeChannelAdminLogEvent: {
        qint64 m_id;
        stream >> m_id;
        item.setId(m_id);
        qint32 m_date;
        stream >> m_date;
        item.setDate(m_date);
        qint32 m_user_id;
        stream >> m_user_id;
        item.setUserId(m_user_id);
        ChannelAdminLogEventAction m_action;
        stream >> m_action;
        item.setAction(m_action);
    }
        break;
    }
    return stream;
}

/*QDebug operator<<(QDebug debug,  const ChannelAdminLogEvent &item) {
    QDebugStateSaver saver(debug);
    Q_UNUSED(saver)
    debug.nospace() << "Telegram.ChannelAdminLogEvent(";
    switch(item.classType()) {
    case ChannelAdminLogEvent::typeChannelAdminLogEvent:
        debug.nospace() << "classType: typeChannelAdminLogEvent";
        debug.nospace() << ", id: " << item.id();
        debug.nospace() << ", date: " << item.date();
        debug.nospace() << ", userId: " << item.userId();
        debug.nospace() << ", action: " << item.action();
        break;
    }
    debug.nospace() << ")";
    return debug;
}
*/
