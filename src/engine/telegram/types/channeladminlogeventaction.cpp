// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "channeladminlogeventaction.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

ChannelAdminLogEventAction::ChannelAdminLogEventAction(ChannelAdminLogEventActionClassType classType, InboundPkt *in) :
    m_newValueBool(false),
    m_classType(classType)
{
    if(in) fetch(in);
}

ChannelAdminLogEventAction::ChannelAdminLogEventAction(InboundPkt *in) :
    m_newValueBool(false),
    m_classType(typeChannelAdminLogEventActionChangeTitle)
{
    fetch(in);
}

ChannelAdminLogEventAction::ChannelAdminLogEventAction(const ChannelAdminLogEventAction &another) :
    TelegramTypeObject(),
    m_newValueBool(false),
    m_classType(typeChannelAdminLogEventActionChangeTitle)
{
    operator=(another);
}

ChannelAdminLogEventAction::ChannelAdminLogEventAction(const Null &null) :
    TelegramTypeObject(null),
    m_newValueBool(false),
    m_classType(typeChannelAdminLogEventActionChangeTitle)
{
}

ChannelAdminLogEventAction::~ChannelAdminLogEventAction() {

}

void ChannelAdminLogEventAction::setMessage(const Message &message) {
    m_message = message;
}

Message ChannelAdminLogEventAction::message() const {
    return m_message;
}

void ChannelAdminLogEventAction::setNewMessage(const Message &newMessage) {
    m_newMessage = newMessage;
}

Message ChannelAdminLogEventAction::newMessage() const {
    return m_newMessage;
}

void ChannelAdminLogEventAction::setNewParticipant(const ChannelParticipant &newParticipant) {
    m_newParticipant = newParticipant;
}

ChannelParticipant ChannelAdminLogEventAction::newParticipant() const {
    return m_newParticipant;
}

void ChannelAdminLogEventAction::setNewPhoto(const ChatPhoto &newPhoto) {
    m_newPhoto = newPhoto;
}

ChatPhoto ChannelAdminLogEventAction::newPhoto() const {
    return m_newPhoto;
}

void ChannelAdminLogEventAction::setNewValueString(const QString &newValueString) {
    m_newValueString = newValueString;
}

QString ChannelAdminLogEventAction::newValueString() const {
    return m_newValueString;
}

void ChannelAdminLogEventAction::setNewValueBool(bool newValueBool) {
    m_newValueBool = newValueBool;
}

bool ChannelAdminLogEventAction::newValueBool() const {
    return m_newValueBool;
}

void ChannelAdminLogEventAction::setParticipant(const ChannelParticipant &participant) {
    m_participant = participant;
}

ChannelParticipant ChannelAdminLogEventAction::participant() const {
    return m_participant;
}

void ChannelAdminLogEventAction::setPrevMessage(const Message &prevMessage) {
    m_prevMessage = prevMessage;
}

Message ChannelAdminLogEventAction::prevMessage() const {
    return m_prevMessage;
}

void ChannelAdminLogEventAction::setPrevParticipant(const ChannelParticipant &prevParticipant) {
    m_prevParticipant = prevParticipant;
}

ChannelParticipant ChannelAdminLogEventAction::prevParticipant() const {
    return m_prevParticipant;
}

void ChannelAdminLogEventAction::setPrevPhoto(const ChatPhoto &prevPhoto) {
    m_prevPhoto = prevPhoto;
}

ChatPhoto ChannelAdminLogEventAction::prevPhoto() const {
    return m_prevPhoto;
}

void ChannelAdminLogEventAction::setPrevValue(const QString &prevValue) {
    m_prevValue = prevValue;
}

QString ChannelAdminLogEventAction::prevValue() const {
    return m_prevValue;
}

bool ChannelAdminLogEventAction::operator ==(const ChannelAdminLogEventAction &b) const {
    return m_classType == b.m_classType &&
           m_message == b.m_message &&
           m_newMessage == b.m_newMessage &&
           m_newParticipant == b.m_newParticipant &&
           m_newPhoto == b.m_newPhoto &&
           m_newValueString == b.m_newValueString &&
           m_newValueBool == b.m_newValueBool &&
           m_participant == b.m_participant &&
           m_prevMessage == b.m_prevMessage &&
           m_prevParticipant == b.m_prevParticipant &&
           m_prevPhoto == b.m_prevPhoto &&
           m_prevValue == b.m_prevValue;
}

ChannelAdminLogEventAction &ChannelAdminLogEventAction::operator =(const ChannelAdminLogEventAction &b) {
    m_classType = b.m_classType;
    m_message = b.m_message;
    m_newMessage = b.m_newMessage;
    m_newParticipant = b.m_newParticipant;
    m_newPhoto = b.m_newPhoto;
    m_newValueString = b.m_newValueString;
    m_newValueBool = b.m_newValueBool;
    m_participant = b.m_participant;
    m_prevMessage = b.m_prevMessage;
    m_prevParticipant = b.m_prevParticipant;
    m_prevPhoto = b.m_prevPhoto;
    m_prevValue = b.m_prevValue;
    setNull(b.isNull());
    return *this;
}

void ChannelAdminLogEventAction::setClassType(ChannelAdminLogEventAction::ChannelAdminLogEventActionClassType classType) {
    m_classType = classType;
}

ChannelAdminLogEventAction::ChannelAdminLogEventActionClassType ChannelAdminLogEventAction::classType() const {
    return m_classType;
}

bool ChannelAdminLogEventAction::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeChannelAdminLogEventActionChangeTitle: {
        m_prevValue = in->fetchQString();
        m_newValueString = in->fetchQString();
        m_classType = static_cast<ChannelAdminLogEventActionClassType>(x);
        return true;
    }
        break;

    case typeChannelAdminLogEventActionChangeAbout: {
        m_prevValue = in->fetchQString();
        m_newValueString = in->fetchQString();
        m_classType = static_cast<ChannelAdminLogEventActionClassType>(x);
        return true;
    }
        break;

    case typeChannelAdminLogEventActionChangeUsername: {
        m_prevValue = in->fetchQString();
        m_newValueString = in->fetchQString();
        m_classType = static_cast<ChannelAdminLogEventActionClassType>(x);
        return true;
    }
        break;

    case typeChannelAdminLogEventActionChangePhoto: {
        m_prevPhoto.fetch(in);
        m_newPhoto.fetch(in);
        m_classType = static_cast<ChannelAdminLogEventActionClassType>(x);
        return true;
    }
        break;

    case typeChannelAdminLogEventActionToggleInvites: {
        m_newValueBool = in->fetchBool();
        m_classType = static_cast<ChannelAdminLogEventActionClassType>(x);
        return true;
    }
        break;

    case typeChannelAdminLogEventActionToggleSignatures: {
        m_newValueBool = in->fetchBool();
        m_classType = static_cast<ChannelAdminLogEventActionClassType>(x);
        return true;
    }
        break;

    case typeChannelAdminLogEventActionUpdatePinned: {
        m_message.fetch(in);
        m_classType = static_cast<ChannelAdminLogEventActionClassType>(x);
        return true;
    }
        break;

    case typeChannelAdminLogEventActionEditMessage: {
        m_prevMessage.fetch(in);
        m_newMessage.fetch(in);
        m_classType = static_cast<ChannelAdminLogEventActionClassType>(x);
        return true;
    }
        break;

    case typeChannelAdminLogEventActionDeleteMessage: {
        m_message.fetch(in);
        m_classType = static_cast<ChannelAdminLogEventActionClassType>(x);
        return true;
    }
        break;

    case typeChannelAdminLogEventActionParticipantJoin: {
        m_classType = static_cast<ChannelAdminLogEventActionClassType>(x);
        return true;
    }
        break;

    case typeChannelAdminLogEventActionParticipantLeave: {
        m_classType = static_cast<ChannelAdminLogEventActionClassType>(x);
        return true;
    }
        break;

    case typeChannelAdminLogEventActionParticipantInvite: {
        m_participant.fetch(in);
        m_classType = static_cast<ChannelAdminLogEventActionClassType>(x);
        return true;
    }
        break;

    case typeChannelAdminLogEventActionParticipantToggleBan: {
        m_prevParticipant.fetch(in);
        m_newParticipant.fetch(in);
        m_classType = static_cast<ChannelAdminLogEventActionClassType>(x);
        return true;
    }
        break;

    case typeChannelAdminLogEventActionParticipantToggleAdmin: {
        m_prevParticipant.fetch(in);
        m_newParticipant.fetch(in);
        m_classType = static_cast<ChannelAdminLogEventActionClassType>(x);
        return true;
    }
        break;

    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool ChannelAdminLogEventAction::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeChannelAdminLogEventActionChangeTitle: {
        out->appendQString(m_prevValue);
        out->appendQString(m_newValueString);
        return true;
    }
        break;

    case typeChannelAdminLogEventActionChangeAbout: {
        out->appendQString(m_prevValue);
        out->appendQString(m_newValueString);
        return true;
    }
        break;

    case typeChannelAdminLogEventActionChangeUsername: {
        out->appendQString(m_prevValue);
        out->appendQString(m_newValueString);
        return true;
    }
        break;

    case typeChannelAdminLogEventActionChangePhoto: {
        m_prevPhoto.push(out);
        m_newPhoto.push(out);
        return true;
    }
        break;

    case typeChannelAdminLogEventActionToggleInvites: {
        out->appendBool(m_newValueBool);
        return true;
    }
        break;

    case typeChannelAdminLogEventActionToggleSignatures: {
        out->appendBool(m_newValueBool);
        return true;
    }
        break;

    case typeChannelAdminLogEventActionUpdatePinned: {
        m_message.push(out);
        return true;
    }
        break;

    case typeChannelAdminLogEventActionEditMessage: {
        m_prevMessage.push(out);
        m_newMessage.push(out);
        return true;
    }
        break;

    case typeChannelAdminLogEventActionDeleteMessage: {
        m_message.push(out);
        return true;
    }
        break;

    case typeChannelAdminLogEventActionParticipantJoin: {
        return true;
    }
        break;

    case typeChannelAdminLogEventActionParticipantLeave: {
        return true;
    }
        break;

    case typeChannelAdminLogEventActionParticipantInvite: {
        m_participant.push(out);
        return true;
    }
        break;

    case typeChannelAdminLogEventActionParticipantToggleBan: {
        m_prevParticipant.push(out);
        m_newParticipant.push(out);
        return true;
    }
        break;

    case typeChannelAdminLogEventActionParticipantToggleAdmin: {
        m_prevParticipant.push(out);
        m_newParticipant.push(out);
        return true;
    }
        break;

    default:
        return false;
    }
}

QMap<QString, QVariant> ChannelAdminLogEventAction::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeChannelAdminLogEventActionChangeTitle: {
        result["classType"] = "ChannelAdminLogEventAction::typeChannelAdminLogEventActionChangeTitle";
        if( !m_prevValue.isEmpty() ) result["prevValue"] = QVariant::fromValue<QString>(m_prevValue);
        if( !m_newValueString.isEmpty() ) result["newValueString"] = QVariant::fromValue<QString>(m_newValueString);
        return result;
    }
        break;

    case typeChannelAdminLogEventActionChangeAbout: {
        result["classType"] = "ChannelAdminLogEventAction::typeChannelAdminLogEventActionChangeAbout";
        if( !m_prevValue.isEmpty() ) result["prevValue"] = QVariant::fromValue<QString>(m_prevValue);
        if( !m_newValueString.isEmpty() ) result["newValueString"] = QVariant::fromValue<QString>(m_newValueString);
        return result;
    }
        break;

    case typeChannelAdminLogEventActionChangeUsername: {
        result["classType"] = "ChannelAdminLogEventAction::typeChannelAdminLogEventActionChangeUsername";
        if( !m_prevValue.isEmpty() ) result["prevValue"] = QVariant::fromValue<QString>(m_prevValue);
        if( !m_newValueString.isEmpty() ) result["newValueString"] = QVariant::fromValue<QString>(m_newValueString);
        return result;
    }
        break;

    case typeChannelAdminLogEventActionChangePhoto: {
        result["classType"] = "ChannelAdminLogEventAction::typeChannelAdminLogEventActionChangePhoto";
        if( !m_prevPhoto.isNull() ) result["prevPhoto"] = m_prevPhoto.toMap();
        if( !m_newPhoto.isNull() ) result["newPhoto"] = m_newPhoto.toMap();
        return result;
    }
        break;

    case typeChannelAdminLogEventActionToggleInvites: {
        result["classType"] = "ChannelAdminLogEventAction::typeChannelAdminLogEventActionToggleInvites";
        if( newValueBool() ) result["newValueBool"] = QString::number(newValueBool());
        return result;
    }
        break;

    case typeChannelAdminLogEventActionToggleSignatures: {
        result["classType"] = "ChannelAdminLogEventAction::typeChannelAdminLogEventActionToggleSignatures";
        if( newValueBool() ) result["newValueBool"] = QString::number(newValueBool());
        return result;
    }
        break;

    case typeChannelAdminLogEventActionUpdatePinned: {
        result["classType"] = "ChannelAdminLogEventAction::typeChannelAdminLogEventActionUpdatePinned";
        if( !m_message.isNull() ) result["message"] = m_message.toMap();
        return result;
    }
        break;

    case typeChannelAdminLogEventActionEditMessage: {
        result["classType"] = "ChannelAdminLogEventAction::typeChannelAdminLogEventActionEditMessage";
        if( !m_prevMessage.isNull() ) result["prevMessage"] = m_prevMessage.toMap();
        if( !m_newMessage.isNull() ) result["newMessage"] = m_newMessage.toMap();
        return result;
    }
        break;

    case typeChannelAdminLogEventActionDeleteMessage: {
        result["classType"] = "ChannelAdminLogEventAction::typeChannelAdminLogEventActionDeleteMessage";
        if( !m_message.isNull() ) result["message"] = m_message.toMap();
        return result;
    }
        break;

    case typeChannelAdminLogEventActionParticipantJoin: {
        result["classType"] = "ChannelAdminLogEventAction::typeChannelAdminLogEventActionParticipantJoin";
        return result;
    }
        break;

    case typeChannelAdminLogEventActionParticipantLeave: {
        result["classType"] = "ChannelAdminLogEventAction::typeChannelAdminLogEventActionParticipantLeave";
        return result;
    }
        break;

    case typeChannelAdminLogEventActionParticipantInvite: {
        result["classType"] = "ChannelAdminLogEventAction::typeChannelAdminLogEventActionParticipantInvite";
        if( !m_participant.isNull() ) result["participant"] = m_participant.toMap();
        return result;
    }
        break;

    case typeChannelAdminLogEventActionParticipantToggleBan: {
        result["classType"] = "ChannelAdminLogEventAction::typeChannelAdminLogEventActionParticipantToggleBan";
        if( !m_prevParticipant.isNull() ) result["prevParticipant"] = m_prevParticipant.toMap();
        if( !m_newParticipant.isNull() ) result["newParticipant"] = m_newParticipant.toMap();
        return result;
    }
        break;

    case typeChannelAdminLogEventActionParticipantToggleAdmin: {
        result["classType"] = "ChannelAdminLogEventAction::typeChannelAdminLogEventActionParticipantToggleAdmin";
        if( !m_prevParticipant.isNull() ) result["prevParticipant"] = m_prevParticipant.toMap();
        if( !m_newParticipant.isNull() ) result["newParticipant"] = m_newParticipant.toMap();
        return result;
    }
        break;

    default:
        return result;
    }
}

ChannelAdminLogEventAction ChannelAdminLogEventAction::fromMap(const QMap<QString, QVariant> &map) {
    ChannelAdminLogEventAction result;
    if(map.value("classType").toString() == "ChannelAdminLogEventAction::typeChannelAdminLogEventActionChangeTitle") {
        result.setClassType(typeChannelAdminLogEventActionChangeTitle);
        QVariant _prevValue_var = map.value("prevValue");
        if( !_prevValue_var.isNull() ) {
            _prevValue_var.convert( QVariant::nameToType("QString") );
            result.setPrevValue( _prevValue_var.value<QString>() );
        }

        QVariant _newValueString_var = map.value("newValueString");
        if( !_newValueString_var.isNull() ) {
            _newValueString_var.convert( QVariant::nameToType("QString") );
            result.setNewValueString( _newValueString_var.value<QString>() );
        }

        return result;
    }
    if(map.value("classType").toString() == "ChannelAdminLogEventAction::typeChannelAdminLogEventActionChangeAbout") {
        result.setClassType(typeChannelAdminLogEventActionChangeAbout);
        QVariant _prevValue_var = map.value("prevValue");
        if( !_prevValue_var.isNull() ) {
            _prevValue_var.convert( QVariant::nameToType("QString") );
            result.setPrevValue( _prevValue_var.value<QString>() );
        }

        QVariant _newValueString_var = map.value("newValueString");
        if( !_newValueString_var.isNull() ) {
            _newValueString_var.convert( QVariant::nameToType("QString") );
            result.setNewValueString( _newValueString_var.value<QString>() );
        }

        return result;
    }
    if(map.value("classType").toString() == "ChannelAdminLogEventAction::typeChannelAdminLogEventActionChangeUsername") {
        result.setClassType(typeChannelAdminLogEventActionChangeUsername);
        QVariant _prevValue_var = map.value("prevValue");
        if( !_prevValue_var.isNull() ) {
            _prevValue_var.convert( QVariant::nameToType("QString") );
            result.setPrevValue( _prevValue_var.value<QString>() );
        }

        QVariant _newValueString_var = map.value("newValueString");
        if( !_newValueString_var.isNull() ) {
            _newValueString_var.convert( QVariant::nameToType("QString") );
            result.setNewValueString( _newValueString_var.value<QString>() );
        }

        return result;
    }
    if(map.value("classType").toString() == "ChannelAdminLogEventAction::typeChannelAdminLogEventActionChangePhoto") {
        result.setClassType(typeChannelAdminLogEventActionChangePhoto);
        QVariant _prevPhoto_var = map.value("prevPhoto");
        if( !_prevPhoto_var.isNull() )
            result.setPrevPhoto( ChatPhoto::fromMap(_prevPhoto_var.toMap()) );

        QVariant _newPhoto_var = map.value("newPhoto");
        if( !_newPhoto_var.isNull() )
            result.setNewPhoto( ChatPhoto::fromMap(_newPhoto_var.toMap()) );

        return result;
    }
    if(map.value("classType").toString() == "ChannelAdminLogEventAction::typeChannelAdminLogEventActionToggleInvites") {
        result.setClassType(typeChannelAdminLogEventActionToggleInvites);
        QVariant _newValueBool_var = map.value("newValueBool");
        if( !_newValueBool_var.isNull() ) {
            _newValueBool_var.convert( QVariant::nameToType("bool") );
            result.setNewValueBool( _newValueBool_var.value<bool>() );
        }

        return result;
    }
    if(map.value("classType").toString() == "ChannelAdminLogEventAction::typeChannelAdminLogEventActionToggleSignatures") {
        result.setClassType(typeChannelAdminLogEventActionToggleSignatures);
        QVariant _newValueBool_var = map.value("newValueBool");
        if( !_newValueBool_var.isNull() ) {
            _newValueBool_var.convert( QVariant::nameToType("bool") );
            result.setNewValueBool( _newValueBool_var.value<bool>() );
        }

        return result;
    }
    if(map.value("classType").toString() == "ChannelAdminLogEventAction::typeChannelAdminLogEventActionUpdatePinned") {
        result.setClassType(typeChannelAdminLogEventActionUpdatePinned);
        QVariant _message_var = map.value("message");
        if( !_message_var.isNull() )
            result.setMessage( Message::fromMap(_message_var.toMap()) );

        return result;
    }
    if(map.value("classType").toString() == "ChannelAdminLogEventAction::typeChannelAdminLogEventActionEditMessage") {
        result.setClassType(typeChannelAdminLogEventActionEditMessage);
        QVariant _prevMessage_var = map.value("prevMessage");
        if( !_prevMessage_var.isNull() )
            result.setPrevMessage( Message::fromMap(_prevMessage_var.toMap()) );

        QVariant _newMessage_var = map.value("newMessage");
        if( !_newMessage_var.isNull() )
            result.setNewMessage( Message::fromMap(_newMessage_var.toMap()) );

        return result;
    }
    if(map.value("classType").toString() == "ChannelAdminLogEventAction::typeChannelAdminLogEventActionDeleteMessage") {
        result.setClassType(typeChannelAdminLogEventActionDeleteMessage);
        QVariant _message_var = map.value("message");
        if( !_message_var.isNull() )
            result.setMessage( Message::fromMap(_message_var.toMap()) );

        return result;
    }
    if(map.value("classType").toString() == "ChannelAdminLogEventAction::typeChannelAdminLogEventActionParticipantJoin") {
        result.setClassType(typeChannelAdminLogEventActionParticipantJoin);
        return result;
    }
    if(map.value("classType").toString() == "ChannelAdminLogEventAction::typeChannelAdminLogEventActionParticipantLeave") {
        result.setClassType(typeChannelAdminLogEventActionParticipantLeave);
        return result;
    }
    if(map.value("classType").toString() == "ChannelAdminLogEventAction::typeChannelAdminLogEventActionParticipantInvite") {
        result.setClassType(typeChannelAdminLogEventActionParticipantInvite);
        QVariant _participant_var = map.value("participant");
        if( !_participant_var.isNull() )
            result.setParticipant( ChannelParticipant::fromMap(_participant_var.toMap()) );

        return result;
    }
    if(map.value("classType").toString() == "ChannelAdminLogEventAction::typeChannelAdminLogEventActionParticipantToggleBan") {
        result.setClassType(typeChannelAdminLogEventActionParticipantToggleBan);
        QVariant _prevParticipant_var = map.value("prevParticipant");
        if( !_prevParticipant_var.isNull() )
            result.setPrevParticipant( ChannelParticipant::fromMap(_prevParticipant_var.toMap()) );

        QVariant _newParticipant_var = map.value("newParticipant");
        if( !_newParticipant_var.isNull() )
            result.setNewParticipant( ChannelParticipant::fromMap(_newParticipant_var.toMap()) );

        return result;
    }
    if(map.value("classType").toString() == "ChannelAdminLogEventAction::typeChannelAdminLogEventActionParticipantToggleAdmin") {
        result.setClassType(typeChannelAdminLogEventActionParticipantToggleAdmin);
        QVariant _prevParticipant_var = map.value("prevParticipant");
        if( !_prevParticipant_var.isNull() )
            result.setPrevParticipant( ChannelParticipant::fromMap(_prevParticipant_var.toMap()) );

        QVariant _newParticipant_var = map.value("newParticipant");
        if( !_newParticipant_var.isNull() )
            result.setNewParticipant( ChannelParticipant::fromMap(_newParticipant_var.toMap()) );

        return result;
    }
    return result;
}

ChannelAdminLogEventAction ChannelAdminLogEventAction::fromJson(const QString &json) {
    return ChannelAdminLogEventAction::fromMap(QJsonDocument::fromJson(json.toUtf8()).toVariant().toMap());
}

QByteArray ChannelAdminLogEventAction::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const ChannelAdminLogEventAction &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case ChannelAdminLogEventAction::typeChannelAdminLogEventActionChangeTitle:
        stream << item.prevValue();
        stream << item.newValueString();
        break;
    case ChannelAdminLogEventAction::typeChannelAdminLogEventActionChangeAbout:
        stream << item.prevValue();
        stream << item.newValueString();
        break;
    case ChannelAdminLogEventAction::typeChannelAdminLogEventActionChangeUsername:
        stream << item.prevValue();
        stream << item.newValueString();
        break;
    case ChannelAdminLogEventAction::typeChannelAdminLogEventActionChangePhoto:
        stream << item.prevPhoto();
        stream << item.newPhoto();
        break;
    case ChannelAdminLogEventAction::typeChannelAdminLogEventActionToggleInvites:
        stream << item.newValueBool();
        break;
    case ChannelAdminLogEventAction::typeChannelAdminLogEventActionToggleSignatures:
        stream << item.newValueBool();
        break;
    case ChannelAdminLogEventAction::typeChannelAdminLogEventActionUpdatePinned:
        stream << item.message();
        break;
    case ChannelAdminLogEventAction::typeChannelAdminLogEventActionEditMessage:
        stream << item.prevMessage();
        stream << item.newMessage();
        break;
    case ChannelAdminLogEventAction::typeChannelAdminLogEventActionDeleteMessage:
        stream << item.message();
        break;
    case ChannelAdminLogEventAction::typeChannelAdminLogEventActionParticipantJoin:

        break;
    case ChannelAdminLogEventAction::typeChannelAdminLogEventActionParticipantLeave:

        break;
    case ChannelAdminLogEventAction::typeChannelAdminLogEventActionParticipantInvite:
        stream << item.participant();
        break;
    case ChannelAdminLogEventAction::typeChannelAdminLogEventActionParticipantToggleBan:
        stream << item.prevParticipant();
        stream << item.newParticipant();
        break;
    case ChannelAdminLogEventAction::typeChannelAdminLogEventActionParticipantToggleAdmin:
        stream << item.prevParticipant();
        stream << item.newParticipant();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, ChannelAdminLogEventAction &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<ChannelAdminLogEventAction::ChannelAdminLogEventActionClassType>(type));
    switch(type) {
    case ChannelAdminLogEventAction::typeChannelAdminLogEventActionChangeTitle: {
        QString m_prev_value;
        stream >> m_prev_value;
        item.setPrevValue(m_prev_value);
        QString m_new_value_string;
        stream >> m_new_value_string;
        item.setNewValueString(m_new_value_string);
    }
        break;
    case ChannelAdminLogEventAction::typeChannelAdminLogEventActionChangeAbout: {
        QString m_prev_value;
        stream >> m_prev_value;
        item.setPrevValue(m_prev_value);
        QString m_new_value_string;
        stream >> m_new_value_string;
        item.setNewValueString(m_new_value_string);
    }
        break;
    case ChannelAdminLogEventAction::typeChannelAdminLogEventActionChangeUsername: {
        QString m_prev_value;
        stream >> m_prev_value;
        item.setPrevValue(m_prev_value);
        QString m_new_value_string;
        stream >> m_new_value_string;
        item.setNewValueString(m_new_value_string);
    }
        break;
    case ChannelAdminLogEventAction::typeChannelAdminLogEventActionChangePhoto: {
        ChatPhoto m_prev_photo;
        stream >> m_prev_photo;
        item.setPrevPhoto(m_prev_photo);
        ChatPhoto m_new_photo;
        stream >> m_new_photo;
        item.setNewPhoto(m_new_photo);
    }
        break;
    case ChannelAdminLogEventAction::typeChannelAdminLogEventActionToggleInvites: {
        bool m_new_value_Bool;
        stream >> m_new_value_Bool;
        item.setNewValueBool(m_new_value_Bool);
    }
        break;
    case ChannelAdminLogEventAction::typeChannelAdminLogEventActionToggleSignatures: {
        bool m_new_value_Bool;
        stream >> m_new_value_Bool;
        item.setNewValueBool(m_new_value_Bool);
    }
        break;
    case ChannelAdminLogEventAction::typeChannelAdminLogEventActionUpdatePinned: {
        Message m_message;
        stream >> m_message;
        item.setMessage(m_message);
    }
        break;
    case ChannelAdminLogEventAction::typeChannelAdminLogEventActionEditMessage: {
        Message m_prev_message;
        stream >> m_prev_message;
        item.setPrevMessage(m_prev_message);
        Message m_new_message;
        stream >> m_new_message;
        item.setNewMessage(m_new_message);
    }
        break;
    case ChannelAdminLogEventAction::typeChannelAdminLogEventActionDeleteMessage: {
        Message m_message;
        stream >> m_message;
        item.setMessage(m_message);
    }
        break;
    case ChannelAdminLogEventAction::typeChannelAdminLogEventActionParticipantJoin: {

    }
        break;
    case ChannelAdminLogEventAction::typeChannelAdminLogEventActionParticipantLeave: {

    }
        break;
    case ChannelAdminLogEventAction::typeChannelAdminLogEventActionParticipantInvite: {
        ChannelParticipant m_participant;
        stream >> m_participant;
        item.setParticipant(m_participant);
    }
        break;
    case ChannelAdminLogEventAction::typeChannelAdminLogEventActionParticipantToggleBan: {
        ChannelParticipant m_prev_participant;
        stream >> m_prev_participant;
        item.setPrevParticipant(m_prev_participant);
        ChannelParticipant m_new_participant;
        stream >> m_new_participant;
        item.setNewParticipant(m_new_participant);
    }
        break;
    case ChannelAdminLogEventAction::typeChannelAdminLogEventActionParticipantToggleAdmin: {
        ChannelParticipant m_prev_participant;
        stream >> m_prev_participant;
        item.setPrevParticipant(m_prev_participant);
        ChannelParticipant m_new_participant;
        stream >> m_new_participant;
        item.setNewParticipant(m_new_participant);
    }
        break;
    }
    return stream;
}

/*QDebug operator<<(QDebug debug,  const ChannelAdminLogEventAction &item) {
    QDebugStateSaver saver(debug);
    Q_UNUSED(saver)
    debug.nospace() << "Telegram.ChannelAdminLogEventAction(";
    switch(item.classType()) {
    case ChannelAdminLogEventAction::typeChannelAdminLogEventActionChangeTitle:
        debug.nospace() << "classType: typeChannelAdminLogEventActionChangeTitle";
        debug.nospace() << ", prevValue: " << item.prevValue();
        debug.nospace() << ", newValueString: " << item.newValueString();
        break;
    case ChannelAdminLogEventAction::typeChannelAdminLogEventActionChangeAbout:
        debug.nospace() << "classType: typeChannelAdminLogEventActionChangeAbout";
        debug.nospace() << ", prevValue: " << item.prevValue();
        debug.nospace() << ", newValueString: " << item.newValueString();
        break;
    case ChannelAdminLogEventAction::typeChannelAdminLogEventActionChangeUsername:
        debug.nospace() << "classType: typeChannelAdminLogEventActionChangeUsername";
        debug.nospace() << ", prevValue: " << item.prevValue();
        debug.nospace() << ", newValueString: " << item.newValueString();
        break;
    case ChannelAdminLogEventAction::typeChannelAdminLogEventActionChangePhoto:
        debug.nospace() << "classType: typeChannelAdminLogEventActionChangePhoto";
        debug.nospace() << ", prevPhoto: " << item.prevPhoto();
        debug.nospace() << ", newPhoto: " << item.newPhoto();
        break;
    case ChannelAdminLogEventAction::typeChannelAdminLogEventActionToggleInvites:
        debug.nospace() << "classType: typeChannelAdminLogEventActionToggleInvites";
        debug.nospace() << ", newValueBool: " << item.newValueBool();
        break;
    case ChannelAdminLogEventAction::typeChannelAdminLogEventActionToggleSignatures:
        debug.nospace() << "classType: typeChannelAdminLogEventActionToggleSignatures";
        debug.nospace() << ", newValueBool: " << item.newValueBool();
        break;
    case ChannelAdminLogEventAction::typeChannelAdminLogEventActionUpdatePinned:
        debug.nospace() << "classType: typeChannelAdminLogEventActionUpdatePinned";
        debug.nospace() << ", message: " << item.message();
        break;
    case ChannelAdminLogEventAction::typeChannelAdminLogEventActionEditMessage:
        debug.nospace() << "classType: typeChannelAdminLogEventActionEditMessage";
        debug.nospace() << ", prevMessage: " << item.prevMessage();
        debug.nospace() << ", newMessage: " << item.newMessage();
        break;
    case ChannelAdminLogEventAction::typeChannelAdminLogEventActionDeleteMessage:
        debug.nospace() << "classType: typeChannelAdminLogEventActionDeleteMessage";
        debug.nospace() << ", message: " << item.message();
        break;
    case ChannelAdminLogEventAction::typeChannelAdminLogEventActionParticipantJoin:
        debug.nospace() << "classType: typeChannelAdminLogEventActionParticipantJoin";
        break;
    case ChannelAdminLogEventAction::typeChannelAdminLogEventActionParticipantLeave:
        debug.nospace() << "classType: typeChannelAdminLogEventActionParticipantLeave";
        break;
    case ChannelAdminLogEventAction::typeChannelAdminLogEventActionParticipantInvite:
        debug.nospace() << "classType: typeChannelAdminLogEventActionParticipantInvite";
        debug.nospace() << ", participant: " << item.participant();
        break;
    case ChannelAdminLogEventAction::typeChannelAdminLogEventActionParticipantToggleBan:
        debug.nospace() << "classType: typeChannelAdminLogEventActionParticipantToggleBan";
        debug.nospace() << ", prevParticipant: " << item.prevParticipant();
        debug.nospace() << ", newParticipant: " << item.newParticipant();
        break;
    case ChannelAdminLogEventAction::typeChannelAdminLogEventActionParticipantToggleAdmin:
        debug.nospace() << "classType: typeChannelAdminLogEventActionParticipantToggleAdmin";
        debug.nospace() << ", prevParticipant: " << item.prevParticipant();
        debug.nospace() << ", newParticipant: " << item.newParticipant();
        break;
    }
    debug.nospace() << ")";
    return debug;
}
*/
