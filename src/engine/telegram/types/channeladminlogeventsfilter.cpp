// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "channeladminlogeventsfilter.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

ChannelAdminLogEventsFilter::ChannelAdminLogEventsFilter(ChannelAdminLogEventsFilterClassType classType, InboundPkt *in) :
    m_flags(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

ChannelAdminLogEventsFilter::ChannelAdminLogEventsFilter(InboundPkt *in) :
    m_flags(0),
    m_classType(typeChannelAdminLogEventsFilter)
{
    fetch(in);
}

ChannelAdminLogEventsFilter::ChannelAdminLogEventsFilter(const ChannelAdminLogEventsFilter &another) :
    TelegramTypeObject(),
    m_flags(0),
    m_classType(typeChannelAdminLogEventsFilter)
{
    operator=(another);
}

ChannelAdminLogEventsFilter::ChannelAdminLogEventsFilter(const Null &null) :
    TelegramTypeObject(null),
    m_flags(0),
    m_classType(typeChannelAdminLogEventsFilter)
{
}

ChannelAdminLogEventsFilter::~ChannelAdminLogEventsFilter() {

}

void ChannelAdminLogEventsFilter::setBan(bool ban) {
    if(ban) m_flags = (m_flags | (1<<3));
    else m_flags = (m_flags & ~(1<<3));
}

bool ChannelAdminLogEventsFilter::ban() const {
    return (m_flags & 1<<3);
}

void ChannelAdminLogEventsFilter::setDeleteValue(bool deleteValue) {
    if(deleteValue) m_flags = (m_flags | (1<<13));
    else m_flags = (m_flags & ~(1<<13));
}

bool ChannelAdminLogEventsFilter::deleteValue() const {
    return (m_flags & 1<<13);
}

void ChannelAdminLogEventsFilter::setDemote(bool demote) {
    if(demote) m_flags = (m_flags | (1<<8));
    else m_flags = (m_flags & ~(1<<8));
}

bool ChannelAdminLogEventsFilter::demote() const {
    return (m_flags & 1<<8);
}

void ChannelAdminLogEventsFilter::setEdit(bool edit) {
    if(edit) m_flags = (m_flags | (1<<12));
    else m_flags = (m_flags & ~(1<<12));
}

bool ChannelAdminLogEventsFilter::edit() const {
    return (m_flags & 1<<12);
}

void ChannelAdminLogEventsFilter::setFlags(qint32 flags) {
    m_flags = flags;
}

qint32 ChannelAdminLogEventsFilter::flags() const {
    return m_flags;
}

void ChannelAdminLogEventsFilter::setInfo(bool info) {
    if(info) m_flags = (m_flags | (1<<9));
    else m_flags = (m_flags & ~(1<<9));
}

bool ChannelAdminLogEventsFilter::info() const {
    return (m_flags & 1<<9);
}

void ChannelAdminLogEventsFilter::setInvite(bool invite) {
    if(invite) m_flags = (m_flags | (1<<2));
    else m_flags = (m_flags & ~(1<<2));
}

bool ChannelAdminLogEventsFilter::invite() const {
    return (m_flags & 1<<2);
}

void ChannelAdminLogEventsFilter::setJoin(bool join) {
    if(join) m_flags = (m_flags | (1<<0));
    else m_flags = (m_flags & ~(1<<0));
}

bool ChannelAdminLogEventsFilter::join() const {
    return (m_flags & 1<<0);
}

void ChannelAdminLogEventsFilter::setKick(bool kick) {
    if(kick) m_flags = (m_flags | (1<<5));
    else m_flags = (m_flags & ~(1<<5));
}

bool ChannelAdminLogEventsFilter::kick() const {
    return (m_flags & 1<<5);
}

void ChannelAdminLogEventsFilter::setLeave(bool leave) {
    if(leave) m_flags = (m_flags | (1<<1));
    else m_flags = (m_flags & ~(1<<1));
}

bool ChannelAdminLogEventsFilter::leave() const {
    return (m_flags & 1<<1);
}

void ChannelAdminLogEventsFilter::setPinned(bool pinned) {
    if(pinned) m_flags = (m_flags | (1<<11));
    else m_flags = (m_flags & ~(1<<11));
}

bool ChannelAdminLogEventsFilter::pinned() const {
    return (m_flags & 1<<11);
}

void ChannelAdminLogEventsFilter::setPromote(bool promote) {
    if(promote) m_flags = (m_flags | (1<<7));
    else m_flags = (m_flags & ~(1<<7));
}

bool ChannelAdminLogEventsFilter::promote() const {
    return (m_flags & 1<<7);
}

void ChannelAdminLogEventsFilter::setSettings(bool settings) {
    if(settings) m_flags = (m_flags | (1<<10));
    else m_flags = (m_flags & ~(1<<10));
}

bool ChannelAdminLogEventsFilter::settings() const {
    return (m_flags & 1<<10);
}

void ChannelAdminLogEventsFilter::setUnban(bool unban) {
    if(unban) m_flags = (m_flags | (1<<4));
    else m_flags = (m_flags & ~(1<<4));
}

bool ChannelAdminLogEventsFilter::unban() const {
    return (m_flags & 1<<4);
}

void ChannelAdminLogEventsFilter::setUnkick(bool unkick) {
    if(unkick) m_flags = (m_flags | (1<<6));
    else m_flags = (m_flags & ~(1<<6));
}

bool ChannelAdminLogEventsFilter::unkick() const {
    return (m_flags & 1<<6);
}

bool ChannelAdminLogEventsFilter::operator ==(const ChannelAdminLogEventsFilter &b) const {
    return m_classType == b.m_classType &&
           m_flags == b.m_flags;
}

ChannelAdminLogEventsFilter &ChannelAdminLogEventsFilter::operator =(const ChannelAdminLogEventsFilter &b) {
    m_classType = b.m_classType;
    m_flags = b.m_flags;
    setNull(b.isNull());
    return *this;
}

void ChannelAdminLogEventsFilter::setClassType(ChannelAdminLogEventsFilter::ChannelAdminLogEventsFilterClassType classType) {
    m_classType = classType;
}

ChannelAdminLogEventsFilter::ChannelAdminLogEventsFilterClassType ChannelAdminLogEventsFilter::classType() const {
    return m_classType;
}

bool ChannelAdminLogEventsFilter::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeChannelAdminLogEventsFilter: {
        m_flags = in->fetchInt();
        m_classType = static_cast<ChannelAdminLogEventsFilterClassType>(x);
        return true;
    }
        break;

    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool ChannelAdminLogEventsFilter::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeChannelAdminLogEventsFilter: {
        out->appendInt(m_flags);
        return true;
    }
        break;

    default:
        return false;
    }
}

QMap<QString, QVariant> ChannelAdminLogEventsFilter::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeChannelAdminLogEventsFilter: {
        result["classType"] = "ChannelAdminLogEventsFilter::typeChannelAdminLogEventsFilter";
        if( join() ) result["join"] = QString::number(join());
        if( leave() ) result["leave"] = QString::number(leave());
        if( invite() ) result["invite"] = QString::number(invite());
        if( ban() ) result["ban"] = QString::number(ban());
        if( unban() ) result["unban"] = QString::number(unban());
        if( kick() ) result["kick"] = QString::number(kick());
        if( unkick() ) result["unkick"] = QString::number(unkick());
        if( promote() ) result["promote"] = QString::number(promote());
        if( demote() ) result["demote"] = QString::number(demote());
        if( info() ) result["info"] = QString::number(info());
        if( settings() ) result["settings"] = QString::number(settings());
        if( pinned() ) result["pinned"] = QString::number(pinned());
        if( edit() ) result["edit"] = QString::number(edit());
        if( deleteValue() ) result["deleteValue"] = QString::number(deleteValue());
        return result;
    }
        break;

    default:
        return result;
    }
}

ChannelAdminLogEventsFilter ChannelAdminLogEventsFilter::fromMap(const QMap<QString, QVariant> &map) {
    ChannelAdminLogEventsFilter result;
    if(map.value("classType").toString() == "ChannelAdminLogEventsFilter::typeChannelAdminLogEventsFilter") {
        result.setClassType(typeChannelAdminLogEventsFilter);
        QVariant _join_var = map.value("join");
        if( !_join_var.isNull() ) {
            _join_var.convert( QVariant::nameToType("bool") );
            result.setJoin( _join_var.value<bool>() );
        }

        QVariant _leave_var = map.value("leave");
        if( !_leave_var.isNull() ) {
            _leave_var.convert( QVariant::nameToType("bool") );
            result.setLeave( _leave_var.value<bool>() );
        }

        QVariant _invite_var = map.value("invite");
        if( !_invite_var.isNull() ) {
            _invite_var.convert( QVariant::nameToType("bool") );
            result.setInvite( _invite_var.value<bool>() );
        }

        QVariant _ban_var = map.value("ban");
        if( !_ban_var.isNull() ) {
            _ban_var.convert( QVariant::nameToType("bool") );
            result.setBan( _ban_var.value<bool>() );
        }

        QVariant _unban_var = map.value("unban");
        if( !_unban_var.isNull() ) {
            _unban_var.convert( QVariant::nameToType("bool") );
            result.setUnban( _unban_var.value<bool>() );
        }

        QVariant _kick_var = map.value("kick");
        if( !_kick_var.isNull() ) {
            _kick_var.convert( QVariant::nameToType("bool") );
            result.setKick( _kick_var.value<bool>() );
        }

        QVariant _unkick_var = map.value("unkick");
        if( !_unkick_var.isNull() ) {
            _unkick_var.convert( QVariant::nameToType("bool") );
            result.setUnkick( _unkick_var.value<bool>() );
        }

        QVariant _promote_var = map.value("promote");
        if( !_promote_var.isNull() ) {
            _promote_var.convert( QVariant::nameToType("bool") );
            result.setPromote( _promote_var.value<bool>() );
        }

        QVariant _demote_var = map.value("demote");
        if( !_demote_var.isNull() ) {
            _demote_var.convert( QVariant::nameToType("bool") );
            result.setDemote( _demote_var.value<bool>() );
        }

        QVariant _info_var = map.value("info");
        if( !_info_var.isNull() ) {
            _info_var.convert( QVariant::nameToType("bool") );
            result.setInfo( _info_var.value<bool>() );
        }

        QVariant _settings_var = map.value("settings");
        if( !_settings_var.isNull() ) {
            _settings_var.convert( QVariant::nameToType("bool") );
            result.setSettings( _settings_var.value<bool>() );
        }

        QVariant _pinned_var = map.value("pinned");
        if( !_pinned_var.isNull() ) {
            _pinned_var.convert( QVariant::nameToType("bool") );
            result.setPinned( _pinned_var.value<bool>() );
        }

        QVariant _edit_var = map.value("edit");
        if( !_edit_var.isNull() ) {
            _edit_var.convert( QVariant::nameToType("bool") );
            result.setEdit( _edit_var.value<bool>() );
        }

        QVariant _deleteValue_var = map.value("deleteValue");
        if( !_deleteValue_var.isNull() ) {
            _deleteValue_var.convert( QVariant::nameToType("bool") );
            result.setDeleteValue( _deleteValue_var.value<bool>() );
        }

        return result;
    }
    return result;
}

ChannelAdminLogEventsFilter ChannelAdminLogEventsFilter::fromJson(const QString &json) {
    return ChannelAdminLogEventsFilter::fromMap(QJsonDocument::fromJson(json.toUtf8()).toVariant().toMap());
}

QByteArray ChannelAdminLogEventsFilter::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const ChannelAdminLogEventsFilter &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case ChannelAdminLogEventsFilter::typeChannelAdminLogEventsFilter:
        stream << item.flags();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, ChannelAdminLogEventsFilter &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<ChannelAdminLogEventsFilter::ChannelAdminLogEventsFilterClassType>(type));
    switch(type) {
    case ChannelAdminLogEventsFilter::typeChannelAdminLogEventsFilter: {
        qint32 m_flags;
        stream >> m_flags;
        item.setFlags(m_flags);
    }
        break;
    }
    return stream;
}

/*QDebug operator<<(QDebug debug,  const ChannelAdminLogEventsFilter &item) {
    QDebugStateSaver saver(debug);
    Q_UNUSED(saver)
    debug.nospace() << "Telegram.ChannelAdminLogEventsFilter(";
    switch(item.classType()) {
    case ChannelAdminLogEventsFilter::typeChannelAdminLogEventsFilter:
        debug.nospace() << "classType: typeChannelAdminLogEventsFilter";
        debug.nospace() << ", flags: " << item.flags();
        break;
    }
    debug.nospace() << ")";
    return debug;
}
*/
