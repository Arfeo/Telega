// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "channelbannedrights.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

ChannelBannedRights::ChannelBannedRights(ChannelBannedRightsClassType classType, InboundPkt *in) :
    m_flags(0),
    m_untilDate(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

ChannelBannedRights::ChannelBannedRights(InboundPkt *in) :
    m_flags(0),
    m_untilDate(0),
    m_classType(typeChannelBannedRights)
{
    fetch(in);
}

ChannelBannedRights::ChannelBannedRights(const ChannelBannedRights &another) :
    TelegramTypeObject(),
    m_flags(0),
    m_untilDate(0),
    m_classType(typeChannelBannedRights)
{
    operator=(another);
}

ChannelBannedRights::ChannelBannedRights(const Null &null) :
    TelegramTypeObject(null),
    m_flags(0),
    m_untilDate(0),
    m_classType(typeChannelBannedRights)
{
}

ChannelBannedRights::~ChannelBannedRights() {

}

void ChannelBannedRights::setEmbedLinks(bool embedLinks) {
    if(embedLinks) m_flags = (m_flags | (1<<7));
    else m_flags = (m_flags & ~(1<<7));
}

bool ChannelBannedRights::embedLinks() const {
    return (m_flags & 1<<7);
}

void ChannelBannedRights::setFlags(qint32 flags) {
    m_flags = flags;
}

qint32 ChannelBannedRights::flags() const {
    return m_flags;
}

void ChannelBannedRights::setSendGames(bool sendGames) {
    if(sendGames) m_flags = (m_flags | (1<<5));
    else m_flags = (m_flags & ~(1<<5));
}

bool ChannelBannedRights::sendGames() const {
    return (m_flags & 1<<5);
}

void ChannelBannedRights::setSendGifs(bool sendGifs) {
    if(sendGifs) m_flags = (m_flags | (1<<4));
    else m_flags = (m_flags & ~(1<<4));
}

bool ChannelBannedRights::sendGifs() const {
    return (m_flags & 1<<4);
}

void ChannelBannedRights::setSendInline(bool sendInline) {
    if(sendInline) m_flags = (m_flags | (1<<6));
    else m_flags = (m_flags & ~(1<<6));
}

bool ChannelBannedRights::sendInline() const {
    return (m_flags & 1<<6);
}

void ChannelBannedRights::setSendMedia(bool sendMedia) {
    if(sendMedia) m_flags = (m_flags | (1<<2));
    else m_flags = (m_flags & ~(1<<2));
}

bool ChannelBannedRights::sendMedia() const {
    return (m_flags & 1<<2);
}

void ChannelBannedRights::setSendMessages(bool sendMessages) {
    if(sendMessages) m_flags = (m_flags | (1<<1));
    else m_flags = (m_flags & ~(1<<1));
}

bool ChannelBannedRights::sendMessages() const {
    return (m_flags & 1<<1);
}

void ChannelBannedRights::setSendStickers(bool sendStickers) {
    if(sendStickers) m_flags = (m_flags | (1<<3));
    else m_flags = (m_flags & ~(1<<3));
}

bool ChannelBannedRights::sendStickers() const {
    return (m_flags & 1<<3);
}

void ChannelBannedRights::setUntilDate(qint32 untilDate) {
    m_untilDate = untilDate;
}

qint32 ChannelBannedRights::untilDate() const {
    return m_untilDate;
}

void ChannelBannedRights::setViewMessages(bool viewMessages) {
    if(viewMessages) m_flags = (m_flags | (1<<0));
    else m_flags = (m_flags & ~(1<<0));
}

bool ChannelBannedRights::viewMessages() const {
    return (m_flags & 1<<0);
}

bool ChannelBannedRights::operator ==(const ChannelBannedRights &b) const {
    return m_classType == b.m_classType &&
           m_flags == b.m_flags &&
           m_untilDate == b.m_untilDate;
}

ChannelBannedRights &ChannelBannedRights::operator =(const ChannelBannedRights &b) {
    m_classType = b.m_classType;
    m_flags = b.m_flags;
    m_untilDate = b.m_untilDate;
    setNull(b.isNull());
    return *this;
}

void ChannelBannedRights::setClassType(ChannelBannedRights::ChannelBannedRightsClassType classType) {
    m_classType = classType;
}

ChannelBannedRights::ChannelBannedRightsClassType ChannelBannedRights::classType() const {
    return m_classType;
}

bool ChannelBannedRights::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeChannelBannedRights: {
        m_flags = in->fetchInt();
        m_untilDate = in->fetchInt();
        m_classType = static_cast<ChannelBannedRightsClassType>(x);
        return true;
    }
        break;

    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool ChannelBannedRights::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeChannelBannedRights: {
        out->appendInt(m_flags);
        out->appendInt(m_untilDate);
        return true;
    }
        break;

    default:
        return false;
    }
}

QMap<QString, QVariant> ChannelBannedRights::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeChannelBannedRights: {
        result["classType"] = "ChannelBannedRights::typeChannelBannedRights";
        if( viewMessages() ) result["viewMessages"] = QString::number(viewMessages());
        if( sendMessages() ) result["sendMessages"] = QString::number(sendMessages());
        if( sendMedia() ) result["sendMedia"] = QString::number(sendMedia());
        if( sendStickers() ) result["sendStickers"] = QString::number(sendStickers());
        if( sendGifs() ) result["sendGifs"] = QString::number(sendGifs());
        if( sendGames() ) result["sendGames"] = QString::number(sendGames());
        if( sendInline() ) result["sendInline"] = QString::number(sendInline());
        if( embedLinks() ) result["embedLinks"] = QString::number(embedLinks());
        if( untilDate() ) result["untilDate"] = QString::number(untilDate());
        return result;
    }
        break;

    default:
        return result;
    }
}

ChannelBannedRights ChannelBannedRights::fromMap(const QMap<QString, QVariant> &map) {
    ChannelBannedRights result;
    if(map.value("classType").toString() == "ChannelBannedRights::typeChannelBannedRights") {
        result.setClassType(typeChannelBannedRights);
        QVariant _viewMessages_var = map.value("viewMessages");
        if( !_viewMessages_var.isNull() ) {
            _viewMessages_var.convert( QVariant::nameToType("bool") );
            result.setViewMessages( _viewMessages_var.value<bool>() );
        }

        QVariant _sendMessages_var = map.value("sendMessages");
        if( !_sendMessages_var.isNull() ) {
            _sendMessages_var.convert( QVariant::nameToType("bool") );
            result.setSendMessages( _sendMessages_var.value<bool>() );
        }

        QVariant _sendMedia_var = map.value("sendMedia");
        if( !_sendMedia_var.isNull() ) {
            _sendMedia_var.convert( QVariant::nameToType("bool") );
            result.setSendMedia( _sendMedia_var.value<bool>() );
        }

        QVariant _sendStickers_var = map.value("sendStickers");
        if( !_sendStickers_var.isNull() ) {
            _sendStickers_var.convert( QVariant::nameToType("bool") );
            result.setSendStickers( _sendStickers_var.value<bool>() );
        }

        QVariant _sendGifs_var = map.value("sendGifs");
        if( !_sendGifs_var.isNull() ) {
            _sendGifs_var.convert( QVariant::nameToType("bool") );
            result.setSendGifs( _sendGifs_var.value<bool>() );
        }

        QVariant _sendGames_var = map.value("sendGames");
        if( !_sendGames_var.isNull() ) {
            _sendGames_var.convert( QVariant::nameToType("bool") );
            result.setSendGames( _sendGames_var.value<bool>() );
        }

        QVariant _sendInline_var = map.value("sendInline");
        if( !_sendInline_var.isNull() ) {
            _sendInline_var.convert( QVariant::nameToType("bool") );
            result.setSendInline( _sendInline_var.value<bool>() );
        }

        QVariant _embedLinks_var = map.value("embedLinks");
        if( !_embedLinks_var.isNull() ) {
            _embedLinks_var.convert( QVariant::nameToType("bool") );
            result.setEmbedLinks( _embedLinks_var.value<bool>() );
        }

        QVariant _untilDate_var = map.value("untilDate");
        if( !_untilDate_var.isNull() ) {
            _untilDate_var.convert( QVariant::nameToType("qint32") );
            result.setUntilDate( _untilDate_var.value<qint32>() );
        }

        return result;
    }
    return result;
}

ChannelBannedRights ChannelBannedRights::fromJson(const QString &json) {
    return ChannelBannedRights::fromMap(QJsonDocument::fromJson(json.toUtf8()).toVariant().toMap());
}

QByteArray ChannelBannedRights::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const ChannelBannedRights &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case ChannelBannedRights::typeChannelBannedRights:
        stream << item.flags();
        stream << item.untilDate();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, ChannelBannedRights &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<ChannelBannedRights::ChannelBannedRightsClassType>(type));
    switch(type) {
    case ChannelBannedRights::typeChannelBannedRights: {
        qint32 m_flags;
        stream >> m_flags;
        item.setFlags(m_flags);
        qint32 m_until_date;
        stream >> m_until_date;
        item.setUntilDate(m_until_date);
    }
        break;
    }
    return stream;
}

/*QDebug operator<<(QDebug debug,  const ChannelBannedRights &item) {
    QDebugStateSaver saver(debug);
    Q_UNUSED(saver)
    debug.nospace() << "Telegram.ChannelBannedRights(";
    switch(item.classType()) {
    case ChannelBannedRights::typeChannelBannedRights:
        debug.nospace() << "classType: typeChannelBannedRights";
        debug.nospace() << ", flags: " << item.flags();
        debug.nospace() << ", untilDate: " << item.untilDate();
        break;
    }
    debug.nospace() << ")";
    return debug;
}
*/
