// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "channelparticipant.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

ChannelParticipant::ChannelParticipant(ChannelParticipantClassType classType, InboundPkt *in) :
    m_date(0),
    m_flags(0),
    m_inviterId(0),
    m_kickedBy(0),
    m_promotedBy(0),
    m_userId(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

ChannelParticipant::ChannelParticipant(InboundPkt *in) :
    m_date(0),
    m_flags(0),
    m_inviterId(0),
    m_kickedBy(0),
    m_promotedBy(0),
    m_userId(0),
    m_classType(typeChannelParticipant)
{
    fetch(in);
}

ChannelParticipant::ChannelParticipant(const ChannelParticipant &another) :
    TelegramTypeObject(),
    m_date(0),
    m_flags(0),
    m_inviterId(0),
    m_kickedBy(0),
    m_promotedBy(0),
    m_userId(0),
    m_classType(typeChannelParticipant)
{
    operator=(another);
}

ChannelParticipant::ChannelParticipant(const Null &null) :
    TelegramTypeObject(null),
    m_date(0),
    m_flags(0),
    m_inviterId(0),
    m_kickedBy(0),
    m_promotedBy(0),
    m_userId(0),
    m_classType(typeChannelParticipant)
{
}

ChannelParticipant::~ChannelParticipant() {
    
}

void ChannelParticipant::setAdminRights(const ChannelAdminRights &adminRights) {
    m_adminRights = adminRights;
}

ChannelAdminRights ChannelParticipant::adminRights() const {
    return m_adminRights;
}

void ChannelParticipant::setBannedRights(const ChannelBannedRights &bannedRights) {
    m_bannedRights = bannedRights;
}

ChannelBannedRights ChannelParticipant::bannedRights() const {
    return m_bannedRights;
}

void ChannelParticipant::setCanEdit(bool canEdit) {
    if(canEdit) m_flags = (m_flags | (1<<0));
    else m_flags = (m_flags & ~(1<<0));
}

bool ChannelParticipant::canEdit() const {
    return (m_flags & 1<<0);
}

void ChannelParticipant::setDate(qint32 date) {
    m_date = date;
}

qint32 ChannelParticipant::date() const {
    return m_date;
}

void ChannelParticipant::setFlags(qint32 flags) {
    m_flags = flags;
}

qint32 ChannelParticipant::flags() const {
    return m_flags;
}

void ChannelParticipant::setInviterId(qint32 inviterId) {
    m_inviterId = inviterId;
}

qint32 ChannelParticipant::inviterId() const {
    return m_inviterId;
}

void ChannelParticipant::setKickedBy(qint32 kickedBy) {
    m_kickedBy = kickedBy;
}

qint32 ChannelParticipant::kickedBy() const {
    return m_kickedBy;
}

void ChannelParticipant::setLeft(bool left) {
    if(left) m_flags = (m_flags | (1<<0));
    else m_flags = (m_flags & ~(1<<0));
}

bool ChannelParticipant::left() const {
    return (m_flags & 1<<0);
}

void ChannelParticipant::setPromotedBy(qint32 promotedBy) {
    m_promotedBy = promotedBy;
}

qint32 ChannelParticipant::promotedBy() const {
    return m_promotedBy;
}

void ChannelParticipant::setUserId(qint32 userId) {
    m_userId = userId;
}

qint32 ChannelParticipant::userId() const {
    return m_userId;
}

bool ChannelParticipant::operator ==(const ChannelParticipant &b) const {
    return m_classType == b.m_classType &&
           m_adminRights == b.m_adminRights &&
           m_bannedRights == b.m_bannedRights &&
           m_date == b.m_date &&
           m_flags == b.m_flags &&
           m_inviterId == b.m_inviterId &&
           m_kickedBy == b.m_kickedBy &&
           m_promotedBy == b.m_promotedBy &&
           m_userId == b.m_userId;
}

ChannelParticipant &ChannelParticipant::operator =(const ChannelParticipant &b) {
    m_classType = b.m_classType;
    m_adminRights = b.m_adminRights;
    m_bannedRights = b.m_bannedRights;
    m_date = b.m_date;
    m_flags = b.m_flags;
    m_inviterId = b.m_inviterId;
    m_kickedBy = b.m_kickedBy;
    m_promotedBy = b.m_promotedBy;
    m_userId = b.m_userId;
    setNull(b.isNull());
    return *this;
}

void ChannelParticipant::setClassType(ChannelParticipant::ChannelParticipantClassType classType) {
    m_classType = classType;
}

ChannelParticipant::ChannelParticipantClassType ChannelParticipant::classType() const {
    return m_classType;
}

bool ChannelParticipant::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeChannelParticipant: {
        m_userId = in->fetchInt();
        m_date = in->fetchInt();
        m_classType = static_cast<ChannelParticipantClassType>(x);
        return true;
    }
        break;
    
    case typeChannelParticipantSelf: {
        m_userId = in->fetchInt();
        m_inviterId = in->fetchInt();
        m_date = in->fetchInt();
        m_classType = static_cast<ChannelParticipantClassType>(x);
        return true;
    }
        break;
    
    case typeChannelParticipantCreator: {
        m_userId = in->fetchInt();
        m_classType = static_cast<ChannelParticipantClassType>(x);
        return true;
    }
        break;
    
    case typeChannelParticipantAdmin: {
        m_flags = in->fetchInt();
        m_userId = in->fetchInt();
        m_inviterId = in->fetchInt();
        m_promotedBy = in->fetchInt();
        m_date = in->fetchInt();
        m_adminRights.fetch(in);
        m_classType = static_cast<ChannelParticipantClassType>(x);
        return true;
    }
        break;
    
    case typeChannelParticipantBanned: {
        m_flags = in->fetchInt();
        m_userId = in->fetchInt();
        m_kickedBy = in->fetchInt();
        m_date = in->fetchInt();
        m_bannedRights.fetch(in);
        m_classType = static_cast<ChannelParticipantClassType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool ChannelParticipant::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeChannelParticipant: {
        out->appendInt(m_userId);
        out->appendInt(m_date);
        return true;
    }
        break;
    
    case typeChannelParticipantSelf: {
        out->appendInt(m_userId);
        out->appendInt(m_inviterId);
        out->appendInt(m_date);
        return true;
    }
        break;
    
    case typeChannelParticipantCreator: {
        out->appendInt(m_userId);
        return true;
    }
        break;
    
    case typeChannelParticipantAdmin: {
        out->appendInt(m_flags);
        out->appendInt(m_userId);
        out->appendInt(m_inviterId);
        out->appendInt(m_promotedBy);
        out->appendInt(m_date);
        m_adminRights.push(out);
        return true;
    }
        break;
    
    case typeChannelParticipantBanned: {
        out->appendInt(m_flags);
        out->appendInt(m_userId);
        out->appendInt(m_kickedBy);
        out->appendInt(m_date);
        m_bannedRights.push(out);
        return true;
    }
        break;
    
    default:
        return false;
    }
}

QMap<QString, QVariant> ChannelParticipant::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeChannelParticipant: {
        result["classType"] = "ChannelParticipant::typeChannelParticipant";
        if( userId() ) result["userId"] = QString::number(userId());
        if( date() ) result["date"] = QString::number(date());
        return result;
    }
        break;
    
    case typeChannelParticipantSelf: {
        result["classType"] = "ChannelParticipant::typeChannelParticipantSelf";
        if( userId() ) result["userId"] = QString::number(userId());
        if( inviterId() ) result["inviterId"] = QString::number(inviterId());
        if( date() ) result["date"] = QString::number(date());
        return result;
    }
        break;
    
    case typeChannelParticipantCreator: {
        result["classType"] = "ChannelParticipant::typeChannelParticipantCreator";
        if( userId() ) result["userId"] = QString::number(userId());
        return result;
    }
        break;
    
    case typeChannelParticipantAdmin: {
        result["classType"] = "ChannelParticipant::typeChannelParticipantAdmin";
        if( canEdit() ) result["canEdit"] = QString::number(canEdit());
        if( userId() ) result["userId"] = QString::number(userId());
        if( inviterId() ) result["inviterId"] = QString::number(inviterId());
        if( promotedBy() ) result["promotedBy"] = QString::number(promotedBy());
        if( date() ) result["date"] = QString::number(date());
        if( !m_adminRights.isNull() ) result["adminRights"] = m_adminRights.toMap();
        return result;
    }
        break;
    
    case typeChannelParticipantBanned: {
        result["classType"] = "ChannelParticipant::typeChannelParticipantBanned";
        if( left() ) result["left"] = QString::number(left());
        if( userId() ) result["userId"] = QString::number(userId());
        if( kickedBy() ) result["kickedBy"] = QString::number(kickedBy());
        if( date() ) result["date"] = QString::number(date());
        if( !m_bannedRights.isNull() ) result["bannedRights"] = m_bannedRights.toMap();
        return result;
    }
        break;
    
    default:
        return result;
    }
}

ChannelParticipant ChannelParticipant::fromMap(const QMap<QString, QVariant> &map) {
    ChannelParticipant result;
    if(map.value("classType").toString() == "ChannelParticipant::typeChannelParticipant") {
        result.setClassType(typeChannelParticipant);
        QVariant _userId_var = map.value("userId");
        if( !_userId_var.isNull() ) {
            _userId_var.convert( QVariant::nameToType("qint32") );
            result.setUserId( _userId_var.value<qint32>() );
        }
        
        QVariant _date_var = map.value("date");
        if( !_date_var.isNull() ) {
            _date_var.convert( QVariant::nameToType("qint32") );
            result.setDate( _date_var.value<qint32>() );
        }
        
        return result;
    }
    if(map.value("classType").toString() == "ChannelParticipant::typeChannelParticipantSelf") {
        result.setClassType(typeChannelParticipantSelf);
        QVariant _userId_var = map.value("userId");
        if( !_userId_var.isNull() ) {
            _userId_var.convert( QVariant::nameToType("qint32") );
            result.setUserId( _userId_var.value<qint32>() );
        }
        
        QVariant _inviterId_var = map.value("inviterId");
        if( !_inviterId_var.isNull() ) {
            _inviterId_var.convert( QVariant::nameToType("qint32") );
            result.setInviterId( _inviterId_var.value<qint32>() );
        }
        
        QVariant _date_var = map.value("date");
        if( !_date_var.isNull() ) {
            _date_var.convert( QVariant::nameToType("qint32") );
            result.setDate( _date_var.value<qint32>() );
        }
        
        return result;
    }
    if(map.value("classType").toString() == "ChannelParticipant::typeChannelParticipantCreator") {
        result.setClassType(typeChannelParticipantCreator);
        QVariant _userId_var = map.value("userId");
        if( !_userId_var.isNull() ) {
            _userId_var.convert( QVariant::nameToType("qint32") );
            result.setUserId( _userId_var.value<qint32>() );
        }
        
        return result;
    }
    if(map.value("classType").toString() == "ChannelParticipant::typeChannelParticipantAdmin") {
        result.setClassType(typeChannelParticipantAdmin);
        QVariant _canEdit_var = map.value("canEdit");
        if( !_canEdit_var.isNull() ) {
            _canEdit_var.convert( QVariant::nameToType("bool") );
            result.setCanEdit( _canEdit_var.value<bool>() );
        }
        
        QVariant _userId_var = map.value("userId");
        if( !_userId_var.isNull() ) {
            _userId_var.convert( QVariant::nameToType("qint32") );
            result.setUserId( _userId_var.value<qint32>() );
        }
        
        QVariant _inviterId_var = map.value("inviterId");
        if( !_inviterId_var.isNull() ) {
            _inviterId_var.convert( QVariant::nameToType("qint32") );
            result.setInviterId( _inviterId_var.value<qint32>() );
        }
        
        QVariant _promotedBy_var = map.value("promotedBy");
        if( !_promotedBy_var.isNull() ) {
            _promotedBy_var.convert( QVariant::nameToType("qint32") );
            result.setPromotedBy( _promotedBy_var.value<qint32>() );
        }
        
        QVariant _date_var = map.value("date");
        if( !_date_var.isNull() ) {
            _date_var.convert( QVariant::nameToType("qint32") );
            result.setDate( _date_var.value<qint32>() );
        }
        
        QVariant _adminRights_var = map.value("adminRights");
        if( !_adminRights_var.isNull() )
            result.setAdminRights( ChannelAdminRights::fromMap(_adminRights_var.toMap()) );
        
        return result;
    }
    if(map.value("classType").toString() == "ChannelParticipant::typeChannelParticipantBanned") {
        result.setClassType(typeChannelParticipantBanned);
        QVariant _left_var = map.value("left");
        if( !_left_var.isNull() ) {
            _left_var.convert( QVariant::nameToType("bool") );
            result.setLeft( _left_var.value<bool>() );
        }
        
        QVariant _userId_var = map.value("userId");
        if( !_userId_var.isNull() ) {
            _userId_var.convert( QVariant::nameToType("qint32") );
            result.setUserId( _userId_var.value<qint32>() );
        }
        
        QVariant _kickedBy_var = map.value("kickedBy");
        if( !_kickedBy_var.isNull() ) {
            _kickedBy_var.convert( QVariant::nameToType("qint32") );
            result.setKickedBy( _kickedBy_var.value<qint32>() );
        }
        
        QVariant _date_var = map.value("date");
        if( !_date_var.isNull() ) {
            _date_var.convert( QVariant::nameToType("qint32") );
            result.setDate( _date_var.value<qint32>() );
        }
        
        QVariant _bannedRights_var = map.value("bannedRights");
        if( !_bannedRights_var.isNull() )
            result.setBannedRights( ChannelBannedRights::fromMap(_bannedRights_var.toMap()) );
        
        return result;
    }
    return result;
}

ChannelParticipant ChannelParticipant::fromJson(const QString &json) {
    return ChannelParticipant::fromMap(QJsonDocument::fromJson(json.toUtf8()).toVariant().toMap());
}

QByteArray ChannelParticipant::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const ChannelParticipant &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case ChannelParticipant::typeChannelParticipant:
        stream << item.userId();
        stream << item.date();
        break;
    case ChannelParticipant::typeChannelParticipantSelf:
        stream << item.userId();
        stream << item.inviterId();
        stream << item.date();
        break;
    case ChannelParticipant::typeChannelParticipantCreator:
        stream << item.userId();
        break;
    case ChannelParticipant::typeChannelParticipantAdmin:
        stream << item.flags();
        stream << item.userId();
        stream << item.inviterId();
        stream << item.promotedBy();
        stream << item.date();
        stream << item.adminRights();
        break;
    case ChannelParticipant::typeChannelParticipantBanned:
        stream << item.flags();
        stream << item.userId();
        stream << item.kickedBy();
        stream << item.date();
        stream << item.bannedRights();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, ChannelParticipant &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<ChannelParticipant::ChannelParticipantClassType>(type));
    switch(type) {
    case ChannelParticipant::typeChannelParticipant: {
        qint32 m_user_id;
        stream >> m_user_id;
        item.setUserId(m_user_id);
        qint32 m_date;
        stream >> m_date;
        item.setDate(m_date);
    }
        break;
    case ChannelParticipant::typeChannelParticipantSelf: {
        qint32 m_user_id;
        stream >> m_user_id;
        item.setUserId(m_user_id);
        qint32 m_inviter_id;
        stream >> m_inviter_id;
        item.setInviterId(m_inviter_id);
        qint32 m_date;
        stream >> m_date;
        item.setDate(m_date);
    }
        break;
    case ChannelParticipant::typeChannelParticipantCreator: {
        qint32 m_user_id;
        stream >> m_user_id;
        item.setUserId(m_user_id);
    }
        break;
    case ChannelParticipant::typeChannelParticipantAdmin: {
        qint32 m_flags;
        stream >> m_flags;
        item.setFlags(m_flags);
        qint32 m_user_id;
        stream >> m_user_id;
        item.setUserId(m_user_id);
        qint32 m_inviter_id;
        stream >> m_inviter_id;
        item.setInviterId(m_inviter_id);
        qint32 m_promoted_by;
        stream >> m_promoted_by;
        item.setPromotedBy(m_promoted_by);
        qint32 m_date;
        stream >> m_date;
        item.setDate(m_date);
        ChannelAdminRights m_admin_rights;
        stream >> m_admin_rights;
        item.setAdminRights(m_admin_rights);
    }
        break;
    case ChannelParticipant::typeChannelParticipantBanned: {
        qint32 m_flags;
        stream >> m_flags;
        item.setFlags(m_flags);
        qint32 m_user_id;
        stream >> m_user_id;
        item.setUserId(m_user_id);
        qint32 m_kicked_by;
        stream >> m_kicked_by;
        item.setKickedBy(m_kicked_by);
        qint32 m_date;
        stream >> m_date;
        item.setDate(m_date);
        ChannelBannedRights m_banned_rights;
        stream >> m_banned_rights;
        item.setBannedRights(m_banned_rights);
    }
        break;
    }
    return stream;
}

QDebug operator<<(QDebug debug,  const ChannelParticipant &item) {
    QDebugStateSaver saver(debug);
    Q_UNUSED(saver)
    debug.nospace() << "Telegram.ChannelParticipant(";
    switch(item.classType()) {
    case ChannelParticipant::typeChannelParticipant:
        debug.nospace() << "classType: typeChannelParticipant";
        debug.nospace() << ", userId: " << item.userId();
        debug.nospace() << ", date: " << item.date();
        break;
    case ChannelParticipant::typeChannelParticipantSelf:
        debug.nospace() << "classType: typeChannelParticipantSelf";
        debug.nospace() << ", userId: " << item.userId();
        debug.nospace() << ", inviterId: " << item.inviterId();
        debug.nospace() << ", date: " << item.date();
        break;
    case ChannelParticipant::typeChannelParticipantCreator:
        debug.nospace() << "classType: typeChannelParticipantCreator";
        debug.nospace() << ", userId: " << item.userId();
        break;
    case ChannelParticipant::typeChannelParticipantAdmin:
        debug.nospace() << "classType: typeChannelParticipantAdmin";
        debug.nospace() << ", flags: " << item.flags();
        debug.nospace() << ", userId: " << item.userId();
        debug.nospace() << ", inviterId: " << item.inviterId();
        debug.nospace() << ", promotedBy: " << item.promotedBy();
        debug.nospace() << ", date: " << item.date();
        debug.nospace() << ", adminRights: " << item.adminRights();
        break;
    case ChannelParticipant::typeChannelParticipantBanned:
        debug.nospace() << "classType: typeChannelParticipantBanned";
        debug.nospace() << ", flags: " << item.flags();
        debug.nospace() << ", userId: " << item.userId();
        debug.nospace() << ", kickedBy: " << item.kickedBy();
        debug.nospace() << ", date: " << item.date();
        debug.nospace() << ", bannedRights: " << item.bannedRights();
        break;
    }
    debug.nospace() << ")";
    return debug;
}

