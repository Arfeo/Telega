// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "chat.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

Chat::Chat(ChatClassType classType, InboundPkt *in) :
    m_accessHash(0),
    m_date(0),
    m_flags(0),
    m_id(0),
    m_participantsCount(0),
    m_untilDate(0),
    m_version(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

Chat::Chat(InboundPkt *in) :
    m_accessHash(0),
    m_date(0),
    m_flags(0),
    m_id(0),
    m_participantsCount(0),
    m_untilDate(0),
    m_version(0),
    m_classType(typeChatEmpty)
{
    fetch(in);
}

Chat::Chat(const Chat &another) :
    TelegramTypeObject(),
    m_accessHash(0),
    m_date(0),
    m_flags(0),
    m_id(0),
    m_participantsCount(0),
    m_untilDate(0),
    m_version(0),
    m_classType(typeChatEmpty)
{
    operator=(another);
}

Chat::Chat(const Null &null) :
    TelegramTypeObject(null),
    m_accessHash(0),
    m_date(0),
    m_flags(0),
    m_id(0),
    m_participantsCount(0),
    m_untilDate(0),
    m_version(0),
    m_classType(typeChatEmpty)
{
}

Chat::~Chat() {

}

void Chat::setAccessHash(qint64 accessHash) {
    if(accessHash) m_flags = (m_flags | (1<<13));
    else m_flags = (m_flags & ~(1<<13));
    m_accessHash = accessHash;
}

qint64 Chat::accessHash() const {
    return m_accessHash;
}

void Chat::setAdmin(bool admin) {
    if(admin) m_flags = (m_flags | (1<<4));
    else m_flags = (m_flags & ~(1<<4));
}

bool Chat::admin() const {
    return (m_flags & 1<<4);
}

void Chat::setAdminRights(const ChannelAdminRights &adminRights) {
    if(!adminRights.isNull()) m_flags = (m_flags | (1<<14));
    else m_flags = (m_flags & ~(1<<14));
    m_adminRights = adminRights;
}

ChannelAdminRights Chat::adminRights() const {
    return m_adminRights;
}

void Chat::setAdminsEnabled(bool adminsEnabled) {
    if(adminsEnabled) m_flags = (m_flags | (1<<3));
    else m_flags = (m_flags & ~(1<<3));
}

bool Chat::adminsEnabled() const {
    return (m_flags & 1<<3);
}

void Chat::setBannedRights(const ChannelBannedRights &bannedRights) {
    if(!bannedRights.isNull()) m_flags = (m_flags | (1<<15));
    else m_flags = (m_flags & ~(1<<15));
    m_bannedRights = bannedRights;
}

ChannelBannedRights Chat::bannedRights() const {
    return m_bannedRights;
}

void Chat::setBroadcast(bool broadcast) {
    if(broadcast) m_flags = (m_flags | (1<<5));
    else m_flags = (m_flags & ~(1<<5));
}

bool Chat::broadcast() const {
    return (m_flags & 1<<5);
}

void Chat::setCreator(bool creator) {
    if(creator) m_flags = (m_flags | (1<<0));
    else m_flags = (m_flags & ~(1<<0));
}

bool Chat::creator() const {
    return (m_flags & 1<<0);
}

void Chat::setDate(qint32 date) {
    m_date = date;
}

qint32 Chat::date() const {
    return m_date;
}

void Chat::setDeactivated(bool deactivated) {
    if(deactivated) m_flags = (m_flags | (1<<5));
    else m_flags = (m_flags & ~(1<<5));
}

bool Chat::deactivated() const {
    return (m_flags & 1<<5);
}

void Chat::setDemocracy(bool democracy) {
    if(democracy) m_flags = (m_flags | (1<<10));
    else m_flags = (m_flags & ~(1<<10));
}

bool Chat::democracy() const {
    return (m_flags & 1<<10);
}

void Chat::setFlags(qint32 flags) {
    m_flags = flags;
}

qint32 Chat::flags() const {
    return m_flags;
}

void Chat::setId(qint32 id) {
    m_id = id;
}

qint32 Chat::id() const {
    return m_id;
}

void Chat::setKicked(bool kicked) {
    if(kicked) m_flags = (m_flags | (1<<1));
    else m_flags = (m_flags & ~(1<<1));
}

bool Chat::kicked() const {
    return (m_flags & 1<<1);
}

void Chat::setLeft(bool left) {
    if(left) m_flags = (m_flags | (1<<2));
    else m_flags = (m_flags & ~(1<<2));
}

bool Chat::left() const {
    return (m_flags & 1<<2);
}

void Chat::setMegagroup(bool megagroup) {
    if(megagroup) m_flags = (m_flags | (1<<8));
    else m_flags = (m_flags & ~(1<<8));
}

bool Chat::megagroup() const {
    return (m_flags & 1<<8);
}

void Chat::setMigratedTo(const InputChannel &migratedTo) {
    if(!migratedTo.isNull()) m_flags = (m_flags | (1<<6));
    else m_flags = (m_flags & ~(1<<6));
    m_migratedTo = migratedTo;
}

InputChannel Chat::migratedTo() const {
    return m_migratedTo;
}

void Chat::setMin(bool min) {
    if(min) m_flags = (m_flags | (1<<12));
    else m_flags = (m_flags & ~(1<<12));
}

bool Chat::min() const {
    return (m_flags & 1<<12);
}

void Chat::setParticipantsCount(qint32 participantsCount) {
    m_participantsCount = participantsCount;
}

qint32 Chat::participantsCount() const {
    return m_participantsCount;
}

void Chat::setPhoto(const ChatPhoto &photo) {
    m_photo = photo;
}

ChatPhoto Chat::photo() const {
    return m_photo;
}

void Chat::setRestricted(bool restricted) {
    if(restricted) m_flags = (m_flags | (1<<9));
    else m_flags = (m_flags & ~(1<<9));
}

bool Chat::restricted() const {
    return (m_flags & 1<<9);
}

void Chat::setRestrictionReason(const QString &restrictionReason) {
    if(!restrictionReason.isNull()) m_flags = (m_flags | (1<<9));
    else m_flags = (m_flags & ~(1<<9));
    m_restrictionReason = restrictionReason;
}

QString Chat::restrictionReason() const {
    return m_restrictionReason;
}

void Chat::setSignatures(bool signatures) {
    if(signatures) m_flags = (m_flags | (1<<11));
    else m_flags = (m_flags & ~(1<<11));
}

bool Chat::signatures() const {
    return (m_flags & 1<<11);
}

void Chat::setTitle(const QString &title) {
    m_title = title;
}

QString Chat::title() const {
    return m_title;
}

void Chat::setUntilDate(qint32 untilDate) {
    if(untilDate) m_flags = (m_flags | (1<<16));
    else m_flags = (m_flags & ~(1<<16));
    m_untilDate = untilDate;
}

qint32 Chat::untilDate() const {
    return m_untilDate;
}

void Chat::setUsername(const QString &username) {
    if(!username.isNull()) m_flags = (m_flags | (1<<6));
    else m_flags = (m_flags & ~(1<<6));
    m_username = username;
}

QString Chat::username() const {
    return m_username;
}

void Chat::setVerified(bool verified) {
    if(verified) m_flags = (m_flags | (1<<7));
    else m_flags = (m_flags & ~(1<<7));
}

bool Chat::verified() const {
    return (m_flags & 1<<7);
}

void Chat::setVersion(qint32 version) {
    m_version = version;
}

qint32 Chat::version() const {
    return m_version;
}

bool Chat::operator ==(const Chat &b) const {
    return m_classType == b.m_classType &&
           m_accessHash == b.m_accessHash &&
           m_adminRights == b.m_adminRights &&
           m_bannedRights == b.m_bannedRights &&
           m_date == b.m_date &&
           m_flags == b.m_flags &&
           m_id == b.m_id &&
           m_migratedTo == b.m_migratedTo &&
           m_participantsCount == b.m_participantsCount &&
           m_photo == b.m_photo &&
           m_restrictionReason == b.m_restrictionReason &&
           m_title == b.m_title &&
           m_untilDate == b.m_untilDate &&
           m_username == b.m_username &&
           m_version == b.m_version;
}

Chat &Chat::operator =(const Chat &b) {
    m_classType = b.m_classType;
    m_accessHash = b.m_accessHash;
    m_adminRights = b.m_adminRights;
    m_bannedRights = b.m_bannedRights;
    m_date = b.m_date;
    m_flags = b.m_flags;
    m_id = b.m_id;
    m_migratedTo = b.m_migratedTo;
    m_participantsCount = b.m_participantsCount;
    m_photo = b.m_photo;
    m_restrictionReason = b.m_restrictionReason;
    m_title = b.m_title;
    m_untilDate = b.m_untilDate;
    m_username = b.m_username;
    m_version = b.m_version;
    setNull(b.isNull());
    return *this;
}

void Chat::setClassType(Chat::ChatClassType classType) {
    m_classType = classType;
}

Chat::ChatClassType Chat::classType() const {
    return m_classType;
}

bool Chat::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeChatEmpty: {
        m_id = in->fetchInt();
        m_classType = static_cast<ChatClassType>(x);
        return true;
    }
        break;

    case typeChat: {
        m_flags = in->fetchInt();
        m_id = in->fetchInt();
        m_title = in->fetchQString();
        m_photo.fetch(in);
        m_participantsCount = in->fetchInt();
        m_date = in->fetchInt();
        m_version = in->fetchInt();
        if(m_flags & 1<<6) {
            m_migratedTo.fetch(in);
        }
        m_classType = static_cast<ChatClassType>(x);
        return true;
    }
        break;

    case typeChatForbidden: {
        m_id = in->fetchInt();
        m_title = in->fetchQString();
        m_classType = static_cast<ChatClassType>(x);
        return true;
    }
        break;

    case typeChannel: {
        m_flags = in->fetchInt();
        m_id = in->fetchInt();
        if(m_flags & 1<<13) {
            m_accessHash = in->fetchLong();
        }
        m_title = in->fetchQString();
        if(m_flags & 1<<6) {
            m_username = in->fetchQString();
        }
        m_photo.fetch(in);
        m_date = in->fetchInt();
        m_version = in->fetchInt();
        if(m_flags & 1<<9) {
            m_restrictionReason = in->fetchQString();
        }
        if(m_flags & 1<<14) {
            m_adminRights.fetch(in);
        }
        if(m_flags & 1<<15) {
            m_bannedRights.fetch(in);
        }
        m_classType = static_cast<ChatClassType>(x);
        return true;
    }
        break;

    case typeChannelForbidden: {
        m_flags = in->fetchInt();
        m_id = in->fetchInt();
        m_accessHash = in->fetchLong();
        m_title = in->fetchQString();
        if(m_flags & 1<<16) {
            m_untilDate = in->fetchInt();
        }
        m_classType = static_cast<ChatClassType>(x);
        return true;
    }
        break;

    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool Chat::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeChatEmpty: {
        out->appendInt(m_id);
        return true;
    }
        break;

    case typeChat: {
        out->appendInt(m_flags);
        out->appendInt(m_id);
        out->appendQString(m_title);
        m_photo.push(out);
        out->appendInt(m_participantsCount);
        out->appendInt(m_date);
        out->appendInt(m_version);
        if(m_flags & 1<<6) {
            m_migratedTo.push(out);
        }
        return true;
    }
        break;

    case typeChatForbidden: {
        out->appendInt(m_id);
        out->appendQString(m_title);
        return true;
    }
        break;

    case typeChannel: {
        out->appendInt(m_flags);
        out->appendInt(m_id);
        if(m_flags & 1<<13) {
            out->appendLong(m_accessHash);
        }
        out->appendQString(m_title);
        if(m_flags & 1<<6) {
            out->appendQString(m_username);
        }
        m_photo.push(out);
        out->appendInt(m_date);
        out->appendInt(m_version);
        if(m_flags & 1<<9) {
            out->appendQString(m_restrictionReason);
        }
        if(m_flags & 1<<14) {
            m_adminRights.push(out);
        }
        if(m_flags & 1<<15) {
            m_bannedRights.push(out);
        }
        return true;
    }
        break;

    case typeChannelForbidden: {
        out->appendInt(m_flags);
        out->appendInt(m_id);
        out->appendLong(m_accessHash);
        out->appendQString(m_title);
        if(m_flags & 1<<16) {
            out->appendInt(m_untilDate);
        }
        return true;
    }
        break;

    default:
        return false;
    }
}

QMap<QString, QVariant> Chat::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeChatEmpty: {
        result["classType"] = "Chat::typeChatEmpty";
        if( id() ) result["id"] = QString::number(id());
        return result;
    }
        break;

    case typeChat: {
        result["classType"] = "Chat::typeChat";
        if( creator() ) result["creator"] = QString::number(creator());
        if( kicked() ) result["kicked"] = QString::number(kicked());
        if( left() ) result["left"] = QString::number(left());
        if( adminsEnabled() ) result["adminsEnabled"] = QString::number(adminsEnabled());
        if( admin() ) result["admin"] = QString::number(admin());
        if( deactivated() ) result["deactivated"] = QString::number(deactivated());
        if( id() ) result["id"] = QString::number(id());
        if( !m_title.isEmpty() ) result["title"] = QVariant::fromValue<QString>(m_title);
        if( !m_photo.isNull() ) result["photo"] = m_photo.toMap();
        if( participantsCount() ) result["participantsCount"] = QString::number(participantsCount());
        if( date() ) result["date"] = QString::number(date());
        if( version() ) result["version"] = QString::number(version());
        if( !m_migratedTo.isNull() ) result["migratedTo"] = m_migratedTo.toMap();
        return result;
    }
        break;

    case typeChatForbidden: {
        result["classType"] = "Chat::typeChatForbidden";
        if( id() ) result["id"] = QString::number(id());
        if( !m_title.isEmpty() ) result["title"] = QVariant::fromValue<QString>(m_title);
        return result;
    }
        break;

    case typeChannel: {
        result["classType"] = "Chat::typeChannel";
        if( creator() ) result["creator"] = QString::number(creator());
        if( left() ) result["left"] = QString::number(left());
        if( broadcast() ) result["broadcast"] = QString::number(broadcast());
        if( verified() ) result["verified"] = QString::number(verified());
        if( megagroup() ) result["megagroup"] = QString::number(megagroup());
        if( restricted() ) result["restricted"] = QString::number(restricted());
        if( democracy() ) result["democracy"] = QString::number(democracy());
        if( signatures() ) result["signatures"] = QString::number(signatures());
        if( min() ) result["min"] = QString::number(min());
        if( id() ) result["id"] = QString::number(id());
        if( accessHash() ) result["accessHash"] = QString::number(accessHash());
        if( !m_title.isEmpty() ) result["title"] = QVariant::fromValue<QString>(m_title);
        if( !m_username.isEmpty() ) result["username"] = QVariant::fromValue<QString>(m_username);
        if( !m_photo.isNull() ) result["photo"] = m_photo.toMap();
        if( date() ) result["date"] = QString::number(date());
        if( version() ) result["version"] = QString::number(version());
        if( !m_restrictionReason.isEmpty() ) result["restrictionReason"] = QVariant::fromValue<QString>(m_restrictionReason);
        if( !m_adminRights.isNull() ) result["adminRights"] = m_adminRights.toMap();
        if( !m_bannedRights.isNull() ) result["bannedRights"] = m_bannedRights.toMap();
        return result;
    }
        break;

    case typeChannelForbidden: {
        result["classType"] = "Chat::typeChannelForbidden";
        if( broadcast() ) result["broadcast"] = QString::number(broadcast());
        if( megagroup() ) result["megagroup"] = QString::number(megagroup());
        if( id() ) result["id"] = QString::number(id());
        if( accessHash() ) result["accessHash"] = QString::number(accessHash());
        if( !m_title.isEmpty() ) result["title"] = QVariant::fromValue<QString>(m_title);
        if( untilDate() ) result["untilDate"] = QString::number(untilDate());
        return result;
    }
        break;

    default:
        return result;
    }
}

Chat Chat::fromMap(const QMap<QString, QVariant> &map) {
    Chat result;
    if(map.value("classType").toString() == "Chat::typeChatEmpty") {
        result.setClassType(typeChatEmpty);
        QVariant _id_var = map.value("id");
        if( !_id_var.isNull() ) {
            _id_var.convert( QVariant::nameToType("qint32") );
            result.setId( _id_var.value<qint32>() );
        }

        return result;
    }
    if(map.value("classType").toString() == "Chat::typeChat") {
        result.setClassType(typeChat);
        QVariant _creator_var = map.value("creator");
        if( !_creator_var.isNull() ) {
            _creator_var.convert( QVariant::nameToType("bool") );
            result.setCreator( _creator_var.value<bool>() );
        }

        QVariant _kicked_var = map.value("kicked");
        if( !_kicked_var.isNull() ) {
            _kicked_var.convert( QVariant::nameToType("bool") );
            result.setKicked( _kicked_var.value<bool>() );
        }

        QVariant _left_var = map.value("left");
        if( !_left_var.isNull() ) {
            _left_var.convert( QVariant::nameToType("bool") );
            result.setLeft( _left_var.value<bool>() );
        }

        QVariant _adminsEnabled_var = map.value("adminsEnabled");
        if( !_adminsEnabled_var.isNull() ) {
            _adminsEnabled_var.convert( QVariant::nameToType("bool") );
            result.setAdminsEnabled( _adminsEnabled_var.value<bool>() );
        }

        QVariant _admin_var = map.value("admin");
        if( !_admin_var.isNull() ) {
            _admin_var.convert( QVariant::nameToType("bool") );
            result.setAdmin( _admin_var.value<bool>() );
        }

        QVariant _deactivated_var = map.value("deactivated");
        if( !_deactivated_var.isNull() ) {
            _deactivated_var.convert( QVariant::nameToType("bool") );
            result.setDeactivated( _deactivated_var.value<bool>() );
        }

        QVariant _id_var = map.value("id");
        if( !_id_var.isNull() ) {
            _id_var.convert( QVariant::nameToType("qint32") );
            result.setId( _id_var.value<qint32>() );
        }

        QVariant _title_var = map.value("title");
        if( !_title_var.isNull() ) {
            _title_var.convert( QVariant::nameToType("QString") );
            result.setTitle( _title_var.value<QString>() );
        }

        QVariant _photo_var = map.value("photo");
        if( !_photo_var.isNull() )
            result.setPhoto( ChatPhoto::fromMap(_photo_var.toMap()) );

        QVariant _participantsCount_var = map.value("participantsCount");
        if( !_participantsCount_var.isNull() ) {
            _participantsCount_var.convert( QVariant::nameToType("qint32") );
            result.setParticipantsCount( _participantsCount_var.value<qint32>() );
        }

        QVariant _date_var = map.value("date");
        if( !_date_var.isNull() ) {
            _date_var.convert( QVariant::nameToType("qint32") );
            result.setDate( _date_var.value<qint32>() );
        }

        QVariant _version_var = map.value("version");
        if( !_version_var.isNull() ) {
            _version_var.convert( QVariant::nameToType("qint32") );
            result.setVersion( _version_var.value<qint32>() );
        }

        QVariant _migratedTo_var = map.value("migratedTo");
        if( !_migratedTo_var.isNull() )
            result.setMigratedTo( InputChannel::fromMap(_migratedTo_var.toMap()) );

        return result;
    }
    if(map.value("classType").toString() == "Chat::typeChatForbidden") {
        result.setClassType(typeChatForbidden);
        QVariant _id_var = map.value("id");
        if( !_id_var.isNull() ) {
            _id_var.convert( QVariant::nameToType("qint32") );
            result.setId( _id_var.value<qint32>() );
        }

        QVariant _title_var = map.value("title");
        if( !_title_var.isNull() ) {
            _title_var.convert( QVariant::nameToType("QString") );
            result.setTitle( _title_var.value<QString>() );
        }

        return result;
    }
    if(map.value("classType").toString() == "Chat::typeChannel") {
        result.setClassType(typeChannel);
        QVariant _creator_var = map.value("creator");
        if( !_creator_var.isNull() ) {
            _creator_var.convert( QVariant::nameToType("bool") );
            result.setCreator( _creator_var.value<bool>() );
        }

        QVariant _left_var = map.value("left");
        if( !_left_var.isNull() ) {
            _left_var.convert( QVariant::nameToType("bool") );
            result.setLeft( _left_var.value<bool>() );
        }

        QVariant _broadcast_var = map.value("broadcast");
        if( !_broadcast_var.isNull() ) {
            _broadcast_var.convert( QVariant::nameToType("bool") );
            result.setBroadcast( _broadcast_var.value<bool>() );
        }

        QVariant _verified_var = map.value("verified");
        if( !_verified_var.isNull() ) {
            _verified_var.convert( QVariant::nameToType("bool") );
            result.setVerified( _verified_var.value<bool>() );
        }

        QVariant _megagroup_var = map.value("megagroup");
        if( !_megagroup_var.isNull() ) {
            _megagroup_var.convert( QVariant::nameToType("bool") );
            result.setMegagroup( _megagroup_var.value<bool>() );
        }

        QVariant _restricted_var = map.value("restricted");
        if( !_restricted_var.isNull() ) {
            _restricted_var.convert( QVariant::nameToType("bool") );
            result.setRestricted( _restricted_var.value<bool>() );
        }

        QVariant _democracy_var = map.value("democracy");
        if( !_democracy_var.isNull() ) {
            _democracy_var.convert( QVariant::nameToType("bool") );
            result.setDemocracy( _democracy_var.value<bool>() );
        }

        QVariant _signatures_var = map.value("signatures");
        if( !_signatures_var.isNull() ) {
            _signatures_var.convert( QVariant::nameToType("bool") );
            result.setSignatures( _signatures_var.value<bool>() );
        }

        QVariant _min_var = map.value("min");
        if( !_min_var.isNull() ) {
            _min_var.convert( QVariant::nameToType("bool") );
            result.setMin( _min_var.value<bool>() );
        }

        QVariant _id_var = map.value("id");
        if( !_id_var.isNull() ) {
            _id_var.convert( QVariant::nameToType("qint32") );
            result.setId( _id_var.value<qint32>() );
        }

        QVariant _accessHash_var = map.value("accessHash");
        if( !_accessHash_var.isNull() ) {
            _accessHash_var.convert( QVariant::nameToType("qint64") );
            result.setAccessHash( _accessHash_var.value<qint64>() );
        }

        QVariant _title_var = map.value("title");
        if( !_title_var.isNull() ) {
            _title_var.convert( QVariant::nameToType("QString") );
            result.setTitle( _title_var.value<QString>() );
        }

        QVariant _username_var = map.value("username");
        if( !_username_var.isNull() ) {
            _username_var.convert( QVariant::nameToType("QString") );
            result.setUsername( _username_var.value<QString>() );
        }

        QVariant _photo_var = map.value("photo");
        if( !_photo_var.isNull() )
            result.setPhoto( ChatPhoto::fromMap(_photo_var.toMap()) );

        QVariant _date_var = map.value("date");
        if( !_date_var.isNull() ) {
            _date_var.convert( QVariant::nameToType("qint32") );
            result.setDate( _date_var.value<qint32>() );
        }

        QVariant _version_var = map.value("version");
        if( !_version_var.isNull() ) {
            _version_var.convert( QVariant::nameToType("qint32") );
            result.setVersion( _version_var.value<qint32>() );
        }

        QVariant _restrictionReason_var = map.value("restrictionReason");
        if( !_restrictionReason_var.isNull() ) {
            _restrictionReason_var.convert( QVariant::nameToType("QString") );
            result.setRestrictionReason( _restrictionReason_var.value<QString>() );
        }

        QVariant _adminRights_var = map.value("adminRights");
        if( !_adminRights_var.isNull() )
            result.setAdminRights( ChannelAdminRights::fromMap(_adminRights_var.toMap()) );

        QVariant _bannedRights_var = map.value("bannedRights");
        if( !_bannedRights_var.isNull() )
            result.setBannedRights( ChannelBannedRights::fromMap(_bannedRights_var.toMap()) );

        return result;
    }
    if(map.value("classType").toString() == "Chat::typeChannelForbidden") {
        result.setClassType(typeChannelForbidden);
        QVariant _broadcast_var = map.value("broadcast");
        if( !_broadcast_var.isNull() ) {
            _broadcast_var.convert( QVariant::nameToType("bool") );
            result.setBroadcast( _broadcast_var.value<bool>() );
        }

        QVariant _megagroup_var = map.value("megagroup");
        if( !_megagroup_var.isNull() ) {
            _megagroup_var.convert( QVariant::nameToType("bool") );
            result.setMegagroup( _megagroup_var.value<bool>() );
        }

        QVariant _id_var = map.value("id");
        if( !_id_var.isNull() ) {
            _id_var.convert( QVariant::nameToType("qint32") );
            result.setId( _id_var.value<qint32>() );
        }

        QVariant _accessHash_var = map.value("accessHash");
        if( !_accessHash_var.isNull() ) {
            _accessHash_var.convert( QVariant::nameToType("qint64") );
            result.setAccessHash( _accessHash_var.value<qint64>() );
        }

        QVariant _title_var = map.value("title");
        if( !_title_var.isNull() ) {
            _title_var.convert( QVariant::nameToType("QString") );
            result.setTitle( _title_var.value<QString>() );
        }

        QVariant _untilDate_var = map.value("untilDate");
        if( !_untilDate_var.isNull() ) {
            _untilDate_var.convert( QVariant::nameToType("qint32") );
            result.setUntilDate( _untilDate_var.value<qint32>() );
        }

        return result;
    }
    return result;
}

Chat Chat::fromJson(const QString &json) {
    return Chat::fromMap(QJsonDocument::fromJson(json.toUtf8()).toVariant().toMap());
}

QByteArray Chat::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const Chat &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case Chat::typeChatEmpty:
        stream << item.id();
        break;
    case Chat::typeChat:
        stream << item.flags();
        stream << item.id();
        stream << item.title();
        stream << item.photo();
        stream << item.participantsCount();
        stream << item.date();
        stream << item.version();
        stream << item.migratedTo();
        break;
    case Chat::typeChatForbidden:
        stream << item.id();
        stream << item.title();
        break;
    case Chat::typeChannel:
        stream << item.flags();
        stream << item.id();
        stream << item.accessHash();
        stream << item.title();
        stream << item.username();
        stream << item.photo();
        stream << item.date();
        stream << item.version();
        stream << item.restrictionReason();
        stream << item.adminRights();
        stream << item.bannedRights();
        break;
    case Chat::typeChannelForbidden:
        stream << item.flags();
        stream << item.id();
        stream << item.accessHash();
        stream << item.title();
        stream << item.untilDate();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, Chat &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<Chat::ChatClassType>(type));
    switch(type) {
    case Chat::typeChatEmpty: {
        qint32 m_id;
        stream >> m_id;
        item.setId(m_id);
    }
        break;
    case Chat::typeChat: {
        qint32 m_flags;
        stream >> m_flags;
        item.setFlags(m_flags);
        qint32 m_id;
        stream >> m_id;
        item.setId(m_id);
        QString m_title;
        stream >> m_title;
        item.setTitle(m_title);
        ChatPhoto m_photo;
        stream >> m_photo;
        item.setPhoto(m_photo);
        qint32 m_participants_count;
        stream >> m_participants_count;
        item.setParticipantsCount(m_participants_count);
        qint32 m_date;
        stream >> m_date;
        item.setDate(m_date);
        qint32 m_version;
        stream >> m_version;
        item.setVersion(m_version);
        InputChannel m_migrated_to;
        stream >> m_migrated_to;
        item.setMigratedTo(m_migrated_to);
    }
        break;
    case Chat::typeChatForbidden: {
        qint32 m_id;
        stream >> m_id;
        item.setId(m_id);
        QString m_title;
        stream >> m_title;
        item.setTitle(m_title);
    }
        break;
    case Chat::typeChannel: {
        qint32 m_flags;
        stream >> m_flags;
        item.setFlags(m_flags);
        qint32 m_id;
        stream >> m_id;
        item.setId(m_id);
        qint64 m_access_hash;
        stream >> m_access_hash;
        item.setAccessHash(m_access_hash);
        QString m_title;
        stream >> m_title;
        item.setTitle(m_title);
        QString m_username;
        stream >> m_username;
        item.setUsername(m_username);
        ChatPhoto m_photo;
        stream >> m_photo;
        item.setPhoto(m_photo);
        qint32 m_date;
        stream >> m_date;
        item.setDate(m_date);
        qint32 m_version;
        stream >> m_version;
        item.setVersion(m_version);
        QString m_restriction_reason;
        stream >> m_restriction_reason;
        item.setRestrictionReason(m_restriction_reason);
        ChannelAdminRights m_admin_rights;
        stream >> m_admin_rights;
        item.setAdminRights(m_admin_rights);
        ChannelBannedRights m_banned_rights;
        stream >> m_banned_rights;
        item.setBannedRights(m_banned_rights);
    }
        break;
    case Chat::typeChannelForbidden: {
        qint32 m_flags;
        stream >> m_flags;
        item.setFlags(m_flags);
        qint32 m_id;
        stream >> m_id;
        item.setId(m_id);
        qint64 m_access_hash;
        stream >> m_access_hash;
        item.setAccessHash(m_access_hash);
        QString m_title;
        stream >> m_title;
        item.setTitle(m_title);
        qint32 m_until_date;
        stream >> m_until_date;
        item.setUntilDate(m_until_date);
    }
        break;
    }
    return stream;
}

/*QDebug operator<<(QDebug debug,  const Chat &item) {
    QDebugStateSaver saver(debug);
    Q_UNUSED(saver)
    debug.nospace() << "Telegram.Chat(";
    switch(item.classType()) {
    case Chat::typeChatEmpty:
        debug.nospace() << "classType: typeChatEmpty";
        debug.nospace() << ", id: " << item.id();
        break;
    case Chat::typeChat:
        debug.nospace() << "classType: typeChat";
        debug.nospace() << ", flags: " << item.flags();
        debug.nospace() << ", id: " << item.id();
        debug.nospace() << ", title: " << item.title();
        debug.nospace() << ", photo: " << item.photo();
        debug.nospace() << ", participantsCount: " << item.participantsCount();
        debug.nospace() << ", date: " << item.date();
        debug.nospace() << ", version: " << item.version();
        debug.nospace() << ", migratedTo: " << item.migratedTo();
        break;
    case Chat::typeChatForbidden:
        debug.nospace() << "classType: typeChatForbidden";
        debug.nospace() << ", id: " << item.id();
        debug.nospace() << ", title: " << item.title();
        break;
    case Chat::typeChannel:
        debug.nospace() << "classType: typeChannel";
        debug.nospace() << ", flags: " << item.flags();
        debug.nospace() << ", id: " << item.id();
        debug.nospace() << ", accessHash: " << item.accessHash();
        debug.nospace() << ", title: " << item.title();
        debug.nospace() << ", username: " << item.username();
        debug.nospace() << ", photo: " << item.photo();
        debug.nospace() << ", date: " << item.date();
        debug.nospace() << ", version: " << item.version();
        debug.nospace() << ", restrictionReason: " << item.restrictionReason();
        debug.nospace() << ", adminRights: " << item.adminRights();
        debug.nospace() << ", bannedRights: " << item.bannedRights();
        break;
    case Chat::typeChannelForbidden:
        debug.nospace() << "classType: typeChannelForbidden";
        debug.nospace() << ", flags: " << item.flags();
        debug.nospace() << ", id: " << item.id();
        debug.nospace() << ", accessHash: " << item.accessHash();
        debug.nospace() << ", title: " << item.title();
        debug.nospace() << ", untilDate: " << item.untilDate();
        break;
    }
    debug.nospace() << ")";
    return debug;
}
*/
