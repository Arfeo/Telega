// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_CHATFULL
#define LQTG_TYPE_CHATFULL

#include "telegramtypeobject.h"

#include <QMetaType>
#include <QVariant>
#include "../coretypes.h"

#include <QDataStream>

#include <QString>
#include <QtGlobal>
#include <QList>
#include "botinfo.h"
#include "photo.h"
#include "exportedchatinvite.h"
#include "peernotifysettings.h"
#include "chatparticipants.h"

class LIBQTELEGRAMSHARED_EXPORT ChatFull : public TelegramTypeObject
{
public:
    enum ChatFullClassType {
        typeChatFull = 0x2e02a614,
        typeChannelFull = 0x95cb5f57
    };

    ChatFull(ChatFullClassType classType = typeChatFull, InboundPkt *in = 0);
    ChatFull(InboundPkt *in);
    ChatFull(const Null&);
    ChatFull(const ChatFull &another);
    virtual ~ChatFull();

    void setAbout(const QString &about);
    QString about() const;

    void setAdminsCount(qint32 adminsCount);
    qint32 adminsCount() const;

    void setBannedCount(qint32 bannedCount);
    qint32 bannedCount() const;

    void setBotInfo(const QList<BotInfo> &botInfo);
    QList<BotInfo> botInfo() const;

    void setCanSetUsername(bool canSetUsername);
    bool canSetUsername() const;

    void setCanViewParticipants(bool canViewParticipants);
    bool canViewParticipants() const;

    void setChatPhoto(const Photo &chatPhoto);
    Photo chatPhoto() const;

    void setExportedInvite(const ExportedChatInvite &exportedInvite);
    ExportedChatInvite exportedInvite() const;

    void setFlags(qint32 flags);
    qint32 flags() const;

    void setId(qint32 id);
    qint32 id() const;

    void setKickedCount(qint32 kickedCount);
    qint32 kickedCount() const;

    void setMigratedFromChatId(qint32 migratedFromChatId);
    qint32 migratedFromChatId() const;

    void setMigratedFromMaxId(qint32 migratedFromMaxId);
    qint32 migratedFromMaxId() const;

    void setNotifySettings(const PeerNotifySettings &notifySettings);
    PeerNotifySettings notifySettings() const;

    void setParticipants(const ChatParticipants &participants);
    ChatParticipants participants() const;

    void setParticipantsCount(qint32 participantsCount);
    qint32 participantsCount() const;

    void setPinnedMsgId(qint32 pinnedMsgId);
    qint32 pinnedMsgId() const;

    void setReadInboxMaxId(qint32 readInboxMaxId);
    qint32 readInboxMaxId() const;

    void setReadOutboxMaxId(qint32 readOutboxMaxId);
    qint32 readOutboxMaxId() const;

    void setUnreadCount(qint32 unreadCount);
    qint32 unreadCount() const;

    void setClassType(ChatFullClassType classType);
    ChatFullClassType classType() const;

    bool fetch(InboundPkt *in);
    bool push(OutboundPkt *out) const;

    QMap<QString, QVariant> toMap() const;
    static ChatFull fromMap(const QMap<QString, QVariant> &map);
    static ChatFull fromJson(const QString &json);

    bool operator ==(const ChatFull &b) const;
    ChatFull &operator =(const ChatFull &b);

    bool operator==(bool stt) const { return isNull() != stt; }
    bool operator!=(bool stt) const { return !operator ==(stt); }

    QByteArray getHash(QCryptographicHash::Algorithm alg = QCryptographicHash::Md5) const;

private:
    QString m_about;
    qint32 m_adminsCount;
    qint32 m_bannedCount;
    QList<BotInfo> m_botInfo;
    Photo m_chatPhoto;
    ExportedChatInvite m_exportedInvite;
    qint32 m_flags;
    qint32 m_id;
    qint32 m_kickedCount;
    qint32 m_migratedFromChatId;
    qint32 m_migratedFromMaxId;
    PeerNotifySettings m_notifySettings;
    ChatParticipants m_participants;
    qint32 m_participantsCount;
    qint32 m_pinnedMsgId;
    qint32 m_readInboxMaxId;
    qint32 m_readOutboxMaxId;
    qint32 m_unreadCount;
    ChatFullClassType m_classType;
};

Q_DECLARE_METATYPE(ChatFull)

QDataStream LIBQTELEGRAMSHARED_EXPORT &operator<<(QDataStream &stream, const ChatFull &item);
QDataStream LIBQTELEGRAMSHARED_EXPORT &operator>>(QDataStream &stream, ChatFull &item);

QDebug LIBQTELEGRAMSHARED_EXPORT operator<<(QDebug debug,  const ChatFull &item);

#endif // LQTG_TYPE_CHATFULL
