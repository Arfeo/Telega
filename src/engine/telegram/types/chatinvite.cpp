// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "chatinvite.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

ChatInvite::ChatInvite(ChatInviteClassType classType, InboundPkt *in) :
    m_flags(0),
    m_participantsCount(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

ChatInvite::ChatInvite(InboundPkt *in) :
    m_flags(0),
    m_participantsCount(0),
    m_classType(typeChatInviteAlready)
{
    fetch(in);
}

ChatInvite::ChatInvite(const ChatInvite &another) :
    TelegramTypeObject(),
    m_flags(0),
    m_participantsCount(0),
    m_classType(typeChatInviteAlready)
{
    operator=(another);
}

ChatInvite::ChatInvite(const Null &null) :
    TelegramTypeObject(null),
    m_flags(0),
    m_participantsCount(0),
    m_classType(typeChatInviteAlready)
{
}

ChatInvite::~ChatInvite() {

}

void ChatInvite::setBroadcast(bool broadcast) {
    if(broadcast) m_flags = (m_flags | (1<<1));
    else m_flags = (m_flags & ~(1<<1));
}

bool ChatInvite::broadcast() const {
    return (m_flags & 1<<1);
}

void ChatInvite::setChannel(bool channel) {
    if(channel) m_flags = (m_flags | (1<<0));
    else m_flags = (m_flags & ~(1<<0));
}

bool ChatInvite::channel() const {
    return (m_flags & 1<<0);
}

void ChatInvite::setChat(const Chat &chat) {
    m_chat = chat;
}

Chat ChatInvite::chat() const {
    return m_chat;
}

void ChatInvite::setFlags(qint32 flags) {
    m_flags = flags;
}

qint32 ChatInvite::flags() const {
    return m_flags;
}

void ChatInvite::setMegagroup(bool megagroup) {
    if(megagroup) m_flags = (m_flags | (1<<3));
    else m_flags = (m_flags & ~(1<<3));
}

bool ChatInvite::megagroup() const {
    return (m_flags & 1<<3);
}

void ChatInvite::setParticipants(const QList<User> &participants) {
    if(participants.length()) m_flags = (m_flags | (1<<4));
    else m_flags = (m_flags & ~(1<<4));
    m_participants = participants;
}

QList<User> ChatInvite::participants() const {
    return m_participants;
}

void ChatInvite::setParticipantsCount(qint32 participantsCount) {
    m_participantsCount = participantsCount;
}

qint32 ChatInvite::participantsCount() const {
    return m_participantsCount;
}

void ChatInvite::setPhoto(const ChatPhoto &photo) {
    m_photo = photo;
}

ChatPhoto ChatInvite::photo() const {
    return m_photo;
}

void ChatInvite::setPublicValue(bool publicValue) {
    if(publicValue) m_flags = (m_flags | (1<<2));
    else m_flags = (m_flags & ~(1<<2));
}

bool ChatInvite::publicValue() const {
    return (m_flags & 1<<2);
}

void ChatInvite::setTitle(const QString &title) {
    m_title = title;
}

QString ChatInvite::title() const {
    return m_title;
}

bool ChatInvite::operator ==(const ChatInvite &b) const {
    return m_classType == b.m_classType &&
           m_chat == b.m_chat &&
           m_flags == b.m_flags &&
           m_participants == b.m_participants &&
           m_participantsCount == b.m_participantsCount &&
           m_photo == b.m_photo &&
           m_title == b.m_title;
}

ChatInvite &ChatInvite::operator =(const ChatInvite &b) {
    m_classType = b.m_classType;
    m_chat = b.m_chat;
    m_flags = b.m_flags;
    m_participants = b.m_participants;
    m_participantsCount = b.m_participantsCount;
    m_photo = b.m_photo;
    m_title = b.m_title;
    setNull(b.isNull());
    return *this;
}

void ChatInvite::setClassType(ChatInvite::ChatInviteClassType classType) {
    m_classType = classType;
}

ChatInvite::ChatInviteClassType ChatInvite::classType() const {
    return m_classType;
}

bool ChatInvite::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeChatInviteAlready: {
        m_chat.fetch(in);
        m_classType = static_cast<ChatInviteClassType>(x);
        return true;
    }
        break;

    case typeChatInvite: {
        m_flags = in->fetchInt();
        m_title = in->fetchQString();
        m_photo.fetch(in);
        m_participantsCount = in->fetchInt();
        if(m_flags & 1<<4) {
            if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
            qint32 m_participants_length = in->fetchInt();
            m_participants.clear();
            for (qint32 i = 0; i < m_participants_length; i++) {
                User type;
                if(m_flags & 1<<4) {
                type.fetch(in);
            }
                m_participants.append(type);
            }
        }
        m_classType = static_cast<ChatInviteClassType>(x);
        return true;
    }
        break;

    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool ChatInvite::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeChatInviteAlready: {
        m_chat.push(out);
        return true;
    }
        break;

    case typeChatInvite: {
        out->appendInt(m_flags);
        out->appendQString(m_title);
        m_photo.push(out);
        out->appendInt(m_participantsCount);
        if(m_flags & 1<<4) {
            out->appendInt(CoreTypes::typeVector);
            out->appendInt(m_participants.count());
            for (qint32 i = 0; i < m_participants.count(); i++) {
                m_participants[i].push(out);
            }
        }
        return true;
    }
        break;

    default:
        return false;
    }
}

QMap<QString, QVariant> ChatInvite::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeChatInviteAlready: {
        result["classType"] = "ChatInvite::typeChatInviteAlready";
        if( !m_chat.isNull() ) result["chat"] = m_chat.toMap();
        return result;
    }
        break;

    case typeChatInvite: {
        result["classType"] = "ChatInvite::typeChatInvite";
        if( channel() ) result["channel"] = QString::number(channel());
        if( broadcast() ) result["broadcast"] = QString::number(broadcast());
        if( publicValue() ) result["publicValue"] = QString::number(publicValue());
        if( megagroup() ) result["megagroup"] = QString::number(megagroup());
        if( !m_title.isEmpty() ) result["title"] = QVariant::fromValue<QString>(m_title);
        if( !m_photo.isNull() ) result["photo"] = m_photo.toMap();
        if( participantsCount() ) result["participantsCount"] = QString::number(participantsCount());
        QList<QVariant> _participants;
        //for(const User &m__type: m_participants)
        for(int i = 0; i < m_participants.size(); ++i) {
            const User &m__type = m_participants[i];
            if( !m__type.isNull() ) _participants << m__type.toMap();
        }
        result["participants"] = _participants;
        return result;
    }
        break;

    default:
        return result;
    }
}

ChatInvite ChatInvite::fromMap(const QMap<QString, QVariant> &map) {
    ChatInvite result;
    if(map.value("classType").toString() == "ChatInvite::typeChatInviteAlready") {
        result.setClassType(typeChatInviteAlready);
        QVariant _chat_var = map.value("chat");
        if( !_chat_var.isNull() )
            result.setChat( Chat::fromMap(_chat_var.toMap()) );

        return result;
    }
    if(map.value("classType").toString() == "ChatInvite::typeChatInvite") {
        result.setClassType(typeChatInvite);
        QVariant _channel_var = map.value("channel");
        if( !_channel_var.isNull() ) {
            _channel_var.convert( QVariant::nameToType("bool") );
            result.setChannel( _channel_var.value<bool>() );
        }

        QVariant _broadcast_var = map.value("broadcast");
        if( !_broadcast_var.isNull() ) {
            _broadcast_var.convert( QVariant::nameToType("bool") );
            result.setBroadcast( _broadcast_var.value<bool>() );
        }

        QVariant _publicValue_var = map.value("publicValue");
        if( !_publicValue_var.isNull() ) {
            _publicValue_var.convert( QVariant::nameToType("bool") );
            result.setPublicValue( _publicValue_var.value<bool>() );
        }

        QVariant _megagroup_var = map.value("megagroup");
        if( !_megagroup_var.isNull() ) {
            _megagroup_var.convert( QVariant::nameToType("bool") );
            result.setMegagroup( _megagroup_var.value<bool>() );
        }

        QVariant _title_var = map.value("title");
        if( !_title_var.isNull() ) {
            _title_var.convert( QVariant::nameToType("QString") );
            result.setTitle( _title_var.value<QString>() );
        }

        QVariant _photo_var = map.value("photo");
        if( !_photo_var.isNull() )
            result.setPhoto( ChatPhoto::fromMap(_photo_var.toMap()) );

        QVariant _participantsCount_var = map.value("participantsCount");
        if( !_participantsCount_var.isNull() ) {
            _participantsCount_var.convert( QVariant::nameToType("qint32") );
            result.setParticipantsCount( _participantsCount_var.value<qint32>() );
        }

        QList<QVariant> map_participants = map["participants"].toList();
        QList<User> _participants;
        //for(const QVariant &var: map_participants)
        for(int i = 0; i < map_participants.size(); ++i) {
            const QVariant &var = map_participants[i];
            _participants << User::fromMap(var.toMap());
        }
        result.setParticipants(_participants);
        return result;
    }
    return result;
}

ChatInvite ChatInvite::fromJson(const QString &json) {
    return ChatInvite::fromMap(QJsonDocument::fromJson(json.toUtf8()).toVariant().toMap());
}

QByteArray ChatInvite::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const ChatInvite &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case ChatInvite::typeChatInviteAlready:
        stream << item.chat();
        break;
    case ChatInvite::typeChatInvite:
        stream << item.flags();
        stream << item.title();
        stream << item.photo();
        stream << item.participantsCount();
        stream << item.participants();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, ChatInvite &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<ChatInvite::ChatInviteClassType>(type));
    switch(type) {
    case ChatInvite::typeChatInviteAlready: {
        Chat m_chat;
        stream >> m_chat;
        item.setChat(m_chat);
    }
        break;
    case ChatInvite::typeChatInvite: {
        qint32 m_flags;
        stream >> m_flags;
        item.setFlags(m_flags);
        QString m_title;
        stream >> m_title;
        item.setTitle(m_title);
        ChatPhoto m_photo;
        stream >> m_photo;
        item.setPhoto(m_photo);
        qint32 m_participants_count;
        stream >> m_participants_count;
        item.setParticipantsCount(m_participants_count);
        QList<User> m_participants;
        stream >> m_participants;
        item.setParticipants(m_participants);
    }
        break;
    }
    return stream;
}

/*QDebug operator<<(QDebug debug,  const ChatInvite &item) {
    QDebugStateSaver saver(debug);
    Q_UNUSED(saver)
    debug.nospace() << "Telegram.ChatInvite(";
    switch(item.classType()) {
    case ChatInvite::typeChatInviteAlready:
        debug.nospace() << "classType: typeChatInviteAlready";
        debug.nospace() << ", chat: " << item.chat();
        break;
    case ChatInvite::typeChatInvite:
        debug.nospace() << "classType: typeChatInvite";
        debug.nospace() << ", flags: " << item.flags();
        debug.nospace() << ", title: " << item.title();
        debug.nospace() << ", photo: " << item.photo();
        debug.nospace() << ", participantsCount: " << item.participantsCount();
        debug.nospace() << ", participants: " << item.participants();
        break;
    }
    debug.nospace() << ")";
    return debug;
}
*/
