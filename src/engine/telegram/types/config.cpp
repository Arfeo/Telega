// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "config.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

Config::Config(ConfigClassType classType, InboundPkt *in) :
    m_callConnectTimeoutMs(0),
    m_callPacketTimeoutMs(0),
    m_callReceiveTimeoutMs(0),
    m_callRingTimeoutMs(0),
    m_chatBigSize(0),
    m_chatSizeMax(0),
    m_date(0),
    m_editTimeLimit(0),
    m_expires(0),
    m_flags(0),
    m_forwardedCountMax(0),
    m_langPackVersion(0),
    m_megagroupSizeMax(0),
    m_notifyCloudDelayMs(0),
    m_notifyDefaultDelayMs(0),
    m_offlineBlurTimeoutMs(0),
    m_offlineIdleTimeoutMs(0),
    m_onlineCloudTimeoutMs(0),
    m_onlineUpdatePeriodMs(0),
    m_pinnedDialogsCountMax(0),
    m_pushChatLimit(0),
    m_pushChatPeriodMs(0),
    m_ratingEDecay(0),
    m_savedGifsLimit(0),
    m_stickersRecentLimit(0),
    m_testMode(false),
    m_thisDc(0),
    m_tmpSessions(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

Config::Config(InboundPkt *in) :
    m_callConnectTimeoutMs(0),
    m_callPacketTimeoutMs(0),
    m_callReceiveTimeoutMs(0),
    m_callRingTimeoutMs(0),
    m_chatBigSize(0),
    m_chatSizeMax(0),
    m_date(0),
    m_editTimeLimit(0),
    m_expires(0),
    m_flags(0),
    m_forwardedCountMax(0),
    m_langPackVersion(0),
    m_megagroupSizeMax(0),
    m_notifyCloudDelayMs(0),
    m_notifyDefaultDelayMs(0),
    m_offlineBlurTimeoutMs(0),
    m_offlineIdleTimeoutMs(0),
    m_onlineCloudTimeoutMs(0),
    m_onlineUpdatePeriodMs(0),
    m_pinnedDialogsCountMax(0),
    m_pushChatLimit(0),
    m_pushChatPeriodMs(0),
    m_ratingEDecay(0),
    m_savedGifsLimit(0),
    m_stickersRecentLimit(0),
    m_testMode(false),
    m_thisDc(0),
    m_tmpSessions(0),
    m_classType(typeConfig)
{
    fetch(in);
}

Config::Config(const Config &another) :
    TelegramTypeObject(),
    m_callConnectTimeoutMs(0),
    m_callPacketTimeoutMs(0),
    m_callReceiveTimeoutMs(0),
    m_callRingTimeoutMs(0),
    m_chatBigSize(0),
    m_chatSizeMax(0),
    m_date(0),
    m_editTimeLimit(0),
    m_expires(0),
    m_flags(0),
    m_forwardedCountMax(0),
    m_langPackVersion(0),
    m_megagroupSizeMax(0),
    m_notifyCloudDelayMs(0),
    m_notifyDefaultDelayMs(0),
    m_offlineBlurTimeoutMs(0),
    m_offlineIdleTimeoutMs(0),
    m_onlineCloudTimeoutMs(0),
    m_onlineUpdatePeriodMs(0),
    m_pinnedDialogsCountMax(0),
    m_pushChatLimit(0),
    m_pushChatPeriodMs(0),
    m_ratingEDecay(0),
    m_savedGifsLimit(0),
    m_stickersRecentLimit(0),
    m_testMode(false),
    m_thisDc(0),
    m_tmpSessions(0),
    m_classType(typeConfig)
{
    operator=(another);
}

Config::Config(const Null &null) :
    TelegramTypeObject(null),
    m_callConnectTimeoutMs(0),
    m_callPacketTimeoutMs(0),
    m_callReceiveTimeoutMs(0),
    m_callRingTimeoutMs(0),
    m_chatBigSize(0),
    m_chatSizeMax(0),
    m_date(0),
    m_editTimeLimit(0),
    m_expires(0),
    m_flags(0),
    m_forwardedCountMax(0),
    m_langPackVersion(0),
    m_megagroupSizeMax(0),
    m_notifyCloudDelayMs(0),
    m_notifyDefaultDelayMs(0),
    m_offlineBlurTimeoutMs(0),
    m_offlineIdleTimeoutMs(0),
    m_onlineCloudTimeoutMs(0),
    m_onlineUpdatePeriodMs(0),
    m_pinnedDialogsCountMax(0),
    m_pushChatLimit(0),
    m_pushChatPeriodMs(0),
    m_ratingEDecay(0),
    m_savedGifsLimit(0),
    m_stickersRecentLimit(0),
    m_testMode(false),
    m_thisDc(0),
    m_tmpSessions(0),
    m_classType(typeConfig)
{
}

Config::~Config() {

}

void Config::setCallConnectTimeoutMs(qint32 callConnectTimeoutMs) {
    m_callConnectTimeoutMs = callConnectTimeoutMs;
}

qint32 Config::callConnectTimeoutMs() const {
    return m_callConnectTimeoutMs;
}

void Config::setCallPacketTimeoutMs(qint32 callPacketTimeoutMs) {
    m_callPacketTimeoutMs = callPacketTimeoutMs;
}

qint32 Config::callPacketTimeoutMs() const {
    return m_callPacketTimeoutMs;
}

void Config::setCallReceiveTimeoutMs(qint32 callReceiveTimeoutMs) {
    m_callReceiveTimeoutMs = callReceiveTimeoutMs;
}

qint32 Config::callReceiveTimeoutMs() const {
    return m_callReceiveTimeoutMs;
}

void Config::setCallRingTimeoutMs(qint32 callRingTimeoutMs) {
    m_callRingTimeoutMs = callRingTimeoutMs;
}

qint32 Config::callRingTimeoutMs() const {
    return m_callRingTimeoutMs;
}

void Config::setChatBigSize(qint32 chatBigSize) {
    m_chatBigSize = chatBigSize;
}

qint32 Config::chatBigSize() const {
    return m_chatBigSize;
}

void Config::setChatSizeMax(qint32 chatSizeMax) {
    m_chatSizeMax = chatSizeMax;
}

qint32 Config::chatSizeMax() const {
    return m_chatSizeMax;
}

void Config::setDate(qint32 date) {
    m_date = date;
}

qint32 Config::date() const {
    return m_date;
}

void Config::setDcOptions(const QList<DcOption> &dcOptions) {
    m_dcOptions = dcOptions;
}

QList<DcOption> Config::dcOptions() const {
    return m_dcOptions;
}

void Config::setDisabledFeatures(const QList<DisabledFeature> &disabledFeatures) {
    m_disabledFeatures = disabledFeatures;
}

QList<DisabledFeature> Config::disabledFeatures() const {
    return m_disabledFeatures;
}

void Config::setEditTimeLimit(qint32 editTimeLimit) {
    m_editTimeLimit = editTimeLimit;
}

qint32 Config::editTimeLimit() const {
    return m_editTimeLimit;
}

void Config::setExpires(qint32 expires) {
    m_expires = expires;
}

qint32 Config::expires() const {
    return m_expires;
}

void Config::setFlags(qint32 flags) {
    m_flags = flags;
}

qint32 Config::flags() const {
    return m_flags;
}

void Config::setForwardedCountMax(qint32 forwardedCountMax) {
    m_forwardedCountMax = forwardedCountMax;
}

qint32 Config::forwardedCountMax() const {
    return m_forwardedCountMax;
}

void Config::setLangPackVersion(qint32 langPackVersion) {
    if(langPackVersion) m_flags = (m_flags | (1<<2));
    else m_flags = (m_flags & ~(1<<2));
    m_langPackVersion = langPackVersion;
}

qint32 Config::langPackVersion() const {
    return m_langPackVersion;
}

void Config::setMeUrlPrefix(const QString &meUrlPrefix) {
    m_meUrlPrefix = meUrlPrefix;
}

QString Config::meUrlPrefix() const {
    return m_meUrlPrefix;
}

void Config::setMegagroupSizeMax(qint32 megagroupSizeMax) {
    m_megagroupSizeMax = megagroupSizeMax;
}

qint32 Config::megagroupSizeMax() const {
    return m_megagroupSizeMax;
}

void Config::setNotifyCloudDelayMs(qint32 notifyCloudDelayMs) {
    m_notifyCloudDelayMs = notifyCloudDelayMs;
}

qint32 Config::notifyCloudDelayMs() const {
    return m_notifyCloudDelayMs;
}

void Config::setNotifyDefaultDelayMs(qint32 notifyDefaultDelayMs) {
    m_notifyDefaultDelayMs = notifyDefaultDelayMs;
}

qint32 Config::notifyDefaultDelayMs() const {
    return m_notifyDefaultDelayMs;
}

void Config::setOfflineBlurTimeoutMs(qint32 offlineBlurTimeoutMs) {
    m_offlineBlurTimeoutMs = offlineBlurTimeoutMs;
}

qint32 Config::offlineBlurTimeoutMs() const {
    return m_offlineBlurTimeoutMs;
}

void Config::setOfflineIdleTimeoutMs(qint32 offlineIdleTimeoutMs) {
    m_offlineIdleTimeoutMs = offlineIdleTimeoutMs;
}

qint32 Config::offlineIdleTimeoutMs() const {
    return m_offlineIdleTimeoutMs;
}

void Config::setOnlineCloudTimeoutMs(qint32 onlineCloudTimeoutMs) {
    m_onlineCloudTimeoutMs = onlineCloudTimeoutMs;
}

qint32 Config::onlineCloudTimeoutMs() const {
    return m_onlineCloudTimeoutMs;
}

void Config::setOnlineUpdatePeriodMs(qint32 onlineUpdatePeriodMs) {
    m_onlineUpdatePeriodMs = onlineUpdatePeriodMs;
}

qint32 Config::onlineUpdatePeriodMs() const {
    return m_onlineUpdatePeriodMs;
}

void Config::setPhonecallsEnabled(bool phonecallsEnabled) {
    if(phonecallsEnabled) m_flags = (m_flags | (1<<1));
    else m_flags = (m_flags & ~(1<<1));
}

bool Config::phonecallsEnabled() const {
    return (m_flags & 1<<1);
}

void Config::setPinnedDialogsCountMax(qint32 pinnedDialogsCountMax) {
    m_pinnedDialogsCountMax = pinnedDialogsCountMax;
}

qint32 Config::pinnedDialogsCountMax() const {
    return m_pinnedDialogsCountMax;
}

void Config::setPushChatLimit(qint32 pushChatLimit) {
    m_pushChatLimit = pushChatLimit;
}

qint32 Config::pushChatLimit() const {
    return m_pushChatLimit;
}

void Config::setPushChatPeriodMs(qint32 pushChatPeriodMs) {
    m_pushChatPeriodMs = pushChatPeriodMs;
}

qint32 Config::pushChatPeriodMs() const {
    return m_pushChatPeriodMs;
}

void Config::setRatingEDecay(qint32 ratingEDecay) {
    m_ratingEDecay = ratingEDecay;
}

qint32 Config::ratingEDecay() const {
    return m_ratingEDecay;
}

void Config::setSavedGifsLimit(qint32 savedGifsLimit) {
    m_savedGifsLimit = savedGifsLimit;
}

qint32 Config::savedGifsLimit() const {
    return m_savedGifsLimit;
}

void Config::setStickersRecentLimit(qint32 stickersRecentLimit) {
    m_stickersRecentLimit = stickersRecentLimit;
}

qint32 Config::stickersRecentLimit() const {
    return m_stickersRecentLimit;
}

void Config::setSuggestedLangCode(const QString &suggestedLangCode) {
    if(!suggestedLangCode.isNull()) m_flags = (m_flags | (1<<2));
    else m_flags = (m_flags & ~(1<<2));
    m_suggestedLangCode = suggestedLangCode;
}

QString Config::suggestedLangCode() const {
    return m_suggestedLangCode;
}

void Config::setTestMode(bool testMode) {
    m_testMode = testMode;
}

bool Config::testMode() const {
    return m_testMode;
}

void Config::setThisDc(qint32 thisDc) {
    m_thisDc = thisDc;
}

qint32 Config::thisDc() const {
    return m_thisDc;
}

void Config::setTmpSessions(qint32 tmpSessions) {
    if(tmpSessions) m_flags = (m_flags | (1<<0));
    else m_flags = (m_flags & ~(1<<0));
    m_tmpSessions = tmpSessions;
}

qint32 Config::tmpSessions() const {
    return m_tmpSessions;
}

bool Config::operator ==(const Config &b) const {
    return m_classType == b.m_classType &&
           m_callConnectTimeoutMs == b.m_callConnectTimeoutMs &&
           m_callPacketTimeoutMs == b.m_callPacketTimeoutMs &&
           m_callReceiveTimeoutMs == b.m_callReceiveTimeoutMs &&
           m_callRingTimeoutMs == b.m_callRingTimeoutMs &&
           m_chatBigSize == b.m_chatBigSize &&
           m_chatSizeMax == b.m_chatSizeMax &&
           m_date == b.m_date &&
           m_dcOptions == b.m_dcOptions &&
           m_disabledFeatures == b.m_disabledFeatures &&
           m_editTimeLimit == b.m_editTimeLimit &&
           m_expires == b.m_expires &&
           m_flags == b.m_flags &&
           m_forwardedCountMax == b.m_forwardedCountMax &&
           m_langPackVersion == b.m_langPackVersion &&
           m_meUrlPrefix == b.m_meUrlPrefix &&
           m_megagroupSizeMax == b.m_megagroupSizeMax &&
           m_notifyCloudDelayMs == b.m_notifyCloudDelayMs &&
           m_notifyDefaultDelayMs == b.m_notifyDefaultDelayMs &&
           m_offlineBlurTimeoutMs == b.m_offlineBlurTimeoutMs &&
           m_offlineIdleTimeoutMs == b.m_offlineIdleTimeoutMs &&
           m_onlineCloudTimeoutMs == b.m_onlineCloudTimeoutMs &&
           m_onlineUpdatePeriodMs == b.m_onlineUpdatePeriodMs &&
           m_pinnedDialogsCountMax == b.m_pinnedDialogsCountMax &&
           m_pushChatLimit == b.m_pushChatLimit &&
           m_pushChatPeriodMs == b.m_pushChatPeriodMs &&
           m_ratingEDecay == b.m_ratingEDecay &&
           m_savedGifsLimit == b.m_savedGifsLimit &&
           m_stickersRecentLimit == b.m_stickersRecentLimit &&
           m_suggestedLangCode == b.m_suggestedLangCode &&
           m_testMode == b.m_testMode &&
           m_thisDc == b.m_thisDc &&
           m_tmpSessions == b.m_tmpSessions;
}

Config &Config::operator =(const Config &b) {
    m_classType = b.m_classType;
    m_callConnectTimeoutMs = b.m_callConnectTimeoutMs;
    m_callPacketTimeoutMs = b.m_callPacketTimeoutMs;
    m_callReceiveTimeoutMs = b.m_callReceiveTimeoutMs;
    m_callRingTimeoutMs = b.m_callRingTimeoutMs;
    m_chatBigSize = b.m_chatBigSize;
    m_chatSizeMax = b.m_chatSizeMax;
    m_date = b.m_date;
    m_dcOptions = b.m_dcOptions;
    m_disabledFeatures = b.m_disabledFeatures;
    m_editTimeLimit = b.m_editTimeLimit;
    m_expires = b.m_expires;
    m_flags = b.m_flags;
    m_forwardedCountMax = b.m_forwardedCountMax;
    m_langPackVersion = b.m_langPackVersion;
    m_meUrlPrefix = b.m_meUrlPrefix;
    m_megagroupSizeMax = b.m_megagroupSizeMax;
    m_notifyCloudDelayMs = b.m_notifyCloudDelayMs;
    m_notifyDefaultDelayMs = b.m_notifyDefaultDelayMs;
    m_offlineBlurTimeoutMs = b.m_offlineBlurTimeoutMs;
    m_offlineIdleTimeoutMs = b.m_offlineIdleTimeoutMs;
    m_onlineCloudTimeoutMs = b.m_onlineCloudTimeoutMs;
    m_onlineUpdatePeriodMs = b.m_onlineUpdatePeriodMs;
    m_pinnedDialogsCountMax = b.m_pinnedDialogsCountMax;
    m_pushChatLimit = b.m_pushChatLimit;
    m_pushChatPeriodMs = b.m_pushChatPeriodMs;
    m_ratingEDecay = b.m_ratingEDecay;
    m_savedGifsLimit = b.m_savedGifsLimit;
    m_stickersRecentLimit = b.m_stickersRecentLimit;
    m_suggestedLangCode = b.m_suggestedLangCode;
    m_testMode = b.m_testMode;
    m_thisDc = b.m_thisDc;
    m_tmpSessions = b.m_tmpSessions;
    setNull(b.isNull());
    return *this;
}

void Config::setClassType(Config::ConfigClassType classType) {
    m_classType = classType;
}

Config::ConfigClassType Config::classType() const {
    return m_classType;
}

bool Config::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeConfig: {
        m_flags = in->fetchInt();
        m_date = in->fetchInt();
        m_expires = in->fetchInt();
        m_testMode = in->fetchBool();
        m_thisDc = in->fetchInt();
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_dcOptions_length = in->fetchInt();
        m_dcOptions.clear();
        for (qint32 i = 0; i < m_dcOptions_length; i++) {
            DcOption type;
            type.fetch(in);
            m_dcOptions.append(type);
        }
        m_chatSizeMax = in->fetchInt();
        m_megagroupSizeMax = in->fetchInt();
        m_forwardedCountMax = in->fetchInt();
        m_onlineUpdatePeriodMs = in->fetchInt();
        m_offlineBlurTimeoutMs = in->fetchInt();
        m_offlineIdleTimeoutMs = in->fetchInt();
        m_onlineCloudTimeoutMs = in->fetchInt();
        m_notifyCloudDelayMs = in->fetchInt();
        m_notifyDefaultDelayMs = in->fetchInt();
        m_chatBigSize = in->fetchInt();
        m_pushChatPeriodMs = in->fetchInt();
        m_pushChatLimit = in->fetchInt();
        m_savedGifsLimit = in->fetchInt();
        m_editTimeLimit = in->fetchInt();
        m_ratingEDecay = in->fetchInt();
        m_stickersRecentLimit = in->fetchInt();
        if(m_flags & 1<<0) {
            m_tmpSessions = in->fetchInt();
        }
        m_pinnedDialogsCountMax = in->fetchInt();
        m_callReceiveTimeoutMs = in->fetchInt();
        m_callRingTimeoutMs = in->fetchInt();
        m_callConnectTimeoutMs = in->fetchInt();
        m_callPacketTimeoutMs = in->fetchInt();
        m_meUrlPrefix = in->fetchQString();
        if(m_flags & 1<<2) {
            m_suggestedLangCode = in->fetchQString();
        }
        if(m_flags & 1<<2) {
            m_langPackVersion = in->fetchInt();
        }
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_disabledFeatures_length = in->fetchInt();
        m_disabledFeatures.clear();
        for (qint32 i = 0; i < m_disabledFeatures_length; i++) {
            DisabledFeature type;
            type.fetch(in);
            m_disabledFeatures.append(type);
        }
        m_classType = static_cast<ConfigClassType>(x);
        return true;
    }
        break;

    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool Config::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeConfig: {
        out->appendInt(m_flags);
        out->appendInt(m_date);
        out->appendInt(m_expires);
        out->appendBool(m_testMode);
        out->appendInt(m_thisDc);
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_dcOptions.count());
        for (qint32 i = 0; i < m_dcOptions.count(); i++) {
            m_dcOptions[i].push(out);
        }
        out->appendInt(m_chatSizeMax);
        out->appendInt(m_megagroupSizeMax);
        out->appendInt(m_forwardedCountMax);
        out->appendInt(m_onlineUpdatePeriodMs);
        out->appendInt(m_offlineBlurTimeoutMs);
        out->appendInt(m_offlineIdleTimeoutMs);
        out->appendInt(m_onlineCloudTimeoutMs);
        out->appendInt(m_notifyCloudDelayMs);
        out->appendInt(m_notifyDefaultDelayMs);
        out->appendInt(m_chatBigSize);
        out->appendInt(m_pushChatPeriodMs);
        out->appendInt(m_pushChatLimit);
        out->appendInt(m_savedGifsLimit);
        out->appendInt(m_editTimeLimit);
        out->appendInt(m_ratingEDecay);
        out->appendInt(m_stickersRecentLimit);
        if(m_flags & 1<<0) {
            out->appendInt(m_tmpSessions);
        }
        out->appendInt(m_pinnedDialogsCountMax);
        out->appendInt(m_callReceiveTimeoutMs);
        out->appendInt(m_callRingTimeoutMs);
        out->appendInt(m_callConnectTimeoutMs);
        out->appendInt(m_callPacketTimeoutMs);
        out->appendQString(m_meUrlPrefix);
        if(m_flags & 1<<2) {
            out->appendQString(m_suggestedLangCode);
        }
        if(m_flags & 1<<2) {
            out->appendInt(m_langPackVersion);
        }
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_disabledFeatures.count());
        for (qint32 i = 0; i < m_disabledFeatures.count(); i++) {
            m_disabledFeatures[i].push(out);
        }
        return true;
    }
        break;

    default:
        return false;
    }
}

QMap<QString, QVariant> Config::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeConfig: {
        result["classType"] = "Config::typeConfig";
        if( phonecallsEnabled() ) result["phonecallsEnabled"] = QString::number(phonecallsEnabled());
        if( date() ) result["date"] = QString::number(date());
        if( expires() ) result["expires"] = QString::number(expires());
        if( testMode() ) result["testMode"] = QString::number(testMode());
        if( thisDc() ) result["thisDc"] = QString::number(thisDc());
        QList<QVariant> _dcOptions;
        //for(const DcOption &m__type: m_dcOptions)
        for(int i = 0; i < m_dcOptions.size(); ++i) {
            const DcOption &m__type = m_dcOptions[i];
            if( !m__type.isNull() ) _dcOptions << m__type.toMap();
        }
        result["dcOptions"] = _dcOptions;
        if( chatSizeMax() ) result["chatSizeMax"] = QString::number(chatSizeMax());
        if( megagroupSizeMax() ) result["megagroupSizeMax"] = QString::number(megagroupSizeMax());
        if( forwardedCountMax() ) result["forwardedCountMax"] = QString::number(forwardedCountMax());
        if( onlineUpdatePeriodMs() ) result["onlineUpdatePeriodMs"] = QString::number(onlineUpdatePeriodMs());
        if( offlineBlurTimeoutMs() ) result["offlineBlurTimeoutMs"] = QString::number(offlineBlurTimeoutMs());
        if( offlineIdleTimeoutMs() ) result["offlineIdleTimeoutMs"] = QString::number(offlineIdleTimeoutMs());
        if( onlineCloudTimeoutMs() ) result["onlineCloudTimeoutMs"] = QString::number(onlineCloudTimeoutMs());
        if( notifyCloudDelayMs() ) result["notifyCloudDelayMs"] = QString::number(notifyCloudDelayMs());
        if( notifyDefaultDelayMs() ) result["notifyDefaultDelayMs"] = QString::number(notifyDefaultDelayMs());
        if( chatBigSize() ) result["chatBigSize"] = QString::number(chatBigSize());
        if( pushChatPeriodMs() ) result["pushChatPeriodMs"] = QString::number(pushChatPeriodMs());
        if( pushChatLimit() ) result["pushChatLimit"] = QString::number(pushChatLimit());
        if( savedGifsLimit() ) result["savedGifsLimit"] = QString::number(savedGifsLimit());
        if( editTimeLimit() ) result["editTimeLimit"] = QString::number(editTimeLimit());
        if( ratingEDecay() ) result["ratingEDecay"] = QString::number(ratingEDecay());
        if( stickersRecentLimit() ) result["stickersRecentLimit"] = QString::number(stickersRecentLimit());
        if( tmpSessions() ) result["tmpSessions"] = QString::number(tmpSessions());
        if( pinnedDialogsCountMax() ) result["pinnedDialogsCountMax"] = QString::number(pinnedDialogsCountMax());
        if( callReceiveTimeoutMs() ) result["callReceiveTimeoutMs"] = QString::number(callReceiveTimeoutMs());
        if( callRingTimeoutMs() ) result["callRingTimeoutMs"] = QString::number(callRingTimeoutMs());
        if( callConnectTimeoutMs() ) result["callConnectTimeoutMs"] = QString::number(callConnectTimeoutMs());
        if( callPacketTimeoutMs() ) result["callPacketTimeoutMs"] = QString::number(callPacketTimeoutMs());
        if( !m_meUrlPrefix.isEmpty() ) result["meUrlPrefix"] = QVariant::fromValue<QString>(m_meUrlPrefix);
        if( !m_suggestedLangCode.isEmpty() ) result["suggestedLangCode"] = QVariant::fromValue<QString>(m_suggestedLangCode);
        if( langPackVersion() ) result["langPackVersion"] = QString::number(langPackVersion());
        QList<QVariant> _disabledFeatures;
        //for(const DisabledFeature &m__type: m_disabledFeatures)
        for(int i = 0; i < m_disabledFeatures.size(); ++i) {
            const DisabledFeature &m__type = m_disabledFeatures[i];
            if( !m__type.isNull() ) _disabledFeatures << m__type.toMap();
        }
        result["disabledFeatures"] = _disabledFeatures;
        return result;
    }
        break;

    default:
        return result;
    }
}

Config Config::fromMap(const QMap<QString, QVariant> &map) {
    Config result;
    if(map.value("classType").toString() == "Config::typeConfig") {
        result.setClassType(typeConfig);
        QVariant _phonecallsEnabled_var = map.value("phonecallsEnabled");
        if( !_phonecallsEnabled_var.isNull() ) {
            _phonecallsEnabled_var.convert( QVariant::nameToType("bool") );
            result.setPhonecallsEnabled( _phonecallsEnabled_var.value<bool>() );
        }

        QVariant _date_var = map.value("date");
        if( !_date_var.isNull() ) {
            _date_var.convert( QVariant::nameToType("qint32") );
            result.setDate( _date_var.value<qint32>() );
        }

        QVariant _expires_var = map.value("expires");
        if( !_expires_var.isNull() ) {
            _expires_var.convert( QVariant::nameToType("qint32") );
            result.setExpires( _expires_var.value<qint32>() );
        }

        QVariant _testMode_var = map.value("testMode");
        if( !_testMode_var.isNull() ) {
            _testMode_var.convert( QVariant::nameToType("bool") );
            result.setTestMode( _testMode_var.value<bool>() );
        }

        QVariant _thisDc_var = map.value("thisDc");
        if( !_thisDc_var.isNull() ) {
            _thisDc_var.convert( QVariant::nameToType("qint32") );
            result.setThisDc( _thisDc_var.value<qint32>() );
        }

        QList<QVariant> map_dcOptions = map["dcOptions"].toList();
        QList<DcOption> _dcOptions;
        //for(const QVariant &var: map_dcOptions)
        for(int i = 0; i < map_dcOptions.size(); ++i) {
            const QVariant &var = map_dcOptions[i];
            _dcOptions << DcOption::fromMap(var.toMap());
        }
        result.setDcOptions(_dcOptions);
        QVariant _chatSizeMax_var = map.value("chatSizeMax");
        if( !_chatSizeMax_var.isNull() ) {
            _chatSizeMax_var.convert( QVariant::nameToType("qint32") );
            result.setChatSizeMax( _chatSizeMax_var.value<qint32>() );
        }

        QVariant _megagroupSizeMax_var = map.value("megagroupSizeMax");
        if( !_megagroupSizeMax_var.isNull() ) {
            _megagroupSizeMax_var.convert( QVariant::nameToType("qint32") );
            result.setMegagroupSizeMax( _megagroupSizeMax_var.value<qint32>() );
        }

        QVariant _forwardedCountMax_var = map.value("forwardedCountMax");
        if( !_forwardedCountMax_var.isNull() ) {
            _forwardedCountMax_var.convert( QVariant::nameToType("qint32") );
            result.setForwardedCountMax( _forwardedCountMax_var.value<qint32>() );
        }

        QVariant _onlineUpdatePeriodMs_var = map.value("onlineUpdatePeriodMs");
        if( !_onlineUpdatePeriodMs_var.isNull() ) {
            _onlineUpdatePeriodMs_var.convert( QVariant::nameToType("qint32") );
            result.setOnlineUpdatePeriodMs( _onlineUpdatePeriodMs_var.value<qint32>() );
        }

        QVariant _offlineBlurTimeoutMs_var = map.value("offlineBlurTimeoutMs");
        if( !_offlineBlurTimeoutMs_var.isNull() ) {
            _offlineBlurTimeoutMs_var.convert( QVariant::nameToType("qint32") );
            result.setOfflineBlurTimeoutMs( _offlineBlurTimeoutMs_var.value<qint32>() );
        }

        QVariant _offlineIdleTimeoutMs_var = map.value("offlineIdleTimeoutMs");
        if( !_offlineIdleTimeoutMs_var.isNull() ) {
            _offlineIdleTimeoutMs_var.convert( QVariant::nameToType("qint32") );
            result.setOfflineIdleTimeoutMs( _offlineIdleTimeoutMs_var.value<qint32>() );
        }

        QVariant _onlineCloudTimeoutMs_var = map.value("onlineCloudTimeoutMs");
        if( !_onlineCloudTimeoutMs_var.isNull() ) {
            _onlineCloudTimeoutMs_var.convert( QVariant::nameToType("qint32") );
            result.setOnlineCloudTimeoutMs( _onlineCloudTimeoutMs_var.value<qint32>() );
        }

        QVariant _notifyCloudDelayMs_var = map.value("notifyCloudDelayMs");
        if( !_notifyCloudDelayMs_var.isNull() ) {
            _notifyCloudDelayMs_var.convert( QVariant::nameToType("qint32") );
            result.setNotifyCloudDelayMs( _notifyCloudDelayMs_var.value<qint32>() );
        }

        QVariant _notifyDefaultDelayMs_var = map.value("notifyDefaultDelayMs");
        if( !_notifyDefaultDelayMs_var.isNull() ) {
            _notifyDefaultDelayMs_var.convert( QVariant::nameToType("qint32") );
            result.setNotifyDefaultDelayMs( _notifyDefaultDelayMs_var.value<qint32>() );
        }

        QVariant _chatBigSize_var = map.value("chatBigSize");
        if( !_chatBigSize_var.isNull() ) {
            _chatBigSize_var.convert( QVariant::nameToType("qint32") );
            result.setChatBigSize( _chatBigSize_var.value<qint32>() );
        }

        QVariant _pushChatPeriodMs_var = map.value("pushChatPeriodMs");
        if( !_pushChatPeriodMs_var.isNull() ) {
            _pushChatPeriodMs_var.convert( QVariant::nameToType("qint32") );
            result.setPushChatPeriodMs( _pushChatPeriodMs_var.value<qint32>() );
        }

        QVariant _pushChatLimit_var = map.value("pushChatLimit");
        if( !_pushChatLimit_var.isNull() ) {
            _pushChatLimit_var.convert( QVariant::nameToType("qint32") );
            result.setPushChatLimit( _pushChatLimit_var.value<qint32>() );
        }

        QVariant _savedGifsLimit_var = map.value("savedGifsLimit");
        if( !_savedGifsLimit_var.isNull() ) {
            _savedGifsLimit_var.convert( QVariant::nameToType("qint32") );
            result.setSavedGifsLimit( _savedGifsLimit_var.value<qint32>() );
        }

        QVariant _editTimeLimit_var = map.value("editTimeLimit");
        if( !_editTimeLimit_var.isNull() ) {
            _editTimeLimit_var.convert( QVariant::nameToType("qint32") );
            result.setEditTimeLimit( _editTimeLimit_var.value<qint32>() );
        }

        QVariant _ratingEDecay_var = map.value("ratingEDecay");
        if( !_ratingEDecay_var.isNull() ) {
            _ratingEDecay_var.convert( QVariant::nameToType("qint32") );
            result.setRatingEDecay( _ratingEDecay_var.value<qint32>() );
        }

        QVariant _stickersRecentLimit_var = map.value("stickersRecentLimit");
        if( !_stickersRecentLimit_var.isNull() ) {
            _stickersRecentLimit_var.convert( QVariant::nameToType("qint32") );
            result.setStickersRecentLimit( _stickersRecentLimit_var.value<qint32>() );
        }

        QVariant _tmpSessions_var = map.value("tmpSessions");
        if( !_tmpSessions_var.isNull() ) {
            _tmpSessions_var.convert( QVariant::nameToType("qint32") );
            result.setTmpSessions( _tmpSessions_var.value<qint32>() );
        }

        QVariant _pinnedDialogsCountMax_var = map.value("pinnedDialogsCountMax");
        if( !_pinnedDialogsCountMax_var.isNull() ) {
            _pinnedDialogsCountMax_var.convert( QVariant::nameToType("qint32") );
            result.setPinnedDialogsCountMax( _pinnedDialogsCountMax_var.value<qint32>() );
        }

        QVariant _callReceiveTimeoutMs_var = map.value("callReceiveTimeoutMs");
        if( !_callReceiveTimeoutMs_var.isNull() ) {
            _callReceiveTimeoutMs_var.convert( QVariant::nameToType("qint32") );
            result.setCallReceiveTimeoutMs( _callReceiveTimeoutMs_var.value<qint32>() );
        }

        QVariant _callRingTimeoutMs_var = map.value("callRingTimeoutMs");
        if( !_callRingTimeoutMs_var.isNull() ) {
            _callRingTimeoutMs_var.convert( QVariant::nameToType("qint32") );
            result.setCallRingTimeoutMs( _callRingTimeoutMs_var.value<qint32>() );
        }

        QVariant _callConnectTimeoutMs_var = map.value("callConnectTimeoutMs");
        if( !_callConnectTimeoutMs_var.isNull() ) {
            _callConnectTimeoutMs_var.convert( QVariant::nameToType("qint32") );
            result.setCallConnectTimeoutMs( _callConnectTimeoutMs_var.value<qint32>() );
        }

        QVariant _callPacketTimeoutMs_var = map.value("callPacketTimeoutMs");
        if( !_callPacketTimeoutMs_var.isNull() ) {
            _callPacketTimeoutMs_var.convert( QVariant::nameToType("qint32") );
            result.setCallPacketTimeoutMs( _callPacketTimeoutMs_var.value<qint32>() );
        }

        QVariant _meUrlPrefix_var = map.value("meUrlPrefix");
        if( !_meUrlPrefix_var.isNull() ) {
            _meUrlPrefix_var.convert( QVariant::nameToType("QString") );
            result.setMeUrlPrefix( _meUrlPrefix_var.value<QString>() );
        }

        QVariant _suggestedLangCode_var = map.value("suggestedLangCode");
        if( !_suggestedLangCode_var.isNull() ) {
            _suggestedLangCode_var.convert( QVariant::nameToType("QString") );
            result.setSuggestedLangCode( _suggestedLangCode_var.value<QString>() );
        }

        QVariant _langPackVersion_var = map.value("langPackVersion");
        if( !_langPackVersion_var.isNull() ) {
            _langPackVersion_var.convert( QVariant::nameToType("qint32") );
            result.setLangPackVersion( _langPackVersion_var.value<qint32>() );
        }

        QList<QVariant> map_disabledFeatures = map["disabledFeatures"].toList();
        QList<DisabledFeature> _disabledFeatures;
        //for(const QVariant &var: map_disabledFeatures)
        for(int i = 0; i < map_disabledFeatures.size(); ++i) {
            const QVariant &var = map_disabledFeatures[i];
            _disabledFeatures << DisabledFeature::fromMap(var.toMap());
        }
        result.setDisabledFeatures(_disabledFeatures);
        return result;
    }
    return result;
}

Config Config::fromJson(const QString &json) {
    return Config::fromMap(QJsonDocument::fromJson(json.toUtf8()).toVariant().toMap());
}

QByteArray Config::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const Config &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case Config::typeConfig:
        stream << item.flags();
        stream << item.date();
        stream << item.expires();
        stream << item.testMode();
        stream << item.thisDc();
        stream << item.dcOptions();
        stream << item.chatSizeMax();
        stream << item.megagroupSizeMax();
        stream << item.forwardedCountMax();
        stream << item.onlineUpdatePeriodMs();
        stream << item.offlineBlurTimeoutMs();
        stream << item.offlineIdleTimeoutMs();
        stream << item.onlineCloudTimeoutMs();
        stream << item.notifyCloudDelayMs();
        stream << item.notifyDefaultDelayMs();
        stream << item.chatBigSize();
        stream << item.pushChatPeriodMs();
        stream << item.pushChatLimit();
        stream << item.savedGifsLimit();
        stream << item.editTimeLimit();
        stream << item.ratingEDecay();
        stream << item.stickersRecentLimit();
        stream << item.tmpSessions();
        stream << item.pinnedDialogsCountMax();
        stream << item.callReceiveTimeoutMs();
        stream << item.callRingTimeoutMs();
        stream << item.callConnectTimeoutMs();
        stream << item.callPacketTimeoutMs();
        stream << item.meUrlPrefix();
        stream << item.suggestedLangCode();
        stream << item.langPackVersion();
        stream << item.disabledFeatures();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, Config &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<Config::ConfigClassType>(type));
    switch(type) {
    case Config::typeConfig: {
        qint32 m_flags;
        stream >> m_flags;
        item.setFlags(m_flags);
        qint32 m_date;
        stream >> m_date;
        item.setDate(m_date);
        qint32 m_expires;
        stream >> m_expires;
        item.setExpires(m_expires);
        bool m_test_mode;
        stream >> m_test_mode;
        item.setTestMode(m_test_mode);
        qint32 m_this_dc;
        stream >> m_this_dc;
        item.setThisDc(m_this_dc);
        QList<DcOption> m_dc_options;
        stream >> m_dc_options;
        item.setDcOptions(m_dc_options);
        qint32 m_chat_size_max;
        stream >> m_chat_size_max;
        item.setChatSizeMax(m_chat_size_max);
        qint32 m_megagroup_size_max;
        stream >> m_megagroup_size_max;
        item.setMegagroupSizeMax(m_megagroup_size_max);
        qint32 m_forwarded_count_max;
        stream >> m_forwarded_count_max;
        item.setForwardedCountMax(m_forwarded_count_max);
        qint32 m_online_update_period_ms;
        stream >> m_online_update_period_ms;
        item.setOnlineUpdatePeriodMs(m_online_update_period_ms);
        qint32 m_offline_blur_timeout_ms;
        stream >> m_offline_blur_timeout_ms;
        item.setOfflineBlurTimeoutMs(m_offline_blur_timeout_ms);
        qint32 m_offline_idle_timeout_ms;
        stream >> m_offline_idle_timeout_ms;
        item.setOfflineIdleTimeoutMs(m_offline_idle_timeout_ms);
        qint32 m_online_cloud_timeout_ms;
        stream >> m_online_cloud_timeout_ms;
        item.setOnlineCloudTimeoutMs(m_online_cloud_timeout_ms);
        qint32 m_notify_cloud_delay_ms;
        stream >> m_notify_cloud_delay_ms;
        item.setNotifyCloudDelayMs(m_notify_cloud_delay_ms);
        qint32 m_notify_default_delay_ms;
        stream >> m_notify_default_delay_ms;
        item.setNotifyDefaultDelayMs(m_notify_default_delay_ms);
        qint32 m_chat_big_size;
        stream >> m_chat_big_size;
        item.setChatBigSize(m_chat_big_size);
        qint32 m_push_chat_period_ms;
        stream >> m_push_chat_period_ms;
        item.setPushChatPeriodMs(m_push_chat_period_ms);
        qint32 m_push_chat_limit;
        stream >> m_push_chat_limit;
        item.setPushChatLimit(m_push_chat_limit);
        qint32 m_saved_gifs_limit;
        stream >> m_saved_gifs_limit;
        item.setSavedGifsLimit(m_saved_gifs_limit);
        qint32 m_edit_time_limit;
        stream >> m_edit_time_limit;
        item.setEditTimeLimit(m_edit_time_limit);
        qint32 m_rating_e_decay;
        stream >> m_rating_e_decay;
        item.setRatingEDecay(m_rating_e_decay);
        qint32 m_stickers_recent_limit;
        stream >> m_stickers_recent_limit;
        item.setStickersRecentLimit(m_stickers_recent_limit);
        qint32 m_tmp_sessions;
        stream >> m_tmp_sessions;
        item.setTmpSessions(m_tmp_sessions);
        qint32 m_pinned_dialogs_count_max;
        stream >> m_pinned_dialogs_count_max;
        item.setPinnedDialogsCountMax(m_pinned_dialogs_count_max);
        qint32 m_call_receive_timeout_ms;
        stream >> m_call_receive_timeout_ms;
        item.setCallReceiveTimeoutMs(m_call_receive_timeout_ms);
        qint32 m_call_ring_timeout_ms;
        stream >> m_call_ring_timeout_ms;
        item.setCallRingTimeoutMs(m_call_ring_timeout_ms);
        qint32 m_call_connect_timeout_ms;
        stream >> m_call_connect_timeout_ms;
        item.setCallConnectTimeoutMs(m_call_connect_timeout_ms);
        qint32 m_call_packet_timeout_ms;
        stream >> m_call_packet_timeout_ms;
        item.setCallPacketTimeoutMs(m_call_packet_timeout_ms);
        QString m_me_url_prefix;
        stream >> m_me_url_prefix;
        item.setMeUrlPrefix(m_me_url_prefix);
        QString m_suggested_lang_code;
        stream >> m_suggested_lang_code;
        item.setSuggestedLangCode(m_suggested_lang_code);
        qint32 m_lang_pack_version;
        stream >> m_lang_pack_version;
        item.setLangPackVersion(m_lang_pack_version);
        QList<DisabledFeature> m_disabled_features;
        stream >> m_disabled_features;
        item.setDisabledFeatures(m_disabled_features);
    }
        break;
    }
    return stream;
}

/*QDebug operator<<(QDebug debug,  const Config &item) {
    QDebugStateSaver saver(debug);
    Q_UNUSED(saver)
    debug.nospace() << "Telegram.Config(";
    switch(item.classType()) {
    case Config::typeConfig:
        debug.nospace() << "classType: typeConfig";
        debug.nospace() << ", flags: " << item.flags();
        debug.nospace() << ", date: " << item.date();
        debug.nospace() << ", expires: " << item.expires();
        debug.nospace() << ", testMode: " << item.testMode();
        debug.nospace() << ", thisDc: " << item.thisDc();
        debug.nospace() << ", dcOptions: " << item.dcOptions();
        debug.nospace() << ", chatSizeMax: " << item.chatSizeMax();
        debug.nospace() << ", megagroupSizeMax: " << item.megagroupSizeMax();
        debug.nospace() << ", forwardedCountMax: " << item.forwardedCountMax();
        debug.nospace() << ", onlineUpdatePeriodMs: " << item.onlineUpdatePeriodMs();
        debug.nospace() << ", offlineBlurTimeoutMs: " << item.offlineBlurTimeoutMs();
        debug.nospace() << ", offlineIdleTimeoutMs: " << item.offlineIdleTimeoutMs();
        debug.nospace() << ", onlineCloudTimeoutMs: " << item.onlineCloudTimeoutMs();
        debug.nospace() << ", notifyCloudDelayMs: " << item.notifyCloudDelayMs();
        debug.nospace() << ", notifyDefaultDelayMs: " << item.notifyDefaultDelayMs();
        debug.nospace() << ", chatBigSize: " << item.chatBigSize();
        debug.nospace() << ", pushChatPeriodMs: " << item.pushChatPeriodMs();
        debug.nospace() << ", pushChatLimit: " << item.pushChatLimit();
        debug.nospace() << ", savedGifsLimit: " << item.savedGifsLimit();
        debug.nospace() << ", editTimeLimit: " << item.editTimeLimit();
        debug.nospace() << ", ratingEDecay: " << item.ratingEDecay();
        debug.nospace() << ", stickersRecentLimit: " << item.stickersRecentLimit();
        debug.nospace() << ", tmpSessions: " << item.tmpSessions();
        debug.nospace() << ", pinnedDialogsCountMax: " << item.pinnedDialogsCountMax();
        debug.nospace() << ", callReceiveTimeoutMs: " << item.callReceiveTimeoutMs();
        debug.nospace() << ", callRingTimeoutMs: " << item.callRingTimeoutMs();
        debug.nospace() << ", callConnectTimeoutMs: " << item.callConnectTimeoutMs();
        debug.nospace() << ", callPacketTimeoutMs: " << item.callPacketTimeoutMs();
        debug.nospace() << ", meUrlPrefix: " << item.meUrlPrefix();
        debug.nospace() << ", suggestedLangCode: " << item.suggestedLangCode();
        debug.nospace() << ", langPackVersion: " << item.langPackVersion();
        debug.nospace() << ", disabledFeatures: " << item.disabledFeatures();
        break;
    }
    debug.nospace() << ")";
    return debug;
}
*/
