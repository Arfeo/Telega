// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "decryptedmessagemedia.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

DecryptedMessageMedia::DecryptedMessageMedia(DecryptedMessageMediaClassType classType, InboundPkt *in) :
    m_accessHash(0),
    m_date(0),
    m_dcId(0),
    m_duration(0),
    m_h(0),
    m_id(0),
    m_lat(0),
    m_longValue(0),
    m_size(0),
    m_thumbH(0),
    m_thumbW(0),
    m_userId(0),
    m_w(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

DecryptedMessageMedia::DecryptedMessageMedia(InboundPkt *in) :
    m_accessHash(0),
    m_date(0),
    m_dcId(0),
    m_duration(0),
    m_h(0),
    m_id(0),
    m_lat(0),
    m_longValue(0),
    m_size(0),
    m_thumbH(0),
    m_thumbW(0),
    m_userId(0),
    m_w(0),
    m_classType(typeDecryptedMessageMediaEmptySecret8)
{
    fetch(in);
}

DecryptedMessageMedia::DecryptedMessageMedia(const DecryptedMessageMedia &another) :
    TelegramTypeObject(),
    m_accessHash(0),
    m_date(0),
    m_dcId(0),
    m_duration(0),
    m_h(0),
    m_id(0),
    m_lat(0),
    m_longValue(0),
    m_size(0),
    m_thumbH(0),
    m_thumbW(0),
    m_userId(0),
    m_w(0),
    m_classType(typeDecryptedMessageMediaEmptySecret8)
{
    operator=(another);
}

DecryptedMessageMedia::DecryptedMessageMedia(const Null &null) :
    TelegramTypeObject(null),
    m_accessHash(0),
    m_date(0),
    m_dcId(0),
    m_duration(0),
    m_h(0),
    m_id(0),
    m_lat(0),
    m_longValue(0),
    m_size(0),
    m_thumbH(0),
    m_thumbW(0),
    m_userId(0),
    m_w(0),
    m_classType(typeDecryptedMessageMediaEmptySecret8)
{
}

DecryptedMessageMedia::~DecryptedMessageMedia() {

}

void DecryptedMessageMedia::setAccessHash(qint64 accessHash) {
    m_accessHash = accessHash;
}

qint64 DecryptedMessageMedia::accessHash() const {
    return m_accessHash;
}

void DecryptedMessageMedia::setAttributes(const QList<DocumentAttribute> &attributes) {
    m_attributes = attributes;
}

QList<DocumentAttribute> DecryptedMessageMedia::attributes() const {
    return m_attributes;
}

void DecryptedMessageMedia::setDate(qint32 date) {
    m_date = date;
}

qint32 DecryptedMessageMedia::date() const {
    return m_date;
}

void DecryptedMessageMedia::setDcId(qint32 dcId) {
    m_dcId = dcId;
}

qint32 DecryptedMessageMedia::dcId() const {
    return m_dcId;
}

void DecryptedMessageMedia::setDuration(qint32 duration) {
    m_duration = duration;
}

qint32 DecryptedMessageMedia::duration() const {
    return m_duration;
}

void DecryptedMessageMedia::setFileName(const QString &fileName) {
    m_fileName = fileName;
}

QString DecryptedMessageMedia::fileName() const {
    return m_fileName;
}

void DecryptedMessageMedia::setFirstName(const QString &firstName) {
    m_firstName = firstName;
}

QString DecryptedMessageMedia::firstName() const {
    return m_firstName;
}

void DecryptedMessageMedia::setH(qint32 h) {
    m_h = h;
}

qint32 DecryptedMessageMedia::h() const {
    return m_h;
}

void DecryptedMessageMedia::setId(qint64 id) {
    m_id = id;
}

qint64 DecryptedMessageMedia::id() const {
    return m_id;
}

void DecryptedMessageMedia::setIv(const QByteArray &iv) {
    m_iv = iv;
}

QByteArray DecryptedMessageMedia::iv() const {
    return m_iv;
}

void DecryptedMessageMedia::setKey(const QByteArray &key) {
    m_key = key;
}

QByteArray DecryptedMessageMedia::key() const {
    return m_key;
}

void DecryptedMessageMedia::setLastName(const QString &lastName) {
    m_lastName = lastName;
}

QString DecryptedMessageMedia::lastName() const {
    return m_lastName;
}

void DecryptedMessageMedia::setLat(qreal lat) {
    m_lat = lat;
}

qreal DecryptedMessageMedia::lat() const {
    return m_lat;
}

void DecryptedMessageMedia::setLongValue(qreal longValue) {
    m_longValue = longValue;
}

qreal DecryptedMessageMedia::longValue() const {
    return m_longValue;
}

void DecryptedMessageMedia::setMimeType(const QString &mimeType) {
    m_mimeType = mimeType;
}

QString DecryptedMessageMedia::mimeType() const {
    return m_mimeType;
}

void DecryptedMessageMedia::setPhoneNumber(const QString &phoneNumber) {
    m_phoneNumber = phoneNumber;
}

QString DecryptedMessageMedia::phoneNumber() const {
    return m_phoneNumber;
}

void DecryptedMessageMedia::setSize(qint32 size) {
    m_size = size;
}

qint32 DecryptedMessageMedia::size() const {
    return m_size;
}

void DecryptedMessageMedia::setThumbPhotoSize(const PhotoSize &thumbPhotoSize) {
    m_thumbPhotoSize = thumbPhotoSize;
}

PhotoSize DecryptedMessageMedia::thumbPhotoSize() const {
    return m_thumbPhotoSize;
}

void DecryptedMessageMedia::setThumbBytes(const QByteArray &thumbBytes) {
    m_thumbBytes = thumbBytes;
}

QByteArray DecryptedMessageMedia::thumbBytes() const {
    return m_thumbBytes;
}

void DecryptedMessageMedia::setThumbH(qint32 thumbH) {
    m_thumbH = thumbH;
}

qint32 DecryptedMessageMedia::thumbH() const {
    return m_thumbH;
}

void DecryptedMessageMedia::setThumbW(qint32 thumbW) {
    m_thumbW = thumbW;
}

qint32 DecryptedMessageMedia::thumbW() const {
    return m_thumbW;
}

void DecryptedMessageMedia::setUserId(qint32 userId) {
    m_userId = userId;
}

qint32 DecryptedMessageMedia::userId() const {
    return m_userId;
}

void DecryptedMessageMedia::setW(qint32 w) {
    m_w = w;
}

qint32 DecryptedMessageMedia::w() const {
    return m_w;
}

bool DecryptedMessageMedia::operator ==(const DecryptedMessageMedia &b) const {
    return m_classType == b.m_classType &&
           m_accessHash == b.m_accessHash &&
           m_attributes == b.m_attributes &&
           m_date == b.m_date &&
           m_dcId == b.m_dcId &&
           m_duration == b.m_duration &&
           m_fileName == b.m_fileName &&
           m_firstName == b.m_firstName &&
           m_h == b.m_h &&
           m_id == b.m_id &&
           m_iv == b.m_iv &&
           m_key == b.m_key &&
           m_lastName == b.m_lastName &&
           m_lat == b.m_lat &&
           m_longValue == b.m_longValue &&
           m_mimeType == b.m_mimeType &&
           m_phoneNumber == b.m_phoneNumber &&
           m_size == b.m_size &&
           m_thumbPhotoSize == b.m_thumbPhotoSize &&
           m_thumbBytes == b.m_thumbBytes &&
           m_thumbH == b.m_thumbH &&
           m_thumbW == b.m_thumbW &&
           m_userId == b.m_userId &&
           m_w == b.m_w;
}

DecryptedMessageMedia &DecryptedMessageMedia::operator =(const DecryptedMessageMedia &b) {
    m_classType = b.m_classType;
    m_accessHash = b.m_accessHash;
    m_attributes = b.m_attributes;
    m_date = b.m_date;
    m_dcId = b.m_dcId;
    m_duration = b.m_duration;
    m_fileName = b.m_fileName;
    m_firstName = b.m_firstName;
    m_h = b.m_h;
    m_id = b.m_id;
    m_iv = b.m_iv;
    m_key = b.m_key;
    m_lastName = b.m_lastName;
    m_lat = b.m_lat;
    m_longValue = b.m_longValue;
    m_mimeType = b.m_mimeType;
    m_phoneNumber = b.m_phoneNumber;
    m_size = b.m_size;
    m_thumbPhotoSize = b.m_thumbPhotoSize;
    m_thumbBytes = b.m_thumbBytes;
    m_thumbH = b.m_thumbH;
    m_thumbW = b.m_thumbW;
    m_userId = b.m_userId;
    m_w = b.m_w;
    setNull(b.isNull());
    return *this;
}

void DecryptedMessageMedia::setClassType(DecryptedMessageMedia::DecryptedMessageMediaClassType classType) {
    m_classType = classType;
}

DecryptedMessageMedia::DecryptedMessageMediaClassType DecryptedMessageMedia::classType() const {
    return m_classType;
}

bool DecryptedMessageMedia::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeDecryptedMessageMediaEmptySecret8: {
        m_classType = static_cast<DecryptedMessageMediaClassType>(x);
        return true;
    }
        break;

    case typeDecryptedMessageMediaPhotoSecret8: {
        m_thumbBytes = in->fetchBytes();
        m_thumbW = in->fetchInt();
        m_thumbH = in->fetchInt();
        m_w = in->fetchInt();
        m_h = in->fetchInt();
        m_size = in->fetchInt();
        m_key = in->fetchBytes();
        m_iv = in->fetchBytes();
        m_classType = static_cast<DecryptedMessageMediaClassType>(x);
        return true;
    }
        break;

    case typeDecryptedMessageMediaVideoSecret8: {
        m_thumbBytes = in->fetchBytes();
        m_thumbW = in->fetchInt();
        m_thumbH = in->fetchInt();
        m_duration = in->fetchInt();
        m_w = in->fetchInt();
        m_h = in->fetchInt();
        m_size = in->fetchInt();
        m_key = in->fetchBytes();
        m_iv = in->fetchBytes();
        m_classType = static_cast<DecryptedMessageMediaClassType>(x);
        return true;
    }
        break;

    case typeDecryptedMessageMediaGeoPointSecret8: {
        m_lat = in->fetchDouble();
        m_longValue = in->fetchDouble();
        m_classType = static_cast<DecryptedMessageMediaClassType>(x);
        return true;
    }
        break;

    case typeDecryptedMessageMediaContactSecret8: {
        m_phoneNumber = in->fetchQString();
        m_firstName = in->fetchQString();
        m_lastName = in->fetchQString();
        m_userId = in->fetchInt();
        m_classType = static_cast<DecryptedMessageMediaClassType>(x);
        return true;
    }
        break;

    case typeDecryptedMessageMediaDocumentSecret8: {
        m_thumbBytes = in->fetchBytes();
        m_thumbW = in->fetchInt();
        m_thumbH = in->fetchInt();
        m_fileName = in->fetchQString();
        m_mimeType = in->fetchQString();
        m_size = in->fetchInt();
        m_key = in->fetchBytes();
        m_iv = in->fetchBytes();
        m_classType = static_cast<DecryptedMessageMediaClassType>(x);
        return true;
    }
        break;

    case typeDecryptedMessageMediaAudioSecret8: {
        m_duration = in->fetchInt();
        m_size = in->fetchInt();
        m_key = in->fetchBytes();
        m_iv = in->fetchBytes();
        m_classType = static_cast<DecryptedMessageMediaClassType>(x);
        return true;
    }
        break;

    case typeDecryptedMessageMediaVideoSecret17: {
        m_thumbBytes = in->fetchBytes();
        m_thumbW = in->fetchInt();
        m_thumbH = in->fetchInt();
        m_duration = in->fetchInt();
        m_mimeType = in->fetchQString();
        m_w = in->fetchInt();
        m_h = in->fetchInt();
        m_size = in->fetchInt();
        m_key = in->fetchBytes();
        m_iv = in->fetchBytes();
        m_classType = static_cast<DecryptedMessageMediaClassType>(x);
        return true;
    }
        break;

    case typeDecryptedMessageMediaAudioSecret17: {
        m_duration = in->fetchInt();
        m_mimeType = in->fetchQString();
        m_size = in->fetchInt();
        m_key = in->fetchBytes();
        m_iv = in->fetchBytes();
        m_classType = static_cast<DecryptedMessageMediaClassType>(x);
        return true;
    }
        break;

    case typeDecryptedMessageMediaExternalDocumentSecret23: {
        m_id = in->fetchLong();
        m_accessHash = in->fetchLong();
        m_date = in->fetchInt();
        m_mimeType = in->fetchQString();
        m_size = in->fetchInt();
        m_thumbPhotoSize.fetch(in);
        m_dcId = in->fetchInt();
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_attributes_length = in->fetchInt();
        m_attributes.clear();
        for (qint32 i = 0; i < m_attributes_length; i++) {
            DocumentAttribute type;
            type.fetch(in);
            m_attributes.append(type);
        }
        m_classType = static_cast<DecryptedMessageMediaClassType>(x);
        return true;
    }
        break;

    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool DecryptedMessageMedia::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeDecryptedMessageMediaEmptySecret8: {
        return true;
    }
        break;

    case typeDecryptedMessageMediaPhotoSecret8: {
        out->appendBytes(m_thumbBytes);
        out->appendInt(m_thumbW);
        out->appendInt(m_thumbH);
        out->appendInt(m_w);
        out->appendInt(m_h);
        out->appendInt(m_size);
        out->appendBytes(m_key);
        out->appendBytes(m_iv);
        return true;
    }
        break;

    case typeDecryptedMessageMediaVideoSecret8: {
        out->appendBytes(m_thumbBytes);
        out->appendInt(m_thumbW);
        out->appendInt(m_thumbH);
        out->appendInt(m_duration);
        out->appendInt(m_w);
        out->appendInt(m_h);
        out->appendInt(m_size);
        out->appendBytes(m_key);
        out->appendBytes(m_iv);
        return true;
    }
        break;

    case typeDecryptedMessageMediaGeoPointSecret8: {
        out->appendDouble(m_lat);
        out->appendDouble(m_longValue);
        return true;
    }
        break;

    case typeDecryptedMessageMediaContactSecret8: {
        out->appendQString(m_phoneNumber);
        out->appendQString(m_firstName);
        out->appendQString(m_lastName);
        out->appendInt(m_userId);
        return true;
    }
        break;

    case typeDecryptedMessageMediaDocumentSecret8: {
        out->appendBytes(m_thumbBytes);
        out->appendInt(m_thumbW);
        out->appendInt(m_thumbH);
        out->appendQString(m_fileName);
        out->appendQString(m_mimeType);
        out->appendInt(m_size);
        out->appendBytes(m_key);
        out->appendBytes(m_iv);
        return true;
    }
        break;

    case typeDecryptedMessageMediaAudioSecret8: {
        out->appendInt(m_duration);
        out->appendInt(m_size);
        out->appendBytes(m_key);
        out->appendBytes(m_iv);
        return true;
    }
        break;

    case typeDecryptedMessageMediaVideoSecret17: {
        out->appendBytes(m_thumbBytes);
        out->appendInt(m_thumbW);
        out->appendInt(m_thumbH);
        out->appendInt(m_duration);
        out->appendQString(m_mimeType);
        out->appendInt(m_w);
        out->appendInt(m_h);
        out->appendInt(m_size);
        out->appendBytes(m_key);
        out->appendBytes(m_iv);
        return true;
    }
        break;

    case typeDecryptedMessageMediaAudioSecret17: {
        out->appendInt(m_duration);
        out->appendQString(m_mimeType);
        out->appendInt(m_size);
        out->appendBytes(m_key);
        out->appendBytes(m_iv);
        return true;
    }
        break;

    case typeDecryptedMessageMediaExternalDocumentSecret23: {
        out->appendLong(m_id);
        out->appendLong(m_accessHash);
        out->appendInt(m_date);
        out->appendQString(m_mimeType);
        out->appendInt(m_size);
        m_thumbPhotoSize.push(out);
        out->appendInt(m_dcId);
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_attributes.count());
        for (qint32 i = 0; i < m_attributes.count(); i++) {
            m_attributes[i].push(out);
        }
        return true;
    }
        break;

    default:
        return false;
    }
}

QMap<QString, QVariant> DecryptedMessageMedia::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeDecryptedMessageMediaEmptySecret8: {
        result["classType"] = "DecryptedMessageMedia::typeDecryptedMessageMediaEmptySecret8";
        return result;
    }
        break;

    case typeDecryptedMessageMediaPhotoSecret8: {
        result["classType"] = "DecryptedMessageMedia::typeDecryptedMessageMediaPhotoSecret8";
        if( !m_thumbBytes.isEmpty() ) result["thumbBytes"] = QVariant::fromValue<QByteArray>(m_thumbBytes);
        if( thumbW() ) result["thumbW"] = QString::number(thumbW());
        if( thumbH() ) result["thumbH"] = QString::number(thumbH());
        if( w() ) result["w"] = QString::number(w());
        if( h() ) result["h"] = QString::number(h());
        if( size() ) result["size"] = QString::number(size());
        if( !m_key.isEmpty() ) result["key"] = QVariant::fromValue<QByteArray>(m_key);
        if( !m_iv.isEmpty() ) result["iv"] = QVariant::fromValue<QByteArray>(m_iv);
        return result;
    }
        break;

    case typeDecryptedMessageMediaVideoSecret8: {
        result["classType"] = "DecryptedMessageMedia::typeDecryptedMessageMediaVideoSecret8";
        if( !m_thumbBytes.isEmpty() ) result["thumbBytes"] = QVariant::fromValue<QByteArray>(m_thumbBytes);
        if( thumbW() ) result["thumbW"] = QString::number(thumbW());
        if( thumbH() ) result["thumbH"] = QString::number(thumbH());
        if( duration() ) result["duration"] = QString::number(duration());
        if( w() ) result["w"] = QString::number(w());
        if( h() ) result["h"] = QString::number(h());
        if( size() ) result["size"] = QString::number(size());
        if( !m_key.isEmpty() ) result["key"] = QVariant::fromValue<QByteArray>(m_key);
        if( !m_iv.isEmpty() ) result["iv"] = QVariant::fromValue<QByteArray>(m_iv);
        return result;
    }
        break;

    case typeDecryptedMessageMediaGeoPointSecret8: {
        result["classType"] = "DecryptedMessageMedia::typeDecryptedMessageMediaGeoPointSecret8";
        if( lat() ) result["lat"] = QString::number(lat());
        if( longValue() ) result["longValue"] = QString::number(longValue());
        return result;
    }
        break;

    case typeDecryptedMessageMediaContactSecret8: {
        result["classType"] = "DecryptedMessageMedia::typeDecryptedMessageMediaContactSecret8";
        if( !m_phoneNumber.isEmpty() ) result["phoneNumber"] = QVariant::fromValue<QString>(m_phoneNumber);
        if( !m_firstName.isEmpty() ) result["firstName"] = QVariant::fromValue<QString>(m_firstName);
        if( !m_lastName.isEmpty() ) result["lastName"] = QVariant::fromValue<QString>(m_lastName);
        if( userId() ) result["userId"] = QString::number(userId());
        return result;
    }
        break;

    case typeDecryptedMessageMediaDocumentSecret8: {
        result["classType"] = "DecryptedMessageMedia::typeDecryptedMessageMediaDocumentSecret8";
        if( !m_thumbBytes.isEmpty() ) result["thumbBytes"] = QVariant::fromValue<QByteArray>(m_thumbBytes);
        if( thumbW() ) result["thumbW"] = QString::number(thumbW());
        if( thumbH() ) result["thumbH"] = QString::number(thumbH());
        if( !m_fileName.isEmpty() ) result["fileName"] = QVariant::fromValue<QString>(m_fileName);
        if( !m_mimeType.isEmpty() ) result["mimeType"] = QVariant::fromValue<QString>(m_mimeType);
        if( size() ) result["size"] = QString::number(size());
        if( !m_key.isEmpty() ) result["key"] = QVariant::fromValue<QByteArray>(m_key);
        if( !m_iv.isEmpty() ) result["iv"] = QVariant::fromValue<QByteArray>(m_iv);
        return result;
    }
        break;

    case typeDecryptedMessageMediaAudioSecret8: {
        result["classType"] = "DecryptedMessageMedia::typeDecryptedMessageMediaAudioSecret8";
        if( duration() ) result["duration"] = QString::number(duration());
        if( size() ) result["size"] = QString::number(size());
        if( !m_key.isEmpty() ) result["key"] = QVariant::fromValue<QByteArray>(m_key);
        if( !m_iv.isEmpty() ) result["iv"] = QVariant::fromValue<QByteArray>(m_iv);
        return result;
    }
        break;

    case typeDecryptedMessageMediaVideoSecret17: {
        result["classType"] = "DecryptedMessageMedia::typeDecryptedMessageMediaVideoSecret17";
        if( !m_thumbBytes.isEmpty() ) result["thumbBytes"] = QVariant::fromValue<QByteArray>(m_thumbBytes);
        if( thumbW() ) result["thumbW"] = QString::number(thumbW());
        if( thumbH() ) result["thumbH"] = QString::number(thumbH());
        if( duration() ) result["duration"] = QString::number(duration());
        if( !m_mimeType.isEmpty() ) result["mimeType"] = QVariant::fromValue<QString>(m_mimeType);
        if( w() ) result["w"] = QString::number(w());
        if( h() ) result["h"] = QString::number(h());
        if( size() ) result["size"] = QString::number(size());
        if( !m_key.isEmpty() ) result["key"] = QVariant::fromValue<QByteArray>(m_key);
        if( !m_iv.isEmpty() ) result["iv"] = QVariant::fromValue<QByteArray>(m_iv);
        return result;
    }
        break;

    case typeDecryptedMessageMediaAudioSecret17: {
        result["classType"] = "DecryptedMessageMedia::typeDecryptedMessageMediaAudioSecret17";
        if( duration() ) result["duration"] = QString::number(duration());
        if( !m_mimeType.isEmpty() ) result["mimeType"] = QVariant::fromValue<QString>(m_mimeType);
        if( size() ) result["size"] = QString::number(size());
        if( !m_key.isEmpty() ) result["key"] = QVariant::fromValue<QByteArray>(m_key);
        if( !m_iv.isEmpty() ) result["iv"] = QVariant::fromValue<QByteArray>(m_iv);
        return result;
    }
        break;

    case typeDecryptedMessageMediaExternalDocumentSecret23: {
        result["classType"] = "DecryptedMessageMedia::typeDecryptedMessageMediaExternalDocumentSecret23";
        if( id() ) result["id"] = QString::number(id());
        if( accessHash() ) result["accessHash"] = QString::number(accessHash());
        if( date() ) result["date"] = QString::number(date());
        if( !m_mimeType.isEmpty() ) result["mimeType"] = QVariant::fromValue<QString>(m_mimeType);
        if( size() ) result["size"] = QString::number(size());
        if( !m_thumbPhotoSize.isNull() ) result["thumbPhotoSize"] = m_thumbPhotoSize.toMap();
        if( dcId() ) result["dcId"] = QString::number(dcId());
        QList<QVariant> _attributes;
        //for(const DocumentAttribute &m__type: m_attributes)
        for(int i = 0; i < m_attributes.size(); ++i) {
            const DocumentAttribute &m__type = m_attributes[i];
            if( !m__type.isNull() ) _attributes << m__type.toMap();
        }
        result["attributes"] = _attributes;
        return result;
    }
        break;

    default:
        return result;
    }
}

DecryptedMessageMedia DecryptedMessageMedia::fromMap(const QMap<QString, QVariant> &map) {
    DecryptedMessageMedia result;
    if(map.value("classType").toString() == "DecryptedMessageMedia::typeDecryptedMessageMediaEmptySecret8") {
        result.setClassType(typeDecryptedMessageMediaEmptySecret8);
        return result;
    }
    if(map.value("classType").toString() == "DecryptedMessageMedia::typeDecryptedMessageMediaPhotoSecret8") {
        result.setClassType(typeDecryptedMessageMediaPhotoSecret8);
        QVariant _thumbBytes_var = map.value("thumbBytes");
        if( !_thumbBytes_var.isNull() ) {
            _thumbBytes_var.convert( QVariant::nameToType("QByteArray") );
            result.setThumbBytes( _thumbBytes_var.value<QByteArray>() );
        }

        QVariant _thumbW_var = map.value("thumbW");
        if( !_thumbW_var.isNull() ) {
            _thumbW_var.convert( QVariant::nameToType("qint32") );
            result.setThumbW( _thumbW_var.value<qint32>() );
        }

        QVariant _thumbH_var = map.value("thumbH");
        if( !_thumbH_var.isNull() ) {
            _thumbH_var.convert( QVariant::nameToType("qint32") );
            result.setThumbH( _thumbH_var.value<qint32>() );
        }

        QVariant _w_var = map.value("w");
        if( !_w_var.isNull() ) {
            _w_var.convert( QVariant::nameToType("qint32") );
            result.setW( _w_var.value<qint32>() );
        }

        QVariant _h_var = map.value("h");
        if( !_h_var.isNull() ) {
            _h_var.convert( QVariant::nameToType("qint32") );
            result.setH( _h_var.value<qint32>() );
        }

        QVariant _size_var = map.value("size");
        if( !_size_var.isNull() ) {
            _size_var.convert( QVariant::nameToType("qint32") );
            result.setSize( _size_var.value<qint32>() );
        }

        QVariant _key_var = map.value("key");
        if( !_key_var.isNull() ) {
            _key_var.convert( QVariant::nameToType("QByteArray") );
            result.setKey( _key_var.value<QByteArray>() );
        }

        QVariant _iv_var = map.value("iv");
        if( !_iv_var.isNull() ) {
            _iv_var.convert( QVariant::nameToType("QByteArray") );
            result.setIv( _iv_var.value<QByteArray>() );
        }

        return result;
    }
    if(map.value("classType").toString() == "DecryptedMessageMedia::typeDecryptedMessageMediaVideoSecret8") {
        result.setClassType(typeDecryptedMessageMediaVideoSecret8);
        QVariant _thumbBytes_var = map.value("thumbBytes");
        if( !_thumbBytes_var.isNull() ) {
            _thumbBytes_var.convert( QVariant::nameToType("QByteArray") );
            result.setThumbBytes( _thumbBytes_var.value<QByteArray>() );
        }

        QVariant _thumbW_var = map.value("thumbW");
        if( !_thumbW_var.isNull() ) {
            _thumbW_var.convert( QVariant::nameToType("qint32") );
            result.setThumbW( _thumbW_var.value<qint32>() );
        }

        QVariant _thumbH_var = map.value("thumbH");
        if( !_thumbH_var.isNull() ) {
            _thumbH_var.convert( QVariant::nameToType("qint32") );
            result.setThumbH( _thumbH_var.value<qint32>() );
        }

        QVariant _duration_var = map.value("duration");
        if( !_duration_var.isNull() ) {
            _duration_var.convert( QVariant::nameToType("qint32") );
            result.setDuration( _duration_var.value<qint32>() );
        }

        QVariant _w_var = map.value("w");
        if( !_w_var.isNull() ) {
            _w_var.convert( QVariant::nameToType("qint32") );
            result.setW( _w_var.value<qint32>() );
        }

        QVariant _h_var = map.value("h");
        if( !_h_var.isNull() ) {
            _h_var.convert( QVariant::nameToType("qint32") );
            result.setH( _h_var.value<qint32>() );
        }

        QVariant _size_var = map.value("size");
        if( !_size_var.isNull() ) {
            _size_var.convert( QVariant::nameToType("qint32") );
            result.setSize( _size_var.value<qint32>() );
        }

        QVariant _key_var = map.value("key");
        if( !_key_var.isNull() ) {
            _key_var.convert( QVariant::nameToType("QByteArray") );
            result.setKey( _key_var.value<QByteArray>() );
        }

        QVariant _iv_var = map.value("iv");
        if( !_iv_var.isNull() ) {
            _iv_var.convert( QVariant::nameToType("QByteArray") );
            result.setIv( _iv_var.value<QByteArray>() );
        }

        return result;
    }
    if(map.value("classType").toString() == "DecryptedMessageMedia::typeDecryptedMessageMediaGeoPointSecret8") {
        result.setClassType(typeDecryptedMessageMediaGeoPointSecret8);
        QVariant _lat_var = map.value("lat");
        if( !_lat_var.isNull() ) {
            _lat_var.convert( QVariant::nameToType("qreal") );
            result.setLat( _lat_var.value<qreal>() );
        }

        QVariant _longValue_var = map.value("longValue");
        if( !_longValue_var.isNull() ) {
            _longValue_var.convert( QVariant::nameToType("qreal") );
            result.setLongValue( _longValue_var.value<qreal>() );
        }

        return result;
    }
    if(map.value("classType").toString() == "DecryptedMessageMedia::typeDecryptedMessageMediaContactSecret8") {
        result.setClassType(typeDecryptedMessageMediaContactSecret8);
        QVariant _phoneNumber_var = map.value("phoneNumber");
        if( !_phoneNumber_var.isNull() ) {
            _phoneNumber_var.convert( QVariant::nameToType("QString") );
            result.setPhoneNumber( _phoneNumber_var.value<QString>() );
        }

        QVariant _firstName_var = map.value("firstName");
        if( !_firstName_var.isNull() ) {
            _firstName_var.convert( QVariant::nameToType("QString") );
            result.setFirstName( _firstName_var.value<QString>() );
        }

        QVariant _lastName_var = map.value("lastName");
        if( !_lastName_var.isNull() ) {
            _lastName_var.convert( QVariant::nameToType("QString") );
            result.setLastName( _lastName_var.value<QString>() );
        }

        QVariant _userId_var = map.value("userId");
        if( !_userId_var.isNull() ) {
            _userId_var.convert( QVariant::nameToType("qint32") );
            result.setUserId( _userId_var.value<qint32>() );
        }

        return result;
    }
    if(map.value("classType").toString() == "DecryptedMessageMedia::typeDecryptedMessageMediaDocumentSecret8") {
        result.setClassType(typeDecryptedMessageMediaDocumentSecret8);
        QVariant _thumbBytes_var = map.value("thumbBytes");
        if( !_thumbBytes_var.isNull() ) {
            _thumbBytes_var.convert( QVariant::nameToType("QByteArray") );
            result.setThumbBytes( _thumbBytes_var.value<QByteArray>() );
        }

        QVariant _thumbW_var = map.value("thumbW");
        if( !_thumbW_var.isNull() ) {
            _thumbW_var.convert( QVariant::nameToType("qint32") );
            result.setThumbW( _thumbW_var.value<qint32>() );
        }

        QVariant _thumbH_var = map.value("thumbH");
        if( !_thumbH_var.isNull() ) {
            _thumbH_var.convert( QVariant::nameToType("qint32") );
            result.setThumbH( _thumbH_var.value<qint32>() );
        }

        QVariant _fileName_var = map.value("fileName");
        if( !_fileName_var.isNull() ) {
            _fileName_var.convert( QVariant::nameToType("QString") );
            result.setFileName( _fileName_var.value<QString>() );
        }

        QVariant _mimeType_var = map.value("mimeType");
        if( !_mimeType_var.isNull() ) {
            _mimeType_var.convert( QVariant::nameToType("QString") );
            result.setMimeType( _mimeType_var.value<QString>() );
        }

        QVariant _size_var = map.value("size");
        if( !_size_var.isNull() ) {
            _size_var.convert( QVariant::nameToType("qint32") );
            result.setSize( _size_var.value<qint32>() );
        }

        QVariant _key_var = map.value("key");
        if( !_key_var.isNull() ) {
            _key_var.convert( QVariant::nameToType("QByteArray") );
            result.setKey( _key_var.value<QByteArray>() );
        }

        QVariant _iv_var = map.value("iv");
        if( !_iv_var.isNull() ) {
            _iv_var.convert( QVariant::nameToType("QByteArray") );
            result.setIv( _iv_var.value<QByteArray>() );
        }

        return result;
    }
    if(map.value("classType").toString() == "DecryptedMessageMedia::typeDecryptedMessageMediaAudioSecret8") {
        result.setClassType(typeDecryptedMessageMediaAudioSecret8);
        QVariant _duration_var = map.value("duration");
        if( !_duration_var.isNull() ) {
            _duration_var.convert( QVariant::nameToType("qint32") );
            result.setDuration( _duration_var.value<qint32>() );
        }

        QVariant _size_var = map.value("size");
        if( !_size_var.isNull() ) {
            _size_var.convert( QVariant::nameToType("qint32") );
            result.setSize( _size_var.value<qint32>() );
        }

        QVariant _key_var = map.value("key");
        if( !_key_var.isNull() ) {
            _key_var.convert( QVariant::nameToType("QByteArray") );
            result.setKey( _key_var.value<QByteArray>() );
        }

        QVariant _iv_var = map.value("iv");
        if( !_iv_var.isNull() ) {
            _iv_var.convert( QVariant::nameToType("QByteArray") );
            result.setIv( _iv_var.value<QByteArray>() );
        }

        return result;
    }
    if(map.value("classType").toString() == "DecryptedMessageMedia::typeDecryptedMessageMediaVideoSecret17") {
        result.setClassType(typeDecryptedMessageMediaVideoSecret17);
        QVariant _thumbBytes_var = map.value("thumbBytes");
        if( !_thumbBytes_var.isNull() ) {
            _thumbBytes_var.convert( QVariant::nameToType("QByteArray") );
            result.setThumbBytes( _thumbBytes_var.value<QByteArray>() );
        }

        QVariant _thumbW_var = map.value("thumbW");
        if( !_thumbW_var.isNull() ) {
            _thumbW_var.convert( QVariant::nameToType("qint32") );
            result.setThumbW( _thumbW_var.value<qint32>() );
        }

        QVariant _thumbH_var = map.value("thumbH");
        if( !_thumbH_var.isNull() ) {
            _thumbH_var.convert( QVariant::nameToType("qint32") );
            result.setThumbH( _thumbH_var.value<qint32>() );
        }

        QVariant _duration_var = map.value("duration");
        if( !_duration_var.isNull() ) {
            _duration_var.convert( QVariant::nameToType("qint32") );
            result.setDuration( _duration_var.value<qint32>() );
        }

        QVariant _mimeType_var = map.value("mimeType");
        if( !_mimeType_var.isNull() ) {
            _mimeType_var.convert( QVariant::nameToType("QString") );
            result.setMimeType( _mimeType_var.value<QString>() );
        }

        QVariant _w_var = map.value("w");
        if( !_w_var.isNull() ) {
            _w_var.convert( QVariant::nameToType("qint32") );
            result.setW( _w_var.value<qint32>() );
        }

        QVariant _h_var = map.value("h");
        if( !_h_var.isNull() ) {
            _h_var.convert( QVariant::nameToType("qint32") );
            result.setH( _h_var.value<qint32>() );
        }

        QVariant _size_var = map.value("size");
        if( !_size_var.isNull() ) {
            _size_var.convert( QVariant::nameToType("qint32") );
            result.setSize( _size_var.value<qint32>() );
        }

        QVariant _key_var = map.value("key");
        if( !_key_var.isNull() ) {
            _key_var.convert( QVariant::nameToType("QByteArray") );
            result.setKey( _key_var.value<QByteArray>() );
        }

        QVariant _iv_var = map.value("iv");
        if( !_iv_var.isNull() ) {
            _iv_var.convert( QVariant::nameToType("QByteArray") );
            result.setIv( _iv_var.value<QByteArray>() );
        }

        return result;
    }
    if(map.value("classType").toString() == "DecryptedMessageMedia::typeDecryptedMessageMediaAudioSecret17") {
        result.setClassType(typeDecryptedMessageMediaAudioSecret17);
        QVariant _duration_var = map.value("duration");
        if( !_duration_var.isNull() ) {
            _duration_var.convert( QVariant::nameToType("qint32") );
            result.setDuration( _duration_var.value<qint32>() );
        }

        QVariant _mimeType_var = map.value("mimeType");
        if( !_mimeType_var.isNull() ) {
            _mimeType_var.convert( QVariant::nameToType("QString") );
            result.setMimeType( _mimeType_var.value<QString>() );
        }

        QVariant _size_var = map.value("size");
        if( !_size_var.isNull() ) {
            _size_var.convert( QVariant::nameToType("qint32") );
            result.setSize( _size_var.value<qint32>() );
        }

        QVariant _key_var = map.value("key");
        if( !_key_var.isNull() ) {
            _key_var.convert( QVariant::nameToType("QByteArray") );
            result.setKey( _key_var.value<QByteArray>() );
        }

        QVariant _iv_var = map.value("iv");
        if( !_iv_var.isNull() ) {
            _iv_var.convert( QVariant::nameToType("QByteArray") );
            result.setIv( _iv_var.value<QByteArray>() );
        }

        return result;
    }
    if(map.value("classType").toString() == "DecryptedMessageMedia::typeDecryptedMessageMediaExternalDocumentSecret23") {
        result.setClassType(typeDecryptedMessageMediaExternalDocumentSecret23);
        QVariant _id_var = map.value("id");
        if( !_id_var.isNull() ) {
            _id_var.convert( QVariant::nameToType("qint64") );
            result.setId( _id_var.value<qint64>() );
        }

        QVariant _accessHash_var = map.value("accessHash");
        if( !_accessHash_var.isNull() ) {
            _accessHash_var.convert( QVariant::nameToType("qint64") );
            result.setAccessHash( _accessHash_var.value<qint64>() );
        }

        QVariant _date_var = map.value("date");
        if( !_date_var.isNull() ) {
            _date_var.convert( QVariant::nameToType("qint32") );
            result.setDate( _date_var.value<qint32>() );
        }

        QVariant _mimeType_var = map.value("mimeType");
        if( !_mimeType_var.isNull() ) {
            _mimeType_var.convert( QVariant::nameToType("QString") );
            result.setMimeType( _mimeType_var.value<QString>() );
        }

        QVariant _size_var = map.value("size");
        if( !_size_var.isNull() ) {
            _size_var.convert( QVariant::nameToType("qint32") );
            result.setSize( _size_var.value<qint32>() );
        }

        QVariant _thumbPhotoSize_var = map.value("thumbPhotoSize");
        if( !_thumbPhotoSize_var.isNull() )
            result.setThumbPhotoSize( PhotoSize::fromMap(_thumbPhotoSize_var.toMap()) );

        QVariant _dcId_var = map.value("dcId");
        if( !_dcId_var.isNull() ) {
            _dcId_var.convert( QVariant::nameToType("qint32") );
            result.setDcId( _dcId_var.value<qint32>() );
        }

        QList<QVariant> map_attributes = map["attributes"].toList();
        QList<DocumentAttribute> _attributes;
        //for(const QVariant &var: map_attributes)
        for(int i = 0; i < map_attributes.size(); ++i) {
            const QVariant &var = map_attributes[i];
            _attributes << DocumentAttribute::fromMap(var.toMap());
        }
        result.setAttributes(_attributes);
        return result;
    }
    return result;
}

DecryptedMessageMedia DecryptedMessageMedia::fromJson(const QString &json) {
    return DecryptedMessageMedia::fromMap(QJsonDocument::fromJson(json.toUtf8()).toVariant().toMap());
}

QByteArray DecryptedMessageMedia::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const DecryptedMessageMedia &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case DecryptedMessageMedia::typeDecryptedMessageMediaEmptySecret8:

        break;
    case DecryptedMessageMedia::typeDecryptedMessageMediaPhotoSecret8:
        stream << item.thumbBytes();
        stream << item.thumbW();
        stream << item.thumbH();
        stream << item.w();
        stream << item.h();
        stream << item.size();
        stream << item.key();
        stream << item.iv();
        break;
    case DecryptedMessageMedia::typeDecryptedMessageMediaVideoSecret8:
        stream << item.thumbBytes();
        stream << item.thumbW();
        stream << item.thumbH();
        stream << item.duration();
        stream << item.w();
        stream << item.h();
        stream << item.size();
        stream << item.key();
        stream << item.iv();
        break;
    case DecryptedMessageMedia::typeDecryptedMessageMediaGeoPointSecret8:
        stream << item.lat();
        stream << item.longValue();
        break;
    case DecryptedMessageMedia::typeDecryptedMessageMediaContactSecret8:
        stream << item.phoneNumber();
        stream << item.firstName();
        stream << item.lastName();
        stream << item.userId();
        break;
    case DecryptedMessageMedia::typeDecryptedMessageMediaDocumentSecret8:
        stream << item.thumbBytes();
        stream << item.thumbW();
        stream << item.thumbH();
        stream << item.fileName();
        stream << item.mimeType();
        stream << item.size();
        stream << item.key();
        stream << item.iv();
        break;
    case DecryptedMessageMedia::typeDecryptedMessageMediaAudioSecret8:
        stream << item.duration();
        stream << item.size();
        stream << item.key();
        stream << item.iv();
        break;
    case DecryptedMessageMedia::typeDecryptedMessageMediaVideoSecret17:
        stream << item.thumbBytes();
        stream << item.thumbW();
        stream << item.thumbH();
        stream << item.duration();
        stream << item.mimeType();
        stream << item.w();
        stream << item.h();
        stream << item.size();
        stream << item.key();
        stream << item.iv();
        break;
    case DecryptedMessageMedia::typeDecryptedMessageMediaAudioSecret17:
        stream << item.duration();
        stream << item.mimeType();
        stream << item.size();
        stream << item.key();
        stream << item.iv();
        break;
    case DecryptedMessageMedia::typeDecryptedMessageMediaExternalDocumentSecret23:
        stream << item.id();
        stream << item.accessHash();
        stream << item.date();
        stream << item.mimeType();
        stream << item.size();
        stream << item.thumbPhotoSize();
        stream << item.dcId();
        stream << item.attributes();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, DecryptedMessageMedia &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<DecryptedMessageMedia::DecryptedMessageMediaClassType>(type));
    switch(type) {
    case DecryptedMessageMedia::typeDecryptedMessageMediaEmptySecret8: {

    }
        break;
    case DecryptedMessageMedia::typeDecryptedMessageMediaPhotoSecret8: {
        QByteArray m_thumb_bytes;
        stream >> m_thumb_bytes;
        item.setThumbBytes(m_thumb_bytes);
        qint32 m_thumb_w;
        stream >> m_thumb_w;
        item.setThumbW(m_thumb_w);
        qint32 m_thumb_h;
        stream >> m_thumb_h;
        item.setThumbH(m_thumb_h);
        qint32 m_w;
        stream >> m_w;
        item.setW(m_w);
        qint32 m_h;
        stream >> m_h;
        item.setH(m_h);
        qint32 m_size;
        stream >> m_size;
        item.setSize(m_size);
        QByteArray m_key;
        stream >> m_key;
        item.setKey(m_key);
        QByteArray m_iv;
        stream >> m_iv;
        item.setIv(m_iv);
    }
        break;
    case DecryptedMessageMedia::typeDecryptedMessageMediaVideoSecret8: {
        QByteArray m_thumb_bytes;
        stream >> m_thumb_bytes;
        item.setThumbBytes(m_thumb_bytes);
        qint32 m_thumb_w;
        stream >> m_thumb_w;
        item.setThumbW(m_thumb_w);
        qint32 m_thumb_h;
        stream >> m_thumb_h;
        item.setThumbH(m_thumb_h);
        qint32 m_duration;
        stream >> m_duration;
        item.setDuration(m_duration);
        qint32 m_w;
        stream >> m_w;
        item.setW(m_w);
        qint32 m_h;
        stream >> m_h;
        item.setH(m_h);
        qint32 m_size;
        stream >> m_size;
        item.setSize(m_size);
        QByteArray m_key;
        stream >> m_key;
        item.setKey(m_key);
        QByteArray m_iv;
        stream >> m_iv;
        item.setIv(m_iv);
    }
        break;
    case DecryptedMessageMedia::typeDecryptedMessageMediaGeoPointSecret8: {
        qreal m_lat;
        stream >> m_lat;
        item.setLat(m_lat);
        qreal m_longValue;
        stream >> m_longValue;
        item.setLongValue(m_longValue);
    }
        break;
    case DecryptedMessageMedia::typeDecryptedMessageMediaContactSecret8: {
        QString m_phone_number;
        stream >> m_phone_number;
        item.setPhoneNumber(m_phone_number);
        QString m_first_name;
        stream >> m_first_name;
        item.setFirstName(m_first_name);
        QString m_last_name;
        stream >> m_last_name;
        item.setLastName(m_last_name);
        qint32 m_user_id;
        stream >> m_user_id;
        item.setUserId(m_user_id);
    }
        break;
    case DecryptedMessageMedia::typeDecryptedMessageMediaDocumentSecret8: {
        QByteArray m_thumb_bytes;
        stream >> m_thumb_bytes;
        item.setThumbBytes(m_thumb_bytes);
        qint32 m_thumb_w;
        stream >> m_thumb_w;
        item.setThumbW(m_thumb_w);
        qint32 m_thumb_h;
        stream >> m_thumb_h;
        item.setThumbH(m_thumb_h);
        QString m_file_name;
        stream >> m_file_name;
        item.setFileName(m_file_name);
        QString m_mime_type;
        stream >> m_mime_type;
        item.setMimeType(m_mime_type);
        qint32 m_size;
        stream >> m_size;
        item.setSize(m_size);
        QByteArray m_key;
        stream >> m_key;
        item.setKey(m_key);
        QByteArray m_iv;
        stream >> m_iv;
        item.setIv(m_iv);
    }
        break;
    case DecryptedMessageMedia::typeDecryptedMessageMediaAudioSecret8: {
        qint32 m_duration;
        stream >> m_duration;
        item.setDuration(m_duration);
        qint32 m_size;
        stream >> m_size;
        item.setSize(m_size);
        QByteArray m_key;
        stream >> m_key;
        item.setKey(m_key);
        QByteArray m_iv;
        stream >> m_iv;
        item.setIv(m_iv);
    }
        break;
    case DecryptedMessageMedia::typeDecryptedMessageMediaVideoSecret17: {
        QByteArray m_thumb_bytes;
        stream >> m_thumb_bytes;
        item.setThumbBytes(m_thumb_bytes);
        qint32 m_thumb_w;
        stream >> m_thumb_w;
        item.setThumbW(m_thumb_w);
        qint32 m_thumb_h;
        stream >> m_thumb_h;
        item.setThumbH(m_thumb_h);
        qint32 m_duration;
        stream >> m_duration;
        item.setDuration(m_duration);
        QString m_mime_type;
        stream >> m_mime_type;
        item.setMimeType(m_mime_type);
        qint32 m_w;
        stream >> m_w;
        item.setW(m_w);
        qint32 m_h;
        stream >> m_h;
        item.setH(m_h);
        qint32 m_size;
        stream >> m_size;
        item.setSize(m_size);
        QByteArray m_key;
        stream >> m_key;
        item.setKey(m_key);
        QByteArray m_iv;
        stream >> m_iv;
        item.setIv(m_iv);
    }
        break;
    case DecryptedMessageMedia::typeDecryptedMessageMediaAudioSecret17: {
        qint32 m_duration;
        stream >> m_duration;
        item.setDuration(m_duration);
        QString m_mime_type;
        stream >> m_mime_type;
        item.setMimeType(m_mime_type);
        qint32 m_size;
        stream >> m_size;
        item.setSize(m_size);
        QByteArray m_key;
        stream >> m_key;
        item.setKey(m_key);
        QByteArray m_iv;
        stream >> m_iv;
        item.setIv(m_iv);
    }
        break;
    case DecryptedMessageMedia::typeDecryptedMessageMediaExternalDocumentSecret23: {
        qint64 m_id;
        stream >> m_id;
        item.setId(m_id);
        qint64 m_access_hash;
        stream >> m_access_hash;
        item.setAccessHash(m_access_hash);
        qint32 m_date;
        stream >> m_date;
        item.setDate(m_date);
        QString m_mime_type;
        stream >> m_mime_type;
        item.setMimeType(m_mime_type);
        qint32 m_size;
        stream >> m_size;
        item.setSize(m_size);
        PhotoSize m_thumb_PhotoSize;
        stream >> m_thumb_PhotoSize;
        item.setThumbPhotoSize(m_thumb_PhotoSize);
        qint32 m_dc_id;
        stream >> m_dc_id;
        item.setDcId(m_dc_id);
        QList<DocumentAttribute> m_attributes;
        stream >> m_attributes;
        item.setAttributes(m_attributes);
    }
        break;
    }
    return stream;
}

/*QDebug operator<<(QDebug debug,  const DecryptedMessageMedia &item) {
    QDebugStateSaver saver(debug);
    Q_UNUSED(saver)
    debug.nospace() << "Telegram.DecryptedMessageMedia(";
    switch(item.classType()) {
    case DecryptedMessageMedia::typeDecryptedMessageMediaEmptySecret8:
        debug.nospace() << "classType: typeDecryptedMessageMediaEmptySecret8";
        break;
    case DecryptedMessageMedia::typeDecryptedMessageMediaPhotoSecret8:
        debug.nospace() << "classType: typeDecryptedMessageMediaPhotoSecret8";
        debug.nospace() << ", thumbBytes: " << item.thumbBytes();
        debug.nospace() << ", thumbW: " << item.thumbW();
        debug.nospace() << ", thumbH: " << item.thumbH();
        debug.nospace() << ", w: " << item.w();
        debug.nospace() << ", h: " << item.h();
        debug.nospace() << ", size: " << item.size();
        debug.nospace() << ", key: " << item.key();
        debug.nospace() << ", iv: " << item.iv();
        break;
    case DecryptedMessageMedia::typeDecryptedMessageMediaVideoSecret8:
        debug.nospace() << "classType: typeDecryptedMessageMediaVideoSecret8";
        debug.nospace() << ", thumbBytes: " << item.thumbBytes();
        debug.nospace() << ", thumbW: " << item.thumbW();
        debug.nospace() << ", thumbH: " << item.thumbH();
        debug.nospace() << ", duration: " << item.duration();
        debug.nospace() << ", w: " << item.w();
        debug.nospace() << ", h: " << item.h();
        debug.nospace() << ", size: " << item.size();
        debug.nospace() << ", key: " << item.key();
        debug.nospace() << ", iv: " << item.iv();
        break;
    case DecryptedMessageMedia::typeDecryptedMessageMediaGeoPointSecret8:
        debug.nospace() << "classType: typeDecryptedMessageMediaGeoPointSecret8";
        debug.nospace() << ", lat: " << item.lat();
        debug.nospace() << ", longValue: " << item.longValue();
        break;
    case DecryptedMessageMedia::typeDecryptedMessageMediaContactSecret8:
        debug.nospace() << "classType: typeDecryptedMessageMediaContactSecret8";
        debug.nospace() << ", phoneNumber: " << item.phoneNumber();
        debug.nospace() << ", firstName: " << item.firstName();
        debug.nospace() << ", lastName: " << item.lastName();
        debug.nospace() << ", userId: " << item.userId();
        break;
    case DecryptedMessageMedia::typeDecryptedMessageMediaDocumentSecret8:
        debug.nospace() << "classType: typeDecryptedMessageMediaDocumentSecret8";
        debug.nospace() << ", thumbBytes: " << item.thumbBytes();
        debug.nospace() << ", thumbW: " << item.thumbW();
        debug.nospace() << ", thumbH: " << item.thumbH();
        debug.nospace() << ", fileName: " << item.fileName();
        debug.nospace() << ", mimeType: " << item.mimeType();
        debug.nospace() << ", size: " << item.size();
        debug.nospace() << ", key: " << item.key();
        debug.nospace() << ", iv: " << item.iv();
        break;
    case DecryptedMessageMedia::typeDecryptedMessageMediaAudioSecret8:
        debug.nospace() << "classType: typeDecryptedMessageMediaAudioSecret8";
        debug.nospace() << ", duration: " << item.duration();
        debug.nospace() << ", size: " << item.size();
        debug.nospace() << ", key: " << item.key();
        debug.nospace() << ", iv: " << item.iv();
        break;
    case DecryptedMessageMedia::typeDecryptedMessageMediaVideoSecret17:
        debug.nospace() << "classType: typeDecryptedMessageMediaVideoSecret17";
        debug.nospace() << ", thumbBytes: " << item.thumbBytes();
        debug.nospace() << ", thumbW: " << item.thumbW();
        debug.nospace() << ", thumbH: " << item.thumbH();
        debug.nospace() << ", duration: " << item.duration();
        debug.nospace() << ", mimeType: " << item.mimeType();
        debug.nospace() << ", w: " << item.w();
        debug.nospace() << ", h: " << item.h();
        debug.nospace() << ", size: " << item.size();
        debug.nospace() << ", key: " << item.key();
        debug.nospace() << ", iv: " << item.iv();
        break;
    case DecryptedMessageMedia::typeDecryptedMessageMediaAudioSecret17:
        debug.nospace() << "classType: typeDecryptedMessageMediaAudioSecret17";
        debug.nospace() << ", duration: " << item.duration();
        debug.nospace() << ", mimeType: " << item.mimeType();
        debug.nospace() << ", size: " << item.size();
        debug.nospace() << ", key: " << item.key();
        debug.nospace() << ", iv: " << item.iv();
        break;
    case DecryptedMessageMedia::typeDecryptedMessageMediaExternalDocumentSecret23:
        debug.nospace() << "classType: typeDecryptedMessageMediaExternalDocumentSecret23";
        debug.nospace() << ", id: " << item.id();
        debug.nospace() << ", accessHash: " << item.accessHash();
        debug.nospace() << ", date: " << item.date();
        debug.nospace() << ", mimeType: " << item.mimeType();
        debug.nospace() << ", size: " << item.size();
        debug.nospace() << ", thumbPhotoSize: " << item.thumbPhotoSize();
        debug.nospace() << ", dcId: " << item.dcId();
        debug.nospace() << ", attributes: " << item.attributes();
        break;
    }
    debug.nospace() << ")";
    return debug;
}
*/
