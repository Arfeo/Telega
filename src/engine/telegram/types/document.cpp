// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "document.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

Document::Document(DocumentClassType classType, InboundPkt *in) :
    m_accessHash(0),
    m_date(0),
    m_dcId(0),
    m_id(0),
    m_size(0),
    m_version(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

Document::Document(InboundPkt *in) :
    m_accessHash(0),
    m_date(0),
    m_dcId(0),
    m_id(0),
    m_size(0),
    m_version(0),
    m_classType(typeDocumentEmpty)
{
    fetch(in);
}

Document::Document(const Document &another) :
    TelegramTypeObject(),
    m_accessHash(0),
    m_date(0),
    m_dcId(0),
    m_id(0),
    m_size(0),
    m_version(0),
    m_classType(typeDocumentEmpty)
{
    operator=(another);
}

Document::Document(const Null &null) :
    TelegramTypeObject(null),
    m_accessHash(0),
    m_date(0),
    m_dcId(0),
    m_id(0),
    m_size(0),
    m_version(0),
    m_classType(typeDocumentEmpty)
{
}

Document::~Document() {

}

void Document::setAccessHash(qint64 accessHash) {
    m_accessHash = accessHash;
}

qint64 Document::accessHash() const {
    return m_accessHash;
}

void Document::setAttributes(const QList<DocumentAttribute> &attributes) {
    m_attributes = attributes;
}

QList<DocumentAttribute> Document::attributes() const {
    return m_attributes;
}

void Document::setDate(qint32 date) {
    m_date = date;
}

qint32 Document::date() const {
    return m_date;
}

void Document::setDcId(qint32 dcId) {
    m_dcId = dcId;
}

qint32 Document::dcId() const {
    return m_dcId;
}

void Document::setId(qint64 id) {
    m_id = id;
}

qint64 Document::id() const {
    return m_id;
}

void Document::setMimeType(const QString &mimeType) {
    m_mimeType = mimeType;
}

QString Document::mimeType() const {
    return m_mimeType;
}

void Document::setSize(qint32 size) {
    m_size = size;
}

qint32 Document::size() const {
    return m_size;
}

void Document::setThumb(const PhotoSize &thumb) {
    m_thumb = thumb;
}

PhotoSize Document::thumb() const {
    return m_thumb;
}

void Document::setVersion(qint32 version) {
    m_version = version;
}

qint32 Document::version() const {
    return m_version;
}

bool Document::operator ==(const Document &b) const {
    return m_classType == b.m_classType &&
           m_accessHash == b.m_accessHash &&
           m_attributes == b.m_attributes &&
           m_date == b.m_date &&
           m_dcId == b.m_dcId &&
           m_id == b.m_id &&
           m_mimeType == b.m_mimeType &&
           m_size == b.m_size &&
           m_thumb == b.m_thumb &&
           m_version == b.m_version;
}

Document &Document::operator =(const Document &b) {
    m_classType = b.m_classType;
    m_accessHash = b.m_accessHash;
    m_attributes = b.m_attributes;
    m_date = b.m_date;
    m_dcId = b.m_dcId;
    m_id = b.m_id;
    m_mimeType = b.m_mimeType;
    m_size = b.m_size;
    m_thumb = b.m_thumb;
    m_version = b.m_version;
    setNull(b.isNull());
    return *this;
}

void Document::setClassType(Document::DocumentClassType classType) {
    m_classType = classType;
}

Document::DocumentClassType Document::classType() const {
    return m_classType;
}

bool Document::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeDocumentEmpty: {
        m_id = in->fetchLong();
        m_classType = static_cast<DocumentClassType>(x);
        return true;
    }
        break;

    case typeDocument: {
        m_id = in->fetchLong();
        m_accessHash = in->fetchLong();
        m_date = in->fetchInt();
        m_mimeType = in->fetchQString();
        m_size = in->fetchInt();
        m_thumb.fetch(in);
        m_dcId = in->fetchInt();
        m_version = in->fetchInt();
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_attributes_length = in->fetchInt();
        m_attributes.clear();
        for (qint32 i = 0; i < m_attributes_length; i++) {
            DocumentAttribute type;
            type.fetch(in);
            m_attributes.append(type);
        }
        m_classType = static_cast<DocumentClassType>(x);
        return true;
    }
        break;

    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool Document::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeDocumentEmpty: {
        out->appendLong(m_id);
        return true;
    }
        break;

    case typeDocument: {
        out->appendLong(m_id);
        out->appendLong(m_accessHash);
        out->appendInt(m_date);
        out->appendQString(m_mimeType);
        out->appendInt(m_size);
        m_thumb.push(out);
        out->appendInt(m_dcId);
        out->appendInt(m_version);
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_attributes.count());
        for (qint32 i = 0; i < m_attributes.count(); i++) {
            m_attributes[i].push(out);
        }
        return true;
    }
        break;

    default:
        return false;
    }
}

QMap<QString, QVariant> Document::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeDocumentEmpty: {
        result["classType"] = "Document::typeDocumentEmpty";
        if( id() ) result["id"] = QString::number(id());
        return result;
    }
        break;

    case typeDocument: {
        result["classType"] = "Document::typeDocument";
        if( id() ) result["id"] = QString::number(id());
        if( accessHash() ) result["accessHash"] = QString::number(accessHash());
        if( date() ) result["date"] = QString::number(date());
        if( !m_mimeType.isEmpty() ) result["mimeType"] = QVariant::fromValue<QString>(m_mimeType);
        if( size() ) result["size"] = QString::number(size());
        if( !m_thumb.isNull() ) result["thumb"] = m_thumb.toMap();
        if( dcId() ) result["dcId"] = QString::number(dcId());
        if( version() ) result["version"] = QString::number(version());
        QList<QVariant> _attributes;
        for(const DocumentAttribute &m__type: m_attributes)
            if( !m__type.isNull() ) _attributes << m__type.toMap();
        result["attributes"] = _attributes;
        return result;
    }
        break;

    default:
        return result;
    }
}

Document Document::fromMap(const QMap<QString, QVariant> &map) {
    Document result;
    if(map.value("classType").toString() == "Document::typeDocumentEmpty") {
        result.setClassType(typeDocumentEmpty);
        QVariant _id_var = map.value("id");
        if( !_id_var.isNull() ) {
            _id_var.convert( QVariant::nameToType("qint64") );
            result.setId( _id_var.value<qint64>() );
        }

        return result;
    }
    if(map.value("classType").toString() == "Document::typeDocument") {
        result.setClassType(typeDocument);
        QVariant _id_var = map.value("id");
        if( !_id_var.isNull() ) {
            _id_var.convert( QVariant::nameToType("qint64") );
            result.setId( _id_var.value<qint64>() );
        }

        QVariant _accessHash_var = map.value("accessHash");
        if( !_accessHash_var.isNull() ) {
            _accessHash_var.convert( QVariant::nameToType("qint64") );
            result.setAccessHash( _accessHash_var.value<qint64>() );
        }

        QVariant _date_var = map.value("date");
        if( !_date_var.isNull() ) {
            _date_var.convert( QVariant::nameToType("qint32") );
            result.setDate( _date_var.value<qint32>() );
        }

        QVariant _mimeType_var = map.value("mimeType");
        if( !_mimeType_var.isNull() ) {
            _mimeType_var.convert( QVariant::nameToType("QString") );
            result.setMimeType( _mimeType_var.value<QString>() );
        }

        QVariant _size_var = map.value("size");
        if( !_size_var.isNull() ) {
            _size_var.convert( QVariant::nameToType("qint32") );
            result.setSize( _size_var.value<qint32>() );
        }

        QVariant _thumb_var = map.value("thumb");
        if( !_thumb_var.isNull() )
            result.setThumb( PhotoSize::fromMap(_thumb_var.toMap()) );

        QVariant _dcId_var = map.value("dcId");
        if( !_dcId_var.isNull() ) {
            _dcId_var.convert( QVariant::nameToType("qint32") );
            result.setDcId( _dcId_var.value<qint32>() );
        }

        QVariant _version_var = map.value("version");
        if( !_version_var.isNull() ) {
            _version_var.convert( QVariant::nameToType("qint32") );
            result.setVersion( _version_var.value<qint32>() );
        }

        QList<QVariant> map_attributes = map["attributes"].toList();
        QList<DocumentAttribute> _attributes;
        for(const QVariant &var: map_attributes)
            _attributes << DocumentAttribute::fromMap(var.toMap());
        result.setAttributes(_attributes);
        return result;
    }
    return result;
}

Document Document::fromJson(const QString &json) {
    return Document::fromMap(QJsonDocument::fromJson(json.toUtf8()).toVariant().toMap());
}

QByteArray Document::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const Document &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case Document::typeDocumentEmpty:
        stream << item.id();
        break;
    case Document::typeDocument:
        stream << item.id();
        stream << item.accessHash();
        stream << item.date();
        stream << item.mimeType();
        stream << item.size();
        stream << item.thumb();
        stream << item.dcId();
        stream << item.version();
        stream << item.attributes();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, Document &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<Document::DocumentClassType>(type));
    switch(type) {
    case Document::typeDocumentEmpty: {
        qint64 m_id;
        stream >> m_id;
        item.setId(m_id);
    }
        break;
    case Document::typeDocument: {
        qint64 m_id;
        stream >> m_id;
        item.setId(m_id);
        qint64 m_access_hash;
        stream >> m_access_hash;
        item.setAccessHash(m_access_hash);
        qint32 m_date;
        stream >> m_date;
        item.setDate(m_date);
        QString m_mime_type;
        stream >> m_mime_type;
        item.setMimeType(m_mime_type);
        qint32 m_size;
        stream >> m_size;
        item.setSize(m_size);
        PhotoSize m_thumb;
        stream >> m_thumb;
        item.setThumb(m_thumb);
        qint32 m_dc_id;
        stream >> m_dc_id;
        item.setDcId(m_dc_id);
        qint32 m_version;
        stream >> m_version;
        item.setVersion(m_version);
        QList<DocumentAttribute> m_attributes;
        stream >> m_attributes;
        item.setAttributes(m_attributes);
    }
        break;
    }
    return stream;
}

/*QDebug operator<<(QDebug debug,  const Document &item) {
    QDebugStateSaver saver(debug);
    Q_UNUSED(saver)
    debug.nospace() << "Telegram.Document(";
    switch(item.classType()) {
    case Document::typeDocumentEmpty:
        debug.nospace() << "classType: typeDocumentEmpty";
        debug.nospace() << ", id: " << item.id();
        break;
    case Document::typeDocument:
        debug.nospace() << "classType: typeDocument";
        debug.nospace() << ", id: " << item.id();
        debug.nospace() << ", accessHash: " << item.accessHash();
        debug.nospace() << ", date: " << item.date();
        debug.nospace() << ", mimeType: " << item.mimeType();
        debug.nospace() << ", size: " << item.size();
        debug.nospace() << ", thumb: " << item.thumb();
        debug.nospace() << ", dcId: " << item.dcId();
        debug.nospace() << ", version: " << item.version();
        debug.nospace() << ", attributes: " << item.attributes();
        break;
    }
    debug.nospace() << ")";
    return debug;
}
*/
