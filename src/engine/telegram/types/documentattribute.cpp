// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "documentattribute.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

DocumentAttribute::DocumentAttribute(DocumentAttributeClassType classType, InboundPkt *in) :
    m_duration(0),
    m_flags(0),
    m_h(0),
    m_w(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

DocumentAttribute::DocumentAttribute(InboundPkt *in) :
    m_duration(0),
    m_flags(0),
    m_h(0),
    m_w(0),
    m_classType(typeDocumentAttributeImageSize)
{
    fetch(in);
}

DocumentAttribute::DocumentAttribute(const DocumentAttribute &another) :
    TelegramTypeObject(),
    m_duration(0),
    m_flags(0),
    m_h(0),
    m_w(0),
    m_classType(typeDocumentAttributeImageSize)
{
    operator=(another);
}

DocumentAttribute::DocumentAttribute(const Null &null) :
    TelegramTypeObject(null),
    m_duration(0),
    m_flags(0),
    m_h(0),
    m_w(0),
    m_classType(typeDocumentAttributeImageSize)
{
}

DocumentAttribute::~DocumentAttribute() {
    
}

void DocumentAttribute::setAlt(const QString &alt) {
    m_alt = alt;
}

QString DocumentAttribute::alt() const {
    return m_alt;
}

void DocumentAttribute::setDuration(qint32 duration) {
    m_duration = duration;
}

qint32 DocumentAttribute::duration() const {
    return m_duration;
}

void DocumentAttribute::setFileName(const QString &fileName) {
    m_fileName = fileName;
}

QString DocumentAttribute::fileName() const {
    return m_fileName;
}

void DocumentAttribute::setFlags(qint32 flags) {
    m_flags = flags;
}

qint32 DocumentAttribute::flags() const {
    return m_flags;
}

void DocumentAttribute::setH(qint32 h) {
    m_h = h;
}

qint32 DocumentAttribute::h() const {
    return m_h;
}

void DocumentAttribute::setMask(bool mask) {
    if(mask) m_flags = (m_flags | (1<<1));
    else m_flags = (m_flags & ~(1<<1));
}

bool DocumentAttribute::mask() const {
    return (m_flags & 1<<1);
}

void DocumentAttribute::setMaskCoords(const MaskCoords &maskCoords) {
    if(!maskCoords.isNull()) m_flags = (m_flags | (1<<0));
    else m_flags = (m_flags & ~(1<<0));
    m_maskCoords = maskCoords;
}

MaskCoords DocumentAttribute::maskCoords() const {
    return m_maskCoords;
}

void DocumentAttribute::setPerformer(const QString &performer) {
    if(!performer.isNull()) m_flags = (m_flags | (1<<1));
    else m_flags = (m_flags & ~(1<<1));
    m_performer = performer;
}

QString DocumentAttribute::performer() const {
    return m_performer;
}

void DocumentAttribute::setRoundMessage(bool roundMessage) {
    if(roundMessage) m_flags = (m_flags | (1<<0));
    else m_flags = (m_flags & ~(1<<0));
}

bool DocumentAttribute::roundMessage() const {
    return (m_flags & 1<<0);
}

void DocumentAttribute::setStickerset(const InputStickerSet &stickerset) {
    m_stickerset = stickerset;
}

InputStickerSet DocumentAttribute::stickerset() const {
    return m_stickerset;
}

void DocumentAttribute::setTitle(const QString &title) {
    if(!title.isNull()) m_flags = (m_flags | (1<<0));
    else m_flags = (m_flags & ~(1<<0));
    m_title = title;
}

QString DocumentAttribute::title() const {
    return m_title;
}

void DocumentAttribute::setVoice(bool voice) {
    if(voice) m_flags = (m_flags | (1<<10));
    else m_flags = (m_flags & ~(1<<10));
}

bool DocumentAttribute::voice() const {
    return (m_flags & 1<<10);
}

void DocumentAttribute::setW(qint32 w) {
    m_w = w;
}

qint32 DocumentAttribute::w() const {
    return m_w;
}

void DocumentAttribute::setWaveform(const QByteArray &waveform) {
    if(!waveform.isNull()) m_flags = (m_flags | (1<<2));
    else m_flags = (m_flags & ~(1<<2));
    m_waveform = waveform;
}

QByteArray DocumentAttribute::waveform() const {
    return m_waveform;
}

bool DocumentAttribute::operator ==(const DocumentAttribute &b) const {
    return m_classType == b.m_classType &&
           m_alt == b.m_alt &&
           m_duration == b.m_duration &&
           m_fileName == b.m_fileName &&
           m_flags == b.m_flags &&
           m_h == b.m_h &&
           m_maskCoords == b.m_maskCoords &&
           m_performer == b.m_performer &&
           m_stickerset == b.m_stickerset &&
           m_title == b.m_title &&
           m_w == b.m_w &&
           m_waveform == b.m_waveform;
}

DocumentAttribute &DocumentAttribute::operator =(const DocumentAttribute &b) {
    m_classType = b.m_classType;
    m_alt = b.m_alt;
    m_duration = b.m_duration;
    m_fileName = b.m_fileName;
    m_flags = b.m_flags;
    m_h = b.m_h;
    m_maskCoords = b.m_maskCoords;
    m_performer = b.m_performer;
    m_stickerset = b.m_stickerset;
    m_title = b.m_title;
    m_w = b.m_w;
    m_waveform = b.m_waveform;
    setNull(b.isNull());
    return *this;
}

void DocumentAttribute::setClassType(DocumentAttribute::DocumentAttributeClassType classType) {
    m_classType = classType;
}

DocumentAttribute::DocumentAttributeClassType DocumentAttribute::classType() const {
    return m_classType;
}

bool DocumentAttribute::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeDocumentAttributeImageSize: {
        m_w = in->fetchInt();
        m_h = in->fetchInt();
        m_classType = static_cast<DocumentAttributeClassType>(x);
        return true;
    }
        break;
    
    case typeDocumentAttributeAnimated: {
        m_classType = static_cast<DocumentAttributeClassType>(x);
        return true;
    }
        break;
    
    case typeDocumentAttributeSticker: {
        m_flags = in->fetchInt();
        m_alt = in->fetchQString();
        m_stickerset.fetch(in);
        if(m_flags & 1<<0) {
            m_maskCoords.fetch(in);
        }
        m_classType = static_cast<DocumentAttributeClassType>(x);
        return true;
    }
        break;
    
    case typeDocumentAttributeVideo: {
        m_flags = in->fetchInt();
        m_duration = in->fetchInt();
        m_w = in->fetchInt();
        m_h = in->fetchInt();
        m_classType = static_cast<DocumentAttributeClassType>(x);
        return true;
    }
        break;
    
    case typeDocumentAttributeAudio: {
        m_flags = in->fetchInt();
        m_duration = in->fetchInt();
        if(m_flags & 1<<0) {
            m_title = in->fetchQString();
        }
        if(m_flags & 1<<1) {
            m_performer = in->fetchQString();
        }
        if(m_flags & 1<<2) {
            m_waveform = in->fetchBytes();
        }
        m_classType = static_cast<DocumentAttributeClassType>(x);
        return true;
    }
        break;
    
    case typeDocumentAttributeFilename: {
        m_fileName = in->fetchQString();
        m_classType = static_cast<DocumentAttributeClassType>(x);
        return true;
    }
        break;
    
    case typeDocumentAttributeHasStickers: {
        m_classType = static_cast<DocumentAttributeClassType>(x);
        return true;
    }
        break;
    
    case typeDocumentAttributeStickerSecret23: {
        m_classType = static_cast<DocumentAttributeClassType>(x);
        return true;
    }
        break;
    
    case typeDocumentAttributeVideoSecret23: {
        m_duration = in->fetchInt();
        m_w = in->fetchInt();
        m_h = in->fetchInt();
        m_classType = static_cast<DocumentAttributeClassType>(x);
        return true;
    }
        break;
    
    case typeDocumentAttributeAudioSecret23: {
        m_duration = in->fetchInt();
        m_classType = static_cast<DocumentAttributeClassType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool DocumentAttribute::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeDocumentAttributeImageSize: {
        out->appendInt(m_w);
        out->appendInt(m_h);
        return true;
    }
        break;
    
    case typeDocumentAttributeAnimated: {
        return true;
    }
        break;
    
    case typeDocumentAttributeSticker: {
        out->appendInt(m_flags);
        out->appendQString(m_alt);
        m_stickerset.push(out);
        if(m_flags & 1<<0) {
            m_maskCoords.push(out);
        }
        return true;
    }
        break;
    
    case typeDocumentAttributeVideo: {
        out->appendInt(m_flags);
        out->appendInt(m_duration);
        out->appendInt(m_w);
        out->appendInt(m_h);
        return true;
    }
        break;
    
    case typeDocumentAttributeAudio: {
        out->appendInt(m_flags);
        out->appendInt(m_duration);
        if(m_flags & 1<<0) {
            out->appendQString(m_title);
        }
        if(m_flags & 1<<1) {
            out->appendQString(m_performer);
        }
        if(m_flags & 1<<2) {
            out->appendBytes(m_waveform);
        }
        return true;
    }
        break;
    
    case typeDocumentAttributeFilename: {
        out->appendQString(m_fileName);
        return true;
    }
        break;
    
    case typeDocumentAttributeHasStickers: {
        return true;
    }
        break;
    
    case typeDocumentAttributeStickerSecret23: {
        return true;
    }
        break;
    
    case typeDocumentAttributeVideoSecret23: {
        out->appendInt(m_duration);
        out->appendInt(m_w);
        out->appendInt(m_h);
        return true;
    }
        break;
    
    case typeDocumentAttributeAudioSecret23: {
        out->appendInt(m_duration);
        return true;
    }
        break;
    
    default:
        return false;
    }
}

QMap<QString, QVariant> DocumentAttribute::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeDocumentAttributeImageSize: {
        result["classType"] = "DocumentAttribute::typeDocumentAttributeImageSize";
        if( w() ) result["w"] = QString::number(w());
        if( h() ) result["h"] = QString::number(h());
        return result;
    }
        break;
    
    case typeDocumentAttributeAnimated: {
        result["classType"] = "DocumentAttribute::typeDocumentAttributeAnimated";
        return result;
    }
        break;
    
    case typeDocumentAttributeSticker: {
        result["classType"] = "DocumentAttribute::typeDocumentAttributeSticker";
        if( mask() ) result["mask"] = QString::number(mask());
        if( !m_alt.isEmpty() ) result["alt"] = QVariant::fromValue<QString>(m_alt);
        if( !m_stickerset.isNull() ) result["stickerset"] = m_stickerset.toMap();
        if( !m_maskCoords.isNull() ) result["maskCoords"] = m_maskCoords.toMap();
        return result;
    }
        break;
    
    case typeDocumentAttributeVideo: {
        result["classType"] = "DocumentAttribute::typeDocumentAttributeVideo";
        if( roundMessage() ) result["roundMessage"] = QString::number(roundMessage());
        if( duration() ) result["duration"] = QString::number(duration());
        if( w() ) result["w"] = QString::number(w());
        if( h() ) result["h"] = QString::number(h());
        return result;
    }
        break;
    
    case typeDocumentAttributeAudio: {
        result["classType"] = "DocumentAttribute::typeDocumentAttributeAudio";
        if( voice() ) result["voice"] = QString::number(voice());
        if( duration() ) result["duration"] = QString::number(duration());
        if( !m_title.isEmpty() ) result["title"] = QVariant::fromValue<QString>(m_title);
        if( !m_performer.isEmpty() ) result["performer"] = QVariant::fromValue<QString>(m_performer);
        if( !m_waveform.isEmpty() ) result["waveform"] = QVariant::fromValue<QByteArray>(m_waveform);
        return result;
    }
        break;
    
    case typeDocumentAttributeFilename: {
        result["classType"] = "DocumentAttribute::typeDocumentAttributeFilename";
        if( !m_fileName.isEmpty() ) result["fileName"] = QVariant::fromValue<QString>(m_fileName);
        return result;
    }
        break;
    
    case typeDocumentAttributeHasStickers: {
        result["classType"] = "DocumentAttribute::typeDocumentAttributeHasStickers";
        return result;
    }
        break;
    
    case typeDocumentAttributeStickerSecret23: {
        result["classType"] = "DocumentAttribute::typeDocumentAttributeStickerSecret23";
        return result;
    }
        break;
    
    case typeDocumentAttributeVideoSecret23: {
        result["classType"] = "DocumentAttribute::typeDocumentAttributeVideoSecret23";
        if( duration() ) result["duration"] = QString::number(duration());
        if( w() ) result["w"] = QString::number(w());
        if( h() ) result["h"] = QString::number(h());
        return result;
    }
        break;
    
    case typeDocumentAttributeAudioSecret23: {
        result["classType"] = "DocumentAttribute::typeDocumentAttributeAudioSecret23";
        if( duration() ) result["duration"] = QString::number(duration());
        return result;
    }
        break;
    
    default:
        return result;
    }
}

DocumentAttribute DocumentAttribute::fromMap(const QMap<QString, QVariant> &map) {
    DocumentAttribute result;
    if(map.value("classType").toString() == "DocumentAttribute::typeDocumentAttributeImageSize") {
        result.setClassType(typeDocumentAttributeImageSize);
        QVariant _w_var = map.value("w");
        if( !_w_var.isNull() ) {
            _w_var.convert( QVariant::nameToType("qint32") );
            result.setW( _w_var.value<qint32>() );
        }
        
        QVariant _h_var = map.value("h");
        if( !_h_var.isNull() ) {
            _h_var.convert( QVariant::nameToType("qint32") );
            result.setH( _h_var.value<qint32>() );
        }
        
        return result;
    }
    if(map.value("classType").toString() == "DocumentAttribute::typeDocumentAttributeAnimated") {
        result.setClassType(typeDocumentAttributeAnimated);
        return result;
    }
    if(map.value("classType").toString() == "DocumentAttribute::typeDocumentAttributeSticker") {
        result.setClassType(typeDocumentAttributeSticker);
        QVariant _mask_var = map.value("mask");
        if( !_mask_var.isNull() ) {
            _mask_var.convert( QVariant::nameToType("bool") );
            result.setMask( _mask_var.value<bool>() );
        }
        
        QVariant _alt_var = map.value("alt");
        if( !_alt_var.isNull() ) {
            _alt_var.convert( QVariant::nameToType("QString") );
            result.setAlt( _alt_var.value<QString>() );
        }
        
        QVariant _stickerset_var = map.value("stickerset");
        if( !_stickerset_var.isNull() )
            result.setStickerset( InputStickerSet::fromMap(_stickerset_var.toMap()) );
        
        QVariant _maskCoords_var = map.value("maskCoords");
        if( !_maskCoords_var.isNull() )
            result.setMaskCoords( MaskCoords::fromMap(_maskCoords_var.toMap()) );
        
        return result;
    }
    if(map.value("classType").toString() == "DocumentAttribute::typeDocumentAttributeVideo") {
        result.setClassType(typeDocumentAttributeVideo);
        QVariant _roundMessage_var = map.value("roundMessage");
        if( !_roundMessage_var.isNull() ) {
            _roundMessage_var.convert( QVariant::nameToType("bool") );
            result.setRoundMessage( _roundMessage_var.value<bool>() );
        }
        
        QVariant _duration_var = map.value("duration");
        if( !_duration_var.isNull() ) {
            _duration_var.convert( QVariant::nameToType("qint32") );
            result.setDuration( _duration_var.value<qint32>() );
        }
        
        QVariant _w_var = map.value("w");
        if( !_w_var.isNull() ) {
            _w_var.convert( QVariant::nameToType("qint32") );
            result.setW( _w_var.value<qint32>() );
        }
        
        QVariant _h_var = map.value("h");
        if( !_h_var.isNull() ) {
            _h_var.convert( QVariant::nameToType("qint32") );
            result.setH( _h_var.value<qint32>() );
        }
        
        return result;
    }
    if(map.value("classType").toString() == "DocumentAttribute::typeDocumentAttributeAudio") {
        result.setClassType(typeDocumentAttributeAudio);
        QVariant _voice_var = map.value("voice");
        if( !_voice_var.isNull() ) {
            _voice_var.convert( QVariant::nameToType("bool") );
            result.setVoice( _voice_var.value<bool>() );
        }
        
        QVariant _duration_var = map.value("duration");
        if( !_duration_var.isNull() ) {
            _duration_var.convert( QVariant::nameToType("qint32") );
            result.setDuration( _duration_var.value<qint32>() );
        }
        
        QVariant _title_var = map.value("title");
        if( !_title_var.isNull() ) {
            _title_var.convert( QVariant::nameToType("QString") );
            result.setTitle( _title_var.value<QString>() );
        }
        
        QVariant _performer_var = map.value("performer");
        if( !_performer_var.isNull() ) {
            _performer_var.convert( QVariant::nameToType("QString") );
            result.setPerformer( _performer_var.value<QString>() );
        }
        
        QVariant _waveform_var = map.value("waveform");
        if( !_waveform_var.isNull() ) {
            _waveform_var.convert( QVariant::nameToType("QByteArray") );
            result.setWaveform( _waveform_var.value<QByteArray>() );
        }
        
        return result;
    }
    if(map.value("classType").toString() == "DocumentAttribute::typeDocumentAttributeFilename") {
        result.setClassType(typeDocumentAttributeFilename);
        QVariant _fileName_var = map.value("fileName");
        if( !_fileName_var.isNull() ) {
            _fileName_var.convert( QVariant::nameToType("QString") );
            result.setFileName( _fileName_var.value<QString>() );
        }
        
        return result;
    }
    if(map.value("classType").toString() == "DocumentAttribute::typeDocumentAttributeHasStickers") {
        result.setClassType(typeDocumentAttributeHasStickers);
        return result;
    }
    if(map.value("classType").toString() == "DocumentAttribute::typeDocumentAttributeImageSizeSecret23") {
        result.setClassType(typeDocumentAttributeImageSizeSecret23);
        QVariant _w_var = map.value("w");
        if( !_w_var.isNull() ) {
            _w_var.convert( QVariant::nameToType("qint32") );
            result.setW( _w_var.value<qint32>() );
        }
        
        QVariant _h_var = map.value("h");
        if( !_h_var.isNull() ) {
            _h_var.convert( QVariant::nameToType("qint32") );
            result.setH( _h_var.value<qint32>() );
        }
        
        return result;
    }
    if(map.value("classType").toString() == "DocumentAttribute::typeDocumentAttributeAnimatedSecret23") {
        result.setClassType(typeDocumentAttributeAnimatedSecret23);
        return result;
    }
    if(map.value("classType").toString() == "DocumentAttribute::typeDocumentAttributeStickerSecret23") {
        result.setClassType(typeDocumentAttributeStickerSecret23);
        return result;
    }
    if(map.value("classType").toString() == "DocumentAttribute::typeDocumentAttributeVideoSecret23") {
        result.setClassType(typeDocumentAttributeVideoSecret23);
        QVariant _duration_var = map.value("duration");
        if( !_duration_var.isNull() ) {
            _duration_var.convert( QVariant::nameToType("qint32") );
            result.setDuration( _duration_var.value<qint32>() );
        }
        
        QVariant _w_var = map.value("w");
        if( !_w_var.isNull() ) {
            _w_var.convert( QVariant::nameToType("qint32") );
            result.setW( _w_var.value<qint32>() );
        }
        
        QVariant _h_var = map.value("h");
        if( !_h_var.isNull() ) {
            _h_var.convert( QVariant::nameToType("qint32") );
            result.setH( _h_var.value<qint32>() );
        }
        
        return result;
    }
    if(map.value("classType").toString() == "DocumentAttribute::typeDocumentAttributeAudioSecret23") {
        result.setClassType(typeDocumentAttributeAudioSecret23);
        QVariant _duration_var = map.value("duration");
        if( !_duration_var.isNull() ) {
            _duration_var.convert( QVariant::nameToType("qint32") );
            result.setDuration( _duration_var.value<qint32>() );
        }
        
        return result;
    }
    if(map.value("classType").toString() == "DocumentAttribute::typeDocumentAttributeFilenameSecret23") {
        result.setClassType(typeDocumentAttributeFilenameSecret23);
        QVariant _fileName_var = map.value("fileName");
        if( !_fileName_var.isNull() ) {
            _fileName_var.convert( QVariant::nameToType("QString") );
            result.setFileName( _fileName_var.value<QString>() );
        }
        
        return result;
    }
    return result;
}

DocumentAttribute DocumentAttribute::fromJson(const QString &json) {
    return DocumentAttribute::fromMap(QJsonDocument::fromJson(json.toUtf8()).toVariant().toMap());
}

QByteArray DocumentAttribute::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const DocumentAttribute &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case DocumentAttribute::typeDocumentAttributeImageSize:
        stream << item.w();
        stream << item.h();
        break;
    case DocumentAttribute::typeDocumentAttributeAnimated:
        
        break;
    case DocumentAttribute::typeDocumentAttributeSticker:
        stream << item.flags();
        stream << item.alt();
        stream << item.stickerset();
        stream << item.maskCoords();
        break;
    case DocumentAttribute::typeDocumentAttributeVideo:
        stream << item.flags();
        stream << item.duration();
        stream << item.w();
        stream << item.h();
        break;
    case DocumentAttribute::typeDocumentAttributeAudio:
        stream << item.flags();
        stream << item.duration();
        stream << item.title();
        stream << item.performer();
        stream << item.waveform();
        break;
    case DocumentAttribute::typeDocumentAttributeFilename:
        stream << item.fileName();
        break;
    case DocumentAttribute::typeDocumentAttributeHasStickers:
        
        break;
    case DocumentAttribute::typeDocumentAttributeStickerSecret23:
        
        break;
    case DocumentAttribute::typeDocumentAttributeVideoSecret23:
        stream << item.duration();
        stream << item.w();
        stream << item.h();
        break;
    case DocumentAttribute::typeDocumentAttributeAudioSecret23:
        stream << item.duration();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, DocumentAttribute &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<DocumentAttribute::DocumentAttributeClassType>(type));
    switch(type) {
    case DocumentAttribute::typeDocumentAttributeImageSize: {
        qint32 m_w;
        stream >> m_w;
        item.setW(m_w);
        qint32 m_h;
        stream >> m_h;
        item.setH(m_h);
    }
        break;
    case DocumentAttribute::typeDocumentAttributeAnimated: {
        
    }
        break;
    case DocumentAttribute::typeDocumentAttributeSticker: {
        qint32 m_flags;
        stream >> m_flags;
        item.setFlags(m_flags);
        QString m_alt;
        stream >> m_alt;
        item.setAlt(m_alt);
        InputStickerSet m_stickerset;
        stream >> m_stickerset;
        item.setStickerset(m_stickerset);
        MaskCoords m_mask_coords;
        stream >> m_mask_coords;
        item.setMaskCoords(m_mask_coords);
    }
        break;
    case DocumentAttribute::typeDocumentAttributeVideo: {
        qint32 m_flags;
        stream >> m_flags;
        item.setFlags(m_flags);
        qint32 m_duration;
        stream >> m_duration;
        item.setDuration(m_duration);
        qint32 m_w;
        stream >> m_w;
        item.setW(m_w);
        qint32 m_h;
        stream >> m_h;
        item.setH(m_h);
    }
        break;
    case DocumentAttribute::typeDocumentAttributeAudio: {
        qint32 m_flags;
        stream >> m_flags;
        item.setFlags(m_flags);
        qint32 m_duration;
        stream >> m_duration;
        item.setDuration(m_duration);
        QString m_title;
        stream >> m_title;
        item.setTitle(m_title);
        QString m_performer;
        stream >> m_performer;
        item.setPerformer(m_performer);
        QByteArray m_waveform;
        stream >> m_waveform;
        item.setWaveform(m_waveform);
    }
        break;
    case DocumentAttribute::typeDocumentAttributeFilename: {
        QString m_file_name;
        stream >> m_file_name;
        item.setFileName(m_file_name);
    }
        break;
    case DocumentAttribute::typeDocumentAttributeHasStickers: {
        
    }
        break;
    case DocumentAttribute::typeDocumentAttributeStickerSecret23: {
        
    }
        break;
    case DocumentAttribute::typeDocumentAttributeVideoSecret23: {
        qint32 m_duration;
        stream >> m_duration;
        item.setDuration(m_duration);
        qint32 m_w;
        stream >> m_w;
        item.setW(m_w);
        qint32 m_h;
        stream >> m_h;
        item.setH(m_h);
    }
        break;
    case DocumentAttribute::typeDocumentAttributeAudioSecret23: {
        qint32 m_duration;
        stream >> m_duration;
        item.setDuration(m_duration);
    }
        break;
    }
    return stream;
}

QDebug operator<<(QDebug debug,  const DocumentAttribute &item) {
    QDebugStateSaver saver(debug);
    Q_UNUSED(saver)
    debug.nospace() << "Telegram.DocumentAttribute(";
    switch(item.classType()) {
    case DocumentAttribute::typeDocumentAttributeImageSize:
        debug.nospace() << "classType: typeDocumentAttributeImageSize";
        debug.nospace() << ", w: " << item.w();
        debug.nospace() << ", h: " << item.h();
        break;
    case DocumentAttribute::typeDocumentAttributeAnimated:
        debug.nospace() << "classType: typeDocumentAttributeAnimated";
        break;
    case DocumentAttribute::typeDocumentAttributeSticker:
        debug.nospace() << "classType: typeDocumentAttributeSticker";
        debug.nospace() << ", flags: " << item.flags();
        debug.nospace() << ", alt: " << item.alt();
        debug.nospace() << ", stickerset: " << item.stickerset();
        debug.nospace() << ", maskCoords: " << item.maskCoords();
        break;
    case DocumentAttribute::typeDocumentAttributeVideo:
        debug.nospace() << "classType: typeDocumentAttributeVideo";
        debug.nospace() << ", flags: " << item.flags();
        debug.nospace() << ", duration: " << item.duration();
        debug.nospace() << ", w: " << item.w();
        debug.nospace() << ", h: " << item.h();
        break;
    case DocumentAttribute::typeDocumentAttributeAudio:
        debug.nospace() << "classType: typeDocumentAttributeAudio";
        debug.nospace() << ", flags: " << item.flags();
        debug.nospace() << ", duration: " << item.duration();
        debug.nospace() << ", title: " << item.title();
        debug.nospace() << ", performer: " << item.performer();
        debug.nospace() << ", waveform: " << item.waveform();
        break;
    case DocumentAttribute::typeDocumentAttributeFilename:
        debug.nospace() << "classType: typeDocumentAttributeFilename";
        debug.nospace() << ", fileName: " << item.fileName();
        break;
    case DocumentAttribute::typeDocumentAttributeHasStickers:
        debug.nospace() << "classType: typeDocumentAttributeHasStickers";
        break;
    case DocumentAttribute::typeDocumentAttributeStickerSecret23:
        debug.nospace() << "classType: typeDocumentAttributeStickerSecret23";
        break;
    case DocumentAttribute::typeDocumentAttributeVideoSecret23:
        debug.nospace() << "classType: typeDocumentAttributeVideoSecret23";
        debug.nospace() << ", duration: " << item.duration();
        debug.nospace() << ", w: " << item.w();
        debug.nospace() << ", h: " << item.h();
        break;
    case DocumentAttribute::typeDocumentAttributeAudioSecret23:
        debug.nospace() << "classType: typeDocumentAttributeAudioSecret23";
        debug.nospace() << ", duration: " << item.duration();
        break;
    }
    debug.nospace() << ")";
    return debug;
}

