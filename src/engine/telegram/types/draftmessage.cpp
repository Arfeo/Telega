// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "draftmessage.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

DraftMessage::DraftMessage(DraftMessageClassType classType, InboundPkt *in) :
    m_date(0),
    m_flags(0),
    m_replyToMsgId(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

DraftMessage::DraftMessage(InboundPkt *in) :
    m_date(0),
    m_flags(0),
    m_replyToMsgId(0),
    m_classType(typeDraftMessageEmpty)
{
    fetch(in);
}

DraftMessage::DraftMessage(const DraftMessage &another) :
    TelegramTypeObject(),
    m_date(0),
    m_flags(0),
    m_replyToMsgId(0),
    m_classType(typeDraftMessageEmpty)
{
    operator=(another);
}

DraftMessage::DraftMessage(const Null &null) :
    TelegramTypeObject(null),
    m_date(0),
    m_flags(0),
    m_replyToMsgId(0),
    m_classType(typeDraftMessageEmpty)
{
}

DraftMessage::~DraftMessage() {
    
}

void DraftMessage::setDate(qint32 date) {
    m_date = date;
}

qint32 DraftMessage::date() const {
    return m_date;
}

void DraftMessage::setEntities(const QList<MessageEntity> &entities) {
    if(entities.length()) m_flags = (m_flags | (1<<3));
    else m_flags = (m_flags & ~(1<<3));
    m_entities = entities;
}

QList<MessageEntity> DraftMessage::entities() const {
    return m_entities;
}

void DraftMessage::setFlags(qint32 flags) {
    m_flags = flags;
}

qint32 DraftMessage::flags() const {
    return m_flags;
}

void DraftMessage::setMessage(const QString &message) {
    m_message = message;
}

QString DraftMessage::message() const {
    return m_message;
}

void DraftMessage::setNoWebpage(bool noWebpage) {
    if(noWebpage) m_flags = (m_flags | (1<<1));
    else m_flags = (m_flags & ~(1<<1));
}

bool DraftMessage::noWebpage() const {
    return (m_flags & 1<<1);
}

void DraftMessage::setReplyToMsgId(qint32 replyToMsgId) {
    if(replyToMsgId) m_flags = (m_flags | (1<<0));
    else m_flags = (m_flags & ~(1<<0));
    m_replyToMsgId = replyToMsgId;
}

qint32 DraftMessage::replyToMsgId() const {
    return m_replyToMsgId;
}

bool DraftMessage::operator ==(const DraftMessage &b) const {
    return m_classType == b.m_classType &&
           m_date == b.m_date &&
           m_entities == b.m_entities &&
           m_flags == b.m_flags &&
           m_message == b.m_message &&
           m_replyToMsgId == b.m_replyToMsgId;
}

DraftMessage &DraftMessage::operator =(const DraftMessage &b) {
    m_classType = b.m_classType;
    m_date = b.m_date;
    m_entities = b.m_entities;
    m_flags = b.m_flags;
    m_message = b.m_message;
    m_replyToMsgId = b.m_replyToMsgId;
    setNull(b.isNull());
    return *this;
}

void DraftMessage::setClassType(DraftMessage::DraftMessageClassType classType) {
    m_classType = classType;
}

DraftMessage::DraftMessageClassType DraftMessage::classType() const {
    return m_classType;
}

bool DraftMessage::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeDraftMessageEmpty: {
        m_classType = static_cast<DraftMessageClassType>(x);
        return true;
    }
        break;
    
    case typeDraftMessage: {
        m_flags = in->fetchInt();
        if(m_flags & 1<<0) {
            m_replyToMsgId = in->fetchInt();
        }
        m_message = in->fetchQString();
        if(m_flags & 1<<3) {
            if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
            qint32 m_entities_length = in->fetchInt();
            m_entities.clear();
            for (qint32 i = 0; i < m_entities_length; i++) {
                MessageEntity type;
                if(m_flags & 1<<3) {
                type.fetch(in);
            }
                m_entities.append(type);
            }
        }
        m_date = in->fetchInt();
        m_classType = static_cast<DraftMessageClassType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool DraftMessage::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeDraftMessageEmpty: {
        return true;
    }
        break;
    
    case typeDraftMessage: {
        out->appendInt(m_flags);
        if(m_flags & 1<<0) {
            out->appendInt(m_replyToMsgId);
        }
        out->appendQString(m_message);
        if(m_flags & 1<<3) {
            out->appendInt(CoreTypes::typeVector);
            out->appendInt(m_entities.count());
            for (qint32 i = 0; i < m_entities.count(); i++) {
                m_entities[i].push(out);
            }
        }
        out->appendInt(m_date);
        return true;
    }
        break;
    
    default:
        return false;
    }
}

QMap<QString, QVariant> DraftMessage::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeDraftMessageEmpty: {
        result["classType"] = "DraftMessage::typeDraftMessageEmpty";
        return result;
    }
        break;
    
    case typeDraftMessage: {
        result["classType"] = "DraftMessage::typeDraftMessage";
        if( noWebpage() ) result["noWebpage"] = QString::number(noWebpage());
        if( replyToMsgId() ) result["replyToMsgId"] = QString::number(replyToMsgId());
        if( !m_message.isEmpty() ) result["message"] = QVariant::fromValue<QString>(m_message);
        QList<QVariant> _entities;
        for(const MessageEntity &m__type: m_entities)
            if( !m__type.isNull() ) _entities << m__type.toMap();
        result["entities"] = _entities;
        if( date() ) result["date"] = QString::number(date());
        return result;
    }
        break;
    
    default:
        return result;
    }
}

DraftMessage DraftMessage::fromMap(const QMap<QString, QVariant> &map) {
    DraftMessage result;
    if(map.value("classType").toString() == "DraftMessage::typeDraftMessageEmpty") {
        result.setClassType(typeDraftMessageEmpty);
        return result;
    }
    if(map.value("classType").toString() == "DraftMessage::typeDraftMessage") {
        result.setClassType(typeDraftMessage);
        QVariant _noWebpage_var = map.value("noWebpage");
        if( !_noWebpage_var.isNull() ) {
            _noWebpage_var.convert( QVariant::nameToType("bool") );
            result.setNoWebpage( _noWebpage_var.value<bool>() );
        }
        
        QVariant _replyToMsgId_var = map.value("replyToMsgId");
        if( !_replyToMsgId_var.isNull() ) {
            _replyToMsgId_var.convert( QVariant::nameToType("qint32") );
            result.setReplyToMsgId( _replyToMsgId_var.value<qint32>() );
        }
        
        QVariant _message_var = map.value("message");
        if( !_message_var.isNull() ) {
            _message_var.convert( QVariant::nameToType("QString") );
            result.setMessage( _message_var.value<QString>() );
        }
        
        QList<QVariant> map_entities = map["entities"].toList();
        QList<MessageEntity> _entities;
        for(const QVariant &var: map_entities)
            _entities << MessageEntity::fromMap(var.toMap());
        result.setEntities(_entities);
        QVariant _date_var = map.value("date");
        if( !_date_var.isNull() ) {
            _date_var.convert( QVariant::nameToType("qint32") );
            result.setDate( _date_var.value<qint32>() );
        }
        
        return result;
    }
    return result;
}

DraftMessage DraftMessage::fromJson(const QString &json) {
    return DraftMessage::fromMap(QJsonDocument::fromJson(json.toUtf8()).toVariant().toMap());
}

QByteArray DraftMessage::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const DraftMessage &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case DraftMessage::typeDraftMessageEmpty:
        
        break;
    case DraftMessage::typeDraftMessage:
        stream << item.flags();
        stream << item.replyToMsgId();
        stream << item.message();
        stream << item.entities();
        stream << item.date();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, DraftMessage &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<DraftMessage::DraftMessageClassType>(type));
    switch(type) {
    case DraftMessage::typeDraftMessageEmpty: {
        
    }
        break;
    case DraftMessage::typeDraftMessage: {
        qint32 m_flags;
        stream >> m_flags;
        item.setFlags(m_flags);
        qint32 m_reply_to_msg_id;
        stream >> m_reply_to_msg_id;
        item.setReplyToMsgId(m_reply_to_msg_id);
        QString m_message;
        stream >> m_message;
        item.setMessage(m_message);
        QList<MessageEntity> m_entities;
        stream >> m_entities;
        item.setEntities(m_entities);
        qint32 m_date;
        stream >> m_date;
        item.setDate(m_date);
    }
        break;
    }
    return stream;
}

QDebug operator<<(QDebug debug,  const DraftMessage &item) {
    QDebugStateSaver saver(debug);
    Q_UNUSED(saver)
    debug.nospace() << "Telegram.DraftMessage(";
    switch(item.classType()) {
    case DraftMessage::typeDraftMessageEmpty:
        debug.nospace() << "classType: typeDraftMessageEmpty";
        break;
    case DraftMessage::typeDraftMessage:
        debug.nospace() << "classType: typeDraftMessage";
        debug.nospace() << ", flags: " << item.flags();
        debug.nospace() << ", replyToMsgId: " << item.replyToMsgId();
        debug.nospace() << ", message: " << item.message();
        debug.nospace() << ", entities: " << item.entities();
        debug.nospace() << ", date: " << item.date();
        break;
    }
    debug.nospace() << ")";
    return debug;
}

