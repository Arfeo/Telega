// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "exportedchatinvite.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

ExportedChatInvite::ExportedChatInvite(ExportedChatInviteClassType classType, InboundPkt *in) :
    m_classType(classType)
{
    if(in) fetch(in);
}

ExportedChatInvite::ExportedChatInvite(InboundPkt *in) :
    m_classType(typeChatInviteEmpty)
{
    fetch(in);
}

ExportedChatInvite::ExportedChatInvite(const ExportedChatInvite &another) :
    TelegramTypeObject(),
    m_classType(typeChatInviteEmpty)
{
    operator=(another);
}

ExportedChatInvite::ExportedChatInvite(const Null &null) :
    TelegramTypeObject(null),
    m_classType(typeChatInviteEmpty)
{
}

ExportedChatInvite::~ExportedChatInvite() {

}

void ExportedChatInvite::setLink(const QString &link) {
    m_link = link;
}

QString ExportedChatInvite::link() const {
    return m_link;
}

bool ExportedChatInvite::operator ==(const ExportedChatInvite &b) const {
    return m_classType == b.m_classType &&
           m_link == b.m_link;
}

ExportedChatInvite &ExportedChatInvite::operator =(const ExportedChatInvite &b) {
    m_classType = b.m_classType;
    m_link = b.m_link;
    setNull(b.isNull());
    return *this;
}

void ExportedChatInvite::setClassType(ExportedChatInvite::ExportedChatInviteClassType classType) {
    m_classType = classType;
}

ExportedChatInvite::ExportedChatInviteClassType ExportedChatInvite::classType() const {
    return m_classType;
}

bool ExportedChatInvite::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeChatInviteEmpty: {
        m_classType = static_cast<ExportedChatInviteClassType>(x);
        return true;
    }
        break;

    case typeChatInviteExported: {
        m_link = in->fetchQString();
        m_classType = static_cast<ExportedChatInviteClassType>(x);
        return true;
    }
        break;

    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool ExportedChatInvite::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeChatInviteEmpty: {
        return true;
    }
        break;

    case typeChatInviteExported: {
        out->appendQString(m_link);
        return true;
    }
        break;

    default:
        return false;
    }
}

QMap<QString, QVariant> ExportedChatInvite::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeChatInviteEmpty: {
        result["classType"] = "ExportedChatInvite::typeChatInviteEmpty";
        return result;
    }
        break;

    case typeChatInviteExported: {
        result["classType"] = "ExportedChatInvite::typeChatInviteExported";
        if( !m_link.isEmpty() ) result["link"] = QVariant::fromValue<QString>(m_link);
        return result;
    }
        break;

    default:
        return result;
    }
}

ExportedChatInvite ExportedChatInvite::fromMap(const QMap<QString, QVariant> &map) {
    ExportedChatInvite result;
    if(map.value("classType").toString() == "ExportedChatInvite::typeChatInviteEmpty") {
        result.setClassType(typeChatInviteEmpty);
        return result;
    }
    if(map.value("classType").toString() == "ExportedChatInvite::typeChatInviteExported") {
        result.setClassType(typeChatInviteExported);
        QVariant _link_var = map.value("link");
        if( !_link_var.isNull() ) {
            _link_var.convert( QVariant::nameToType("QString") );
            result.setLink( _link_var.value<QString>() );
        }

        return result;
    }
    return result;
}

ExportedChatInvite ExportedChatInvite::fromJson(const QString &json) {
    return ExportedChatInvite::fromMap(QJsonDocument::fromJson(json.toUtf8()).toVariant().toMap());
}

QByteArray ExportedChatInvite::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const ExportedChatInvite &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case ExportedChatInvite::typeChatInviteEmpty:

        break;
    case ExportedChatInvite::typeChatInviteExported:
        stream << item.link();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, ExportedChatInvite &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<ExportedChatInvite::ExportedChatInviteClassType>(type));
    switch(type) {
    case ExportedChatInvite::typeChatInviteEmpty: {

    }
        break;
    case ExportedChatInvite::typeChatInviteExported: {
        QString m_link;
        stream >> m_link;
        item.setLink(m_link);
    }
        break;
    }
    return stream;
}

/*QDebug operator<<(QDebug debug,  const ExportedChatInvite &item) {
    QDebugStateSaver saver(debug);
    Q_UNUSED(saver)
    debug.nospace() << "Telegram.ExportedChatInvite(";
    switch(item.classType()) {
    case ExportedChatInvite::typeChatInviteEmpty:
        debug.nospace() << "classType: typeChatInviteEmpty";
        break;
    case ExportedChatInvite::typeChatInviteExported:
        debug.nospace() << "classType: typeChatInviteExported";
        debug.nospace() << ", link: " << item.link();
        break;
    }
    debug.nospace() << ")";
    return debug;
}
*/
