// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "foundgif.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

FoundGif::FoundGif(FoundGifClassType classType, InboundPkt *in) :
    m_h(0),
    m_w(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

FoundGif::FoundGif(InboundPkt *in) :
    m_h(0),
    m_w(0),
    m_classType(typeFoundGif)
{
    fetch(in);
}

FoundGif::FoundGif(const FoundGif &another) :
    TelegramTypeObject(),
    m_h(0),
    m_w(0),
    m_classType(typeFoundGif)
{
    operator=(another);
}

FoundGif::FoundGif(const Null &null) :
    TelegramTypeObject(null),
    m_h(0),
    m_w(0),
    m_classType(typeFoundGif)
{
}

FoundGif::~FoundGif() {

}

void FoundGif::setContentType(const QString &contentType) {
    m_contentType = contentType;
}

QString FoundGif::contentType() const {
    return m_contentType;
}

void FoundGif::setContentUrl(const QString &contentUrl) {
    m_contentUrl = contentUrl;
}

QString FoundGif::contentUrl() const {
    return m_contentUrl;
}

void FoundGif::setDocument(const Document &document) {
    m_document = document;
}

Document FoundGif::document() const {
    return m_document;
}

void FoundGif::setH(qint32 h) {
    m_h = h;
}

qint32 FoundGif::h() const {
    return m_h;
}

void FoundGif::setPhoto(const Photo &photo) {
    m_photo = photo;
}

Photo FoundGif::photo() const {
    return m_photo;
}

void FoundGif::setThumbUrl(const QString &thumbUrl) {
    m_thumbUrl = thumbUrl;
}

QString FoundGif::thumbUrl() const {
    return m_thumbUrl;
}

void FoundGif::setUrl(const QString &url) {
    m_url = url;
}

QString FoundGif::url() const {
    return m_url;
}

void FoundGif::setW(qint32 w) {
    m_w = w;
}

qint32 FoundGif::w() const {
    return m_w;
}

bool FoundGif::operator ==(const FoundGif &b) const {
    return m_classType == b.m_classType &&
           m_contentType == b.m_contentType &&
           m_contentUrl == b.m_contentUrl &&
           m_document == b.m_document &&
           m_h == b.m_h &&
           m_photo == b.m_photo &&
           m_thumbUrl == b.m_thumbUrl &&
           m_url == b.m_url &&
           m_w == b.m_w;
}

FoundGif &FoundGif::operator =(const FoundGif &b) {
    m_classType = b.m_classType;
    m_contentType = b.m_contentType;
    m_contentUrl = b.m_contentUrl;
    m_document = b.m_document;
    m_h = b.m_h;
    m_photo = b.m_photo;
    m_thumbUrl = b.m_thumbUrl;
    m_url = b.m_url;
    m_w = b.m_w;
    setNull(b.isNull());
    return *this;
}

void FoundGif::setClassType(FoundGif::FoundGifClassType classType) {
    m_classType = classType;
}

FoundGif::FoundGifClassType FoundGif::classType() const {
    return m_classType;
}

bool FoundGif::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeFoundGif: {
        m_url = in->fetchQString();
        m_thumbUrl = in->fetchQString();
        m_contentUrl = in->fetchQString();
        m_contentType = in->fetchQString();
        m_w = in->fetchInt();
        m_h = in->fetchInt();
        m_classType = static_cast<FoundGifClassType>(x);
        return true;
    }
        break;

    case typeFoundGifCached: {
        m_url = in->fetchQString();
        m_photo.fetch(in);
        m_document.fetch(in);
        m_classType = static_cast<FoundGifClassType>(x);
        return true;
    }
        break;

    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool FoundGif::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeFoundGif: {
        out->appendQString(m_url);
        out->appendQString(m_thumbUrl);
        out->appendQString(m_contentUrl);
        out->appendQString(m_contentType);
        out->appendInt(m_w);
        out->appendInt(m_h);
        return true;
    }
        break;

    case typeFoundGifCached: {
        out->appendQString(m_url);
        m_photo.push(out);
        m_document.push(out);
        return true;
    }
        break;

    default:
        return false;
    }
}

QMap<QString, QVariant> FoundGif::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeFoundGif: {
        result["classType"] = "FoundGif::typeFoundGif";
        if( !m_url.isEmpty() ) result["url"] = QVariant::fromValue<QString>(m_url);
        if( !m_thumbUrl.isEmpty() ) result["thumbUrl"] = QVariant::fromValue<QString>(m_thumbUrl);
        if( !m_contentUrl.isEmpty() ) result["contentUrl"] = QVariant::fromValue<QString>(m_contentUrl);
        if( !m_contentType.isEmpty() ) result["contentType"] = QVariant::fromValue<QString>(m_contentType);
        if( w() ) result["w"] = QString::number(w());
        if( h() ) result["h"] = QString::number(h());
        return result;
    }
        break;

    case typeFoundGifCached: {
        result["classType"] = "FoundGif::typeFoundGifCached";
        if( !m_url.isEmpty() ) result["url"] = QVariant::fromValue<QString>(m_url);
        if( !m_photo.isNull() ) result["photo"] = m_photo.toMap();
        if( !m_document.isNull() ) result["document"] = m_document.toMap();
        return result;
    }
        break;

    default:
        return result;
    }
}

FoundGif FoundGif::fromMap(const QMap<QString, QVariant> &map) {
    FoundGif result;
    if(map.value("classType").toString() == "FoundGif::typeFoundGif") {
        result.setClassType(typeFoundGif);
        QVariant _url_var = map.value("url");
        if( !_url_var.isNull() ) {
            _url_var.convert( QVariant::nameToType("QString") );
            result.setUrl( _url_var.value<QString>() );
        }

        QVariant _thumbUrl_var = map.value("thumbUrl");
        if( !_thumbUrl_var.isNull() ) {
            _thumbUrl_var.convert( QVariant::nameToType("QString") );
            result.setThumbUrl( _thumbUrl_var.value<QString>() );
        }

        QVariant _contentUrl_var = map.value("contentUrl");
        if( !_contentUrl_var.isNull() ) {
            _contentUrl_var.convert( QVariant::nameToType("QString") );
            result.setContentUrl( _contentUrl_var.value<QString>() );
        }

        QVariant _contentType_var = map.value("contentType");
        if( !_contentType_var.isNull() ) {
            _contentType_var.convert( QVariant::nameToType("QString") );
            result.setContentType( _contentType_var.value<QString>() );
        }

        QVariant _w_var = map.value("w");
        if( !_w_var.isNull() ) {
            _w_var.convert( QVariant::nameToType("qint32") );
            result.setW( _w_var.value<qint32>() );
        }

        QVariant _h_var = map.value("h");
        if( !_h_var.isNull() ) {
            _h_var.convert( QVariant::nameToType("qint32") );
            result.setH( _h_var.value<qint32>() );
        }

        return result;
    }
    if(map.value("classType").toString() == "FoundGif::typeFoundGifCached") {
        result.setClassType(typeFoundGifCached);
        QVariant _url_var = map.value("url");
        if( !_url_var.isNull() ) {
            _url_var.convert( QVariant::nameToType("QString") );
            result.setUrl( _url_var.value<QString>() );
        }

        QVariant _photo_var = map.value("photo");
        if( !_photo_var.isNull() )
            result.setPhoto( Photo::fromMap(_photo_var.toMap()) );

        QVariant _document_var = map.value("document");
        if( !_document_var.isNull() )
            result.setDocument( Document::fromMap(_document_var.toMap()) );

        return result;
    }
    return result;
}

FoundGif FoundGif::fromJson(const QString &json) {
    return FoundGif::fromMap(QJsonDocument::fromJson(json.toUtf8()).toVariant().toMap());
}

QByteArray FoundGif::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const FoundGif &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case FoundGif::typeFoundGif:
        stream << item.url();
        stream << item.thumbUrl();
        stream << item.contentUrl();
        stream << item.contentType();
        stream << item.w();
        stream << item.h();
        break;
    case FoundGif::typeFoundGifCached:
        stream << item.url();
        stream << item.photo();
        stream << item.document();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, FoundGif &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<FoundGif::FoundGifClassType>(type));
    switch(type) {
    case FoundGif::typeFoundGif: {
        QString m_url;
        stream >> m_url;
        item.setUrl(m_url);
        QString m_thumb_url;
        stream >> m_thumb_url;
        item.setThumbUrl(m_thumb_url);
        QString m_content_url;
        stream >> m_content_url;
        item.setContentUrl(m_content_url);
        QString m_content_type;
        stream >> m_content_type;
        item.setContentType(m_content_type);
        qint32 m_w;
        stream >> m_w;
        item.setW(m_w);
        qint32 m_h;
        stream >> m_h;
        item.setH(m_h);
    }
        break;
    case FoundGif::typeFoundGifCached: {
        QString m_url;
        stream >> m_url;
        item.setUrl(m_url);
        Photo m_photo;
        stream >> m_photo;
        item.setPhoto(m_photo);
        Document m_document;
        stream >> m_document;
        item.setDocument(m_document);
    }
        break;
    }
    return stream;
}

/*QDebug operator<<(QDebug debug,  const FoundGif &item) {
    QDebugStateSaver saver(debug);
    Q_UNUSED(saver)
    debug.nospace() << "Telegram.FoundGif(";
    switch(item.classType()) {
    case FoundGif::typeFoundGif:
        debug.nospace() << "classType: typeFoundGif";
        debug.nospace() << ", url: " << item.url();
        debug.nospace() << ", thumbUrl: " << item.thumbUrl();
        debug.nospace() << ", contentUrl: " << item.contentUrl();
        debug.nospace() << ", contentType: " << item.contentType();
        debug.nospace() << ", w: " << item.w();
        debug.nospace() << ", h: " << item.h();
        break;
    case FoundGif::typeFoundGifCached:
        debug.nospace() << "classType: typeFoundGifCached";
        debug.nospace() << ", url: " << item.url();
        debug.nospace() << ", photo: " << item.photo();
        debug.nospace() << ", document: " << item.document();
        break;
    }
    debug.nospace() << ")";
    return debug;
}
*/
