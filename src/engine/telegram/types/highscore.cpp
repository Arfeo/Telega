// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "highscore.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

HighScore::HighScore(HighScoreClassType classType, InboundPkt *in) :
    m_pos(0),
    m_score(0),
    m_userId(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

HighScore::HighScore(InboundPkt *in) :
    m_pos(0),
    m_score(0),
    m_userId(0),
    m_classType(typeHighScore)
{
    fetch(in);
}

HighScore::HighScore(const HighScore &another) :
    TelegramTypeObject(),
    m_pos(0),
    m_score(0),
    m_userId(0),
    m_classType(typeHighScore)
{
    operator=(another);
}

HighScore::HighScore(const Null &null) :
    TelegramTypeObject(null),
    m_pos(0),
    m_score(0),
    m_userId(0),
    m_classType(typeHighScore)
{
}

HighScore::~HighScore() {
    
}

void HighScore::setPos(qint32 pos) {
    m_pos = pos;
}

qint32 HighScore::pos() const {
    return m_pos;
}

void HighScore::setScore(qint32 score) {
    m_score = score;
}

qint32 HighScore::score() const {
    return m_score;
}

void HighScore::setUserId(qint32 userId) {
    m_userId = userId;
}

qint32 HighScore::userId() const {
    return m_userId;
}

bool HighScore::operator ==(const HighScore &b) const {
    return m_classType == b.m_classType &&
           m_pos == b.m_pos &&
           m_score == b.m_score &&
           m_userId == b.m_userId;
}

HighScore &HighScore::operator =(const HighScore &b) {
    m_classType = b.m_classType;
    m_pos = b.m_pos;
    m_score = b.m_score;
    m_userId = b.m_userId;
    setNull(b.isNull());
    return *this;
}

void HighScore::setClassType(HighScore::HighScoreClassType classType) {
    m_classType = classType;
}

HighScore::HighScoreClassType HighScore::classType() const {
    return m_classType;
}

bool HighScore::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeHighScore: {
        m_pos = in->fetchInt();
        m_userId = in->fetchInt();
        m_score = in->fetchInt();
        m_classType = static_cast<HighScoreClassType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool HighScore::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeHighScore: {
        out->appendInt(m_pos);
        out->appendInt(m_userId);
        out->appendInt(m_score);
        return true;
    }
        break;
    
    default:
        return false;
    }
}

QMap<QString, QVariant> HighScore::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeHighScore: {
        result["classType"] = "HighScore::typeHighScore";
        if( pos() ) result["pos"] = QString::number(pos());
        if( userId() ) result["userId"] = QString::number(userId());
        if( score() ) result["score"] = QString::number(score());
        return result;
    }
        break;
    
    default:
        return result;
    }
}

HighScore HighScore::fromMap(const QMap<QString, QVariant> &map) {
    HighScore result;
    if(map.value("classType").toString() == "HighScore::typeHighScore") {
        result.setClassType(typeHighScore);
        QVariant _pos_var = map.value("pos");
        if( !_pos_var.isNull() ) {
            _pos_var.convert( QVariant::nameToType("qint32") );
            result.setPos( _pos_var.value<qint32>() );
        }
        
        QVariant _userId_var = map.value("userId");
        if( !_userId_var.isNull() ) {
            _userId_var.convert( QVariant::nameToType("qint32") );
            result.setUserId( _userId_var.value<qint32>() );
        }
        
        QVariant _score_var = map.value("score");
        if( !_score_var.isNull() ) {
            _score_var.convert( QVariant::nameToType("qint32") );
            result.setScore( _score_var.value<qint32>() );
        }
        
        return result;
    }
    return result;
}

HighScore HighScore::fromJson(const QString &json) {
    return HighScore::fromMap(QJsonDocument::fromJson(json.toUtf8()).toVariant().toMap());
}

QByteArray HighScore::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const HighScore &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case HighScore::typeHighScore:
        stream << item.pos();
        stream << item.userId();
        stream << item.score();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, HighScore &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<HighScore::HighScoreClassType>(type));
    switch(type) {
    case HighScore::typeHighScore: {
        qint32 m_pos;
        stream >> m_pos;
        item.setPos(m_pos);
        qint32 m_user_id;
        stream >> m_user_id;
        item.setUserId(m_user_id);
        qint32 m_score;
        stream >> m_score;
        item.setScore(m_score);
    }
        break;
    }
    return stream;
}

QDebug operator<<(QDebug debug,  const HighScore &item) {
    QDebugStateSaver saver(debug);
    Q_UNUSED(saver)
    debug.nospace() << "Telegram.HighScore(";
    switch(item.classType()) {
    case HighScore::typeHighScore:
        debug.nospace() << "classType: typeHighScore";
        debug.nospace() << ", pos: " << item.pos();
        debug.nospace() << ", userId: " << item.userId();
        debug.nospace() << ", score: " << item.score();
        break;
    }
    debug.nospace() << ")";
    return debug;
}

