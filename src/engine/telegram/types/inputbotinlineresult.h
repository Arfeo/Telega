// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_INPUTBOTINLINERESULT
#define LQTG_TYPE_INPUTBOTINLINERESULT

#include "telegramtypeobject.h"

#include <QMetaType>
#include <QVariant>
#include "../coretypes.h"

#include <QDataStream>

#include <QString>
#include "inputdocument.h"
#include <QtGlobal>
#include "inputphoto.h"
#include "inputbotinlinemessage.h"

class LIBQTELEGRAMSHARED_EXPORT InputBotInlineResult : public TelegramTypeObject
{
public:
    enum InputBotInlineResultClassType {
        typeInputBotInlineResult = 0x2cbbe15a,
        typeInputBotInlineResultPhoto = 0xa8d864a7,
        typeInputBotInlineResultDocument = 0xfff8fdc4,
        typeInputBotInlineResultGame = 0x4fa417f2
    };

    InputBotInlineResult(InputBotInlineResultClassType classType = typeInputBotInlineResult, InboundPkt *in = 0);
    InputBotInlineResult(InboundPkt *in);
    InputBotInlineResult(const Null&);
    InputBotInlineResult(const InputBotInlineResult &another);
    virtual ~InputBotInlineResult();

    void setContentType(const QString &contentType);
    QString contentType() const;

    void setContentUrl(const QString &contentUrl);
    QString contentUrl() const;

    void setDescription(const QString &description);
    QString description() const;

    void setDocument(const InputDocument &document);
    InputDocument document() const;

    void setDuration(qint32 duration);
    qint32 duration() const;

    void setFlags(qint32 flags);
    qint32 flags() const;

    void setH(qint32 h);
    qint32 h() const;

    void setId(const QString &id);
    QString id() const;

    void setPhoto(const InputPhoto &photo);
    InputPhoto photo() const;

    void setSendMessage(const InputBotInlineMessage &sendMessage);
    InputBotInlineMessage sendMessage() const;

    void setShortName(const QString &shortName);
    QString shortName() const;

    void setThumbUrl(const QString &thumbUrl);
    QString thumbUrl() const;

    void setTitle(const QString &title);
    QString title() const;

    void setType(const QString &type);
    QString type() const;

    void setUrl(const QString &url);
    QString url() const;

    void setW(qint32 w);
    qint32 w() const;

    void setClassType(InputBotInlineResultClassType classType);
    InputBotInlineResultClassType classType() const;

    bool fetch(InboundPkt *in);
    bool push(OutboundPkt *out) const;

    QMap<QString, QVariant> toMap() const;
    static InputBotInlineResult fromMap(const QMap<QString, QVariant> &map);
    static InputBotInlineResult fromJson(const QString &json);

    bool operator ==(const InputBotInlineResult &b) const;
    InputBotInlineResult &operator =(const InputBotInlineResult &b);

    bool operator==(bool stt) const { return isNull() != stt; }
    bool operator!=(bool stt) const { return !operator ==(stt); }

    QByteArray getHash(QCryptographicHash::Algorithm alg = QCryptographicHash::Md5) const;

private:
    QString m_contentType;
    QString m_contentUrl;
    QString m_description;
    InputDocument m_document;
    qint32 m_duration;
    qint32 m_flags;
    qint32 m_h;
    QString m_id;
    InputPhoto m_photo;
    InputBotInlineMessage m_sendMessage;
    QString m_shortName;
    QString m_thumbUrl;
    QString m_title;
    QString m_type;
    QString m_url;
    qint32 m_w;
    InputBotInlineResultClassType m_classType;
};

Q_DECLARE_METATYPE(InputBotInlineResult)

QDataStream LIBQTELEGRAMSHARED_EXPORT &operator<<(QDataStream &stream, const InputBotInlineResult &item);
QDataStream LIBQTELEGRAMSHARED_EXPORT &operator>>(QDataStream &stream, InputBotInlineResult &item);

QDebug LIBQTELEGRAMSHARED_EXPORT operator<<(QDebug debug,  const InputBotInlineResult &item);

#endif // LQTG_TYPE_INPUTBOTINLINERESULT
