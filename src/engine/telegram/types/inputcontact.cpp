// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "inputcontact.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

InputContact::InputContact(InputContactClassType classType, InboundPkt *in) :
    m_clientId(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

InputContact::InputContact(InboundPkt *in) :
    m_clientId(0),
    m_classType(typeInputPhoneContact)
{
    fetch(in);
}

InputContact::InputContact(const InputContact &another) :
    TelegramTypeObject(),
    m_clientId(0),
    m_classType(typeInputPhoneContact)
{
    operator=(another);
}

InputContact::InputContact(const Null &null) :
    TelegramTypeObject(null),
    m_clientId(0),
    m_classType(typeInputPhoneContact)
{
}

InputContact::~InputContact() {
    
}

void InputContact::setClientId(qint64 clientId) {
    m_clientId = clientId;
}

qint64 InputContact::clientId() const {
    return m_clientId;
}

void InputContact::setFirstName(const QString &firstName) {
    m_firstName = firstName;
}

QString InputContact::firstName() const {
    return m_firstName;
}

void InputContact::setLastName(const QString &lastName) {
    m_lastName = lastName;
}

QString InputContact::lastName() const {
    return m_lastName;
}

void InputContact::setPhone(const QString &phone) {
    m_phone = phone;
}

QString InputContact::phone() const {
    return m_phone;
}

bool InputContact::operator ==(const InputContact &b) const {
    return m_classType == b.m_classType &&
           m_clientId == b.m_clientId &&
           m_firstName == b.m_firstName &&
           m_lastName == b.m_lastName &&
           m_phone == b.m_phone;
}

InputContact &InputContact::operator =(const InputContact &b) {
    m_classType = b.m_classType;
    m_clientId = b.m_clientId;
    m_firstName = b.m_firstName;
    m_lastName = b.m_lastName;
    m_phone = b.m_phone;
    setNull(b.isNull());
    return *this;
}

void InputContact::setClassType(InputContact::InputContactClassType classType) {
    m_classType = classType;
}

InputContact::InputContactClassType InputContact::classType() const {
    return m_classType;
}

bool InputContact::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeInputPhoneContact: {
        m_clientId = in->fetchLong();
        m_phone = in->fetchQString();
        m_firstName = in->fetchQString();
        m_lastName = in->fetchQString();
        m_classType = static_cast<InputContactClassType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool InputContact::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeInputPhoneContact: {
        out->appendLong(m_clientId);
        out->appendQString(m_phone);
        out->appendQString(m_firstName);
        out->appendQString(m_lastName);
        return true;
    }
        break;
    
    default:
        return false;
    }
}

QMap<QString, QVariant> InputContact::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeInputPhoneContact: {
        result["classType"] = "InputContact::typeInputPhoneContact";
        if( clientId() ) result["clientId"] = QString::number(clientId());
        if( !m_phone.isEmpty() ) result["phone"] = QVariant::fromValue<QString>(m_phone);
        if( !m_firstName.isEmpty() ) result["firstName"] = QVariant::fromValue<QString>(m_firstName);
        if( !m_lastName.isEmpty() ) result["lastName"] = QVariant::fromValue<QString>(m_lastName);
        return result;
    }
        break;
    
    default:
        return result;
    }
}

InputContact InputContact::fromMap(const QMap<QString, QVariant> &map) {
    InputContact result;
    if(map.value("classType").toString() == "InputContact::typeInputPhoneContact") {
        result.setClassType(typeInputPhoneContact);
        QVariant _clientId_var = map.value("clientId");
        if( !_clientId_var.isNull() ) {
            _clientId_var.convert( QVariant::nameToType("qint64") );
            result.setClientId( _clientId_var.value<qint64>() );
        }
        
        QVariant _phone_var = map.value("phone");
        if( !_phone_var.isNull() ) {
            _phone_var.convert( QVariant::nameToType("QString") );
            result.setPhone( _phone_var.value<QString>() );
        }
        
        QVariant _firstName_var = map.value("firstName");
        if( !_firstName_var.isNull() ) {
            _firstName_var.convert( QVariant::nameToType("QString") );
            result.setFirstName( _firstName_var.value<QString>() );
        }
        
        QVariant _lastName_var = map.value("lastName");
        if( !_lastName_var.isNull() ) {
            _lastName_var.convert( QVariant::nameToType("QString") );
            result.setLastName( _lastName_var.value<QString>() );
        }
        
        return result;
    }
    return result;
}

InputContact InputContact::fromJson(const QString &json) {
    return InputContact::fromMap(QJsonDocument::fromJson(json.toUtf8()).toVariant().toMap());
}

QByteArray InputContact::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const InputContact &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case InputContact::typeInputPhoneContact:
        stream << item.clientId();
        stream << item.phone();
        stream << item.firstName();
        stream << item.lastName();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, InputContact &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<InputContact::InputContactClassType>(type));
    switch(type) {
    case InputContact::typeInputPhoneContact: {
        qint64 m_client_id;
        stream >> m_client_id;
        item.setClientId(m_client_id);
        QString m_phone;
        stream >> m_phone;
        item.setPhone(m_phone);
        QString m_first_name;
        stream >> m_first_name;
        item.setFirstName(m_first_name);
        QString m_last_name;
        stream >> m_last_name;
        item.setLastName(m_last_name);
    }
        break;
    }
    return stream;
}

QDebug operator<<(QDebug debug,  const InputContact &item) {
    QDebugStateSaver saver(debug);
    Q_UNUSED(saver)
    debug.nospace() << "Telegram.InputContact(";
    switch(item.classType()) {
    case InputContact::typeInputPhoneContact:
        debug.nospace() << "classType: typeInputPhoneContact";
        debug.nospace() << ", clientId: " << item.clientId();
        debug.nospace() << ", phone: " << item.phone();
        debug.nospace() << ", firstName: " << item.firstName();
        debug.nospace() << ", lastName: " << item.lastName();
        break;
    }
    debug.nospace() << ")";
    return debug;
}

