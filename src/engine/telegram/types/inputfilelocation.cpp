// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "inputfilelocation.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

InputFileLocation::InputFileLocation(InputFileLocationClassType classType, InboundPkt *in) :
    m_accessHash(0),
    m_id(0),
    m_localId(0),
    m_secret(0),
    m_version(0),
    m_volumeId(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

InputFileLocation::InputFileLocation(InboundPkt *in) :
    m_accessHash(0),
    m_id(0),
    m_localId(0),
    m_secret(0),
    m_version(0),
    m_volumeId(0),
    m_classType(typeInputFileLocation)
{
    fetch(in);
}

InputFileLocation::InputFileLocation(const InputFileLocation &another) :
    TelegramTypeObject(),
    m_accessHash(0),
    m_id(0),
    m_localId(0),
    m_secret(0),
    m_version(0),
    m_volumeId(0),
    m_classType(typeInputFileLocation)
{
    operator=(another);
}

InputFileLocation::InputFileLocation(const Null &null) :
    TelegramTypeObject(null),
    m_accessHash(0),
    m_id(0),
    m_localId(0),
    m_secret(0),
    m_version(0),
    m_volumeId(0),
    m_classType(typeInputFileLocation)
{
}

InputFileLocation::~InputFileLocation() {
    
}

void InputFileLocation::setAccessHash(qint64 accessHash) {
    m_accessHash = accessHash;
}

qint64 InputFileLocation::accessHash() const {
    return m_accessHash;
}

void InputFileLocation::setId(qint64 id) {
    m_id = id;
}

qint64 InputFileLocation::id() const {
    return m_id;
}

void InputFileLocation::setLocalId(qint32 localId) {
    m_localId = localId;
}

qint32 InputFileLocation::localId() const {
    return m_localId;
}

void InputFileLocation::setSecret(qint64 secret) {
    m_secret = secret;
}

qint64 InputFileLocation::secret() const {
    return m_secret;
}

void InputFileLocation::setVersion(qint32 version) {
    m_version = version;
}

qint32 InputFileLocation::version() const {
    return m_version;
}

void InputFileLocation::setVolumeId(qint64 volumeId) {
    m_volumeId = volumeId;
}

qint64 InputFileLocation::volumeId() const {
    return m_volumeId;
}

bool InputFileLocation::operator ==(const InputFileLocation &b) const {
    return m_classType == b.m_classType &&
           m_accessHash == b.m_accessHash &&
           m_id == b.m_id &&
           m_localId == b.m_localId &&
           m_secret == b.m_secret &&
           m_version == b.m_version &&
           m_volumeId == b.m_volumeId;
}

InputFileLocation &InputFileLocation::operator =(const InputFileLocation &b) {
    m_classType = b.m_classType;
    m_accessHash = b.m_accessHash;
    m_id = b.m_id;
    m_localId = b.m_localId;
    m_secret = b.m_secret;
    m_version = b.m_version;
    m_volumeId = b.m_volumeId;
    setNull(b.isNull());
    return *this;
}

void InputFileLocation::setClassType(InputFileLocation::InputFileLocationClassType classType) {
    m_classType = classType;
}

InputFileLocation::InputFileLocationClassType InputFileLocation::classType() const {
    return m_classType;
}

bool InputFileLocation::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeInputFileLocation: {
        m_volumeId = in->fetchLong();
        m_localId = in->fetchInt();
        m_secret = in->fetchLong();
        m_classType = static_cast<InputFileLocationClassType>(x);
        return true;
    }
        break;
    
    case typeInputEncryptedFileLocation: {
        m_id = in->fetchLong();
        m_accessHash = in->fetchLong();
        m_classType = static_cast<InputFileLocationClassType>(x);
        return true;
    }
        break;
    
    case typeInputDocumentFileLocation: {
        m_id = in->fetchLong();
        m_accessHash = in->fetchLong();
        m_version = in->fetchInt();
        m_classType = static_cast<InputFileLocationClassType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool InputFileLocation::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeInputFileLocation: {
        out->appendLong(m_volumeId);
        out->appendInt(m_localId);
        out->appendLong(m_secret);
        return true;
    }
        break;
    
    case typeInputEncryptedFileLocation: {
        out->appendLong(m_id);
        out->appendLong(m_accessHash);
        return true;
    }
        break;
    
    case typeInputDocumentFileLocation: {
        out->appendLong(m_id);
        out->appendLong(m_accessHash);
        out->appendInt(m_version);
        return true;
    }
        break;
    
    default:
        return false;
    }
}

QMap<QString, QVariant> InputFileLocation::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeInputFileLocation: {
        result["classType"] = "InputFileLocation::typeInputFileLocation";
        if( volumeId() ) result["volumeId"] = QString::number(volumeId());
        if( localId() ) result["localId"] = QString::number(localId());
        if( secret() ) result["secret"] = QString::number(secret());
        return result;
    }
        break;
    
    case typeInputEncryptedFileLocation: {
        result["classType"] = "InputFileLocation::typeInputEncryptedFileLocation";
        if( id() ) result["id"] = QString::number(id());
        if( accessHash() ) result["accessHash"] = QString::number(accessHash());
        return result;
    }
        break;
    
    case typeInputDocumentFileLocation: {
        result["classType"] = "InputFileLocation::typeInputDocumentFileLocation";
        if( id() ) result["id"] = QString::number(id());
        if( accessHash() ) result["accessHash"] = QString::number(accessHash());
        if( version() ) result["version"] = QString::number(version());
        return result;
    }
        break;
    
    default:
        return result;
    }
}

InputFileLocation InputFileLocation::fromMap(const QMap<QString, QVariant> &map) {
    InputFileLocation result;
    if(map.value("classType").toString() == "InputFileLocation::typeInputFileLocation") {
        result.setClassType(typeInputFileLocation);
        QVariant _volumeId_var = map.value("volumeId");
        if( !_volumeId_var.isNull() ) {
            _volumeId_var.convert( QVariant::nameToType("qint64") );
            result.setVolumeId( _volumeId_var.value<qint64>() );
        }
        
        QVariant _localId_var = map.value("localId");
        if( !_localId_var.isNull() ) {
            _localId_var.convert( QVariant::nameToType("qint32") );
            result.setLocalId( _localId_var.value<qint32>() );
        }
        
        QVariant _secret_var = map.value("secret");
        if( !_secret_var.isNull() ) {
            _secret_var.convert( QVariant::nameToType("qint64") );
            result.setSecret( _secret_var.value<qint64>() );
        }
        
        return result;
    }
    if(map.value("classType").toString() == "InputFileLocation::typeInputEncryptedFileLocation") {
        result.setClassType(typeInputEncryptedFileLocation);
        QVariant _id_var = map.value("id");
        if( !_id_var.isNull() ) {
            _id_var.convert( QVariant::nameToType("qint64") );
            result.setId( _id_var.value<qint64>() );
        }
        
        QVariant _accessHash_var = map.value("accessHash");
        if( !_accessHash_var.isNull() ) {
            _accessHash_var.convert( QVariant::nameToType("qint64") );
            result.setAccessHash( _accessHash_var.value<qint64>() );
        }
        
        return result;
    }
    if(map.value("classType").toString() == "InputFileLocation::typeInputDocumentFileLocation") {
        result.setClassType(typeInputDocumentFileLocation);
        QVariant _id_var = map.value("id");
        if( !_id_var.isNull() ) {
            _id_var.convert( QVariant::nameToType("qint64") );
            result.setId( _id_var.value<qint64>() );
        }
        
        QVariant _accessHash_var = map.value("accessHash");
        if( !_accessHash_var.isNull() ) {
            _accessHash_var.convert( QVariant::nameToType("qint64") );
            result.setAccessHash( _accessHash_var.value<qint64>() );
        }
        
        QVariant _version_var = map.value("version");
        if( !_version_var.isNull() ) {
            _version_var.convert( QVariant::nameToType("qint32") );
            result.setVersion( _version_var.value<qint32>() );
        }
        
        return result;
    }
    return result;
}

InputFileLocation InputFileLocation::fromJson(const QString &json) {
    return InputFileLocation::fromMap(QJsonDocument::fromJson(json.toUtf8()).toVariant().toMap());
}

QByteArray InputFileLocation::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const InputFileLocation &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case InputFileLocation::typeInputFileLocation:
        stream << item.volumeId();
        stream << item.localId();
        stream << item.secret();
        break;
    case InputFileLocation::typeInputEncryptedFileLocation:
        stream << item.id();
        stream << item.accessHash();
        break;
    case InputFileLocation::typeInputDocumentFileLocation:
        stream << item.id();
        stream << item.accessHash();
        stream << item.version();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, InputFileLocation &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<InputFileLocation::InputFileLocationClassType>(type));
    switch(type) {
    case InputFileLocation::typeInputFileLocation: {
        qint64 m_volume_id;
        stream >> m_volume_id;
        item.setVolumeId(m_volume_id);
        qint32 m_local_id;
        stream >> m_local_id;
        item.setLocalId(m_local_id);
        qint64 m_secret;
        stream >> m_secret;
        item.setSecret(m_secret);
    }
        break;
    case InputFileLocation::typeInputEncryptedFileLocation: {
        qint64 m_id;
        stream >> m_id;
        item.setId(m_id);
        qint64 m_access_hash;
        stream >> m_access_hash;
        item.setAccessHash(m_access_hash);
    }
        break;
    case InputFileLocation::typeInputDocumentFileLocation: {
        qint64 m_id;
        stream >> m_id;
        item.setId(m_id);
        qint64 m_access_hash;
        stream >> m_access_hash;
        item.setAccessHash(m_access_hash);
        qint32 m_version;
        stream >> m_version;
        item.setVersion(m_version);
    }
        break;
    }
    return stream;
}

QDebug operator<<(QDebug debug,  const InputFileLocation &item) {
    QDebugStateSaver saver(debug);
    Q_UNUSED(saver)
    debug.nospace() << "Telegram.InputFileLocation(";
    switch(item.classType()) {
    case InputFileLocation::typeInputFileLocation:
        debug.nospace() << "classType: typeInputFileLocation";
        debug.nospace() << ", volumeId: " << item.volumeId();
        debug.nospace() << ", localId: " << item.localId();
        debug.nospace() << ", secret: " << item.secret();
        break;
    case InputFileLocation::typeInputEncryptedFileLocation:
        debug.nospace() << "classType: typeInputEncryptedFileLocation";
        debug.nospace() << ", id: " << item.id();
        debug.nospace() << ", accessHash: " << item.accessHash();
        break;
    case InputFileLocation::typeInputDocumentFileLocation:
        debug.nospace() << "classType: typeInputDocumentFileLocation";
        debug.nospace() << ", id: " << item.id();
        debug.nospace() << ", accessHash: " << item.accessHash();
        debug.nospace() << ", version: " << item.version();
        break;
    }
    debug.nospace() << ")";
    return debug;
}

