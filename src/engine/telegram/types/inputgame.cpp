// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "inputgame.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

InputGame::InputGame(InputGameClassType classType, InboundPkt *in) :
    m_accessHash(0),
    m_id(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

InputGame::InputGame(InboundPkt *in) :
    m_accessHash(0),
    m_id(0),
    m_classType(typeInputGameID)
{
    fetch(in);
}

InputGame::InputGame(const InputGame &another) :
    TelegramTypeObject(),
    m_accessHash(0),
    m_id(0),
    m_classType(typeInputGameID)
{
    operator=(another);
}

InputGame::InputGame(const Null &null) :
    TelegramTypeObject(null),
    m_accessHash(0),
    m_id(0),
    m_classType(typeInputGameID)
{
}

InputGame::~InputGame() {

}

void InputGame::setAccessHash(qint64 accessHash) {
    m_accessHash = accessHash;
}

qint64 InputGame::accessHash() const {
    return m_accessHash;
}

void InputGame::setBotId(const InputUser &botId) {
    m_botId = botId;
}

InputUser InputGame::botId() const {
    return m_botId;
}

void InputGame::setId(qint64 id) {
    m_id = id;
}

qint64 InputGame::id() const {
    return m_id;
}

void InputGame::setShortName(const QString &shortName) {
    m_shortName = shortName;
}

QString InputGame::shortName() const {
    return m_shortName;
}

bool InputGame::operator ==(const InputGame &b) const {
    return m_classType == b.m_classType &&
           m_accessHash == b.m_accessHash &&
           m_botId == b.m_botId &&
           m_id == b.m_id &&
           m_shortName == b.m_shortName;
}

InputGame &InputGame::operator =(const InputGame &b) {
    m_classType = b.m_classType;
    m_accessHash = b.m_accessHash;
    m_botId = b.m_botId;
    m_id = b.m_id;
    m_shortName = b.m_shortName;
    setNull(b.isNull());
    return *this;
}

void InputGame::setClassType(InputGame::InputGameClassType classType) {
    m_classType = classType;
}

InputGame::InputGameClassType InputGame::classType() const {
    return m_classType;
}

bool InputGame::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeInputGameID: {
        m_id = in->fetchLong();
        m_accessHash = in->fetchLong();
        m_classType = static_cast<InputGameClassType>(x);
        return true;
    }
        break;

    case typeInputGameShortName: {
        m_botId.fetch(in);
        m_shortName = in->fetchQString();
        m_classType = static_cast<InputGameClassType>(x);
        return true;
    }
        break;

    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool InputGame::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeInputGameID: {
        out->appendLong(m_id);
        out->appendLong(m_accessHash);
        return true;
    }
        break;

    case typeInputGameShortName: {
        m_botId.push(out);
        out->appendQString(m_shortName);
        return true;
    }
        break;

    default:
        return false;
    }
}

QMap<QString, QVariant> InputGame::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeInputGameID: {
        result["classType"] = "InputGame::typeInputGameID";
        if( id() ) result["id"] = QString::number(id());
        if( accessHash() ) result["accessHash"] = QString::number(accessHash());
        return result;
    }
        break;

    case typeInputGameShortName: {
        result["classType"] = "InputGame::typeInputGameShortName";
        if( !m_botId.isNull() ) result["botId"] = m_botId.toMap();
        if( !m_shortName.isEmpty() ) result["shortName"] = QVariant::fromValue<QString>(m_shortName);
        return result;
    }
        break;

    default:
        return result;
    }
}

InputGame InputGame::fromMap(const QMap<QString, QVariant> &map) {
    InputGame result;
    if(map.value("classType").toString() == "InputGame::typeInputGameID") {
        result.setClassType(typeInputGameID);
        QVariant _id_var = map.value("id");
        if( !_id_var.isNull() ) {
            _id_var.convert( QVariant::nameToType("qint64") );
            result.setId( _id_var.value<qint64>() );
        }

        QVariant _accessHash_var = map.value("accessHash");
        if( !_accessHash_var.isNull() ) {
            _accessHash_var.convert( QVariant::nameToType("qint64") );
            result.setAccessHash( _accessHash_var.value<qint64>() );
        }

        return result;
    }
    if(map.value("classType").toString() == "InputGame::typeInputGameShortName") {
        result.setClassType(typeInputGameShortName);
        QVariant _botId_var = map.value("botId");
        if( !_botId_var.isNull() )
            result.setBotId( InputUser::fromMap(_botId_var.toMap()) );

        QVariant _shortName_var = map.value("shortName");
        if( !_shortName_var.isNull() ) {
            _shortName_var.convert( QVariant::nameToType("QString") );
            result.setShortName( _shortName_var.value<QString>() );
        }

        return result;
    }
    return result;
}

InputGame InputGame::fromJson(const QString &json) {
    return InputGame::fromMap(QJsonDocument::fromJson(json.toUtf8()).toVariant().toMap());
}

QByteArray InputGame::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const InputGame &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case InputGame::typeInputGameID:
        stream << item.id();
        stream << item.accessHash();
        break;
    case InputGame::typeInputGameShortName:
        stream << item.botId();
        stream << item.shortName();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, InputGame &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<InputGame::InputGameClassType>(type));
    switch(type) {
    case InputGame::typeInputGameID: {
        qint64 m_id;
        stream >> m_id;
        item.setId(m_id);
        qint64 m_access_hash;
        stream >> m_access_hash;
        item.setAccessHash(m_access_hash);
    }
        break;
    case InputGame::typeInputGameShortName: {
        InputUser m_bot_id;
        stream >> m_bot_id;
        item.setBotId(m_bot_id);
        QString m_short_name;
        stream >> m_short_name;
        item.setShortName(m_short_name);
    }
        break;
    }
    return stream;
}

/*QDebug operator<<(QDebug debug,  const InputGame &item) {
    QDebugStateSaver saver(debug);
    Q_UNUSED(saver)
    debug.nospace() << "Telegram.InputGame(";
    switch(item.classType()) {
    case InputGame::typeInputGameID:
        debug.nospace() << "classType: typeInputGameID";
        debug.nospace() << ", id: " << item.id();
        debug.nospace() << ", accessHash: " << item.accessHash();
        break;
    case InputGame::typeInputGameShortName:
        debug.nospace() << "classType: typeInputGameShortName";
        debug.nospace() << ", botId: " << item.botId();
        debug.nospace() << ", shortName: " << item.shortName();
        break;
    }
    debug.nospace() << ")";
    return debug;
}
*/
