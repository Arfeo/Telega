// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "inputmedia.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

InputMedia::InputMedia(InputMediaClassType classType, InboundPkt *in) :
    m_flags(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

InputMedia::InputMedia(InboundPkt *in) :
    m_flags(0),
    m_classType(typeInputMediaEmpty)
{
    fetch(in);
}

InputMedia::InputMedia(const InputMedia &another) :
    TelegramTypeObject(),
    m_flags(0),
    m_classType(typeInputMediaEmpty)
{
    operator=(another);
}

InputMedia::InputMedia(const Null &null) :
    TelegramTypeObject(null),
    m_flags(0),
    m_classType(typeInputMediaEmpty)
{
}

InputMedia::~InputMedia() {
    
}

void InputMedia::setAddress(const QString &address) {
    m_address = address;
}

QString InputMedia::address() const {
    return m_address;
}

void InputMedia::setAttributes(const QList<DocumentAttribute> &attributes) {
    m_attributes = attributes;
}

QList<DocumentAttribute> InputMedia::attributes() const {
    return m_attributes;
}

void InputMedia::setCaption(const QString &caption) {
    m_caption = caption;
}

QString InputMedia::caption() const {
    return m_caption;
}

void InputMedia::setDescription(const QString &description) {
    m_description = description;
}

QString InputMedia::description() const {
    return m_description;
}

void InputMedia::setFile(const InputFile &file) {
    m_file = file;
}

InputFile InputMedia::file() const {
    return m_file;
}

void InputMedia::setFirstName(const QString &firstName) {
    m_firstName = firstName;
}

QString InputMedia::firstName() const {
    return m_firstName;
}

void InputMedia::setFlags(qint32 flags) {
    m_flags = flags;
}

qint32 InputMedia::flags() const {
    return m_flags;
}

void InputMedia::setGeoPoint(const InputGeoPoint &geoPoint) {
    m_geoPoint = geoPoint;
}

InputGeoPoint InputMedia::geoPoint() const {
    return m_geoPoint;
}

void InputMedia::setIdInputDocument(const InputDocument &idInputDocument) {
    m_idInputDocument = idInputDocument;
}

InputDocument InputMedia::idInputDocument() const {
    return m_idInputDocument;
}

void InputMedia::setIdInputGame(const InputGame &idInputGame) {
    m_idInputGame = idInputGame;
}

InputGame InputMedia::idInputGame() const {
    return m_idInputGame;
}

void InputMedia::setIdInputPhoto(const InputPhoto &idInputPhoto) {
    m_idInputPhoto = idInputPhoto;
}

InputPhoto InputMedia::idInputPhoto() const {
    return m_idInputPhoto;
}

void InputMedia::setInvoice(const Invoice &invoice) {
    m_invoice = invoice;
}

Invoice InputMedia::invoice() const {
    return m_invoice;
}

void InputMedia::setLastName(const QString &lastName) {
    m_lastName = lastName;
}

QString InputMedia::lastName() const {
    return m_lastName;
}

void InputMedia::setMimeType(const QString &mimeType) {
    m_mimeType = mimeType;
}

QString InputMedia::mimeType() const {
    return m_mimeType;
}

void InputMedia::setPayload(const QByteArray &payload) {
    m_payload = payload;
}

QByteArray InputMedia::payload() const {
    return m_payload;
}

void InputMedia::setPhoneNumber(const QString &phoneNumber) {
    m_phoneNumber = phoneNumber;
}

QString InputMedia::phoneNumber() const {
    return m_phoneNumber;
}

void InputMedia::setPhoto(const InputWebDocument &photo) {
    if(!photo.isNull()) m_flags = (m_flags | (1<<0));
    else m_flags = (m_flags & ~(1<<0));
    m_photo = photo;
}

InputWebDocument InputMedia::photo() const {
    return m_photo;
}

void InputMedia::setProvider(const QString &provider) {
    m_provider = provider;
}

QString InputMedia::provider() const {
    return m_provider;
}

void InputMedia::setQ(const QString &q) {
    m_q = q;
}

QString InputMedia::q() const {
    return m_q;
}

void InputMedia::setStartParam(const QString &startParam) {
    m_startParam = startParam;
}

QString InputMedia::startParam() const {
    return m_startParam;
}

void InputMedia::setStickers(const QList<InputDocument> &stickers) {
    if(stickers.length()) m_flags = (m_flags | (1<<0));
    else m_flags = (m_flags & ~(1<<0));
    m_stickers = stickers;
}

QList<InputDocument> InputMedia::stickers() const {
    return m_stickers;
}

void InputMedia::setThumb(const InputFile &thumb) {
    m_thumb = thumb;
}

InputFile InputMedia::thumb() const {
    return m_thumb;
}

void InputMedia::setTitle(const QString &title) {
    m_title = title;
}

QString InputMedia::title() const {
    return m_title;
}

void InputMedia::setUrl(const QString &url) {
    m_url = url;
}

QString InputMedia::url() const {
    return m_url;
}

void InputMedia::setVenueId(const QString &venueId) {
    m_venueId = venueId;
}

QString InputMedia::venueId() const {
    return m_venueId;
}

bool InputMedia::operator ==(const InputMedia &b) const {
    return m_classType == b.m_classType &&
           m_address == b.m_address &&
           m_attributes == b.m_attributes &&
           m_caption == b.m_caption &&
           m_description == b.m_description &&
           m_file == b.m_file &&
           m_firstName == b.m_firstName &&
           m_flags == b.m_flags &&
           m_geoPoint == b.m_geoPoint &&
           m_idInputDocument == b.m_idInputDocument &&
           m_idInputGame == b.m_idInputGame &&
           m_idInputPhoto == b.m_idInputPhoto &&
           m_invoice == b.m_invoice &&
           m_lastName == b.m_lastName &&
           m_mimeType == b.m_mimeType &&
           m_payload == b.m_payload &&
           m_phoneNumber == b.m_phoneNumber &&
           m_photo == b.m_photo &&
           m_provider == b.m_provider &&
           m_q == b.m_q &&
           m_startParam == b.m_startParam &&
           m_stickers == b.m_stickers &&
           m_thumb == b.m_thumb &&
           m_title == b.m_title &&
           m_url == b.m_url &&
           m_venueId == b.m_venueId;
}

InputMedia &InputMedia::operator =(const InputMedia &b) {
    m_classType = b.m_classType;
    m_address = b.m_address;
    m_attributes = b.m_attributes;
    m_caption = b.m_caption;
    m_description = b.m_description;
    m_file = b.m_file;
    m_firstName = b.m_firstName;
    m_flags = b.m_flags;
    m_geoPoint = b.m_geoPoint;
    m_idInputDocument = b.m_idInputDocument;
    m_idInputGame = b.m_idInputGame;
    m_idInputPhoto = b.m_idInputPhoto;
    m_invoice = b.m_invoice;
    m_lastName = b.m_lastName;
    m_mimeType = b.m_mimeType;
    m_payload = b.m_payload;
    m_phoneNumber = b.m_phoneNumber;
    m_photo = b.m_photo;
    m_provider = b.m_provider;
    m_q = b.m_q;
    m_startParam = b.m_startParam;
    m_stickers = b.m_stickers;
    m_thumb = b.m_thumb;
    m_title = b.m_title;
    m_url = b.m_url;
    m_venueId = b.m_venueId;
    setNull(b.isNull());
    return *this;
}

void InputMedia::setClassType(InputMedia::InputMediaClassType classType) {
    m_classType = classType;
}

InputMedia::InputMediaClassType InputMedia::classType() const {
    return m_classType;
}

bool InputMedia::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeInputMediaEmpty: {
        m_classType = static_cast<InputMediaClassType>(x);
        return true;
    }
        break;
    
    case typeInputMediaUploadedPhoto: {
        m_flags = in->fetchInt();
        m_file.fetch(in);
        m_caption = in->fetchQString();
        if(m_flags & 1<<0) {
            if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
            qint32 m_stickers_length = in->fetchInt();
            m_stickers.clear();
            for (qint32 i = 0; i < m_stickers_length; i++) {
                InputDocument type;
                if(m_flags & 1<<0) {
                type.fetch(in);
            }
                m_stickers.append(type);
            }
        }
        m_classType = static_cast<InputMediaClassType>(x);
        return true;
    }
        break;
    
    case typeInputMediaPhoto: {
        m_idInputPhoto.fetch(in);
        m_caption = in->fetchQString();
        m_classType = static_cast<InputMediaClassType>(x);
        return true;
    }
        break;
    
    case typeInputMediaGeoPoint: {
        m_geoPoint.fetch(in);
        m_classType = static_cast<InputMediaClassType>(x);
        return true;
    }
        break;
    
    case typeInputMediaContact: {
        m_phoneNumber = in->fetchQString();
        m_firstName = in->fetchQString();
        m_lastName = in->fetchQString();
        m_classType = static_cast<InputMediaClassType>(x);
        return true;
    }
        break;
    
    case typeInputMediaUploadedDocument: {
        m_flags = in->fetchInt();
        m_file.fetch(in);
        m_mimeType = in->fetchQString();
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_attributes_length = in->fetchInt();
        m_attributes.clear();
        for (qint32 i = 0; i < m_attributes_length; i++) {
            DocumentAttribute type;
            type.fetch(in);
            m_attributes.append(type);
        }
        m_caption = in->fetchQString();
        if(m_flags & 1<<0) {
            if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
            qint32 m_stickers_length = in->fetchInt();
            m_stickers.clear();
            for (qint32 i = 0; i < m_stickers_length; i++) {
                InputDocument type;
                if(m_flags & 1<<0) {
                type.fetch(in);
            }
                m_stickers.append(type);
            }
        }
        m_classType = static_cast<InputMediaClassType>(x);
        return true;
    }
        break;
    
    case typeInputMediaUploadedThumbDocument: {
        m_flags = in->fetchInt();
        m_file.fetch(in);
        m_thumb.fetch(in);
        m_mimeType = in->fetchQString();
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_attributes_length = in->fetchInt();
        m_attributes.clear();
        for (qint32 i = 0; i < m_attributes_length; i++) {
            DocumentAttribute type;
            type.fetch(in);
            m_attributes.append(type);
        }
        m_caption = in->fetchQString();
        if(m_flags & 1<<0) {
            if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
            qint32 m_stickers_length = in->fetchInt();
            m_stickers.clear();
            for (qint32 i = 0; i < m_stickers_length; i++) {
                InputDocument type;
                if(m_flags & 1<<0) {
                type.fetch(in);
            }
                m_stickers.append(type);
            }
        }
        m_classType = static_cast<InputMediaClassType>(x);
        return true;
    }
        break;
    
    case typeInputMediaDocument: {
        m_idInputDocument.fetch(in);
        m_caption = in->fetchQString();
        m_classType = static_cast<InputMediaClassType>(x);
        return true;
    }
        break;
    
    case typeInputMediaVenue: {
        m_geoPoint.fetch(in);
        m_title = in->fetchQString();
        m_address = in->fetchQString();
        m_provider = in->fetchQString();
        m_venueId = in->fetchQString();
        m_classType = static_cast<InputMediaClassType>(x);
        return true;
    }
        break;
    
    case typeInputMediaGifExternal: {
        m_url = in->fetchQString();
        m_q = in->fetchQString();
        m_classType = static_cast<InputMediaClassType>(x);
        return true;
    }
        break;
    
    case typeInputMediaPhotoExternal: {
        m_url = in->fetchQString();
        m_caption = in->fetchQString();
        m_classType = static_cast<InputMediaClassType>(x);
        return true;
    }
        break;
    
    case typeInputMediaDocumentExternal: {
        m_url = in->fetchQString();
        m_caption = in->fetchQString();
        m_classType = static_cast<InputMediaClassType>(x);
        return true;
    }
        break;
    
    case typeInputMediaGame: {
        m_idInputGame.fetch(in);
        m_classType = static_cast<InputMediaClassType>(x);
        return true;
    }
        break;
    
    case typeInputMediaInvoice: {
        m_flags = in->fetchInt();
        m_title = in->fetchQString();
        m_description = in->fetchQString();
        if(m_flags & 1<<0) {
            m_photo.fetch(in);
        }
        m_invoice.fetch(in);
        m_payload = in->fetchBytes();
        m_provider = in->fetchQString();
        m_startParam = in->fetchQString();
        m_classType = static_cast<InputMediaClassType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool InputMedia::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeInputMediaEmpty: {
        return true;
    }
        break;
    
    case typeInputMediaUploadedPhoto: {
        out->appendInt(m_flags);
        m_file.push(out);
        out->appendQString(m_caption);
        if(m_flags & 1<<0) {
            out->appendInt(CoreTypes::typeVector);
            out->appendInt(m_stickers.count());
            for (qint32 i = 0; i < m_stickers.count(); i++) {
                m_stickers[i].push(out);
            }
        }
        return true;
    }
        break;
    
    case typeInputMediaPhoto: {
        m_idInputPhoto.push(out);
        out->appendQString(m_caption);
        return true;
    }
        break;
    
    case typeInputMediaGeoPoint: {
        m_geoPoint.push(out);
        return true;
    }
        break;
    
    case typeInputMediaContact: {
        out->appendQString(m_phoneNumber);
        out->appendQString(m_firstName);
        out->appendQString(m_lastName);
        return true;
    }
        break;
    
    case typeInputMediaUploadedDocument: {
        out->appendInt(m_flags);
        m_file.push(out);
        out->appendQString(m_mimeType);
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_attributes.count());
        for (qint32 i = 0; i < m_attributes.count(); i++) {
            m_attributes[i].push(out);
        }
        out->appendQString(m_caption);
        if(m_flags & 1<<0) {
            out->appendInt(CoreTypes::typeVector);
            out->appendInt(m_stickers.count());
            for (qint32 i = 0; i < m_stickers.count(); i++) {
                m_stickers[i].push(out);
            }
        }
        return true;
    }
        break;
    
    case typeInputMediaUploadedThumbDocument: {
        out->appendInt(m_flags);
        m_file.push(out);
        m_thumb.push(out);
        out->appendQString(m_mimeType);
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_attributes.count());
        for (qint32 i = 0; i < m_attributes.count(); i++) {
            m_attributes[i].push(out);
        }
        out->appendQString(m_caption);
        if(m_flags & 1<<0) {
            out->appendInt(CoreTypes::typeVector);
            out->appendInt(m_stickers.count());
            for (qint32 i = 0; i < m_stickers.count(); i++) {
                m_stickers[i].push(out);
            }
        }
        return true;
    }
        break;
    
    case typeInputMediaDocument: {
        m_idInputDocument.push(out);
        out->appendQString(m_caption);
        return true;
    }
        break;
    
    case typeInputMediaVenue: {
        m_geoPoint.push(out);
        out->appendQString(m_title);
        out->appendQString(m_address);
        out->appendQString(m_provider);
        out->appendQString(m_venueId);
        return true;
    }
        break;
    
    case typeInputMediaGifExternal: {
        out->appendQString(m_url);
        out->appendQString(m_q);
        return true;
    }
        break;
    
    case typeInputMediaPhotoExternal: {
        out->appendQString(m_url);
        out->appendQString(m_caption);
        return true;
    }
        break;
    
    case typeInputMediaDocumentExternal: {
        out->appendQString(m_url);
        out->appendQString(m_caption);
        return true;
    }
        break;
    
    case typeInputMediaGame: {
        m_idInputGame.push(out);
        return true;
    }
        break;
    
    case typeInputMediaInvoice: {
        out->appendInt(m_flags);
        out->appendQString(m_title);
        out->appendQString(m_description);
        if(m_flags & 1<<0) {
            m_photo.push(out);
        }
        m_invoice.push(out);
        out->appendBytes(m_payload);
        out->appendQString(m_provider);
        out->appendQString(m_startParam);
        return true;
    }
        break;
    
    default:
        return false;
    }
}

QMap<QString, QVariant> InputMedia::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeInputMediaEmpty: {
        result["classType"] = "InputMedia::typeInputMediaEmpty";
        return result;
    }
        break;
    
    case typeInputMediaUploadedPhoto: {
        result["classType"] = "InputMedia::typeInputMediaUploadedPhoto";
        if( !m_file.isNull() ) result["file"] = m_file.toMap();
        if( !m_caption.isEmpty() ) result["caption"] = QVariant::fromValue<QString>(m_caption);
        QList<QVariant> _stickers;
        for(const InputDocument &m__type: m_stickers)
            if( !m__type.isNull() ) _stickers << m__type.toMap();
        result["stickers"] = _stickers;
        return result;
    }
        break;
    
    case typeInputMediaPhoto: {
        result["classType"] = "InputMedia::typeInputMediaPhoto";
        if( !m_idInputPhoto.isNull() ) result["idInputPhoto"] = m_idInputPhoto.toMap();
        if( !m_caption.isEmpty() ) result["caption"] = QVariant::fromValue<QString>(m_caption);
        return result;
    }
        break;
    
    case typeInputMediaGeoPoint: {
        result["classType"] = "InputMedia::typeInputMediaGeoPoint";
        if( !m_geoPoint.isNull() ) result["geoPoint"] = m_geoPoint.toMap();
        return result;
    }
        break;
    
    case typeInputMediaContact: {
        result["classType"] = "InputMedia::typeInputMediaContact";
        if( !m_phoneNumber.isEmpty() ) result["phoneNumber"] = QVariant::fromValue<QString>(m_phoneNumber);
        if( !m_firstName.isEmpty() ) result["firstName"] = QVariant::fromValue<QString>(m_firstName);
        if( !m_lastName.isEmpty() ) result["lastName"] = QVariant::fromValue<QString>(m_lastName);
        return result;
    }
        break;
    
    case typeInputMediaUploadedDocument: {
        result["classType"] = "InputMedia::typeInputMediaUploadedDocument";
        if( !m_file.isNull() ) result["file"] = m_file.toMap();
        if( !m_mimeType.isEmpty() ) result["mimeType"] = QVariant::fromValue<QString>(m_mimeType);
        QList<QVariant> _attributes;
        for(const DocumentAttribute &m__type: m_attributes)
            if( !m__type.isNull() ) _attributes << m__type.toMap();
        result["attributes"] = _attributes;
        if( !m_caption.isEmpty() ) result["caption"] = QVariant::fromValue<QString>(m_caption);
        QList<QVariant> _stickers;
        for(const InputDocument &m__type: m_stickers)
            if( !m__type.isNull() ) _stickers << m__type.toMap();
        result["stickers"] = _stickers;
        return result;
    }
        break;
    
    case typeInputMediaUploadedThumbDocument: {
        result["classType"] = "InputMedia::typeInputMediaUploadedThumbDocument";
        if( !m_file.isNull() ) result["file"] = m_file.toMap();
        if( !m_thumb.isNull() ) result["thumb"] = m_thumb.toMap();
        if( !m_mimeType.isEmpty() ) result["mimeType"] = QVariant::fromValue<QString>(m_mimeType);
        QList<QVariant> _attributes;
        for(const DocumentAttribute &m__type: m_attributes)
            if( !m__type.isNull() ) _attributes << m__type.toMap();
        result["attributes"] = _attributes;
        if( !m_caption.isEmpty() ) result["caption"] = QVariant::fromValue<QString>(m_caption);
        QList<QVariant> _stickers;
        for(const InputDocument &m__type: m_stickers)
            if( !m__type.isNull() ) _stickers << m__type.toMap();
        result["stickers"] = _stickers;
        return result;
    }
        break;
    
    case typeInputMediaDocument: {
        result["classType"] = "InputMedia::typeInputMediaDocument";
        if( !m_idInputDocument.isNull() ) result["idInputDocument"] = m_idInputDocument.toMap();
        if( !m_caption.isEmpty() ) result["caption"] = QVariant::fromValue<QString>(m_caption);
        return result;
    }
        break;
    
    case typeInputMediaVenue: {
        result["classType"] = "InputMedia::typeInputMediaVenue";
        if( !m_geoPoint.isNull() ) result["geoPoint"] = m_geoPoint.toMap();
        if( !m_title.isEmpty() ) result["title"] = QVariant::fromValue<QString>(m_title);
        if( !m_address.isEmpty() ) result["address"] = QVariant::fromValue<QString>(m_address);
        if( !m_provider.isEmpty() ) result["provider"] = QVariant::fromValue<QString>(m_provider);
        if( !m_venueId.isEmpty() ) result["venueId"] = QVariant::fromValue<QString>(m_venueId);
        return result;
    }
        break;
    
    case typeInputMediaGifExternal: {
        result["classType"] = "InputMedia::typeInputMediaGifExternal";
        if( !m_url.isEmpty() ) result["url"] = QVariant::fromValue<QString>(m_url);
        if( !m_q.isEmpty() ) result["q"] = QVariant::fromValue<QString>(m_q);
        return result;
    }
        break;
    
    case typeInputMediaPhotoExternal: {
        result["classType"] = "InputMedia::typeInputMediaPhotoExternal";
        if( !m_url.isEmpty() ) result["url"] = QVariant::fromValue<QString>(m_url);
        if( !m_caption.isEmpty() ) result["caption"] = QVariant::fromValue<QString>(m_caption);
        return result;
    }
        break;
    
    case typeInputMediaDocumentExternal: {
        result["classType"] = "InputMedia::typeInputMediaDocumentExternal";
        if( !m_url.isEmpty() ) result["url"] = QVariant::fromValue<QString>(m_url);
        if( !m_caption.isEmpty() ) result["caption"] = QVariant::fromValue<QString>(m_caption);
        return result;
    }
        break;
    
    case typeInputMediaGame: {
        result["classType"] = "InputMedia::typeInputMediaGame";
        if( !m_idInputGame.isNull() ) result["idInputGame"] = m_idInputGame.toMap();
        return result;
    }
        break;
    
    case typeInputMediaInvoice: {
        result["classType"] = "InputMedia::typeInputMediaInvoice";
        if( !m_title.isEmpty() ) result["title"] = QVariant::fromValue<QString>(m_title);
        if( !m_description.isEmpty() ) result["description"] = QVariant::fromValue<QString>(m_description);
        if( !m_photo.isNull() ) result["photo"] = m_photo.toMap();
        if( !m_invoice.isNull() ) result["invoice"] = m_invoice.toMap();
        if( !m_payload.isEmpty() ) result["payload"] = QVariant::fromValue<QByteArray>(m_payload);
        if( !m_provider.isEmpty() ) result["provider"] = QVariant::fromValue<QString>(m_provider);
        if( !m_startParam.isEmpty() ) result["startParam"] = QVariant::fromValue<QString>(m_startParam);
        return result;
    }
        break;
    
    default:
        return result;
    }
}

InputMedia InputMedia::fromMap(const QMap<QString, QVariant> &map) {
    InputMedia result;
    if(map.value("classType").toString() == "InputMedia::typeInputMediaEmpty") {
        result.setClassType(typeInputMediaEmpty);
        return result;
    }
    if(map.value("classType").toString() == "InputMedia::typeInputMediaUploadedPhoto") {
        result.setClassType(typeInputMediaUploadedPhoto);
        QVariant _file_var = map.value("file");
        if( !_file_var.isNull() )
            result.setFile( InputFile::fromMap(_file_var.toMap()) );
        
        QVariant _caption_var = map.value("caption");
        if( !_caption_var.isNull() ) {
            _caption_var.convert( QVariant::nameToType("QString") );
            result.setCaption( _caption_var.value<QString>() );
        }
        
        QList<QVariant> map_stickers = map["stickers"].toList();
        QList<InputDocument> _stickers;
        for(const QVariant &var: map_stickers)
            _stickers << InputDocument::fromMap(var.toMap());
        result.setStickers(_stickers);
        return result;
    }
    if(map.value("classType").toString() == "InputMedia::typeInputMediaPhoto") {
        result.setClassType(typeInputMediaPhoto);
        QVariant _idInputPhoto_var = map.value("idInputPhoto");
        if( !_idInputPhoto_var.isNull() )
            result.setIdInputPhoto( InputPhoto::fromMap(_idInputPhoto_var.toMap()) );
        
        QVariant _caption_var = map.value("caption");
        if( !_caption_var.isNull() ) {
            _caption_var.convert( QVariant::nameToType("QString") );
            result.setCaption( _caption_var.value<QString>() );
        }
        
        return result;
    }
    if(map.value("classType").toString() == "InputMedia::typeInputMediaGeoPoint") {
        result.setClassType(typeInputMediaGeoPoint);
        QVariant _geoPoint_var = map.value("geoPoint");
        if( !_geoPoint_var.isNull() )
            result.setGeoPoint( InputGeoPoint::fromMap(_geoPoint_var.toMap()) );
        
        return result;
    }
    if(map.value("classType").toString() == "InputMedia::typeInputMediaContact") {
        result.setClassType(typeInputMediaContact);
        QVariant _phoneNumber_var = map.value("phoneNumber");
        if( !_phoneNumber_var.isNull() ) {
            _phoneNumber_var.convert( QVariant::nameToType("QString") );
            result.setPhoneNumber( _phoneNumber_var.value<QString>() );
        }
        
        QVariant _firstName_var = map.value("firstName");
        if( !_firstName_var.isNull() ) {
            _firstName_var.convert( QVariant::nameToType("QString") );
            result.setFirstName( _firstName_var.value<QString>() );
        }
        
        QVariant _lastName_var = map.value("lastName");
        if( !_lastName_var.isNull() ) {
            _lastName_var.convert( QVariant::nameToType("QString") );
            result.setLastName( _lastName_var.value<QString>() );
        }
        
        return result;
    }
    if(map.value("classType").toString() == "InputMedia::typeInputMediaUploadedDocument") {
        result.setClassType(typeInputMediaUploadedDocument);
        QVariant _file_var = map.value("file");
        if( !_file_var.isNull() )
            result.setFile( InputFile::fromMap(_file_var.toMap()) );
        
        QVariant _mimeType_var = map.value("mimeType");
        if( !_mimeType_var.isNull() ) {
            _mimeType_var.convert( QVariant::nameToType("QString") );
            result.setMimeType( _mimeType_var.value<QString>() );
        }
        
        QList<QVariant> map_attributes = map["attributes"].toList();
        QList<DocumentAttribute> _attributes;
        for(const QVariant &var: map_attributes)
            _attributes << DocumentAttribute::fromMap(var.toMap());
        result.setAttributes(_attributes);
        QVariant _caption_var = map.value("caption");
        if( !_caption_var.isNull() ) {
            _caption_var.convert( QVariant::nameToType("QString") );
            result.setCaption( _caption_var.value<QString>() );
        }
        
        QList<QVariant> map_stickers = map["stickers"].toList();
        QList<InputDocument> _stickers;
        for(const QVariant &var: map_stickers)
            _stickers << InputDocument::fromMap(var.toMap());
        result.setStickers(_stickers);
        return result;
    }
    if(map.value("classType").toString() == "InputMedia::typeInputMediaUploadedThumbDocument") {
        result.setClassType(typeInputMediaUploadedThumbDocument);
        QVariant _file_var = map.value("file");
        if( !_file_var.isNull() )
            result.setFile( InputFile::fromMap(_file_var.toMap()) );
        
        QVariant _thumb_var = map.value("thumb");
        if( !_thumb_var.isNull() )
            result.setThumb( InputFile::fromMap(_thumb_var.toMap()) );
        
        QVariant _mimeType_var = map.value("mimeType");
        if( !_mimeType_var.isNull() ) {
            _mimeType_var.convert( QVariant::nameToType("QString") );
            result.setMimeType( _mimeType_var.value<QString>() );
        }
        
        QList<QVariant> map_attributes = map["attributes"].toList();
        QList<DocumentAttribute> _attributes;
        for(const QVariant &var: map_attributes)
            _attributes << DocumentAttribute::fromMap(var.toMap());
        result.setAttributes(_attributes);
        QVariant _caption_var = map.value("caption");
        if( !_caption_var.isNull() ) {
            _caption_var.convert( QVariant::nameToType("QString") );
            result.setCaption( _caption_var.value<QString>() );
        }
        
        QList<QVariant> map_stickers = map["stickers"].toList();
        QList<InputDocument> _stickers;
        for(const QVariant &var: map_stickers)
            _stickers << InputDocument::fromMap(var.toMap());
        result.setStickers(_stickers);
        return result;
    }
    if(map.value("classType").toString() == "InputMedia::typeInputMediaDocument") {
        result.setClassType(typeInputMediaDocument);
        QVariant _idInputDocument_var = map.value("idInputDocument");
        if( !_idInputDocument_var.isNull() )
            result.setIdInputDocument( InputDocument::fromMap(_idInputDocument_var.toMap()) );
        
        QVariant _caption_var = map.value("caption");
        if( !_caption_var.isNull() ) {
            _caption_var.convert( QVariant::nameToType("QString") );
            result.setCaption( _caption_var.value<QString>() );
        }
        
        return result;
    }
    if(map.value("classType").toString() == "InputMedia::typeInputMediaVenue") {
        result.setClassType(typeInputMediaVenue);
        QVariant _geoPoint_var = map.value("geoPoint");
        if( !_geoPoint_var.isNull() )
            result.setGeoPoint( InputGeoPoint::fromMap(_geoPoint_var.toMap()) );
        
        QVariant _title_var = map.value("title");
        if( !_title_var.isNull() ) {
            _title_var.convert( QVariant::nameToType("QString") );
            result.setTitle( _title_var.value<QString>() );
        }
        
        QVariant _address_var = map.value("address");
        if( !_address_var.isNull() ) {
            _address_var.convert( QVariant::nameToType("QString") );
            result.setAddress( _address_var.value<QString>() );
        }
        
        QVariant _provider_var = map.value("provider");
        if( !_provider_var.isNull() ) {
            _provider_var.convert( QVariant::nameToType("QString") );
            result.setProvider( _provider_var.value<QString>() );
        }
        
        QVariant _venueId_var = map.value("venueId");
        if( !_venueId_var.isNull() ) {
            _venueId_var.convert( QVariant::nameToType("QString") );
            result.setVenueId( _venueId_var.value<QString>() );
        }
        
        return result;
    }
    if(map.value("classType").toString() == "InputMedia::typeInputMediaGifExternal") {
        result.setClassType(typeInputMediaGifExternal);
        QVariant _url_var = map.value("url");
        if( !_url_var.isNull() ) {
            _url_var.convert( QVariant::nameToType("QString") );
            result.setUrl( _url_var.value<QString>() );
        }
        
        QVariant _q_var = map.value("q");
        if( !_q_var.isNull() ) {
            _q_var.convert( QVariant::nameToType("QString") );
            result.setQ( _q_var.value<QString>() );
        }
        
        return result;
    }
    if(map.value("classType").toString() == "InputMedia::typeInputMediaPhotoExternal") {
        result.setClassType(typeInputMediaPhotoExternal);
        QVariant _url_var = map.value("url");
        if( !_url_var.isNull() ) {
            _url_var.convert( QVariant::nameToType("QString") );
            result.setUrl( _url_var.value<QString>() );
        }
        
        QVariant _caption_var = map.value("caption");
        if( !_caption_var.isNull() ) {
            _caption_var.convert( QVariant::nameToType("QString") );
            result.setCaption( _caption_var.value<QString>() );
        }
        
        return result;
    }
    if(map.value("classType").toString() == "InputMedia::typeInputMediaDocumentExternal") {
        result.setClassType(typeInputMediaDocumentExternal);
        QVariant _url_var = map.value("url");
        if( !_url_var.isNull() ) {
            _url_var.convert( QVariant::nameToType("QString") );
            result.setUrl( _url_var.value<QString>() );
        }
        
        QVariant _caption_var = map.value("caption");
        if( !_caption_var.isNull() ) {
            _caption_var.convert( QVariant::nameToType("QString") );
            result.setCaption( _caption_var.value<QString>() );
        }
        
        return result;
    }
    if(map.value("classType").toString() == "InputMedia::typeInputMediaGame") {
        result.setClassType(typeInputMediaGame);
        QVariant _idInputGame_var = map.value("idInputGame");
        if( !_idInputGame_var.isNull() )
            result.setIdInputGame( InputGame::fromMap(_idInputGame_var.toMap()) );
        
        return result;
    }
    if(map.value("classType").toString() == "InputMedia::typeInputMediaInvoice") {
        result.setClassType(typeInputMediaInvoice);
        QVariant _title_var = map.value("title");
        if( !_title_var.isNull() ) {
            _title_var.convert( QVariant::nameToType("QString") );
            result.setTitle( _title_var.value<QString>() );
        }
        
        QVariant _description_var = map.value("description");
        if( !_description_var.isNull() ) {
            _description_var.convert( QVariant::nameToType("QString") );
            result.setDescription( _description_var.value<QString>() );
        }
        
        QVariant _photo_var = map.value("photo");
        if( !_photo_var.isNull() )
            result.setPhoto( InputWebDocument::fromMap(_photo_var.toMap()) );
        
        QVariant _invoice_var = map.value("invoice");
        if( !_invoice_var.isNull() )
            result.setInvoice( Invoice::fromMap(_invoice_var.toMap()) );
        
        QVariant _payload_var = map.value("payload");
        if( !_payload_var.isNull() ) {
            _payload_var.convert( QVariant::nameToType("QByteArray") );
            result.setPayload( _payload_var.value<QByteArray>() );
        }
        
        QVariant _provider_var = map.value("provider");
        if( !_provider_var.isNull() ) {
            _provider_var.convert( QVariant::nameToType("QString") );
            result.setProvider( _provider_var.value<QString>() );
        }
        
        QVariant _startParam_var = map.value("startParam");
        if( !_startParam_var.isNull() ) {
            _startParam_var.convert( QVariant::nameToType("QString") );
            result.setStartParam( _startParam_var.value<QString>() );
        }
        
        return result;
    }
    return result;
}

InputMedia InputMedia::fromJson(const QString &json) {
    return InputMedia::fromMap(QJsonDocument::fromJson(json.toUtf8()).toVariant().toMap());
}

QByteArray InputMedia::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const InputMedia &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case InputMedia::typeInputMediaEmpty:
        
        break;
    case InputMedia::typeInputMediaUploadedPhoto:
        stream << item.flags();
        stream << item.file();
        stream << item.caption();
        stream << item.stickers();
        break;
    case InputMedia::typeInputMediaPhoto:
        stream << item.idInputPhoto();
        stream << item.caption();
        break;
    case InputMedia::typeInputMediaGeoPoint:
        stream << item.geoPoint();
        break;
    case InputMedia::typeInputMediaContact:
        stream << item.phoneNumber();
        stream << item.firstName();
        stream << item.lastName();
        break;
    case InputMedia::typeInputMediaUploadedDocument:
        stream << item.flags();
        stream << item.file();
        stream << item.mimeType();
        stream << item.attributes();
        stream << item.caption();
        stream << item.stickers();
        break;
    case InputMedia::typeInputMediaUploadedThumbDocument:
        stream << item.flags();
        stream << item.file();
        stream << item.thumb();
        stream << item.mimeType();
        stream << item.attributes();
        stream << item.caption();
        stream << item.stickers();
        break;
    case InputMedia::typeInputMediaDocument:
        stream << item.idInputDocument();
        stream << item.caption();
        break;
    case InputMedia::typeInputMediaVenue:
        stream << item.geoPoint();
        stream << item.title();
        stream << item.address();
        stream << item.provider();
        stream << item.venueId();
        break;
    case InputMedia::typeInputMediaGifExternal:
        stream << item.url();
        stream << item.q();
        break;
    case InputMedia::typeInputMediaPhotoExternal:
        stream << item.url();
        stream << item.caption();
        break;
    case InputMedia::typeInputMediaDocumentExternal:
        stream << item.url();
        stream << item.caption();
        break;
    case InputMedia::typeInputMediaGame:
        stream << item.idInputGame();
        break;
    case InputMedia::typeInputMediaInvoice:
        stream << item.flags();
        stream << item.title();
        stream << item.description();
        stream << item.photo();
        stream << item.invoice();
        stream << item.payload();
        stream << item.provider();
        stream << item.startParam();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, InputMedia &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<InputMedia::InputMediaClassType>(type));
    switch(type) {
    case InputMedia::typeInputMediaEmpty: {
        
    }
        break;
    case InputMedia::typeInputMediaUploadedPhoto: {
        qint32 m_flags;
        stream >> m_flags;
        item.setFlags(m_flags);
        InputFile m_file;
        stream >> m_file;
        item.setFile(m_file);
        QString m_caption;
        stream >> m_caption;
        item.setCaption(m_caption);
        QList<InputDocument> m_stickers;
        stream >> m_stickers;
        item.setStickers(m_stickers);
    }
        break;
    case InputMedia::typeInputMediaPhoto: {
        InputPhoto m_id_InputPhoto;
        stream >> m_id_InputPhoto;
        item.setIdInputPhoto(m_id_InputPhoto);
        QString m_caption;
        stream >> m_caption;
        item.setCaption(m_caption);
    }
        break;
    case InputMedia::typeInputMediaGeoPoint: {
        InputGeoPoint m_geo_point;
        stream >> m_geo_point;
        item.setGeoPoint(m_geo_point);
    }
        break;
    case InputMedia::typeInputMediaContact: {
        QString m_phone_number;
        stream >> m_phone_number;
        item.setPhoneNumber(m_phone_number);
        QString m_first_name;
        stream >> m_first_name;
        item.setFirstName(m_first_name);
        QString m_last_name;
        stream >> m_last_name;
        item.setLastName(m_last_name);
    }
        break;
    case InputMedia::typeInputMediaUploadedDocument: {
        qint32 m_flags;
        stream >> m_flags;
        item.setFlags(m_flags);
        InputFile m_file;
        stream >> m_file;
        item.setFile(m_file);
        QString m_mime_type;
        stream >> m_mime_type;
        item.setMimeType(m_mime_type);
        QList<DocumentAttribute> m_attributes;
        stream >> m_attributes;
        item.setAttributes(m_attributes);
        QString m_caption;
        stream >> m_caption;
        item.setCaption(m_caption);
        QList<InputDocument> m_stickers;
        stream >> m_stickers;
        item.setStickers(m_stickers);
    }
        break;
    case InputMedia::typeInputMediaUploadedThumbDocument: {
        qint32 m_flags;
        stream >> m_flags;
        item.setFlags(m_flags);
        InputFile m_file;
        stream >> m_file;
        item.setFile(m_file);
        InputFile m_thumb;
        stream >> m_thumb;
        item.setThumb(m_thumb);
        QString m_mime_type;
        stream >> m_mime_type;
        item.setMimeType(m_mime_type);
        QList<DocumentAttribute> m_attributes;
        stream >> m_attributes;
        item.setAttributes(m_attributes);
        QString m_caption;
        stream >> m_caption;
        item.setCaption(m_caption);
        QList<InputDocument> m_stickers;
        stream >> m_stickers;
        item.setStickers(m_stickers);
    }
        break;
    case InputMedia::typeInputMediaDocument: {
        InputDocument m_id_InputDocument;
        stream >> m_id_InputDocument;
        item.setIdInputDocument(m_id_InputDocument);
        QString m_caption;
        stream >> m_caption;
        item.setCaption(m_caption);
    }
        break;
    case InputMedia::typeInputMediaVenue: {
        InputGeoPoint m_geo_point;
        stream >> m_geo_point;
        item.setGeoPoint(m_geo_point);
        QString m_title;
        stream >> m_title;
        item.setTitle(m_title);
        QString m_address;
        stream >> m_address;
        item.setAddress(m_address);
        QString m_provider;
        stream >> m_provider;
        item.setProvider(m_provider);
        QString m_venue_id;
        stream >> m_venue_id;
        item.setVenueId(m_venue_id);
    }
        break;
    case InputMedia::typeInputMediaGifExternal: {
        QString m_url;
        stream >> m_url;
        item.setUrl(m_url);
        QString m_q;
        stream >> m_q;
        item.setQ(m_q);
    }
        break;
    case InputMedia::typeInputMediaPhotoExternal: {
        QString m_url;
        stream >> m_url;
        item.setUrl(m_url);
        QString m_caption;
        stream >> m_caption;
        item.setCaption(m_caption);
    }
        break;
    case InputMedia::typeInputMediaDocumentExternal: {
        QString m_url;
        stream >> m_url;
        item.setUrl(m_url);
        QString m_caption;
        stream >> m_caption;
        item.setCaption(m_caption);
    }
        break;
    case InputMedia::typeInputMediaGame: {
        InputGame m_id_InputGame;
        stream >> m_id_InputGame;
        item.setIdInputGame(m_id_InputGame);
    }
        break;
    case InputMedia::typeInputMediaInvoice: {
        qint32 m_flags;
        stream >> m_flags;
        item.setFlags(m_flags);
        QString m_title;
        stream >> m_title;
        item.setTitle(m_title);
        QString m_description;
        stream >> m_description;
        item.setDescription(m_description);
        InputWebDocument m_photo;
        stream >> m_photo;
        item.setPhoto(m_photo);
        Invoice m_invoice;
        stream >> m_invoice;
        item.setInvoice(m_invoice);
        QByteArray m_payload;
        stream >> m_payload;
        item.setPayload(m_payload);
        QString m_provider;
        stream >> m_provider;
        item.setProvider(m_provider);
        QString m_start_param;
        stream >> m_start_param;
        item.setStartParam(m_start_param);
    }
        break;
    }
    return stream;
}

QDebug operator<<(QDebug debug,  const InputMedia &item) {
    QDebugStateSaver saver(debug);
    Q_UNUSED(saver)
    debug.nospace() << "Telegram.InputMedia(";
    switch(item.classType()) {
    case InputMedia::typeInputMediaEmpty:
        debug.nospace() << "classType: typeInputMediaEmpty";
        break;
    case InputMedia::typeInputMediaUploadedPhoto:
        debug.nospace() << "classType: typeInputMediaUploadedPhoto";
        debug.nospace() << ", flags: " << item.flags();
        debug.nospace() << ", file: " << item.file();
        debug.nospace() << ", caption: " << item.caption();
        debug.nospace() << ", stickers: " << item.stickers();
        break;
    case InputMedia::typeInputMediaPhoto:
        debug.nospace() << "classType: typeInputMediaPhoto";
        debug.nospace() << ", idInputPhoto: " << item.idInputPhoto();
        debug.nospace() << ", caption: " << item.caption();
        break;
    case InputMedia::typeInputMediaGeoPoint:
        debug.nospace() << "classType: typeInputMediaGeoPoint";
        debug.nospace() << ", geoPoint: " << item.geoPoint();
        break;
    case InputMedia::typeInputMediaContact:
        debug.nospace() << "classType: typeInputMediaContact";
        debug.nospace() << ", phoneNumber: " << item.phoneNumber();
        debug.nospace() << ", firstName: " << item.firstName();
        debug.nospace() << ", lastName: " << item.lastName();
        break;
    case InputMedia::typeInputMediaUploadedDocument:
        debug.nospace() << "classType: typeInputMediaUploadedDocument";
        debug.nospace() << ", flags: " << item.flags();
        debug.nospace() << ", file: " << item.file();
        debug.nospace() << ", mimeType: " << item.mimeType();
        debug.nospace() << ", attributes: " << item.attributes();
        debug.nospace() << ", caption: " << item.caption();
        debug.nospace() << ", stickers: " << item.stickers();
        break;
    case InputMedia::typeInputMediaUploadedThumbDocument:
        debug.nospace() << "classType: typeInputMediaUploadedThumbDocument";
        debug.nospace() << ", flags: " << item.flags();
        debug.nospace() << ", file: " << item.file();
        debug.nospace() << ", thumb: " << item.thumb();
        debug.nospace() << ", mimeType: " << item.mimeType();
        debug.nospace() << ", attributes: " << item.attributes();
        debug.nospace() << ", caption: " << item.caption();
        debug.nospace() << ", stickers: " << item.stickers();
        break;
    case InputMedia::typeInputMediaDocument:
        debug.nospace() << "classType: typeInputMediaDocument";
        debug.nospace() << ", idInputDocument: " << item.idInputDocument();
        debug.nospace() << ", caption: " << item.caption();
        break;
    case InputMedia::typeInputMediaVenue:
        debug.nospace() << "classType: typeInputMediaVenue";
        debug.nospace() << ", geoPoint: " << item.geoPoint();
        debug.nospace() << ", title: " << item.title();
        debug.nospace() << ", address: " << item.address();
        debug.nospace() << ", provider: " << item.provider();
        debug.nospace() << ", venueId: " << item.venueId();
        break;
    case InputMedia::typeInputMediaGifExternal:
        debug.nospace() << "classType: typeInputMediaGifExternal";
        debug.nospace() << ", url: " << item.url();
        debug.nospace() << ", q: " << item.q();
        break;
    case InputMedia::typeInputMediaPhotoExternal:
        debug.nospace() << "classType: typeInputMediaPhotoExternal";
        debug.nospace() << ", url: " << item.url();
        debug.nospace() << ", caption: " << item.caption();
        break;
    case InputMedia::typeInputMediaDocumentExternal:
        debug.nospace() << "classType: typeInputMediaDocumentExternal";
        debug.nospace() << ", url: " << item.url();
        debug.nospace() << ", caption: " << item.caption();
        break;
    case InputMedia::typeInputMediaGame:
        debug.nospace() << "classType: typeInputMediaGame";
        debug.nospace() << ", idInputGame: " << item.idInputGame();
        break;
    case InputMedia::typeInputMediaInvoice:
        debug.nospace() << "classType: typeInputMediaInvoice";
        debug.nospace() << ", flags: " << item.flags();
        debug.nospace() << ", title: " << item.title();
        debug.nospace() << ", description: " << item.description();
        debug.nospace() << ", photo: " << item.photo();
        debug.nospace() << ", invoice: " << item.invoice();
        debug.nospace() << ", payload: " << item.payload();
        debug.nospace() << ", provider: " << item.provider();
        debug.nospace() << ", startParam: " << item.startParam();
        break;
    }
    debug.nospace() << ")";
    return debug;
}

