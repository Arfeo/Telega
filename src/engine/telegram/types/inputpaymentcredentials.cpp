// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "inputpaymentcredentials.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

InputPaymentCredentials::InputPaymentCredentials(InputPaymentCredentialsClassType classType, InboundPkt *in) :
    m_flags(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

InputPaymentCredentials::InputPaymentCredentials(InboundPkt *in) :
    m_flags(0),
    m_classType(typeInputPaymentCredentialsSaved)
{
    fetch(in);
}

InputPaymentCredentials::InputPaymentCredentials(const InputPaymentCredentials &another) :
    TelegramTypeObject(),
    m_flags(0),
    m_classType(typeInputPaymentCredentialsSaved)
{
    operator=(another);
}

InputPaymentCredentials::InputPaymentCredentials(const Null &null) :
    TelegramTypeObject(null),
    m_flags(0),
    m_classType(typeInputPaymentCredentialsSaved)
{
}

InputPaymentCredentials::~InputPaymentCredentials() {
    
}

void InputPaymentCredentials::setData(const DataJSON &data) {
    m_data = data;
}

DataJSON InputPaymentCredentials::data() const {
    return m_data;
}

void InputPaymentCredentials::setFlags(qint32 flags) {
    m_flags = flags;
}

qint32 InputPaymentCredentials::flags() const {
    return m_flags;
}

void InputPaymentCredentials::setId(const QString &id) {
    m_id = id;
}

QString InputPaymentCredentials::id() const {
    return m_id;
}

void InputPaymentCredentials::setSave(bool save) {
    if(save) m_flags = (m_flags | (1<<0));
    else m_flags = (m_flags & ~(1<<0));
}

bool InputPaymentCredentials::save() const {
    return (m_flags & 1<<0);
}

void InputPaymentCredentials::setTmpPassword(const QByteArray &tmpPassword) {
    m_tmpPassword = tmpPassword;
}

QByteArray InputPaymentCredentials::tmpPassword() const {
    return m_tmpPassword;
}

bool InputPaymentCredentials::operator ==(const InputPaymentCredentials &b) const {
    return m_classType == b.m_classType &&
           m_data == b.m_data &&
           m_flags == b.m_flags &&
           m_id == b.m_id &&
           m_tmpPassword == b.m_tmpPassword;
}

InputPaymentCredentials &InputPaymentCredentials::operator =(const InputPaymentCredentials &b) {
    m_classType = b.m_classType;
    m_data = b.m_data;
    m_flags = b.m_flags;
    m_id = b.m_id;
    m_tmpPassword = b.m_tmpPassword;
    setNull(b.isNull());
    return *this;
}

void InputPaymentCredentials::setClassType(InputPaymentCredentials::InputPaymentCredentialsClassType classType) {
    m_classType = classType;
}

InputPaymentCredentials::InputPaymentCredentialsClassType InputPaymentCredentials::classType() const {
    return m_classType;
}

bool InputPaymentCredentials::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeInputPaymentCredentialsSaved: {
        m_id = in->fetchQString();
        m_tmpPassword = in->fetchBytes();
        m_classType = static_cast<InputPaymentCredentialsClassType>(x);
        return true;
    }
        break;
    
    case typeInputPaymentCredentials: {
        m_flags = in->fetchInt();
        m_data.fetch(in);
        m_classType = static_cast<InputPaymentCredentialsClassType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool InputPaymentCredentials::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeInputPaymentCredentialsSaved: {
        out->appendQString(m_id);
        out->appendBytes(m_tmpPassword);
        return true;
    }
        break;
    
    case typeInputPaymentCredentials: {
        out->appendInt(m_flags);
        m_data.push(out);
        return true;
    }
        break;
    
    default:
        return false;
    }
}

QMap<QString, QVariant> InputPaymentCredentials::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeInputPaymentCredentialsSaved: {
        result["classType"] = "InputPaymentCredentials::typeInputPaymentCredentialsSaved";
        if( !m_id.isEmpty() ) result["id"] = QVariant::fromValue<QString>(m_id);
        if( !m_tmpPassword.isEmpty() ) result["tmpPassword"] = QVariant::fromValue<QByteArray>(m_tmpPassword);
        return result;
    }
        break;
    
    case typeInputPaymentCredentials: {
        result["classType"] = "InputPaymentCredentials::typeInputPaymentCredentials";
        if( save() ) result["save"] = QString::number(save());
        if( !m_data.isNull() ) result["data"] = m_data.toMap();
        return result;
    }
        break;
    
    default:
        return result;
    }
}

InputPaymentCredentials InputPaymentCredentials::fromMap(const QMap<QString, QVariant> &map) {
    InputPaymentCredentials result;
    if(map.value("classType").toString() == "InputPaymentCredentials::typeInputPaymentCredentialsSaved") {
        result.setClassType(typeInputPaymentCredentialsSaved);
        QVariant _id_var = map.value("id");
        if( !_id_var.isNull() ) {
            _id_var.convert( QVariant::nameToType("QString") );
            result.setId( _id_var.value<QString>() );
        }
        
        QVariant _tmpPassword_var = map.value("tmpPassword");
        if( !_tmpPassword_var.isNull() ) {
            _tmpPassword_var.convert( QVariant::nameToType("QByteArray") );
            result.setTmpPassword( _tmpPassword_var.value<QByteArray>() );
        }
        
        return result;
    }
    if(map.value("classType").toString() == "InputPaymentCredentials::typeInputPaymentCredentials") {
        result.setClassType(typeInputPaymentCredentials);
        QVariant _save_var = map.value("save");
        if( !_save_var.isNull() ) {
            _save_var.convert( QVariant::nameToType("bool") );
            result.setSave( _save_var.value<bool>() );
        }
        
        QVariant _data_var = map.value("data");
        if( !_data_var.isNull() )
            result.setData( DataJSON::fromMap(_data_var.toMap()) );
        
        return result;
    }
    return result;
}

InputPaymentCredentials InputPaymentCredentials::fromJson(const QString &json) {
    return InputPaymentCredentials::fromMap(QJsonDocument::fromJson(json.toUtf8()).toVariant().toMap());
}

QByteArray InputPaymentCredentials::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const InputPaymentCredentials &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case InputPaymentCredentials::typeInputPaymentCredentialsSaved:
        stream << item.id();
        stream << item.tmpPassword();
        break;
    case InputPaymentCredentials::typeInputPaymentCredentials:
        stream << item.flags();
        stream << item.data();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, InputPaymentCredentials &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<InputPaymentCredentials::InputPaymentCredentialsClassType>(type));
    switch(type) {
    case InputPaymentCredentials::typeInputPaymentCredentialsSaved: {
        QString m_id;
        stream >> m_id;
        item.setId(m_id);
        QByteArray m_tmp_password;
        stream >> m_tmp_password;
        item.setTmpPassword(m_tmp_password);
    }
        break;
    case InputPaymentCredentials::typeInputPaymentCredentials: {
        qint32 m_flags;
        stream >> m_flags;
        item.setFlags(m_flags);
        DataJSON m_data;
        stream >> m_data;
        item.setData(m_data);
    }
        break;
    }
    return stream;
}

QDebug operator<<(QDebug debug,  const InputPaymentCredentials &item) {
    QDebugStateSaver saver(debug);
    Q_UNUSED(saver)
    debug.nospace() << "Telegram.InputPaymentCredentials(";
    switch(item.classType()) {
    case InputPaymentCredentials::typeInputPaymentCredentialsSaved:
        debug.nospace() << "classType: typeInputPaymentCredentialsSaved";
        debug.nospace() << ", id: " << item.id();
        debug.nospace() << ", tmpPassword: " << item.tmpPassword();
        break;
    case InputPaymentCredentials::typeInputPaymentCredentials:
        debug.nospace() << "classType: typeInputPaymentCredentials";
        debug.nospace() << ", flags: " << item.flags();
        debug.nospace() << ", data: " << item.data();
        break;
    }
    debug.nospace() << ")";
    return debug;
}

