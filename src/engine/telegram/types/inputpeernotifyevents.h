// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_INPUTPEERNOTIFYEVENTS
#define LQTG_TYPE_INPUTPEERNOTIFYEVENTS

#include "telegramtypeobject.h"

#include <QMetaType>
#include <QVariant>
#include "../coretypes.h"

#include <QDataStream>


class LIBQTELEGRAMSHARED_EXPORT InputPeerNotifyEvents : public TelegramTypeObject
{
public:
    enum InputPeerNotifyEventsClassType {
        typeInputPeerNotifyEventsEmpty = 0xf03064d8,
        typeInputPeerNotifyEventsAll = 0xe86a2c74
    };

    InputPeerNotifyEvents(InputPeerNotifyEventsClassType classType = typeInputPeerNotifyEventsEmpty, InboundPkt *in = 0);
    InputPeerNotifyEvents(InboundPkt *in);
    InputPeerNotifyEvents(const Null&);
    InputPeerNotifyEvents(const InputPeerNotifyEvents &another);
    virtual ~InputPeerNotifyEvents();

    void setClassType(InputPeerNotifyEventsClassType classType);
    InputPeerNotifyEventsClassType classType() const;

    bool fetch(InboundPkt *in);
    bool push(OutboundPkt *out) const;

    QMap<QString, QVariant> toMap() const;
    static InputPeerNotifyEvents fromMap(const QMap<QString, QVariant> &map);
    static InputPeerNotifyEvents fromJson(const QString &json);

    bool operator ==(const InputPeerNotifyEvents &b) const;
    InputPeerNotifyEvents &operator =(const InputPeerNotifyEvents &b);

    bool operator==(bool stt) const { return isNull() != stt; }
    bool operator!=(bool stt) const { return !operator ==(stt); }

    QByteArray getHash(QCryptographicHash::Algorithm alg = QCryptographicHash::Md5) const;

private:
    InputPeerNotifyEventsClassType m_classType;
};

Q_DECLARE_METATYPE(InputPeerNotifyEvents)

QDataStream LIBQTELEGRAMSHARED_EXPORT &operator<<(QDataStream &stream, const InputPeerNotifyEvents &item);
QDataStream LIBQTELEGRAMSHARED_EXPORT &operator>>(QDataStream &stream, InputPeerNotifyEvents &item);

QDebug LIBQTELEGRAMSHARED_EXPORT operator<<(QDebug debug,  const InputPeerNotifyEvents &item);

#endif // LQTG_TYPE_INPUTPEERNOTIFYEVENTS
