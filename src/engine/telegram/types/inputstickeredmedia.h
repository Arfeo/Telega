// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_INPUTSTICKEREDMEDIA
#define LQTG_TYPE_INPUTSTICKEREDMEDIA

#include "telegramtypeobject.h"

#include <QMetaType>
#include <QVariant>
#include "../coretypes.h"

#include <QDataStream>

#include "inputdocument.h"
#include "inputphoto.h"

class LIBQTELEGRAMSHARED_EXPORT InputStickeredMedia : public TelegramTypeObject
{
public:
    enum InputStickeredMediaClassType {
        typeInputStickeredMediaPhoto = 0x4a992157,
        typeInputStickeredMediaDocument = 0x438865b
    };

    InputStickeredMedia(InputStickeredMediaClassType classType = typeInputStickeredMediaPhoto, InboundPkt *in = 0);
    InputStickeredMedia(InboundPkt *in);
    InputStickeredMedia(const Null&);
    InputStickeredMedia(const InputStickeredMedia &another);
    virtual ~InputStickeredMedia();

    void setIdInputDocument(const InputDocument &idInputDocument);
    InputDocument idInputDocument() const;

    void setIdInputPhoto(const InputPhoto &idInputPhoto);
    InputPhoto idInputPhoto() const;

    void setClassType(InputStickeredMediaClassType classType);
    InputStickeredMediaClassType classType() const;

    bool fetch(InboundPkt *in);
    bool push(OutboundPkt *out) const;

    QMap<QString, QVariant> toMap() const;
    static InputStickeredMedia fromMap(const QMap<QString, QVariant> &map);
    static InputStickeredMedia fromJson(const QString &json);

    bool operator ==(const InputStickeredMedia &b) const;
    InputStickeredMedia &operator =(const InputStickeredMedia &b);

    bool operator==(bool stt) const { return isNull() != stt; }
    bool operator!=(bool stt) const { return !operator ==(stt); }

    QByteArray getHash(QCryptographicHash::Algorithm alg = QCryptographicHash::Md5) const;

private:
    InputDocument m_idInputDocument;
    InputPhoto m_idInputPhoto;
    InputStickeredMediaClassType m_classType;
};

Q_DECLARE_METATYPE(InputStickeredMedia)

QDataStream LIBQTELEGRAMSHARED_EXPORT &operator<<(QDataStream &stream, const InputStickeredMedia &item);
QDataStream LIBQTELEGRAMSHARED_EXPORT &operator>>(QDataStream &stream, InputStickeredMedia &item);

QDebug LIBQTELEGRAMSHARED_EXPORT operator<<(QDebug debug,  const InputStickeredMedia &item);

#endif // LQTG_TYPE_INPUTSTICKEREDMEDIA
