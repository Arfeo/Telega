// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "inputstickersetitem.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

InputStickerSetItem::InputStickerSetItem(InputStickerSetItemClassType classType, InboundPkt *in) :
    m_flags(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

InputStickerSetItem::InputStickerSetItem(InboundPkt *in) :
    m_flags(0),
    m_classType(typeInputStickerSetItem)
{
    fetch(in);
}

InputStickerSetItem::InputStickerSetItem(const InputStickerSetItem &another) :
    TelegramTypeObject(),
    m_flags(0),
    m_classType(typeInputStickerSetItem)
{
    operator=(another);
}

InputStickerSetItem::InputStickerSetItem(const Null &null) :
    TelegramTypeObject(null),
    m_flags(0),
    m_classType(typeInputStickerSetItem)
{
}

InputStickerSetItem::~InputStickerSetItem() {

}

void InputStickerSetItem::setDocument(const InputDocument &document) {
    m_document = document;
}

InputDocument InputStickerSetItem::document() const {
    return m_document;
}

void InputStickerSetItem::setEmoji(const QString &emoji) {
    m_emoji = emoji;
}

QString InputStickerSetItem::emoji() const {
    return m_emoji;
}

void InputStickerSetItem::setFlags(qint32 flags) {
    m_flags = flags;
}

qint32 InputStickerSetItem::flags() const {
    return m_flags;
}

void InputStickerSetItem::setMaskCoords(const MaskCoords &maskCoords) {
    if(!maskCoords.isNull()) m_flags = (m_flags | (1<<0));
    else m_flags = (m_flags & ~(1<<0));
    m_maskCoords = maskCoords;
}

MaskCoords InputStickerSetItem::maskCoords() const {
    return m_maskCoords;
}

bool InputStickerSetItem::operator ==(const InputStickerSetItem &b) const {
    return m_classType == b.m_classType &&
           m_document == b.m_document &&
           m_emoji == b.m_emoji &&
           m_flags == b.m_flags &&
           m_maskCoords == b.m_maskCoords;
}

InputStickerSetItem &InputStickerSetItem::operator =(const InputStickerSetItem &b) {
    m_classType = b.m_classType;
    m_document = b.m_document;
    m_emoji = b.m_emoji;
    m_flags = b.m_flags;
    m_maskCoords = b.m_maskCoords;
    setNull(b.isNull());
    return *this;
}

void InputStickerSetItem::setClassType(InputStickerSetItem::InputStickerSetItemClassType classType) {
    m_classType = classType;
}

InputStickerSetItem::InputStickerSetItemClassType InputStickerSetItem::classType() const {
    return m_classType;
}

bool InputStickerSetItem::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeInputStickerSetItem: {
        m_flags = in->fetchInt();
        m_document.fetch(in);
        m_emoji = in->fetchQString();
        if(m_flags & 1<<0) {
            m_maskCoords.fetch(in);
        }
        m_classType = static_cast<InputStickerSetItemClassType>(x);
        return true;
    }
        break;

    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool InputStickerSetItem::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeInputStickerSetItem: {
        out->appendInt(m_flags);
        m_document.push(out);
        out->appendQString(m_emoji);
        if(m_flags & 1<<0) {
            m_maskCoords.push(out);
        }
        return true;
    }
        break;

    default:
        return false;
    }
}

QMap<QString, QVariant> InputStickerSetItem::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeInputStickerSetItem: {
        result["classType"] = "InputStickerSetItem::typeInputStickerSetItem";
        if( !m_document.isNull() ) result["document"] = m_document.toMap();
        if( !m_emoji.isEmpty() ) result["emoji"] = QVariant::fromValue<QString>(m_emoji);
        if( !m_maskCoords.isNull() ) result["maskCoords"] = m_maskCoords.toMap();
        return result;
    }
        break;

    default:
        return result;
    }
}

InputStickerSetItem InputStickerSetItem::fromMap(const QMap<QString, QVariant> &map) {
    InputStickerSetItem result;
    if(map.value("classType").toString() == "InputStickerSetItem::typeInputStickerSetItem") {
        result.setClassType(typeInputStickerSetItem);
        QVariant _document_var = map.value("document");
        if( !_document_var.isNull() )
            result.setDocument( InputDocument::fromMap(_document_var.toMap()) );

        QVariant _emoji_var = map.value("emoji");
        if( !_emoji_var.isNull() ) {
            _emoji_var.convert( QVariant::nameToType("QString") );
            result.setEmoji( _emoji_var.value<QString>() );
        }

        QVariant _maskCoords_var = map.value("maskCoords");
        if( !_maskCoords_var.isNull() )
            result.setMaskCoords( MaskCoords::fromMap(_maskCoords_var.toMap()) );

        return result;
    }
    return result;
}

InputStickerSetItem InputStickerSetItem::fromJson(const QString &json) {
    return InputStickerSetItem::fromMap(QJsonDocument::fromJson(json.toUtf8()).toVariant().toMap());
}

QByteArray InputStickerSetItem::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const InputStickerSetItem &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case InputStickerSetItem::typeInputStickerSetItem:
        stream << item.flags();
        stream << item.document();
        stream << item.emoji();
        stream << item.maskCoords();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, InputStickerSetItem &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<InputStickerSetItem::InputStickerSetItemClassType>(type));
    switch(type) {
    case InputStickerSetItem::typeInputStickerSetItem: {
        qint32 m_flags;
        stream >> m_flags;
        item.setFlags(m_flags);
        InputDocument m_document;
        stream >> m_document;
        item.setDocument(m_document);
        QString m_emoji;
        stream >> m_emoji;
        item.setEmoji(m_emoji);
        MaskCoords m_mask_coords;
        stream >> m_mask_coords;
        item.setMaskCoords(m_mask_coords);
    }
        break;
    }
    return stream;
}

/*QDebug operator<<(QDebug debug,  const InputStickerSetItem &item) {
    QDebugStateSaver saver(debug);
    Q_UNUSED(saver)
    debug.nospace() << "Telegram.InputStickerSetItem(";
    switch(item.classType()) {
    case InputStickerSetItem::typeInputStickerSetItem:
        debug.nospace() << "classType: typeInputStickerSetItem";
        debug.nospace() << ", flags: " << item.flags();
        debug.nospace() << ", document: " << item.document();
        debug.nospace() << ", emoji: " << item.emoji();
        debug.nospace() << ", maskCoords: " << item.maskCoords();
        break;
    }
    debug.nospace() << ")";
    return debug;
}
*/
