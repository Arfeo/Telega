// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_INPUTSTICKERSETITEM
#define LQTG_TYPE_INPUTSTICKERSETITEM

#include "telegramtypeobject.h"

#include <QMetaType>
#include <QVariant>
#include "../coretypes.h"

#include <QDataStream>

#include "inputdocument.h"
#include <QString>
#include <QtGlobal>
#include "maskcoords.h"

class LIBQTELEGRAMSHARED_EXPORT InputStickerSetItem : public TelegramTypeObject
{
public:
    enum InputStickerSetItemClassType {
        typeInputStickerSetItem = 0xffa0a496
    };

    InputStickerSetItem(InputStickerSetItemClassType classType = typeInputStickerSetItem, InboundPkt *in = 0);
    InputStickerSetItem(InboundPkt *in);
    InputStickerSetItem(const Null&);
    InputStickerSetItem(const InputStickerSetItem &another);
    virtual ~InputStickerSetItem();

    void setDocument(const InputDocument &document);
    InputDocument document() const;

    void setEmoji(const QString &emoji);
    QString emoji() const;

    void setFlags(qint32 flags);
    qint32 flags() const;

    void setMaskCoords(const MaskCoords &maskCoords);
    MaskCoords maskCoords() const;

    void setClassType(InputStickerSetItemClassType classType);
    InputStickerSetItemClassType classType() const;

    bool fetch(InboundPkt *in);
    bool push(OutboundPkt *out) const;

    QMap<QString, QVariant> toMap() const;
    static InputStickerSetItem fromMap(const QMap<QString, QVariant> &map);
    static InputStickerSetItem fromJson(const QString &json);

    bool operator ==(const InputStickerSetItem &b) const;
    InputStickerSetItem &operator =(const InputStickerSetItem &b);

    bool operator==(bool stt) const { return isNull() != stt; }
    bool operator!=(bool stt) const { return !operator ==(stt); }

    QByteArray getHash(QCryptographicHash::Algorithm alg = QCryptographicHash::Md5) const;

private:
    InputDocument m_document;
    QString m_emoji;
    qint32 m_flags;
    MaskCoords m_maskCoords;
    InputStickerSetItemClassType m_classType;
};

Q_DECLARE_METATYPE(InputStickerSetItem)

QDataStream LIBQTELEGRAMSHARED_EXPORT &operator<<(QDataStream &stream, const InputStickerSetItem &item);
QDataStream LIBQTELEGRAMSHARED_EXPORT &operator>>(QDataStream &stream, InputStickerSetItem &item);

QDebug LIBQTELEGRAMSHARED_EXPORT operator<<(QDebug debug,  const InputStickerSetItem &item);

#endif // LQTG_TYPE_INPUTSTICKERSETITEM
