// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "inputwebdocument.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

InputWebDocument::InputWebDocument(InputWebDocumentClassType classType, InboundPkt *in) :
    m_size(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

InputWebDocument::InputWebDocument(InboundPkt *in) :
    m_size(0),
    m_classType(typeInputWebDocument)
{
    fetch(in);
}

InputWebDocument::InputWebDocument(const InputWebDocument &another) :
    TelegramTypeObject(),
    m_size(0),
    m_classType(typeInputWebDocument)
{
    operator=(another);
}

InputWebDocument::InputWebDocument(const Null &null) :
    TelegramTypeObject(null),
    m_size(0),
    m_classType(typeInputWebDocument)
{
}

InputWebDocument::~InputWebDocument() {

}

void InputWebDocument::setAttributes(const QList<DocumentAttribute> &attributes) {
    m_attributes = attributes;
}

QList<DocumentAttribute> InputWebDocument::attributes() const {
    return m_attributes;
}

void InputWebDocument::setMimeType(const QString &mimeType) {
    m_mimeType = mimeType;
}

QString InputWebDocument::mimeType() const {
    return m_mimeType;
}

void InputWebDocument::setSize(qint32 size) {
    m_size = size;
}

qint32 InputWebDocument::size() const {
    return m_size;
}

void InputWebDocument::setUrl(const QString &url) {
    m_url = url;
}

QString InputWebDocument::url() const {
    return m_url;
}

bool InputWebDocument::operator ==(const InputWebDocument &b) const {
    return m_classType == b.m_classType &&
           m_attributes == b.m_attributes &&
           m_mimeType == b.m_mimeType &&
           m_size == b.m_size &&
           m_url == b.m_url;
}

InputWebDocument &InputWebDocument::operator =(const InputWebDocument &b) {
    m_classType = b.m_classType;
    m_attributes = b.m_attributes;
    m_mimeType = b.m_mimeType;
    m_size = b.m_size;
    m_url = b.m_url;
    setNull(b.isNull());
    return *this;
}

void InputWebDocument::setClassType(InputWebDocument::InputWebDocumentClassType classType) {
    m_classType = classType;
}

InputWebDocument::InputWebDocumentClassType InputWebDocument::classType() const {
    return m_classType;
}

bool InputWebDocument::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeInputWebDocument: {
        m_url = in->fetchQString();
        m_size = in->fetchInt();
        m_mimeType = in->fetchQString();
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_attributes_length = in->fetchInt();
        m_attributes.clear();
        for (qint32 i = 0; i < m_attributes_length; i++) {
            DocumentAttribute type;
            type.fetch(in);
            m_attributes.append(type);
        }
        m_classType = static_cast<InputWebDocumentClassType>(x);
        return true;
    }
        break;

    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool InputWebDocument::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeInputWebDocument: {
        out->appendQString(m_url);
        out->appendInt(m_size);
        out->appendQString(m_mimeType);
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_attributes.count());
        for (qint32 i = 0; i < m_attributes.count(); i++) {
            m_attributes[i].push(out);
        }
        return true;
    }
        break;

    default:
        return false;
    }
}

QMap<QString, QVariant> InputWebDocument::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeInputWebDocument: {
        result["classType"] = "InputWebDocument::typeInputWebDocument";
        if( !m_url.isEmpty() ) result["url"] = QVariant::fromValue<QString>(m_url);
        if( size() ) result["size"] = QString::number(size());
        if( !m_mimeType.isEmpty() ) result["mimeType"] = QVariant::fromValue<QString>(m_mimeType);
        QList<QVariant> _attributes;
        for(const DocumentAttribute &m__type: m_attributes)
            if( !m__type.isNull() ) _attributes << m__type.toMap();
        result["attributes"] = _attributes;
        return result;
    }
        break;

    default:
        return result;
    }
}

InputWebDocument InputWebDocument::fromMap(const QMap<QString, QVariant> &map) {
    InputWebDocument result;
    if(map.value("classType").toString() == "InputWebDocument::typeInputWebDocument") {
        result.setClassType(typeInputWebDocument);
        QVariant _url_var = map.value("url");
        if( !_url_var.isNull() ) {
            _url_var.convert( QVariant::nameToType("QString") );
            result.setUrl( _url_var.value<QString>() );
        }

        QVariant _size_var = map.value("size");
        if( !_size_var.isNull() ) {
            _size_var.convert( QVariant::nameToType("qint32") );
            result.setSize( _size_var.value<qint32>() );
        }

        QVariant _mimeType_var = map.value("mimeType");
        if( !_mimeType_var.isNull() ) {
            _mimeType_var.convert( QVariant::nameToType("QString") );
            result.setMimeType( _mimeType_var.value<QString>() );
        }

        QList<QVariant> map_attributes = map["attributes"].toList();
        QList<DocumentAttribute> _attributes;
        for(const QVariant &var: map_attributes)
            _attributes << DocumentAttribute::fromMap(var.toMap());
        result.setAttributes(_attributes);
        return result;
    }
    return result;
}

InputWebDocument InputWebDocument::fromJson(const QString &json) {
    return InputWebDocument::fromMap(QJsonDocument::fromJson(json.toUtf8()).toVariant().toMap());
}

QByteArray InputWebDocument::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const InputWebDocument &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case InputWebDocument::typeInputWebDocument:
        stream << item.url();
        stream << item.size();
        stream << item.mimeType();
        stream << item.attributes();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, InputWebDocument &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<InputWebDocument::InputWebDocumentClassType>(type));
    switch(type) {
    case InputWebDocument::typeInputWebDocument: {
        QString m_url;
        stream >> m_url;
        item.setUrl(m_url);
        qint32 m_size;
        stream >> m_size;
        item.setSize(m_size);
        QString m_mime_type;
        stream >> m_mime_type;
        item.setMimeType(m_mime_type);
        QList<DocumentAttribute> m_attributes;
        stream >> m_attributes;
        item.setAttributes(m_attributes);
    }
        break;
    }
    return stream;
}

/*QDebug operator<<(QDebug debug,  const InputWebDocument &item) {
    QDebugStateSaver saver(debug);
    Q_UNUSED(saver)
    debug.nospace() << "Telegram.InputWebDocument(";
    switch(item.classType()) {
    case InputWebDocument::typeInputWebDocument:
        debug.nospace() << "classType: typeInputWebDocument";
        debug.nospace() << ", url: " << item.url();
        debug.nospace() << ", size: " << item.size();
        debug.nospace() << ", mimeType: " << item.mimeType();
        debug.nospace() << ", attributes: " << item.attributes();
        break;
    }
    debug.nospace() << ")";
    return debug;
}
*/
