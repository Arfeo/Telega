// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "invoice.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

Invoice::Invoice(InvoiceClassType classType, InboundPkt *in) :
    m_flags(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

Invoice::Invoice(InboundPkt *in) :
    m_flags(0),
    m_classType(typeInvoice)
{
    fetch(in);
}

Invoice::Invoice(const Invoice &another) :
    TelegramTypeObject(),
    m_flags(0),
    m_classType(typeInvoice)
{
    operator=(another);
}

Invoice::Invoice(const Null &null) :
    TelegramTypeObject(null),
    m_flags(0),
    m_classType(typeInvoice)
{
}

Invoice::~Invoice() {

}

void Invoice::setCurrency(const QString &currency) {
    m_currency = currency;
}

QString Invoice::currency() const {
    return m_currency;
}

void Invoice::setEmailRequested(bool emailRequested) {
    if(emailRequested) m_flags = (m_flags | (1<<3));
    else m_flags = (m_flags & ~(1<<3));
}

bool Invoice::emailRequested() const {
    return (m_flags & 1<<3);
}

void Invoice::setFlags(qint32 flags) {
    m_flags = flags;
}

qint32 Invoice::flags() const {
    return m_flags;
}

void Invoice::setFlexible(bool flexible) {
    if(flexible) m_flags = (m_flags | (1<<5));
    else m_flags = (m_flags & ~(1<<5));
}

bool Invoice::flexible() const {
    return (m_flags & 1<<5);
}

void Invoice::setNameRequested(bool nameRequested) {
    if(nameRequested) m_flags = (m_flags | (1<<1));
    else m_flags = (m_flags & ~(1<<1));
}

bool Invoice::nameRequested() const {
    return (m_flags & 1<<1);
}

void Invoice::setPhoneRequested(bool phoneRequested) {
    if(phoneRequested) m_flags = (m_flags | (1<<2));
    else m_flags = (m_flags & ~(1<<2));
}

bool Invoice::phoneRequested() const {
    return (m_flags & 1<<2);
}

void Invoice::setPrices(const QList<LabeledPrice> &prices) {
    m_prices = prices;
}

QList<LabeledPrice> Invoice::prices() const {
    return m_prices;
}

void Invoice::setShippingAddressRequested(bool shippingAddressRequested) {
    if(shippingAddressRequested) m_flags = (m_flags | (1<<4));
    else m_flags = (m_flags & ~(1<<4));
}

bool Invoice::shippingAddressRequested() const {
    return (m_flags & 1<<4);
}

void Invoice::setTest(bool test) {
    if(test) m_flags = (m_flags | (1<<0));
    else m_flags = (m_flags & ~(1<<0));
}

bool Invoice::test() const {
    return (m_flags & 1<<0);
}

bool Invoice::operator ==(const Invoice &b) const {
    return m_classType == b.m_classType &&
           m_currency == b.m_currency &&
           m_flags == b.m_flags &&
           m_prices == b.m_prices;
}

Invoice &Invoice::operator =(const Invoice &b) {
    m_classType = b.m_classType;
    m_currency = b.m_currency;
    m_flags = b.m_flags;
    m_prices = b.m_prices;
    setNull(b.isNull());
    return *this;
}

void Invoice::setClassType(Invoice::InvoiceClassType classType) {
    m_classType = classType;
}

Invoice::InvoiceClassType Invoice::classType() const {
    return m_classType;
}

bool Invoice::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeInvoice: {
        m_flags = in->fetchInt();
        m_currency = in->fetchQString();
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_prices_length = in->fetchInt();
        m_prices.clear();
        for (qint32 i = 0; i < m_prices_length; i++) {
            LabeledPrice type;
            type.fetch(in);
            m_prices.append(type);
        }
        m_classType = static_cast<InvoiceClassType>(x);
        return true;
    }
        break;

    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool Invoice::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeInvoice: {
        out->appendInt(m_flags);
        out->appendQString(m_currency);
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_prices.count());
        for (qint32 i = 0; i < m_prices.count(); i++) {
            m_prices[i].push(out);
        }
        return true;
    }
        break;

    default:
        return false;
    }
}

QMap<QString, QVariant> Invoice::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeInvoice: {
        result["classType"] = "Invoice::typeInvoice";
        if( test() ) result["test"] = QString::number(test());
        if( nameRequested() ) result["nameRequested"] = QString::number(nameRequested());
        if( phoneRequested() ) result["phoneRequested"] = QString::number(phoneRequested());
        if( emailRequested() ) result["emailRequested"] = QString::number(emailRequested());
        if( shippingAddressRequested() ) result["shippingAddressRequested"] = QString::number(shippingAddressRequested());
        if( flexible() ) result["flexible"] = QString::number(flexible());
        if( !m_currency.isEmpty() ) result["currency"] = QVariant::fromValue<QString>(m_currency);
        QList<QVariant> _prices;
        for(const LabeledPrice &m__type: m_prices)
            if( !m__type.isNull() ) _prices << m__type.toMap();
        result["prices"] = _prices;
        return result;
    }
        break;

    default:
        return result;
    }
}

Invoice Invoice::fromMap(const QMap<QString, QVariant> &map) {
    Invoice result;
    if(map.value("classType").toString() == "Invoice::typeInvoice") {
        result.setClassType(typeInvoice);
        QVariant _test_var = map.value("test");
        if( !_test_var.isNull() ) {
            _test_var.convert( QVariant::nameToType("bool") );
            result.setTest( _test_var.value<bool>() );
        }

        QVariant _nameRequested_var = map.value("nameRequested");
        if( !_nameRequested_var.isNull() ) {
            _nameRequested_var.convert( QVariant::nameToType("bool") );
            result.setNameRequested( _nameRequested_var.value<bool>() );
        }

        QVariant _phoneRequested_var = map.value("phoneRequested");
        if( !_phoneRequested_var.isNull() ) {
            _phoneRequested_var.convert( QVariant::nameToType("bool") );
            result.setPhoneRequested( _phoneRequested_var.value<bool>() );
        }

        QVariant _emailRequested_var = map.value("emailRequested");
        if( !_emailRequested_var.isNull() ) {
            _emailRequested_var.convert( QVariant::nameToType("bool") );
            result.setEmailRequested( _emailRequested_var.value<bool>() );
        }

        QVariant _shippingAddressRequested_var = map.value("shippingAddressRequested");
        if( !_shippingAddressRequested_var.isNull() ) {
            _shippingAddressRequested_var.convert( QVariant::nameToType("bool") );
            result.setShippingAddressRequested( _shippingAddressRequested_var.value<bool>() );
        }

        QVariant _flexible_var = map.value("flexible");
        if( !_flexible_var.isNull() ) {
            _flexible_var.convert( QVariant::nameToType("bool") );
            result.setFlexible( _flexible_var.value<bool>() );
        }

        QVariant _currency_var = map.value("currency");
        if( !_currency_var.isNull() ) {
            _currency_var.convert( QVariant::nameToType("QString") );
            result.setCurrency( _currency_var.value<QString>() );
        }

        QList<QVariant> map_prices = map["prices"].toList();
        QList<LabeledPrice> _prices;
        for(const QVariant &var: map_prices)
            _prices << LabeledPrice::fromMap(var.toMap());
        result.setPrices(_prices);
        return result;
    }
    return result;
}

Invoice Invoice::fromJson(const QString &json) {
    return Invoice::fromMap(QJsonDocument::fromJson(json.toUtf8()).toVariant().toMap());
}

QByteArray Invoice::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const Invoice &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case Invoice::typeInvoice:
        stream << item.flags();
        stream << item.currency();
        stream << item.prices();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, Invoice &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<Invoice::InvoiceClassType>(type));
    switch(type) {
    case Invoice::typeInvoice: {
        qint32 m_flags;
        stream >> m_flags;
        item.setFlags(m_flags);
        QString m_currency;
        stream >> m_currency;
        item.setCurrency(m_currency);
        QList<LabeledPrice> m_prices;
        stream >> m_prices;
        item.setPrices(m_prices);
    }
        break;
    }
    return stream;
}

/*QDebug operator<<(QDebug debug,  const Invoice &item) {
    QDebugStateSaver saver(debug);
    Q_UNUSED(saver)
    debug.nospace() << "Telegram.Invoice(";
    switch(item.classType()) {
    case Invoice::typeInvoice:
        debug.nospace() << "classType: typeInvoice";
        debug.nospace() << ", flags: " << item.flags();
        debug.nospace() << ", currency: " << item.currency();
        debug.nospace() << ", prices: " << item.prices();
        break;
    }
    debug.nospace() << ")";
    return debug;
}
*/
