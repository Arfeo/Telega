// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "labeledprice.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

LabeledPrice::LabeledPrice(LabeledPriceClassType classType, InboundPkt *in) :
    m_amount(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

LabeledPrice::LabeledPrice(InboundPkt *in) :
    m_amount(0),
    m_classType(typeLabeledPrice)
{
    fetch(in);
}

LabeledPrice::LabeledPrice(const LabeledPrice &another) :
    TelegramTypeObject(),
    m_amount(0),
    m_classType(typeLabeledPrice)
{
    operator=(another);
}

LabeledPrice::LabeledPrice(const Null &null) :
    TelegramTypeObject(null),
    m_amount(0),
    m_classType(typeLabeledPrice)
{
}

LabeledPrice::~LabeledPrice() {

}

void LabeledPrice::setAmount(qint64 amount) {
    m_amount = amount;
}

qint64 LabeledPrice::amount() const {
    return m_amount;
}

void LabeledPrice::setLabel(const QString &label) {
    m_label = label;
}

QString LabeledPrice::label() const {
    return m_label;
}

bool LabeledPrice::operator ==(const LabeledPrice &b) const {
    return m_classType == b.m_classType &&
           m_amount == b.m_amount &&
           m_label == b.m_label;
}

LabeledPrice &LabeledPrice::operator =(const LabeledPrice &b) {
    m_classType = b.m_classType;
    m_amount = b.m_amount;
    m_label = b.m_label;
    setNull(b.isNull());
    return *this;
}

void LabeledPrice::setClassType(LabeledPrice::LabeledPriceClassType classType) {
    m_classType = classType;
}

LabeledPrice::LabeledPriceClassType LabeledPrice::classType() const {
    return m_classType;
}

bool LabeledPrice::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeLabeledPrice: {
        m_label = in->fetchQString();
        m_amount = in->fetchLong();
        m_classType = static_cast<LabeledPriceClassType>(x);
        return true;
    }
        break;

    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool LabeledPrice::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeLabeledPrice: {
        out->appendQString(m_label);
        out->appendLong(m_amount);
        return true;
    }
        break;

    default:
        return false;
    }
}

QMap<QString, QVariant> LabeledPrice::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeLabeledPrice: {
        result["classType"] = "LabeledPrice::typeLabeledPrice";
        if( !m_label.isEmpty() ) result["label"] = QVariant::fromValue<QString>(m_label);
        if( amount() ) result["amount"] = QString::number(amount());
        return result;
    }
        break;

    default:
        return result;
    }
}

LabeledPrice LabeledPrice::fromMap(const QMap<QString, QVariant> &map) {
    LabeledPrice result;
    if(map.value("classType").toString() == "LabeledPrice::typeLabeledPrice") {
        result.setClassType(typeLabeledPrice);
        QVariant _label_var = map.value("label");
        if( !_label_var.isNull() ) {
            _label_var.convert( QVariant::nameToType("QString") );
            result.setLabel( _label_var.value<QString>() );
        }

        QVariant _amount_var = map.value("amount");
        if( !_amount_var.isNull() ) {
            _amount_var.convert( QVariant::nameToType("qint64") );
            result.setAmount( _amount_var.value<qint64>() );
        }

        return result;
    }
    return result;
}

LabeledPrice LabeledPrice::fromJson(const QString &json) {
    return LabeledPrice::fromMap(QJsonDocument::fromJson(json.toUtf8()).toVariant().toMap());
}

QByteArray LabeledPrice::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const LabeledPrice &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case LabeledPrice::typeLabeledPrice:
        stream << item.label();
        stream << item.amount();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, LabeledPrice &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<LabeledPrice::LabeledPriceClassType>(type));
    switch(type) {
    case LabeledPrice::typeLabeledPrice: {
        QString m_label;
        stream >> m_label;
        item.setLabel(m_label);
        qint64 m_amount;
        stream >> m_amount;
        item.setAmount(m_amount);
    }
        break;
    }
    return stream;
}

/*QDebug operator<<(QDebug debug,  const LabeledPrice &item) {
    QDebugStateSaver saver(debug);
    Q_UNUSED(saver)
    debug.nospace() << "Telegram.LabeledPrice(";
    switch(item.classType()) {
    case LabeledPrice::typeLabeledPrice:
        debug.nospace() << "classType: typeLabeledPrice";
        debug.nospace() << ", label: " << item.label();
        debug.nospace() << ", amount: " << item.amount();
        break;
    }
    debug.nospace() << ")";
    return debug;
}
*/
