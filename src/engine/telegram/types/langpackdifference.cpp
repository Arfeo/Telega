// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "langpackdifference.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

LangPackDifference::LangPackDifference(LangPackDifferenceClassType classType, InboundPkt *in) :
    m_fromVersion(0),
    m_version(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

LangPackDifference::LangPackDifference(InboundPkt *in) :
    m_fromVersion(0),
    m_version(0),
    m_classType(typeLangPackDifference)
{
    fetch(in);
}

LangPackDifference::LangPackDifference(const LangPackDifference &another) :
    TelegramTypeObject(),
    m_fromVersion(0),
    m_version(0),
    m_classType(typeLangPackDifference)
{
    operator=(another);
}

LangPackDifference::LangPackDifference(const Null &null) :
    TelegramTypeObject(null),
    m_fromVersion(0),
    m_version(0),
    m_classType(typeLangPackDifference)
{
}

LangPackDifference::~LangPackDifference() {

}

void LangPackDifference::setFromVersion(qint32 fromVersion) {
    m_fromVersion = fromVersion;
}

qint32 LangPackDifference::fromVersion() const {
    return m_fromVersion;
}

void LangPackDifference::setLangCode(const QString &langCode) {
    m_langCode = langCode;
}

QString LangPackDifference::langCode() const {
    return m_langCode;
}

void LangPackDifference::setStrings(const QList<LangPackString> &strings) {
    m_strings = strings;
}

QList<LangPackString> LangPackDifference::strings() const {
    return m_strings;
}

void LangPackDifference::setVersion(qint32 version) {
    m_version = version;
}

qint32 LangPackDifference::version() const {
    return m_version;
}

bool LangPackDifference::operator ==(const LangPackDifference &b) const {
    return m_classType == b.m_classType &&
           m_fromVersion == b.m_fromVersion &&
           m_langCode == b.m_langCode &&
           m_strings == b.m_strings &&
           m_version == b.m_version;
}

LangPackDifference &LangPackDifference::operator =(const LangPackDifference &b) {
    m_classType = b.m_classType;
    m_fromVersion = b.m_fromVersion;
    m_langCode = b.m_langCode;
    m_strings = b.m_strings;
    m_version = b.m_version;
    setNull(b.isNull());
    return *this;
}

void LangPackDifference::setClassType(LangPackDifference::LangPackDifferenceClassType classType) {
    m_classType = classType;
}

LangPackDifference::LangPackDifferenceClassType LangPackDifference::classType() const {
    return m_classType;
}

bool LangPackDifference::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeLangPackDifference: {
        m_langCode = in->fetchQString();
        m_fromVersion = in->fetchInt();
        m_version = in->fetchInt();
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_strings_length = in->fetchInt();
        m_strings.clear();
        for (qint32 i = 0; i < m_strings_length; i++) {
            LangPackString type;
            type.fetch(in);
            m_strings.append(type);
        }
        m_classType = static_cast<LangPackDifferenceClassType>(x);
        return true;
    }
        break;

    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool LangPackDifference::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeLangPackDifference: {
        out->appendQString(m_langCode);
        out->appendInt(m_fromVersion);
        out->appendInt(m_version);
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_strings.count());
        for (qint32 i = 0; i < m_strings.count(); i++) {
            m_strings[i].push(out);
        }
        return true;
    }
        break;

    default:
        return false;
    }
}

QMap<QString, QVariant> LangPackDifference::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeLangPackDifference: {
        result["classType"] = "LangPackDifference::typeLangPackDifference";
        if( !m_langCode.isEmpty() ) result["langCode"] = QVariant::fromValue<QString>(m_langCode);
        if( fromVersion() ) result["fromVersion"] = QString::number(fromVersion());
        if( version() ) result["version"] = QString::number(version());
        QList<QVariant> _strings;
        //for(const LangPackString &m__type: m_strings)
        for(int i = 0; i < m_strings.size(); ++i) {
            const LangPackString &m__type = m_strings[i];
            if( !m__type.isNull() ) _strings << m__type.toMap();
        }
        result["strings"] = _strings;
        return result;
    }
        break;

    default:
        return result;
    }
}

LangPackDifference LangPackDifference::fromMap(const QMap<QString, QVariant> &map) {
    LangPackDifference result;
    if(map.value("classType").toString() == "LangPackDifference::typeLangPackDifference") {
        result.setClassType(typeLangPackDifference);
        QVariant _langCode_var = map.value("langCode");
        if( !_langCode_var.isNull() ) {
            _langCode_var.convert( QVariant::nameToType("QString") );
            result.setLangCode( _langCode_var.value<QString>() );
        }

        QVariant _fromVersion_var = map.value("fromVersion");
        if( !_fromVersion_var.isNull() ) {
            _fromVersion_var.convert( QVariant::nameToType("qint32") );
            result.setFromVersion( _fromVersion_var.value<qint32>() );
        }

        QVariant _version_var = map.value("version");
        if( !_version_var.isNull() ) {
            _version_var.convert( QVariant::nameToType("qint32") );
            result.setVersion( _version_var.value<qint32>() );
        }

        QList<QVariant> map_strings = map["strings"].toList();
        QList<LangPackString> _strings;
        //for(const QVariant &var: map_strings)
        for(int i = 0; i < map_strings.size(); ++i) {
            const QVariant &var = map_strings[i];
            _strings << LangPackString::fromMap(var.toMap());
        }
        result.setStrings(_strings);
        return result;
    }
    return result;
}

LangPackDifference LangPackDifference::fromJson(const QString &json) {
    return LangPackDifference::fromMap(QJsonDocument::fromJson(json.toUtf8()).toVariant().toMap());
}

QByteArray LangPackDifference::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const LangPackDifference &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case LangPackDifference::typeLangPackDifference:
        stream << item.langCode();
        stream << item.fromVersion();
        stream << item.version();
        stream << item.strings();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, LangPackDifference &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<LangPackDifference::LangPackDifferenceClassType>(type));
    switch(type) {
    case LangPackDifference::typeLangPackDifference: {
        QString m_lang_code;
        stream >> m_lang_code;
        item.setLangCode(m_lang_code);
        qint32 m_from_version;
        stream >> m_from_version;
        item.setFromVersion(m_from_version);
        qint32 m_version;
        stream >> m_version;
        item.setVersion(m_version);
        QList<LangPackString> m_strings;
        stream >> m_strings;
        item.setStrings(m_strings);
    }
        break;
    }
    return stream;
}

/*QDebug operator<<(QDebug debug,  const LangPackDifference &item) {
    QDebugStateSaver saver(debug);
    Q_UNUSED(saver)
    debug.nospace() << "Telegram.LangPackDifference(";
    switch(item.classType()) {
    case LangPackDifference::typeLangPackDifference:
        debug.nospace() << "classType: typeLangPackDifference";
        debug.nospace() << ", langCode: " << item.langCode();
        debug.nospace() << ", fromVersion: " << item.fromVersion();
        debug.nospace() << ", version: " << item.version();
        debug.nospace() << ", strings: " << item.strings();
        break;
    }
    debug.nospace() << ")";
    return debug;
}
*/
