// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "langpacklanguage.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

LangPackLanguage::LangPackLanguage(LangPackLanguageClassType classType, InboundPkt *in) :
    m_classType(classType)
{
    if(in) fetch(in);
}

LangPackLanguage::LangPackLanguage(InboundPkt *in) :
    m_classType(typeLangPackLanguage)
{
    fetch(in);
}

LangPackLanguage::LangPackLanguage(const LangPackLanguage &another) :
    TelegramTypeObject(),
    m_classType(typeLangPackLanguage)
{
    operator=(another);
}

LangPackLanguage::LangPackLanguage(const Null &null) :
    TelegramTypeObject(null),
    m_classType(typeLangPackLanguage)
{
}

LangPackLanguage::~LangPackLanguage() {
    
}

void LangPackLanguage::setLangCode(const QString &langCode) {
    m_langCode = langCode;
}

QString LangPackLanguage::langCode() const {
    return m_langCode;
}

void LangPackLanguage::setName(const QString &name) {
    m_name = name;
}

QString LangPackLanguage::name() const {
    return m_name;
}

void LangPackLanguage::setNativeName(const QString &nativeName) {
    m_nativeName = nativeName;
}

QString LangPackLanguage::nativeName() const {
    return m_nativeName;
}

bool LangPackLanguage::operator ==(const LangPackLanguage &b) const {
    return m_classType == b.m_classType &&
           m_langCode == b.m_langCode &&
           m_name == b.m_name &&
           m_nativeName == b.m_nativeName;
}

LangPackLanguage &LangPackLanguage::operator =(const LangPackLanguage &b) {
    m_classType = b.m_classType;
    m_langCode = b.m_langCode;
    m_name = b.m_name;
    m_nativeName = b.m_nativeName;
    setNull(b.isNull());
    return *this;
}

void LangPackLanguage::setClassType(LangPackLanguage::LangPackLanguageClassType classType) {
    m_classType = classType;
}

LangPackLanguage::LangPackLanguageClassType LangPackLanguage::classType() const {
    return m_classType;
}

bool LangPackLanguage::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeLangPackLanguage: {
        m_name = in->fetchQString();
        m_nativeName = in->fetchQString();
        m_langCode = in->fetchQString();
        m_classType = static_cast<LangPackLanguageClassType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool LangPackLanguage::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeLangPackLanguage: {
        out->appendQString(m_name);
        out->appendQString(m_nativeName);
        out->appendQString(m_langCode);
        return true;
    }
        break;
    
    default:
        return false;
    }
}

QMap<QString, QVariant> LangPackLanguage::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeLangPackLanguage: {
        result["classType"] = "LangPackLanguage::typeLangPackLanguage";
        if( !m_name.isEmpty() ) result["name"] = QVariant::fromValue<QString>(m_name);
        if( !m_nativeName.isEmpty() ) result["nativeName"] = QVariant::fromValue<QString>(m_nativeName);
        if( !m_langCode.isEmpty() ) result["langCode"] = QVariant::fromValue<QString>(m_langCode);
        return result;
    }
        break;
    
    default:
        return result;
    }
}

LangPackLanguage LangPackLanguage::fromMap(const QMap<QString, QVariant> &map) {
    LangPackLanguage result;
    if(map.value("classType").toString() == "LangPackLanguage::typeLangPackLanguage") {
        result.setClassType(typeLangPackLanguage);
        QVariant _name_var = map.value("name");
        if( !_name_var.isNull() ) {
            _name_var.convert( QVariant::nameToType("QString") );
            result.setName( _name_var.value<QString>() );
        }
        
        QVariant _nativeName_var = map.value("nativeName");
        if( !_nativeName_var.isNull() ) {
            _nativeName_var.convert( QVariant::nameToType("QString") );
            result.setNativeName( _nativeName_var.value<QString>() );
        }
        
        QVariant _langCode_var = map.value("langCode");
        if( !_langCode_var.isNull() ) {
            _langCode_var.convert( QVariant::nameToType("QString") );
            result.setLangCode( _langCode_var.value<QString>() );
        }
        
        return result;
    }
    return result;
}

LangPackLanguage LangPackLanguage::fromJson(const QString &json) {
    return LangPackLanguage::fromMap(QJsonDocument::fromJson(json.toUtf8()).toVariant().toMap());
}

QByteArray LangPackLanguage::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const LangPackLanguage &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case LangPackLanguage::typeLangPackLanguage:
        stream << item.name();
        stream << item.nativeName();
        stream << item.langCode();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, LangPackLanguage &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<LangPackLanguage::LangPackLanguageClassType>(type));
    switch(type) {
    case LangPackLanguage::typeLangPackLanguage: {
        QString m_name;
        stream >> m_name;
        item.setName(m_name);
        QString m_native_name;
        stream >> m_native_name;
        item.setNativeName(m_native_name);
        QString m_lang_code;
        stream >> m_lang_code;
        item.setLangCode(m_lang_code);
    }
        break;
    }
    return stream;
}

QDebug operator<<(QDebug debug,  const LangPackLanguage &item) {
    QDebugStateSaver saver(debug);
    Q_UNUSED(saver)
    debug.nospace() << "Telegram.LangPackLanguage(";
    switch(item.classType()) {
    case LangPackLanguage::typeLangPackLanguage:
        debug.nospace() << "classType: typeLangPackLanguage";
        debug.nospace() << ", name: " << item.name();
        debug.nospace() << ", nativeName: " << item.nativeName();
        debug.nospace() << ", langCode: " << item.langCode();
        break;
    }
    debug.nospace() << ")";
    return debug;
}

