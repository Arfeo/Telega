// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "langpackstring.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

LangPackString::LangPackString(LangPackStringClassType classType, InboundPkt *in) :
    m_flags(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

LangPackString::LangPackString(InboundPkt *in) :
    m_flags(0),
    m_classType(typeLangPackString)
{
    fetch(in);
}

LangPackString::LangPackString(const LangPackString &another) :
    TelegramTypeObject(),
    m_flags(0),
    m_classType(typeLangPackString)
{
    operator=(another);
}

LangPackString::LangPackString(const Null &null) :
    TelegramTypeObject(null),
    m_flags(0),
    m_classType(typeLangPackString)
{
}

LangPackString::~LangPackString() {

}

void LangPackString::setFewValue(const QString &fewValue) {
    if(!fewValue.isNull()) m_flags = (m_flags | (1<<3));
    else m_flags = (m_flags & ~(1<<3));
    m_fewValue = fewValue;
}

QString LangPackString::fewValue() const {
    return m_fewValue;
}

void LangPackString::setFlags(qint32 flags) {
    m_flags = flags;
}

qint32 LangPackString::flags() const {
    return m_flags;
}

void LangPackString::setKey(const QString &key) {
    m_key = key;
}

QString LangPackString::key() const {
    return m_key;
}

void LangPackString::setManyValue(const QString &manyValue) {
    if(!manyValue.isNull()) m_flags = (m_flags | (1<<4));
    else m_flags = (m_flags & ~(1<<4));
    m_manyValue = manyValue;
}

QString LangPackString::manyValue() const {
    return m_manyValue;
}

void LangPackString::setOneValue(const QString &oneValue) {
    if(!oneValue.isNull()) m_flags = (m_flags | (1<<1));
    else m_flags = (m_flags & ~(1<<1));
    m_oneValue = oneValue;
}

QString LangPackString::oneValue() const {
    return m_oneValue;
}

void LangPackString::setOtherValue(const QString &otherValue) {
    m_otherValue = otherValue;
}

QString LangPackString::otherValue() const {
    return m_otherValue;
}

void LangPackString::setTwoValue(const QString &twoValue) {
    if(!twoValue.isNull()) m_flags = (m_flags | (1<<2));
    else m_flags = (m_flags & ~(1<<2));
    m_twoValue = twoValue;
}

QString LangPackString::twoValue() const {
    return m_twoValue;
}

void LangPackString::setValue(const QString &value) {
    m_value = value;
}

QString LangPackString::value() const {
    return m_value;
}

void LangPackString::setZeroValue(const QString &zeroValue) {
    if(!zeroValue.isNull()) m_flags = (m_flags | (1<<0));
    else m_flags = (m_flags & ~(1<<0));
    m_zeroValue = zeroValue;
}

QString LangPackString::zeroValue() const {
    return m_zeroValue;
}

bool LangPackString::operator ==(const LangPackString &b) const {
    return m_classType == b.m_classType &&
           m_fewValue == b.m_fewValue &&
           m_flags == b.m_flags &&
           m_key == b.m_key &&
           m_manyValue == b.m_manyValue &&
           m_oneValue == b.m_oneValue &&
           m_otherValue == b.m_otherValue &&
           m_twoValue == b.m_twoValue &&
           m_value == b.m_value &&
           m_zeroValue == b.m_zeroValue;
}

LangPackString &LangPackString::operator =(const LangPackString &b) {
    m_classType = b.m_classType;
    m_fewValue = b.m_fewValue;
    m_flags = b.m_flags;
    m_key = b.m_key;
    m_manyValue = b.m_manyValue;
    m_oneValue = b.m_oneValue;
    m_otherValue = b.m_otherValue;
    m_twoValue = b.m_twoValue;
    m_value = b.m_value;
    m_zeroValue = b.m_zeroValue;
    setNull(b.isNull());
    return *this;
}

void LangPackString::setClassType(LangPackString::LangPackStringClassType classType) {
    m_classType = classType;
}

LangPackString::LangPackStringClassType LangPackString::classType() const {
    return m_classType;
}

bool LangPackString::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeLangPackString: {
        m_key = in->fetchQString();
        m_value = in->fetchQString();
        m_classType = static_cast<LangPackStringClassType>(x);
        return true;
    }
        break;

    case typeLangPackStringPluralized: {
        m_flags = in->fetchInt();
        m_key = in->fetchQString();
        if(m_flags & 1<<0) {
            m_zeroValue = in->fetchQString();
        }
        if(m_flags & 1<<1) {
            m_oneValue = in->fetchQString();
        }
        if(m_flags & 1<<2) {
            m_twoValue = in->fetchQString();
        }
        if(m_flags & 1<<3) {
            m_fewValue = in->fetchQString();
        }
        if(m_flags & 1<<4) {
            m_manyValue = in->fetchQString();
        }
        m_otherValue = in->fetchQString();
        m_classType = static_cast<LangPackStringClassType>(x);
        return true;
    }
        break;

    case typeLangPackStringDeleted: {
        m_key = in->fetchQString();
        m_classType = static_cast<LangPackStringClassType>(x);
        return true;
    }
        break;

    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool LangPackString::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeLangPackString: {
        out->appendQString(m_key);
        out->appendQString(m_value);
        return true;
    }
        break;

    case typeLangPackStringPluralized: {
        out->appendInt(m_flags);
        out->appendQString(m_key);
        if(m_flags & 1<<0) {
            out->appendQString(m_zeroValue);
        }
        if(m_flags & 1<<1) {
            out->appendQString(m_oneValue);
        }
        if(m_flags & 1<<2) {
            out->appendQString(m_twoValue);
        }
        if(m_flags & 1<<3) {
            out->appendQString(m_fewValue);
        }
        if(m_flags & 1<<4) {
            out->appendQString(m_manyValue);
        }
        out->appendQString(m_otherValue);
        return true;
    }
        break;

    case typeLangPackStringDeleted: {
        out->appendQString(m_key);
        return true;
    }
        break;

    default:
        return false;
    }
}

QMap<QString, QVariant> LangPackString::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeLangPackString: {
        result["classType"] = "LangPackString::typeLangPackString";
        if( !m_key.isEmpty() ) result["key"] = QVariant::fromValue<QString>(m_key);
        if( !m_value.isEmpty() ) result["value"] = QVariant::fromValue<QString>(m_value);
        return result;
    }
        break;

    case typeLangPackStringPluralized: {
        result["classType"] = "LangPackString::typeLangPackStringPluralized";
        if( !m_key.isEmpty() ) result["key"] = QVariant::fromValue<QString>(m_key);
        if( !m_zeroValue.isEmpty() ) result["zeroValue"] = QVariant::fromValue<QString>(m_zeroValue);
        if( !m_oneValue.isEmpty() ) result["oneValue"] = QVariant::fromValue<QString>(m_oneValue);
        if( !m_twoValue.isEmpty() ) result["twoValue"] = QVariant::fromValue<QString>(m_twoValue);
        if( !m_fewValue.isEmpty() ) result["fewValue"] = QVariant::fromValue<QString>(m_fewValue);
        if( !m_manyValue.isEmpty() ) result["manyValue"] = QVariant::fromValue<QString>(m_manyValue);
        if( !m_otherValue.isEmpty() ) result["otherValue"] = QVariant::fromValue<QString>(m_otherValue);
        return result;
    }
        break;

    case typeLangPackStringDeleted: {
        result["classType"] = "LangPackString::typeLangPackStringDeleted";
        if( !m_key.isEmpty() ) result["key"] = QVariant::fromValue<QString>(m_key);
        return result;
    }
        break;

    default:
        return result;
    }
}

LangPackString LangPackString::fromMap(const QMap<QString, QVariant> &map) {
    LangPackString result;
    if(map.value("classType").toString() == "LangPackString::typeLangPackString") {
        result.setClassType(typeLangPackString);
        QVariant _key_var = map.value("key");
        if( !_key_var.isNull() ) {
            _key_var.convert( QVariant::nameToType("QString") );
            result.setKey( _key_var.value<QString>() );
        }

        QVariant _value_var = map.value("value");
        if( !_value_var.isNull() ) {
            _value_var.convert( QVariant::nameToType("QString") );
            result.setValue( _value_var.value<QString>() );
        }

        return result;
    }
    if(map.value("classType").toString() == "LangPackString::typeLangPackStringPluralized") {
        result.setClassType(typeLangPackStringPluralized);
        QVariant _key_var = map.value("key");
        if( !_key_var.isNull() ) {
            _key_var.convert( QVariant::nameToType("QString") );
            result.setKey( _key_var.value<QString>() );
        }

        QVariant _zeroValue_var = map.value("zeroValue");
        if( !_zeroValue_var.isNull() ) {
            _zeroValue_var.convert( QVariant::nameToType("QString") );
            result.setZeroValue( _zeroValue_var.value<QString>() );
        }

        QVariant _oneValue_var = map.value("oneValue");
        if( !_oneValue_var.isNull() ) {
            _oneValue_var.convert( QVariant::nameToType("QString") );
            result.setOneValue( _oneValue_var.value<QString>() );
        }

        QVariant _twoValue_var = map.value("twoValue");
        if( !_twoValue_var.isNull() ) {
            _twoValue_var.convert( QVariant::nameToType("QString") );
            result.setTwoValue( _twoValue_var.value<QString>() );
        }

        QVariant _fewValue_var = map.value("fewValue");
        if( !_fewValue_var.isNull() ) {
            _fewValue_var.convert( QVariant::nameToType("QString") );
            result.setFewValue( _fewValue_var.value<QString>() );
        }

        QVariant _manyValue_var = map.value("manyValue");
        if( !_manyValue_var.isNull() ) {
            _manyValue_var.convert( QVariant::nameToType("QString") );
            result.setManyValue( _manyValue_var.value<QString>() );
        }

        QVariant _otherValue_var = map.value("otherValue");
        if( !_otherValue_var.isNull() ) {
            _otherValue_var.convert( QVariant::nameToType("QString") );
            result.setOtherValue( _otherValue_var.value<QString>() );
        }

        return result;
    }
    if(map.value("classType").toString() == "LangPackString::typeLangPackStringDeleted") {
        result.setClassType(typeLangPackStringDeleted);
        QVariant _key_var = map.value("key");
        if( !_key_var.isNull() ) {
            _key_var.convert( QVariant::nameToType("QString") );
            result.setKey( _key_var.value<QString>() );
        }

        return result;
    }
    return result;
}

LangPackString LangPackString::fromJson(const QString &json) {
    return LangPackString::fromMap(QJsonDocument::fromJson(json.toUtf8()).toVariant().toMap());
}

QByteArray LangPackString::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const LangPackString &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case LangPackString::typeLangPackString:
        stream << item.key();
        stream << item.value();
        break;
    case LangPackString::typeLangPackStringPluralized:
        stream << item.flags();
        stream << item.key();
        stream << item.zeroValue();
        stream << item.oneValue();
        stream << item.twoValue();
        stream << item.fewValue();
        stream << item.manyValue();
        stream << item.otherValue();
        break;
    case LangPackString::typeLangPackStringDeleted:
        stream << item.key();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, LangPackString &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<LangPackString::LangPackStringClassType>(type));
    switch(type) {
    case LangPackString::typeLangPackString: {
        QString m_key;
        stream >> m_key;
        item.setKey(m_key);
        QString m_value;
        stream >> m_value;
        item.setValue(m_value);
    }
        break;
    case LangPackString::typeLangPackStringPluralized: {
        qint32 m_flags;
        stream >> m_flags;
        item.setFlags(m_flags);
        QString m_key;
        stream >> m_key;
        item.setKey(m_key);
        QString m_zero_value;
        stream >> m_zero_value;
        item.setZeroValue(m_zero_value);
        QString m_one_value;
        stream >> m_one_value;
        item.setOneValue(m_one_value);
        QString m_two_value;
        stream >> m_two_value;
        item.setTwoValue(m_two_value);
        QString m_few_value;
        stream >> m_few_value;
        item.setFewValue(m_few_value);
        QString m_many_value;
        stream >> m_many_value;
        item.setManyValue(m_many_value);
        QString m_other_value;
        stream >> m_other_value;
        item.setOtherValue(m_other_value);
    }
        break;
    case LangPackString::typeLangPackStringDeleted: {
        QString m_key;
        stream >> m_key;
        item.setKey(m_key);
    }
        break;
    }
    return stream;
}

/*QDebug operator<<(QDebug debug,  const LangPackString &item) {
    QDebugStateSaver saver(debug);
    Q_UNUSED(saver)
    debug.nospace() << "Telegram.LangPackString(";
    switch(item.classType()) {
    case LangPackString::typeLangPackString:
        debug.nospace() << "classType: typeLangPackString";
        debug.nospace() << ", key: " << item.key();
        debug.nospace() << ", value: " << item.value();
        break;
    case LangPackString::typeLangPackStringPluralized:
        debug.nospace() << "classType: typeLangPackStringPluralized";
        debug.nospace() << ", flags: " << item.flags();
        debug.nospace() << ", key: " << item.key();
        debug.nospace() << ", zeroValue: " << item.zeroValue();
        debug.nospace() << ", oneValue: " << item.oneValue();
        debug.nospace() << ", twoValue: " << item.twoValue();
        debug.nospace() << ", fewValue: " << item.fewValue();
        debug.nospace() << ", manyValue: " << item.manyValue();
        debug.nospace() << ", otherValue: " << item.otherValue();
        break;
    case LangPackString::typeLangPackStringDeleted:
        debug.nospace() << "classType: typeLangPackStringDeleted";
        debug.nospace() << ", key: " << item.key();
        break;
    }
    debug.nospace() << ")";
    return debug;
}
*/
