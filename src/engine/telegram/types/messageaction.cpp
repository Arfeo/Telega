// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "messageaction.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

MessageAction::MessageAction(MessageActionClassType classType, InboundPkt *in) :
    m_callId(0),
    m_channelId(0),
    m_chatId(0),
    m_duration(0),
    m_flags(0),
    m_gameId(0),
    m_inviterId(0),
    m_score(0),
    m_totalAmount(0),
    m_userId(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

MessageAction::MessageAction(InboundPkt *in) :
    m_callId(0),
    m_channelId(0),
    m_chatId(0),
    m_duration(0),
    m_flags(0),
    m_gameId(0),
    m_inviterId(0),
    m_score(0),
    m_totalAmount(0),
    m_userId(0),
    m_classType(typeMessageActionEmpty)
{
    fetch(in);
}

MessageAction::MessageAction(const MessageAction &another) :
    TelegramTypeObject(),
    m_callId(0),
    m_channelId(0),
    m_chatId(0),
    m_duration(0),
    m_flags(0),
    m_gameId(0),
    m_inviterId(0),
    m_score(0),
    m_totalAmount(0),
    m_userId(0),
    m_classType(typeMessageActionEmpty)
{
    operator=(another);
}

MessageAction::MessageAction(const Null &null) :
    TelegramTypeObject(null),
    m_callId(0),
    m_channelId(0),
    m_chatId(0),
    m_duration(0),
    m_flags(0),
    m_gameId(0),
    m_inviterId(0),
    m_score(0),
    m_totalAmount(0),
    m_userId(0),
    m_classType(typeMessageActionEmpty)
{
}

MessageAction::~MessageAction() {

}

void MessageAction::setCallId(qint64 callId) {
    m_callId = callId;
}

qint64 MessageAction::callId() const {
    return m_callId;
}

void MessageAction::setChannelId(qint32 channelId) {
    m_channelId = channelId;
}

qint32 MessageAction::channelId() const {
    return m_channelId;
}

void MessageAction::setCharge(const PaymentCharge &charge) {
    m_charge = charge;
}

PaymentCharge MessageAction::charge() const {
    return m_charge;
}

void MessageAction::setChatId(qint32 chatId) {
    m_chatId = chatId;
}

qint32 MessageAction::chatId() const {
    return m_chatId;
}

void MessageAction::setCurrency(const QString &currency) {
    m_currency = currency;
}

QString MessageAction::currency() const {
    return m_currency;
}

void MessageAction::setDuration(qint32 duration) {
    if(duration) m_flags = (m_flags | (1<<1));
    else m_flags = (m_flags & ~(1<<1));
    m_duration = duration;
}

qint32 MessageAction::duration() const {
    return m_duration;
}

void MessageAction::setFlags(qint32 flags) {
    m_flags = flags;
}

qint32 MessageAction::flags() const {
    return m_flags;
}

void MessageAction::setGameId(qint64 gameId) {
    m_gameId = gameId;
}

qint64 MessageAction::gameId() const {
    return m_gameId;
}

void MessageAction::setInfo(const PaymentRequestedInfo &info) {
    if(!info.isNull()) m_flags = (m_flags | (1<<0));
    else m_flags = (m_flags & ~(1<<0));
    m_info = info;
}

PaymentRequestedInfo MessageAction::info() const {
    return m_info;
}

void MessageAction::setInviterId(qint32 inviterId) {
    m_inviterId = inviterId;
}

qint32 MessageAction::inviterId() const {
    return m_inviterId;
}

void MessageAction::setPayload(const QByteArray &payload) {
    m_payload = payload;
}

QByteArray MessageAction::payload() const {
    return m_payload;
}

void MessageAction::setPhoto(const Photo &photo) {
    m_photo = photo;
}

Photo MessageAction::photo() const {
    return m_photo;
}

void MessageAction::setReason(const PhoneCallDiscardReason &reason) {
    if(!reason.isNull()) m_flags = (m_flags | (1<<0));
    else m_flags = (m_flags & ~(1<<0));
    m_reason = reason;
}

PhoneCallDiscardReason MessageAction::reason() const {
    return m_reason;
}

void MessageAction::setScore(qint32 score) {
    m_score = score;
}

qint32 MessageAction::score() const {
    return m_score;
}

void MessageAction::setShippingOptionId(const QString &shippingOptionId) {
    if(!shippingOptionId.isNull()) m_flags = (m_flags | (1<<1));
    else m_flags = (m_flags & ~(1<<1));
    m_shippingOptionId = shippingOptionId;
}

QString MessageAction::shippingOptionId() const {
    return m_shippingOptionId;
}

void MessageAction::setTitle(const QString &title) {
    m_title = title;
}

QString MessageAction::title() const {
    return m_title;
}

void MessageAction::setTotalAmount(qint64 totalAmount) {
    m_totalAmount = totalAmount;
}

qint64 MessageAction::totalAmount() const {
    return m_totalAmount;
}

void MessageAction::setUserId(qint32 userId) {
    m_userId = userId;
}

qint32 MessageAction::userId() const {
    return m_userId;
}

void MessageAction::setUsers(const QList<qint32> &users) {
    m_users = users;
}

QList<qint32> MessageAction::users() const {
    return m_users;
}

bool MessageAction::operator ==(const MessageAction &b) const {
    return m_classType == b.m_classType &&
           m_callId == b.m_callId &&
           m_channelId == b.m_channelId &&
           m_charge == b.m_charge &&
           m_chatId == b.m_chatId &&
           m_currency == b.m_currency &&
           m_duration == b.m_duration &&
           m_flags == b.m_flags &&
           m_gameId == b.m_gameId &&
           m_info == b.m_info &&
           m_inviterId == b.m_inviterId &&
           m_payload == b.m_payload &&
           m_photo == b.m_photo &&
           m_reason == b.m_reason &&
           m_score == b.m_score &&
           m_shippingOptionId == b.m_shippingOptionId &&
           m_title == b.m_title &&
           m_totalAmount == b.m_totalAmount &&
           m_userId == b.m_userId &&
           m_users == b.m_users;
}

MessageAction &MessageAction::operator =(const MessageAction &b) {
    m_classType = b.m_classType;
    m_callId = b.m_callId;
    m_channelId = b.m_channelId;
    m_charge = b.m_charge;
    m_chatId = b.m_chatId;
    m_currency = b.m_currency;
    m_duration = b.m_duration;
    m_flags = b.m_flags;
    m_gameId = b.m_gameId;
    m_info = b.m_info;
    m_inviterId = b.m_inviterId;
    m_payload = b.m_payload;
    m_photo = b.m_photo;
    m_reason = b.m_reason;
    m_score = b.m_score;
    m_shippingOptionId = b.m_shippingOptionId;
    m_title = b.m_title;
    m_totalAmount = b.m_totalAmount;
    m_userId = b.m_userId;
    m_users = b.m_users;
    setNull(b.isNull());
    return *this;
}

void MessageAction::setClassType(MessageAction::MessageActionClassType classType) {
    m_classType = classType;
}

MessageAction::MessageActionClassType MessageAction::classType() const {
    return m_classType;
}

bool MessageAction::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeMessageActionEmpty: {
        m_classType = static_cast<MessageActionClassType>(x);
        return true;
    }
        break;

    case typeMessageActionChatCreate: {
        m_title = in->fetchQString();
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_users_length = in->fetchInt();
        m_users.clear();
        for (qint32 i = 0; i < m_users_length; i++) {
            qint32 type;
            type = in->fetchInt();
            m_users.append(type);
        }
        m_classType = static_cast<MessageActionClassType>(x);
        return true;
    }
        break;

    case typeMessageActionChatEditTitle: {
        m_title = in->fetchQString();
        m_classType = static_cast<MessageActionClassType>(x);
        return true;
    }
        break;

    case typeMessageActionChatEditPhoto: {
        m_photo.fetch(in);
        m_classType = static_cast<MessageActionClassType>(x);
        return true;
    }
        break;

    case typeMessageActionChatDeletePhoto: {
        m_classType = static_cast<MessageActionClassType>(x);
        return true;
    }
        break;

    case typeMessageActionChatAddUser: {
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_users_length = in->fetchInt();
        m_users.clear();
        for (qint32 i = 0; i < m_users_length; i++) {
            qint32 type;
            type = in->fetchInt();
            m_users.append(type);
        }
        m_classType = static_cast<MessageActionClassType>(x);
        return true;
    }
        break;

    case typeMessageActionChatDeleteUser: {
        m_userId = in->fetchInt();
        m_classType = static_cast<MessageActionClassType>(x);
        return true;
    }
        break;

    case typeMessageActionChatJoinedByLink: {
        m_inviterId = in->fetchInt();
        m_classType = static_cast<MessageActionClassType>(x);
        return true;
    }
        break;

    case typeMessageActionChannelCreate: {
        m_title = in->fetchQString();
        m_classType = static_cast<MessageActionClassType>(x);
        return true;
    }
        break;

    case typeMessageActionChatMigrateTo: {
        m_channelId = in->fetchInt();
        m_classType = static_cast<MessageActionClassType>(x);
        return true;
    }
        break;

    case typeMessageActionChannelMigrateFrom: {
        m_title = in->fetchQString();
        m_chatId = in->fetchInt();
        m_classType = static_cast<MessageActionClassType>(x);
        return true;
    }
        break;

    case typeMessageActionPinMessage: {
        m_classType = static_cast<MessageActionClassType>(x);
        return true;
    }
        break;

    case typeMessageActionHistoryClear: {
        m_classType = static_cast<MessageActionClassType>(x);
        return true;
    }
        break;

    case typeMessageActionGameScore: {
        m_gameId = in->fetchLong();
        m_score = in->fetchInt();
        m_classType = static_cast<MessageActionClassType>(x);
        return true;
    }
        break;

    case typeMessageActionPaymentSentMe: {
        m_flags = in->fetchInt();
        m_currency = in->fetchQString();
        m_totalAmount = in->fetchLong();
        m_payload = in->fetchBytes();
        if(m_flags & 1<<0) {
            m_info.fetch(in);
        }
        if(m_flags & 1<<1) {
            m_shippingOptionId = in->fetchQString();
        }
        m_charge.fetch(in);
        m_classType = static_cast<MessageActionClassType>(x);
        return true;
    }
        break;

    case typeMessageActionPaymentSent: {
        m_currency = in->fetchQString();
        m_totalAmount = in->fetchLong();
        m_classType = static_cast<MessageActionClassType>(x);
        return true;
    }
        break;

    case typeMessageActionPhoneCall: {
        m_flags = in->fetchInt();
        m_callId = in->fetchLong();
        if(m_flags & 1<<0) {
            m_reason.fetch(in);
        }
        if(m_flags & 1<<1) {
            m_duration = in->fetchInt();
        }
        m_classType = static_cast<MessageActionClassType>(x);
        return true;
    }
        break;

    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool MessageAction::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeMessageActionEmpty: {
        return true;
    }
        break;

    case typeMessageActionChatCreate: {
        out->appendQString(m_title);
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_users.count());
        for (qint32 i = 0; i < m_users.count(); i++) {
            out->appendInt(m_users[i]);
        }
        return true;
    }
        break;

    case typeMessageActionChatEditTitle: {
        out->appendQString(m_title);
        return true;
    }
        break;

    case typeMessageActionChatEditPhoto: {
        m_photo.push(out);
        return true;
    }
        break;

    case typeMessageActionChatDeletePhoto: {
        return true;
    }
        break;

    case typeMessageActionChatAddUser: {
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_users.count());
        for (qint32 i = 0; i < m_users.count(); i++) {
            out->appendInt(m_users[i]);
        }
        return true;
    }
        break;

    case typeMessageActionChatDeleteUser: {
        out->appendInt(m_userId);
        return true;
    }
        break;

    case typeMessageActionChatJoinedByLink: {
        out->appendInt(m_inviterId);
        return true;
    }
        break;

    case typeMessageActionChannelCreate: {
        out->appendQString(m_title);
        return true;
    }
        break;

    case typeMessageActionChatMigrateTo: {
        out->appendInt(m_channelId);
        return true;
    }
        break;

    case typeMessageActionChannelMigrateFrom: {
        out->appendQString(m_title);
        out->appendInt(m_chatId);
        return true;
    }
        break;

    case typeMessageActionPinMessage: {
        return true;
    }
        break;

    case typeMessageActionHistoryClear: {
        return true;
    }
        break;

    case typeMessageActionGameScore: {
        out->appendLong(m_gameId);
        out->appendInt(m_score);
        return true;
    }
        break;

    case typeMessageActionPaymentSentMe: {
        out->appendInt(m_flags);
        out->appendQString(m_currency);
        out->appendLong(m_totalAmount);
        out->appendBytes(m_payload);
        if(m_flags & 1<<0) {
            m_info.push(out);
        }
        if(m_flags & 1<<1) {
            out->appendQString(m_shippingOptionId);
        }
        m_charge.push(out);
        return true;
    }
        break;

    case typeMessageActionPaymentSent: {
        out->appendQString(m_currency);
        out->appendLong(m_totalAmount);
        return true;
    }
        break;

    case typeMessageActionPhoneCall: {
        out->appendInt(m_flags);
        out->appendLong(m_callId);
        if(m_flags & 1<<0) {
            m_reason.push(out);
        }
        if(m_flags & 1<<1) {
            out->appendInt(m_duration);
        }
        return true;
    }
        break;

    default:
        return false;
    }
}

QMap<QString, QVariant> MessageAction::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeMessageActionEmpty: {
        result["classType"] = "MessageAction::typeMessageActionEmpty";
        return result;
    }
        break;

    case typeMessageActionChatCreate: {
        result["classType"] = "MessageAction::typeMessageActionChatCreate";
        if( !m_title.isEmpty() ) result["title"] = QVariant::fromValue<QString>(m_title);
        QList<QVariant> _users;
        //for(const qint32 &m__type: m_users)
        for(int i = 0; i < m_users.size(); ++i) {
            const qint32 &m__type = m_users[i];
            _users << QVariant::fromValue<qint32>(m__type);
        }
        result["users"] = _users;
        return result;
    }
        break;

    case typeMessageActionChatEditTitle: {
        result["classType"] = "MessageAction::typeMessageActionChatEditTitle";
        if( !m_title.isEmpty() ) result["title"] = QVariant::fromValue<QString>(m_title);
        return result;
    }
        break;

    case typeMessageActionChatEditPhoto: {
        result["classType"] = "MessageAction::typeMessageActionChatEditPhoto";
        if( !m_photo.isNull() ) result["photo"] = m_photo.toMap();
        return result;
    }
        break;

    case typeMessageActionChatDeletePhoto: {
        result["classType"] = "MessageAction::typeMessageActionChatDeletePhoto";
        return result;
    }
        break;

    case typeMessageActionChatAddUser: {
        result["classType"] = "MessageAction::typeMessageActionChatAddUser";
        QList<QVariant> _users;
        //for(const qint32 &m__type: m_users)
        for(int i = 0; i < m_users.size(); ++i) {
            const qint32 &m__type = m_users[i];
            _users << QVariant::fromValue<qint32>(m__type);
        }
        result["users"] = _users;
        return result;
    }
        break;

    case typeMessageActionChatDeleteUser: {
        result["classType"] = "MessageAction::typeMessageActionChatDeleteUser";
        if( userId() ) result["userId"] = QString::number(userId());
        return result;
    }
        break;

    case typeMessageActionChatJoinedByLink: {
        result["classType"] = "MessageAction::typeMessageActionChatJoinedByLink";
        if( inviterId() ) result["inviterId"] = QString::number(inviterId());
        return result;
    }
        break;

    case typeMessageActionChannelCreate: {
        result["classType"] = "MessageAction::typeMessageActionChannelCreate";
        if( !m_title.isEmpty() ) result["title"] = QVariant::fromValue<QString>(m_title);
        return result;
    }
        break;

    case typeMessageActionChatMigrateTo: {
        result["classType"] = "MessageAction::typeMessageActionChatMigrateTo";
        if( channelId() ) result["channelId"] = QString::number(channelId());
        return result;
    }
        break;

    case typeMessageActionChannelMigrateFrom: {
        result["classType"] = "MessageAction::typeMessageActionChannelMigrateFrom";
        if( !m_title.isEmpty() ) result["title"] = QVariant::fromValue<QString>(m_title);
        if( chatId() ) result["chatId"] = QString::number(chatId());
        return result;
    }
        break;

    case typeMessageActionPinMessage: {
        result["classType"] = "MessageAction::typeMessageActionPinMessage";
        return result;
    }
        break;

    case typeMessageActionHistoryClear: {
        result["classType"] = "MessageAction::typeMessageActionHistoryClear";
        return result;
    }
        break;

    case typeMessageActionGameScore: {
        result["classType"] = "MessageAction::typeMessageActionGameScore";
        if( gameId() ) result["gameId"] = QString::number(gameId());
        if( score() ) result["score"] = QString::number(score());
        return result;
    }
        break;

    case typeMessageActionPaymentSentMe: {
        result["classType"] = "MessageAction::typeMessageActionPaymentSentMe";
        if( !m_currency.isEmpty() ) result["currency"] = QVariant::fromValue<QString>(m_currency);
        if( totalAmount() ) result["totalAmount"] = QString::number(totalAmount());
        if( !m_payload.isEmpty() ) result["payload"] = QVariant::fromValue<QByteArray>(m_payload);
        if( !m_info.isNull() ) result["info"] = m_info.toMap();
        if( !m_shippingOptionId.isEmpty() ) result["shippingOptionId"] = QVariant::fromValue<QString>(m_shippingOptionId);
        if( !m_charge.isNull() ) result["charge"] = m_charge.toMap();
        return result;
    }
        break;

    case typeMessageActionPaymentSent: {
        result["classType"] = "MessageAction::typeMessageActionPaymentSent";
        if( !m_currency.isEmpty() ) result["currency"] = QVariant::fromValue<QString>(m_currency);
        if( totalAmount() ) result["totalAmount"] = QString::number(totalAmount());
        return result;
    }
        break;

    case typeMessageActionPhoneCall: {
        result["classType"] = "MessageAction::typeMessageActionPhoneCall";
        if( callId() ) result["callId"] = QString::number(callId());
        if( !m_reason.isNull() ) result["reason"] = m_reason.toMap();
        if( duration() ) result["duration"] = QString::number(duration());
        return result;
    }
        break;

    default:
        return result;
    }
}

MessageAction MessageAction::fromMap(const QMap<QString, QVariant> &map) {
    MessageAction result;
    if(map.value("classType").toString() == "MessageAction::typeMessageActionEmpty") {
        result.setClassType(typeMessageActionEmpty);
        return result;
    }
    if(map.value("classType").toString() == "MessageAction::typeMessageActionChatCreate") {
        result.setClassType(typeMessageActionChatCreate);
        QVariant _title_var = map.value("title");
        if( !_title_var.isNull() ) {
            _title_var.convert( QVariant::nameToType("QString") );
            result.setTitle( _title_var.value<QString>() );
        }

        QList<QVariant> map_users = map["users"].toList();
        QList<qint32> _users;
        //for(const QVariant &var: map_users)
        for(int i = 0; i < map_users.size(); ++i) {
            const QVariant &var = map_users[i];
            _users << var.value<qint32>();
        }
        result.setUsers(_users);
        return result;
    }
    if(map.value("classType").toString() == "MessageAction::typeMessageActionChatEditTitle") {
        result.setClassType(typeMessageActionChatEditTitle);
        QVariant _title_var = map.value("title");
        if( !_title_var.isNull() ) {
            _title_var.convert( QVariant::nameToType("QString") );
            result.setTitle( _title_var.value<QString>() );
        }

        return result;
    }
    if(map.value("classType").toString() == "MessageAction::typeMessageActionChatEditPhoto") {
        result.setClassType(typeMessageActionChatEditPhoto);
        QVariant _photo_var = map.value("photo");
        if( !_photo_var.isNull() )
            result.setPhoto( Photo::fromMap(_photo_var.toMap()) );

        return result;
    }
    if(map.value("classType").toString() == "MessageAction::typeMessageActionChatDeletePhoto") {
        result.setClassType(typeMessageActionChatDeletePhoto);
        return result;
    }
    if(map.value("classType").toString() == "MessageAction::typeMessageActionChatAddUser") {
        result.setClassType(typeMessageActionChatAddUser);
        QList<QVariant> map_users = map["users"].toList();
        QList<qint32> _users;
        //for(const QVariant &var: map_users)
        for(int i = 0; i < map_users.size(); ++i) {
            const QVariant &var = map_users[i];
            _users << var.value<qint32>();
        }
        result.setUsers(_users);
        return result;
    }
    if(map.value("classType").toString() == "MessageAction::typeMessageActionChatDeleteUser") {
        result.setClassType(typeMessageActionChatDeleteUser);
        QVariant _userId_var = map.value("userId");
        if( !_userId_var.isNull() ) {
            _userId_var.convert( QVariant::nameToType("qint32") );
            result.setUserId( _userId_var.value<qint32>() );
        }

        return result;
    }
    if(map.value("classType").toString() == "MessageAction::typeMessageActionChatJoinedByLink") {
        result.setClassType(typeMessageActionChatJoinedByLink);
        QVariant _inviterId_var = map.value("inviterId");
        if( !_inviterId_var.isNull() ) {
            _inviterId_var.convert( QVariant::nameToType("qint32") );
            result.setInviterId( _inviterId_var.value<qint32>() );
        }

        return result;
    }
    if(map.value("classType").toString() == "MessageAction::typeMessageActionChannelCreate") {
        result.setClassType(typeMessageActionChannelCreate);
        QVariant _title_var = map.value("title");
        if( !_title_var.isNull() ) {
            _title_var.convert( QVariant::nameToType("QString") );
            result.setTitle( _title_var.value<QString>() );
        }

        return result;
    }
    if(map.value("classType").toString() == "MessageAction::typeMessageActionChatMigrateTo") {
        result.setClassType(typeMessageActionChatMigrateTo);
        QVariant _channelId_var = map.value("channelId");
        if( !_channelId_var.isNull() ) {
            _channelId_var.convert( QVariant::nameToType("qint32") );
            result.setChannelId( _channelId_var.value<qint32>() );
        }

        return result;
    }
    if(map.value("classType").toString() == "MessageAction::typeMessageActionChannelMigrateFrom") {
        result.setClassType(typeMessageActionChannelMigrateFrom);
        QVariant _title_var = map.value("title");
        if( !_title_var.isNull() ) {
            _title_var.convert( QVariant::nameToType("QString") );
            result.setTitle( _title_var.value<QString>() );
        }

        QVariant _chatId_var = map.value("chatId");
        if( !_chatId_var.isNull() ) {
            _chatId_var.convert( QVariant::nameToType("qint32") );
            result.setChatId( _chatId_var.value<qint32>() );
        }

        return result;
    }
    if(map.value("classType").toString() == "MessageAction::typeMessageActionPinMessage") {
        result.setClassType(typeMessageActionPinMessage);
        return result;
    }
    if(map.value("classType").toString() == "MessageAction::typeMessageActionHistoryClear") {
        result.setClassType(typeMessageActionHistoryClear);
        return result;
    }
    if(map.value("classType").toString() == "MessageAction::typeMessageActionGameScore") {
        result.setClassType(typeMessageActionGameScore);
        QVariant _gameId_var = map.value("gameId");
        if( !_gameId_var.isNull() ) {
            _gameId_var.convert( QVariant::nameToType("qint64") );
            result.setGameId( _gameId_var.value<qint64>() );
        }

        QVariant _score_var = map.value("score");
        if( !_score_var.isNull() ) {
            _score_var.convert( QVariant::nameToType("qint32") );
            result.setScore( _score_var.value<qint32>() );
        }

        return result;
    }
    if(map.value("classType").toString() == "MessageAction::typeMessageActionPaymentSentMe") {
        result.setClassType(typeMessageActionPaymentSentMe);
        QVariant _currency_var = map.value("currency");
        if( !_currency_var.isNull() ) {
            _currency_var.convert( QVariant::nameToType("QString") );
            result.setCurrency( _currency_var.value<QString>() );
        }

        QVariant _totalAmount_var = map.value("totalAmount");
        if( !_totalAmount_var.isNull() ) {
            _totalAmount_var.convert( QVariant::nameToType("qint64") );
            result.setTotalAmount( _totalAmount_var.value<qint64>() );
        }

        QVariant _payload_var = map.value("payload");
        if( !_payload_var.isNull() ) {
            _payload_var.convert( QVariant::nameToType("QByteArray") );
            result.setPayload( _payload_var.value<QByteArray>() );
        }

        QVariant _info_var = map.value("info");
        if( !_info_var.isNull() )
            result.setInfo( PaymentRequestedInfo::fromMap(_info_var.toMap()) );

        QVariant _shippingOptionId_var = map.value("shippingOptionId");
        if( !_shippingOptionId_var.isNull() ) {
            _shippingOptionId_var.convert( QVariant::nameToType("QString") );
            result.setShippingOptionId( _shippingOptionId_var.value<QString>() );
        }

        QVariant _charge_var = map.value("charge");
        if( !_charge_var.isNull() )
            result.setCharge( PaymentCharge::fromMap(_charge_var.toMap()) );

        return result;
    }
    if(map.value("classType").toString() == "MessageAction::typeMessageActionPaymentSent") {
        result.setClassType(typeMessageActionPaymentSent);
        QVariant _currency_var = map.value("currency");
        if( !_currency_var.isNull() ) {
            _currency_var.convert( QVariant::nameToType("QString") );
            result.setCurrency( _currency_var.value<QString>() );
        }

        QVariant _totalAmount_var = map.value("totalAmount");
        if( !_totalAmount_var.isNull() ) {
            _totalAmount_var.convert( QVariant::nameToType("qint64") );
            result.setTotalAmount( _totalAmount_var.value<qint64>() );
        }

        return result;
    }
    if(map.value("classType").toString() == "MessageAction::typeMessageActionPhoneCall") {
        result.setClassType(typeMessageActionPhoneCall);
        QVariant _callId_var = map.value("callId");
        if( !_callId_var.isNull() ) {
            _callId_var.convert( QVariant::nameToType("qint64") );
            result.setCallId( _callId_var.value<qint64>() );
        }

        QVariant _reason_var = map.value("reason");
        if( !_reason_var.isNull() )
            result.setReason( PhoneCallDiscardReason::fromMap(_reason_var.toMap()) );

        QVariant _duration_var = map.value("duration");
        if( !_duration_var.isNull() ) {
            _duration_var.convert( QVariant::nameToType("qint32") );
            result.setDuration( _duration_var.value<qint32>() );
        }

        return result;
    }
    return result;
}

MessageAction MessageAction::fromJson(const QString &json) {
    return MessageAction::fromMap(QJsonDocument::fromJson(json.toUtf8()).toVariant().toMap());
}

QByteArray MessageAction::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const MessageAction &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case MessageAction::typeMessageActionEmpty:

        break;
    case MessageAction::typeMessageActionChatCreate:
        stream << item.title();
        stream << item.users();
        break;
    case MessageAction::typeMessageActionChatEditTitle:
        stream << item.title();
        break;
    case MessageAction::typeMessageActionChatEditPhoto:
        stream << item.photo();
        break;
    case MessageAction::typeMessageActionChatDeletePhoto:

        break;
    case MessageAction::typeMessageActionChatAddUser:
        stream << item.users();
        break;
    case MessageAction::typeMessageActionChatDeleteUser:
        stream << item.userId();
        break;
    case MessageAction::typeMessageActionChatJoinedByLink:
        stream << item.inviterId();
        break;
    case MessageAction::typeMessageActionChannelCreate:
        stream << item.title();
        break;
    case MessageAction::typeMessageActionChatMigrateTo:
        stream << item.channelId();
        break;
    case MessageAction::typeMessageActionChannelMigrateFrom:
        stream << item.title();
        stream << item.chatId();
        break;
    case MessageAction::typeMessageActionPinMessage:

        break;
    case MessageAction::typeMessageActionHistoryClear:

        break;
    case MessageAction::typeMessageActionGameScore:
        stream << item.gameId();
        stream << item.score();
        break;
    case MessageAction::typeMessageActionPaymentSentMe:
        stream << item.flags();
        stream << item.currency();
        stream << item.totalAmount();
        stream << item.payload();
        stream << item.info();
        stream << item.shippingOptionId();
        stream << item.charge();
        break;
    case MessageAction::typeMessageActionPaymentSent:
        stream << item.currency();
        stream << item.totalAmount();
        break;
    case MessageAction::typeMessageActionPhoneCall:
        stream << item.flags();
        stream << item.callId();
        stream << item.reason();
        stream << item.duration();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, MessageAction &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<MessageAction::MessageActionClassType>(type));
    switch(type) {
    case MessageAction::typeMessageActionEmpty: {

    }
        break;
    case MessageAction::typeMessageActionChatCreate: {
        QString m_title;
        stream >> m_title;
        item.setTitle(m_title);
        QList<qint32> m_users;
        stream >> m_users;
        item.setUsers(m_users);
    }
        break;
    case MessageAction::typeMessageActionChatEditTitle: {
        QString m_title;
        stream >> m_title;
        item.setTitle(m_title);
    }
        break;
    case MessageAction::typeMessageActionChatEditPhoto: {
        Photo m_photo;
        stream >> m_photo;
        item.setPhoto(m_photo);
    }
        break;
    case MessageAction::typeMessageActionChatDeletePhoto: {

    }
        break;
    case MessageAction::typeMessageActionChatAddUser: {
        QList<qint32> m_users;
        stream >> m_users;
        item.setUsers(m_users);
    }
        break;
    case MessageAction::typeMessageActionChatDeleteUser: {
        qint32 m_user_id;
        stream >> m_user_id;
        item.setUserId(m_user_id);
    }
        break;
    case MessageAction::typeMessageActionChatJoinedByLink: {
        qint32 m_inviter_id;
        stream >> m_inviter_id;
        item.setInviterId(m_inviter_id);
    }
        break;
    case MessageAction::typeMessageActionChannelCreate: {
        QString m_title;
        stream >> m_title;
        item.setTitle(m_title);
    }
        break;
    case MessageAction::typeMessageActionChatMigrateTo: {
        qint32 m_channel_id;
        stream >> m_channel_id;
        item.setChannelId(m_channel_id);
    }
        break;
    case MessageAction::typeMessageActionChannelMigrateFrom: {
        QString m_title;
        stream >> m_title;
        item.setTitle(m_title);
        qint32 m_chat_id;
        stream >> m_chat_id;
        item.setChatId(m_chat_id);
    }
        break;
    case MessageAction::typeMessageActionPinMessage: {

    }
        break;
    case MessageAction::typeMessageActionHistoryClear: {

    }
        break;
    case MessageAction::typeMessageActionGameScore: {
        qint64 m_game_id;
        stream >> m_game_id;
        item.setGameId(m_game_id);
        qint32 m_score;
        stream >> m_score;
        item.setScore(m_score);
    }
        break;
    case MessageAction::typeMessageActionPaymentSentMe: {
        qint32 m_flags;
        stream >> m_flags;
        item.setFlags(m_flags);
        QString m_currency;
        stream >> m_currency;
        item.setCurrency(m_currency);
        qint64 m_total_amount;
        stream >> m_total_amount;
        item.setTotalAmount(m_total_amount);
        QByteArray m_payload;
        stream >> m_payload;
        item.setPayload(m_payload);
        PaymentRequestedInfo m_info;
        stream >> m_info;
        item.setInfo(m_info);
        QString m_shipping_option_id;
        stream >> m_shipping_option_id;
        item.setShippingOptionId(m_shipping_option_id);
        PaymentCharge m_charge;
        stream >> m_charge;
        item.setCharge(m_charge);
    }
        break;
    case MessageAction::typeMessageActionPaymentSent: {
        QString m_currency;
        stream >> m_currency;
        item.setCurrency(m_currency);
        qint64 m_total_amount;
        stream >> m_total_amount;
        item.setTotalAmount(m_total_amount);
    }
        break;
    case MessageAction::typeMessageActionPhoneCall: {
        qint32 m_flags;
        stream >> m_flags;
        item.setFlags(m_flags);
        qint64 m_call_id;
        stream >> m_call_id;
        item.setCallId(m_call_id);
        PhoneCallDiscardReason m_reason;
        stream >> m_reason;
        item.setReason(m_reason);
        qint32 m_duration;
        stream >> m_duration;
        item.setDuration(m_duration);
    }
        break;
    }
    return stream;
}

/*QDebug operator<<(QDebug debug,  const MessageAction &item) {
    QDebugStateSaver saver(debug);
    Q_UNUSED(saver)
    debug.nospace() << "Telegram.MessageAction(";
    switch(item.classType()) {
    case MessageAction::typeMessageActionEmpty:
        debug.nospace() << "classType: typeMessageActionEmpty";
        break;
    case MessageAction::typeMessageActionChatCreate:
        debug.nospace() << "classType: typeMessageActionChatCreate";
        debug.nospace() << ", title: " << item.title();
        debug.nospace() << ", users: " << item.users();
        break;
    case MessageAction::typeMessageActionChatEditTitle:
        debug.nospace() << "classType: typeMessageActionChatEditTitle";
        debug.nospace() << ", title: " << item.title();
        break;
    case MessageAction::typeMessageActionChatEditPhoto:
        debug.nospace() << "classType: typeMessageActionChatEditPhoto";
        debug.nospace() << ", photo: " << item.photo();
        break;
    case MessageAction::typeMessageActionChatDeletePhoto:
        debug.nospace() << "classType: typeMessageActionChatDeletePhoto";
        break;
    case MessageAction::typeMessageActionChatAddUser:
        debug.nospace() << "classType: typeMessageActionChatAddUser";
        debug.nospace() << ", users: " << item.users();
        break;
    case MessageAction::typeMessageActionChatDeleteUser:
        debug.nospace() << "classType: typeMessageActionChatDeleteUser";
        debug.nospace() << ", userId: " << item.userId();
        break;
    case MessageAction::typeMessageActionChatJoinedByLink:
        debug.nospace() << "classType: typeMessageActionChatJoinedByLink";
        debug.nospace() << ", inviterId: " << item.inviterId();
        break;
    case MessageAction::typeMessageActionChannelCreate:
        debug.nospace() << "classType: typeMessageActionChannelCreate";
        debug.nospace() << ", title: " << item.title();
        break;
    case MessageAction::typeMessageActionChatMigrateTo:
        debug.nospace() << "classType: typeMessageActionChatMigrateTo";
        debug.nospace() << ", channelId: " << item.channelId();
        break;
    case MessageAction::typeMessageActionChannelMigrateFrom:
        debug.nospace() << "classType: typeMessageActionChannelMigrateFrom";
        debug.nospace() << ", title: " << item.title();
        debug.nospace() << ", chatId: " << item.chatId();
        break;
    case MessageAction::typeMessageActionPinMessage:
        debug.nospace() << "classType: typeMessageActionPinMessage";
        break;
    case MessageAction::typeMessageActionHistoryClear:
        debug.nospace() << "classType: typeMessageActionHistoryClear";
        break;
    case MessageAction::typeMessageActionGameScore:
        debug.nospace() << "classType: typeMessageActionGameScore";
        debug.nospace() << ", gameId: " << item.gameId();
        debug.nospace() << ", score: " << item.score();
        break;
    case MessageAction::typeMessageActionPaymentSentMe:
        debug.nospace() << "classType: typeMessageActionPaymentSentMe";
        debug.nospace() << ", flags: " << item.flags();
        debug.nospace() << ", currency: " << item.currency();
        debug.nospace() << ", totalAmount: " << item.totalAmount();
        debug.nospace() << ", payload: " << item.payload();
        debug.nospace() << ", info: " << item.info();
        debug.nospace() << ", shippingOptionId: " << item.shippingOptionId();
        debug.nospace() << ", charge: " << item.charge();
        break;
    case MessageAction::typeMessageActionPaymentSent:
        debug.nospace() << "classType: typeMessageActionPaymentSent";
        debug.nospace() << ", currency: " << item.currency();
        debug.nospace() << ", totalAmount: " << item.totalAmount();
        break;
    case MessageAction::typeMessageActionPhoneCall:
        debug.nospace() << "classType: typeMessageActionPhoneCall";
        debug.nospace() << ", flags: " << item.flags();
        debug.nospace() << ", callId: " << item.callId();
        debug.nospace() << ", reason: " << item.reason();
        debug.nospace() << ", duration: " << item.duration();
        break;
    }
    debug.nospace() << ")";
    return debug;
}
*/
