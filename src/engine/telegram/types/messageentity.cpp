// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "messageentity.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

MessageEntity::MessageEntity(MessageEntityClassType classType, InboundPkt *in) :
    m_length(0),
    m_offset(0),
    m_userIdInt(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

MessageEntity::MessageEntity(InboundPkt *in) :
    m_length(0),
    m_offset(0),
    m_userIdInt(0),
    m_classType(typeMessageEntityUnknown)
{
    fetch(in);
}

MessageEntity::MessageEntity(const MessageEntity &another) :
    TelegramTypeObject(),
    m_length(0),
    m_offset(0),
    m_userIdInt(0),
    m_classType(typeMessageEntityUnknown)
{
    operator=(another);
}

MessageEntity::MessageEntity(const Null &null) :
    TelegramTypeObject(null),
    m_length(0),
    m_offset(0),
    m_userIdInt(0),
    m_classType(typeMessageEntityUnknown)
{
}

MessageEntity::~MessageEntity() {
    
}

void MessageEntity::setLanguage(const QString &language) {
    m_language = language;
}

QString MessageEntity::language() const {
    return m_language;
}

void MessageEntity::setLength(qint32 length) {
    m_length = length;
}

qint32 MessageEntity::length() const {
    return m_length;
}

void MessageEntity::setOffset(qint32 offset) {
    m_offset = offset;
}

qint32 MessageEntity::offset() const {
    return m_offset;
}

void MessageEntity::setUrl(const QString &url) {
    m_url = url;
}

QString MessageEntity::url() const {
    return m_url;
}

void MessageEntity::setUserIdInputUser(const InputUser &userIdInputUser) {
    m_userIdInputUser = userIdInputUser;
}

InputUser MessageEntity::userIdInputUser() const {
    return m_userIdInputUser;
}

void MessageEntity::setUserIdInt(qint32 userIdInt) {
    m_userIdInt = userIdInt;
}

qint32 MessageEntity::userIdInt() const {
    return m_userIdInt;
}

bool MessageEntity::operator ==(const MessageEntity &b) const {
    return m_classType == b.m_classType &&
           m_language == b.m_language &&
           m_length == b.m_length &&
           m_offset == b.m_offset &&
           m_url == b.m_url &&
           m_userIdInputUser == b.m_userIdInputUser &&
           m_userIdInt == b.m_userIdInt;
}

MessageEntity &MessageEntity::operator =(const MessageEntity &b) {
    m_classType = b.m_classType;
    m_language = b.m_language;
    m_length = b.m_length;
    m_offset = b.m_offset;
    m_url = b.m_url;
    m_userIdInputUser = b.m_userIdInputUser;
    m_userIdInt = b.m_userIdInt;
    setNull(b.isNull());
    return *this;
}

void MessageEntity::setClassType(MessageEntity::MessageEntityClassType classType) {
    m_classType = classType;
}

MessageEntity::MessageEntityClassType MessageEntity::classType() const {
    return m_classType;
}

bool MessageEntity::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeMessageEntityUnknown: {
        m_offset = in->fetchInt();
        m_length = in->fetchInt();
        m_classType = static_cast<MessageEntityClassType>(x);
        return true;
    }
        break;
    
    case typeMessageEntityMention: {
        m_offset = in->fetchInt();
        m_length = in->fetchInt();
        m_classType = static_cast<MessageEntityClassType>(x);
        return true;
    }
        break;
    
    case typeMessageEntityHashtag: {
        m_offset = in->fetchInt();
        m_length = in->fetchInt();
        m_classType = static_cast<MessageEntityClassType>(x);
        return true;
    }
        break;
    
    case typeMessageEntityBotCommand: {
        m_offset = in->fetchInt();
        m_length = in->fetchInt();
        m_classType = static_cast<MessageEntityClassType>(x);
        return true;
    }
        break;
    
    case typeMessageEntityUrl: {
        m_offset = in->fetchInt();
        m_length = in->fetchInt();
        m_classType = static_cast<MessageEntityClassType>(x);
        return true;
    }
        break;
    
    case typeMessageEntityEmail: {
        m_offset = in->fetchInt();
        m_length = in->fetchInt();
        m_classType = static_cast<MessageEntityClassType>(x);
        return true;
    }
        break;
    
    case typeMessageEntityBold: {
        m_offset = in->fetchInt();
        m_length = in->fetchInt();
        m_classType = static_cast<MessageEntityClassType>(x);
        return true;
    }
        break;
    
    case typeMessageEntityItalic: {
        m_offset = in->fetchInt();
        m_length = in->fetchInt();
        m_classType = static_cast<MessageEntityClassType>(x);
        return true;
    }
        break;
    
    case typeMessageEntityCode: {
        m_offset = in->fetchInt();
        m_length = in->fetchInt();
        m_classType = static_cast<MessageEntityClassType>(x);
        return true;
    }
        break;
    
    case typeMessageEntityPre: {
        m_offset = in->fetchInt();
        m_length = in->fetchInt();
        m_language = in->fetchQString();
        m_classType = static_cast<MessageEntityClassType>(x);
        return true;
    }
        break;
    
    case typeMessageEntityTextUrl: {
        m_offset = in->fetchInt();
        m_length = in->fetchInt();
        m_url = in->fetchQString();
        m_classType = static_cast<MessageEntityClassType>(x);
        return true;
    }
        break;
    
    case typeMessageEntityMentionName: {
        m_offset = in->fetchInt();
        m_length = in->fetchInt();
        m_userIdInt = in->fetchInt();
        m_classType = static_cast<MessageEntityClassType>(x);
        return true;
    }
        break;
    
    case typeInputMessageEntityMentionName: {
        m_offset = in->fetchInt();
        m_length = in->fetchInt();
        m_userIdInputUser.fetch(in);
        m_classType = static_cast<MessageEntityClassType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool MessageEntity::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeMessageEntityUnknown: {
        out->appendInt(m_offset);
        out->appendInt(m_length);
        return true;
    }
        break;
    
    case typeMessageEntityMention: {
        out->appendInt(m_offset);
        out->appendInt(m_length);
        return true;
    }
        break;
    
    case typeMessageEntityHashtag: {
        out->appendInt(m_offset);
        out->appendInt(m_length);
        return true;
    }
        break;
    
    case typeMessageEntityBotCommand: {
        out->appendInt(m_offset);
        out->appendInt(m_length);
        return true;
    }
        break;
    
    case typeMessageEntityUrl: {
        out->appendInt(m_offset);
        out->appendInt(m_length);
        return true;
    }
        break;
    
    case typeMessageEntityEmail: {
        out->appendInt(m_offset);
        out->appendInt(m_length);
        return true;
    }
        break;
    
    case typeMessageEntityBold: {
        out->appendInt(m_offset);
        out->appendInt(m_length);
        return true;
    }
        break;
    
    case typeMessageEntityItalic: {
        out->appendInt(m_offset);
        out->appendInt(m_length);
        return true;
    }
        break;
    
    case typeMessageEntityCode: {
        out->appendInt(m_offset);
        out->appendInt(m_length);
        return true;
    }
        break;
    
    case typeMessageEntityPre: {
        out->appendInt(m_offset);
        out->appendInt(m_length);
        out->appendQString(m_language);
        return true;
    }
        break;
    
    case typeMessageEntityTextUrl: {
        out->appendInt(m_offset);
        out->appendInt(m_length);
        out->appendQString(m_url);
        return true;
    }
        break;
    
    case typeMessageEntityMentionName: {
        out->appendInt(m_offset);
        out->appendInt(m_length);
        out->appendInt(m_userIdInt);
        return true;
    }
        break;
    
    case typeInputMessageEntityMentionName: {
        out->appendInt(m_offset);
        out->appendInt(m_length);
        m_userIdInputUser.push(out);
        return true;
    }
        break;
    
    default:
        return false;
    }
}

QMap<QString, QVariant> MessageEntity::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeMessageEntityUnknown: {
        result["classType"] = "MessageEntity::typeMessageEntityUnknown";
        if( offset() ) result["offset"] = QString::number(offset());
        if( length() ) result["length"] = QString::number(length());
        return result;
    }
        break;
    
    case typeMessageEntityMention: {
        result["classType"] = "MessageEntity::typeMessageEntityMention";
        if( offset() ) result["offset"] = QString::number(offset());
        if( length() ) result["length"] = QString::number(length());
        return result;
    }
        break;
    
    case typeMessageEntityHashtag: {
        result["classType"] = "MessageEntity::typeMessageEntityHashtag";
        if( offset() ) result["offset"] = QString::number(offset());
        if( length() ) result["length"] = QString::number(length());
        return result;
    }
        break;
    
    case typeMessageEntityBotCommand: {
        result["classType"] = "MessageEntity::typeMessageEntityBotCommand";
        if( offset() ) result["offset"] = QString::number(offset());
        if( length() ) result["length"] = QString::number(length());
        return result;
    }
        break;
    
    case typeMessageEntityUrl: {
        result["classType"] = "MessageEntity::typeMessageEntityUrl";
        if( offset() ) result["offset"] = QString::number(offset());
        if( length() ) result["length"] = QString::number(length());
        return result;
    }
        break;
    
    case typeMessageEntityEmail: {
        result["classType"] = "MessageEntity::typeMessageEntityEmail";
        if( offset() ) result["offset"] = QString::number(offset());
        if( length() ) result["length"] = QString::number(length());
        return result;
    }
        break;
    
    case typeMessageEntityBold: {
        result["classType"] = "MessageEntity::typeMessageEntityBold";
        if( offset() ) result["offset"] = QString::number(offset());
        if( length() ) result["length"] = QString::number(length());
        return result;
    }
        break;
    
    case typeMessageEntityItalic: {
        result["classType"] = "MessageEntity::typeMessageEntityItalic";
        if( offset() ) result["offset"] = QString::number(offset());
        if( length() ) result["length"] = QString::number(length());
        return result;
    }
        break;
    
    case typeMessageEntityCode: {
        result["classType"] = "MessageEntity::typeMessageEntityCode";
        if( offset() ) result["offset"] = QString::number(offset());
        if( length() ) result["length"] = QString::number(length());
        return result;
    }
        break;
    
    case typeMessageEntityPre: {
        result["classType"] = "MessageEntity::typeMessageEntityPre";
        if( offset() ) result["offset"] = QString::number(offset());
        if( length() ) result["length"] = QString::number(length());
        if( !m_language.isEmpty() ) result["language"] = QVariant::fromValue<QString>(m_language);
        return result;
    }
        break;
    
    case typeMessageEntityTextUrl: {
        result["classType"] = "MessageEntity::typeMessageEntityTextUrl";
        if( offset() ) result["offset"] = QString::number(offset());
        if( length() ) result["length"] = QString::number(length());
        if( !m_url.isEmpty() ) result["url"] = QVariant::fromValue<QString>(m_url);
        return result;
    }
        break;
    
    case typeMessageEntityMentionName: {
        result["classType"] = "MessageEntity::typeMessageEntityMentionName";
        if( offset() ) result["offset"] = QString::number(offset());
        if( length() ) result["length"] = QString::number(length());
        if( userIdInt() ) result["userIdInt"] = QString::number(userIdInt());
        return result;
    }
        break;
    
    case typeInputMessageEntityMentionName: {
        result["classType"] = "MessageEntity::typeInputMessageEntityMentionName";
        if( offset() ) result["offset"] = QString::number(offset());
        if( length() ) result["length"] = QString::number(length());
        if( !m_userIdInputUser.isNull() ) result["userIdInputUser"] = m_userIdInputUser.toMap();
        return result;
    }
        break;
    
    default:
        return result;
    }
}

MessageEntity MessageEntity::fromMap(const QMap<QString, QVariant> &map) {
    MessageEntity result;
    if(map.value("classType").toString() == "MessageEntity::typeMessageEntityUnknown") {
        result.setClassType(typeMessageEntityUnknown);
        QVariant _offset_var = map.value("offset");
        if( !_offset_var.isNull() ) {
            _offset_var.convert( QVariant::nameToType("qint32") );
            result.setOffset( _offset_var.value<qint32>() );
        }
        
        QVariant _length_var = map.value("length");
        if( !_length_var.isNull() ) {
            _length_var.convert( QVariant::nameToType("qint32") );
            result.setLength( _length_var.value<qint32>() );
        }
        
        return result;
    }
    if(map.value("classType").toString() == "MessageEntity::typeMessageEntityMention") {
        result.setClassType(typeMessageEntityMention);
        QVariant _offset_var = map.value("offset");
        if( !_offset_var.isNull() ) {
            _offset_var.convert( QVariant::nameToType("qint32") );
            result.setOffset( _offset_var.value<qint32>() );
        }
        
        QVariant _length_var = map.value("length");
        if( !_length_var.isNull() ) {
            _length_var.convert( QVariant::nameToType("qint32") );
            result.setLength( _length_var.value<qint32>() );
        }
        
        return result;
    }
    if(map.value("classType").toString() == "MessageEntity::typeMessageEntityHashtag") {
        result.setClassType(typeMessageEntityHashtag);
        QVariant _offset_var = map.value("offset");
        if( !_offset_var.isNull() ) {
            _offset_var.convert( QVariant::nameToType("qint32") );
            result.setOffset( _offset_var.value<qint32>() );
        }
        
        QVariant _length_var = map.value("length");
        if( !_length_var.isNull() ) {
            _length_var.convert( QVariant::nameToType("qint32") );
            result.setLength( _length_var.value<qint32>() );
        }
        
        return result;
    }
    if(map.value("classType").toString() == "MessageEntity::typeMessageEntityBotCommand") {
        result.setClassType(typeMessageEntityBotCommand);
        QVariant _offset_var = map.value("offset");
        if( !_offset_var.isNull() ) {
            _offset_var.convert( QVariant::nameToType("qint32") );
            result.setOffset( _offset_var.value<qint32>() );
        }
        
        QVariant _length_var = map.value("length");
        if( !_length_var.isNull() ) {
            _length_var.convert( QVariant::nameToType("qint32") );
            result.setLength( _length_var.value<qint32>() );
        }
        
        return result;
    }
    if(map.value("classType").toString() == "MessageEntity::typeMessageEntityUrl") {
        result.setClassType(typeMessageEntityUrl);
        QVariant _offset_var = map.value("offset");
        if( !_offset_var.isNull() ) {
            _offset_var.convert( QVariant::nameToType("qint32") );
            result.setOffset( _offset_var.value<qint32>() );
        }
        
        QVariant _length_var = map.value("length");
        if( !_length_var.isNull() ) {
            _length_var.convert( QVariant::nameToType("qint32") );
            result.setLength( _length_var.value<qint32>() );
        }
        
        return result;
    }
    if(map.value("classType").toString() == "MessageEntity::typeMessageEntityEmail") {
        result.setClassType(typeMessageEntityEmail);
        QVariant _offset_var = map.value("offset");
        if( !_offset_var.isNull() ) {
            _offset_var.convert( QVariant::nameToType("qint32") );
            result.setOffset( _offset_var.value<qint32>() );
        }
        
        QVariant _length_var = map.value("length");
        if( !_length_var.isNull() ) {
            _length_var.convert( QVariant::nameToType("qint32") );
            result.setLength( _length_var.value<qint32>() );
        }
        
        return result;
    }
    if(map.value("classType").toString() == "MessageEntity::typeMessageEntityBold") {
        result.setClassType(typeMessageEntityBold);
        QVariant _offset_var = map.value("offset");
        if( !_offset_var.isNull() ) {
            _offset_var.convert( QVariant::nameToType("qint32") );
            result.setOffset( _offset_var.value<qint32>() );
        }
        
        QVariant _length_var = map.value("length");
        if( !_length_var.isNull() ) {
            _length_var.convert( QVariant::nameToType("qint32") );
            result.setLength( _length_var.value<qint32>() );
        }
        
        return result;
    }
    if(map.value("classType").toString() == "MessageEntity::typeMessageEntityItalic") {
        result.setClassType(typeMessageEntityItalic);
        QVariant _offset_var = map.value("offset");
        if( !_offset_var.isNull() ) {
            _offset_var.convert( QVariant::nameToType("qint32") );
            result.setOffset( _offset_var.value<qint32>() );
        }
        
        QVariant _length_var = map.value("length");
        if( !_length_var.isNull() ) {
            _length_var.convert( QVariant::nameToType("qint32") );
            result.setLength( _length_var.value<qint32>() );
        }
        
        return result;
    }
    if(map.value("classType").toString() == "MessageEntity::typeMessageEntityCode") {
        result.setClassType(typeMessageEntityCode);
        QVariant _offset_var = map.value("offset");
        if( !_offset_var.isNull() ) {
            _offset_var.convert( QVariant::nameToType("qint32") );
            result.setOffset( _offset_var.value<qint32>() );
        }
        
        QVariant _length_var = map.value("length");
        if( !_length_var.isNull() ) {
            _length_var.convert( QVariant::nameToType("qint32") );
            result.setLength( _length_var.value<qint32>() );
        }
        
        return result;
    }
    if(map.value("classType").toString() == "MessageEntity::typeMessageEntityPre") {
        result.setClassType(typeMessageEntityPre);
        QVariant _offset_var = map.value("offset");
        if( !_offset_var.isNull() ) {
            _offset_var.convert( QVariant::nameToType("qint32") );
            result.setOffset( _offset_var.value<qint32>() );
        }
        
        QVariant _length_var = map.value("length");
        if( !_length_var.isNull() ) {
            _length_var.convert( QVariant::nameToType("qint32") );
            result.setLength( _length_var.value<qint32>() );
        }
        
        QVariant _language_var = map.value("language");
        if( !_language_var.isNull() ) {
            _language_var.convert( QVariant::nameToType("QString") );
            result.setLanguage( _language_var.value<QString>() );
        }
        
        return result;
    }
    if(map.value("classType").toString() == "MessageEntity::typeMessageEntityTextUrl") {
        result.setClassType(typeMessageEntityTextUrl);
        QVariant _offset_var = map.value("offset");
        if( !_offset_var.isNull() ) {
            _offset_var.convert( QVariant::nameToType("qint32") );
            result.setOffset( _offset_var.value<qint32>() );
        }
        
        QVariant _length_var = map.value("length");
        if( !_length_var.isNull() ) {
            _length_var.convert( QVariant::nameToType("qint32") );
            result.setLength( _length_var.value<qint32>() );
        }
        
        QVariant _url_var = map.value("url");
        if( !_url_var.isNull() ) {
            _url_var.convert( QVariant::nameToType("QString") );
            result.setUrl( _url_var.value<QString>() );
        }
        
        return result;
    }
    if(map.value("classType").toString() == "MessageEntity::typeMessageEntityMentionName") {
        result.setClassType(typeMessageEntityMentionName);
        QVariant _offset_var = map.value("offset");
        if( !_offset_var.isNull() ) {
            _offset_var.convert( QVariant::nameToType("qint32") );
            result.setOffset( _offset_var.value<qint32>() );
        }
        
        QVariant _length_var = map.value("length");
        if( !_length_var.isNull() ) {
            _length_var.convert( QVariant::nameToType("qint32") );
            result.setLength( _length_var.value<qint32>() );
        }
        
        QVariant _userIdInt_var = map.value("userIdInt");
        if( !_userIdInt_var.isNull() ) {
            _userIdInt_var.convert( QVariant::nameToType("qint32") );
            result.setUserIdInt( _userIdInt_var.value<qint32>() );
        }
        
        return result;
    }
    if(map.value("classType").toString() == "MessageEntity::typeInputMessageEntityMentionName") {
        result.setClassType(typeInputMessageEntityMentionName);
        QVariant _offset_var = map.value("offset");
        if( !_offset_var.isNull() ) {
            _offset_var.convert( QVariant::nameToType("qint32") );
            result.setOffset( _offset_var.value<qint32>() );
        }
        
        QVariant _length_var = map.value("length");
        if( !_length_var.isNull() ) {
            _length_var.convert( QVariant::nameToType("qint32") );
            result.setLength( _length_var.value<qint32>() );
        }
        
        QVariant _userIdInputUser_var = map.value("userIdInputUser");
        if( !_userIdInputUser_var.isNull() )
            result.setUserIdInputUser( InputUser::fromMap(_userIdInputUser_var.toMap()) );
        
        return result;
    }
    return result;
}

MessageEntity MessageEntity::fromJson(const QString &json) {
    return MessageEntity::fromMap(QJsonDocument::fromJson(json.toUtf8()).toVariant().toMap());
}

QByteArray MessageEntity::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const MessageEntity &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case MessageEntity::typeMessageEntityUnknown:
        stream << item.offset();
        stream << item.length();
        break;
    case MessageEntity::typeMessageEntityMention:
        stream << item.offset();
        stream << item.length();
        break;
    case MessageEntity::typeMessageEntityHashtag:
        stream << item.offset();
        stream << item.length();
        break;
    case MessageEntity::typeMessageEntityBotCommand:
        stream << item.offset();
        stream << item.length();
        break;
    case MessageEntity::typeMessageEntityUrl:
        stream << item.offset();
        stream << item.length();
        break;
    case MessageEntity::typeMessageEntityEmail:
        stream << item.offset();
        stream << item.length();
        break;
    case MessageEntity::typeMessageEntityBold:
        stream << item.offset();
        stream << item.length();
        break;
    case MessageEntity::typeMessageEntityItalic:
        stream << item.offset();
        stream << item.length();
        break;
    case MessageEntity::typeMessageEntityCode:
        stream << item.offset();
        stream << item.length();
        break;
    case MessageEntity::typeMessageEntityPre:
        stream << item.offset();
        stream << item.length();
        stream << item.language();
        break;
    case MessageEntity::typeMessageEntityTextUrl:
        stream << item.offset();
        stream << item.length();
        stream << item.url();
        break;
    case MessageEntity::typeMessageEntityMentionName:
        stream << item.offset();
        stream << item.length();
        stream << item.userIdInt();
        break;
    case MessageEntity::typeInputMessageEntityMentionName:
        stream << item.offset();
        stream << item.length();
        stream << item.userIdInputUser();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, MessageEntity &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<MessageEntity::MessageEntityClassType>(type));
    switch(type) {
    case MessageEntity::typeMessageEntityUnknown: {
        qint32 m_offset;
        stream >> m_offset;
        item.setOffset(m_offset);
        qint32 m_length;
        stream >> m_length;
        item.setLength(m_length);
    }
        break;
    case MessageEntity::typeMessageEntityMention: {
        qint32 m_offset;
        stream >> m_offset;
        item.setOffset(m_offset);
        qint32 m_length;
        stream >> m_length;
        item.setLength(m_length);
    }
        break;
    case MessageEntity::typeMessageEntityHashtag: {
        qint32 m_offset;
        stream >> m_offset;
        item.setOffset(m_offset);
        qint32 m_length;
        stream >> m_length;
        item.setLength(m_length);
    }
        break;
    case MessageEntity::typeMessageEntityBotCommand: {
        qint32 m_offset;
        stream >> m_offset;
        item.setOffset(m_offset);
        qint32 m_length;
        stream >> m_length;
        item.setLength(m_length);
    }
        break;
    case MessageEntity::typeMessageEntityUrl: {
        qint32 m_offset;
        stream >> m_offset;
        item.setOffset(m_offset);
        qint32 m_length;
        stream >> m_length;
        item.setLength(m_length);
    }
        break;
    case MessageEntity::typeMessageEntityEmail: {
        qint32 m_offset;
        stream >> m_offset;
        item.setOffset(m_offset);
        qint32 m_length;
        stream >> m_length;
        item.setLength(m_length);
    }
        break;
    case MessageEntity::typeMessageEntityBold: {
        qint32 m_offset;
        stream >> m_offset;
        item.setOffset(m_offset);
        qint32 m_length;
        stream >> m_length;
        item.setLength(m_length);
    }
        break;
    case MessageEntity::typeMessageEntityItalic: {
        qint32 m_offset;
        stream >> m_offset;
        item.setOffset(m_offset);
        qint32 m_length;
        stream >> m_length;
        item.setLength(m_length);
    }
        break;
    case MessageEntity::typeMessageEntityCode: {
        qint32 m_offset;
        stream >> m_offset;
        item.setOffset(m_offset);
        qint32 m_length;
        stream >> m_length;
        item.setLength(m_length);
    }
        break;
    case MessageEntity::typeMessageEntityPre: {
        qint32 m_offset;
        stream >> m_offset;
        item.setOffset(m_offset);
        qint32 m_length;
        stream >> m_length;
        item.setLength(m_length);
        QString m_language;
        stream >> m_language;
        item.setLanguage(m_language);
    }
        break;
    case MessageEntity::typeMessageEntityTextUrl: {
        qint32 m_offset;
        stream >> m_offset;
        item.setOffset(m_offset);
        qint32 m_length;
        stream >> m_length;
        item.setLength(m_length);
        QString m_url;
        stream >> m_url;
        item.setUrl(m_url);
    }
        break;
    case MessageEntity::typeMessageEntityMentionName: {
        qint32 m_offset;
        stream >> m_offset;
        item.setOffset(m_offset);
        qint32 m_length;
        stream >> m_length;
        item.setLength(m_length);
        qint32 m_user_id_int;
        stream >> m_user_id_int;
        item.setUserIdInt(m_user_id_int);
    }
        break;
    case MessageEntity::typeInputMessageEntityMentionName: {
        qint32 m_offset;
        stream >> m_offset;
        item.setOffset(m_offset);
        qint32 m_length;
        stream >> m_length;
        item.setLength(m_length);
        InputUser m_user_id_InputUser;
        stream >> m_user_id_InputUser;
        item.setUserIdInputUser(m_user_id_InputUser);
    }
        break;
    }
    return stream;
}

QDebug operator<<(QDebug debug,  const MessageEntity &item) {
    QDebugStateSaver saver(debug);
    Q_UNUSED(saver)
    debug.nospace() << "Telegram.MessageEntity(";
    switch(item.classType()) {
    case MessageEntity::typeMessageEntityUnknown:
        debug.nospace() << "classType: typeMessageEntityUnknown";
        debug.nospace() << ", offset: " << item.offset();
        debug.nospace() << ", length: " << item.length();
        break;
    case MessageEntity::typeMessageEntityMention:
        debug.nospace() << "classType: typeMessageEntityMention";
        debug.nospace() << ", offset: " << item.offset();
        debug.nospace() << ", length: " << item.length();
        break;
    case MessageEntity::typeMessageEntityHashtag:
        debug.nospace() << "classType: typeMessageEntityHashtag";
        debug.nospace() << ", offset: " << item.offset();
        debug.nospace() << ", length: " << item.length();
        break;
    case MessageEntity::typeMessageEntityBotCommand:
        debug.nospace() << "classType: typeMessageEntityBotCommand";
        debug.nospace() << ", offset: " << item.offset();
        debug.nospace() << ", length: " << item.length();
        break;
    case MessageEntity::typeMessageEntityUrl:
        debug.nospace() << "classType: typeMessageEntityUrl";
        debug.nospace() << ", offset: " << item.offset();
        debug.nospace() << ", length: " << item.length();
        break;
    case MessageEntity::typeMessageEntityEmail:
        debug.nospace() << "classType: typeMessageEntityEmail";
        debug.nospace() << ", offset: " << item.offset();
        debug.nospace() << ", length: " << item.length();
        break;
    case MessageEntity::typeMessageEntityBold:
        debug.nospace() << "classType: typeMessageEntityBold";
        debug.nospace() << ", offset: " << item.offset();
        debug.nospace() << ", length: " << item.length();
        break;
    case MessageEntity::typeMessageEntityItalic:
        debug.nospace() << "classType: typeMessageEntityItalic";
        debug.nospace() << ", offset: " << item.offset();
        debug.nospace() << ", length: " << item.length();
        break;
    case MessageEntity::typeMessageEntityCode:
        debug.nospace() << "classType: typeMessageEntityCode";
        debug.nospace() << ", offset: " << item.offset();
        debug.nospace() << ", length: " << item.length();
        break;
    case MessageEntity::typeMessageEntityPre:
        debug.nospace() << "classType: typeMessageEntityPre";
        debug.nospace() << ", offset: " << item.offset();
        debug.nospace() << ", length: " << item.length();
        debug.nospace() << ", language: " << item.language();
        break;
    case MessageEntity::typeMessageEntityTextUrl:
        debug.nospace() << "classType: typeMessageEntityTextUrl";
        debug.nospace() << ", offset: " << item.offset();
        debug.nospace() << ", length: " << item.length();
        debug.nospace() << ", url: " << item.url();
        break;
    case MessageEntity::typeMessageEntityMentionName:
        debug.nospace() << "classType: typeMessageEntityMentionName";
        debug.nospace() << ", offset: " << item.offset();
        debug.nospace() << ", length: " << item.length();
        debug.nospace() << ", userIdInt: " << item.userIdInt();
        break;
    case MessageEntity::typeInputMessageEntityMentionName:
        debug.nospace() << "classType: typeInputMessageEntityMentionName";
        debug.nospace() << ", offset: " << item.offset();
        debug.nospace() << ", length: " << item.length();
        debug.nospace() << ", userIdInputUser: " << item.userIdInputUser();
        break;
    }
    debug.nospace() << ")";
    return debug;
}

