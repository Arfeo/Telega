// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "messagemedia.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

MessageMedia::MessageMedia(MessageMediaClassType classType, InboundPkt *in) :
    m_flags(0),
    m_receiptMsgId(0),
    m_totalAmount(0),
    m_userId(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

MessageMedia::MessageMedia(InboundPkt *in) :
    m_flags(0),
    m_receiptMsgId(0),
    m_totalAmount(0),
    m_userId(0),
    m_classType(typeMessageMediaEmpty)
{
    fetch(in);
}

MessageMedia::MessageMedia(const MessageMedia &another) :
    TelegramTypeObject(),
    m_flags(0),
    m_receiptMsgId(0),
    m_totalAmount(0),
    m_userId(0),
    m_classType(typeMessageMediaEmpty)
{
    operator=(another);
}

MessageMedia::MessageMedia(const Null &null) :
    TelegramTypeObject(null),
    m_flags(0),
    m_receiptMsgId(0),
    m_totalAmount(0),
    m_userId(0),
    m_classType(typeMessageMediaEmpty)
{
}

MessageMedia::~MessageMedia() {
    
}

void MessageMedia::setAddress(const QString &address) {
    m_address = address;
}

QString MessageMedia::address() const {
    return m_address;
}

void MessageMedia::setCaption(const QString &caption) {
    m_caption = caption;
}

QString MessageMedia::caption() const {
    return m_caption;
}

void MessageMedia::setCurrency(const QString &currency) {
    m_currency = currency;
}

QString MessageMedia::currency() const {
    return m_currency;
}

void MessageMedia::setDescription(const QString &description) {
    m_description = description;
}

QString MessageMedia::description() const {
    return m_description;
}

void MessageMedia::setDocument(const Document &document) {
    m_document = document;
}

Document MessageMedia::document() const {
    return m_document;
}

void MessageMedia::setFirstName(const QString &firstName) {
    m_firstName = firstName;
}

QString MessageMedia::firstName() const {
    return m_firstName;
}

void MessageMedia::setFlags(qint32 flags) {
    m_flags = flags;
}

qint32 MessageMedia::flags() const {
    return m_flags;
}

void MessageMedia::setGame(const Game &game) {
    m_game = game;
}

Game MessageMedia::game() const {
    return m_game;
}

void MessageMedia::setGeo(const GeoPoint &geo) {
    m_geo = geo;
}

GeoPoint MessageMedia::geo() const {
    return m_geo;
}

void MessageMedia::setLastName(const QString &lastName) {
    m_lastName = lastName;
}

QString MessageMedia::lastName() const {
    return m_lastName;
}

void MessageMedia::setPhoneNumber(const QString &phoneNumber) {
    m_phoneNumber = phoneNumber;
}

QString MessageMedia::phoneNumber() const {
    return m_phoneNumber;
}

void MessageMedia::setPhoto(const Photo &photo) {
    m_photo = photo;
}

Photo MessageMedia::photo() const {
    return m_photo;
}

void MessageMedia::setPhotoWebDocument(const WebDocument &photoWebDocument) {
    if(!photoWebDocument.isNull()) m_flags = (m_flags | (1<<0));
    else m_flags = (m_flags & ~(1<<0));
    m_photoWebDocument = photoWebDocument;
}

WebDocument MessageMedia::photoWebDocument() const {
    return m_photoWebDocument;
}

void MessageMedia::setProvider(const QString &provider) {
    m_provider = provider;
}

QString MessageMedia::provider() const {
    return m_provider;
}

void MessageMedia::setReceiptMsgId(qint32 receiptMsgId) {
    if(receiptMsgId) m_flags = (m_flags | (1<<2));
    else m_flags = (m_flags & ~(1<<2));
    m_receiptMsgId = receiptMsgId;
}

qint32 MessageMedia::receiptMsgId() const {
    return m_receiptMsgId;
}

void MessageMedia::setShippingAddressRequested(bool shippingAddressRequested) {
    if(shippingAddressRequested) m_flags = (m_flags | (1<<1));
    else m_flags = (m_flags & ~(1<<1));
}

bool MessageMedia::shippingAddressRequested() const {
    return (m_flags & 1<<1);
}

void MessageMedia::setStartParam(const QString &startParam) {
    m_startParam = startParam;
}

QString MessageMedia::startParam() const {
    return m_startParam;
}

void MessageMedia::setTest(bool test) {
    if(test) m_flags = (m_flags | (1<<3));
    else m_flags = (m_flags & ~(1<<3));
}

bool MessageMedia::test() const {
    return (m_flags & 1<<3);
}

void MessageMedia::setTitle(const QString &title) {
    m_title = title;
}

QString MessageMedia::title() const {
    return m_title;
}

void MessageMedia::setTotalAmount(qint64 totalAmount) {
    m_totalAmount = totalAmount;
}

qint64 MessageMedia::totalAmount() const {
    return m_totalAmount;
}

void MessageMedia::setUserId(qint32 userId) {
    m_userId = userId;
}

qint32 MessageMedia::userId() const {
    return m_userId;
}

void MessageMedia::setVenueId(const QString &venueId) {
    m_venueId = venueId;
}

QString MessageMedia::venueId() const {
    return m_venueId;
}

void MessageMedia::setWebpage(const WebPage &webpage) {
    m_webpage = webpage;
}

WebPage MessageMedia::webpage() const {
    return m_webpage;
}

bool MessageMedia::operator ==(const MessageMedia &b) const {
    return m_classType == b.m_classType &&
           m_address == b.m_address &&
           m_caption == b.m_caption &&
           m_currency == b.m_currency &&
           m_description == b.m_description &&
           m_document == b.m_document &&
           m_firstName == b.m_firstName &&
           m_flags == b.m_flags &&
           m_game == b.m_game &&
           m_geo == b.m_geo &&
           m_lastName == b.m_lastName &&
           m_phoneNumber == b.m_phoneNumber &&
           m_photo == b.m_photo &&
           m_photoWebDocument == b.m_photoWebDocument &&
           m_provider == b.m_provider &&
           m_receiptMsgId == b.m_receiptMsgId &&
           m_startParam == b.m_startParam &&
           m_title == b.m_title &&
           m_totalAmount == b.m_totalAmount &&
           m_userId == b.m_userId &&
           m_venueId == b.m_venueId &&
           m_webpage == b.m_webpage;
}

MessageMedia &MessageMedia::operator =(const MessageMedia &b) {
    m_classType = b.m_classType;
    m_address = b.m_address;
    m_caption = b.m_caption;
    m_currency = b.m_currency;
    m_description = b.m_description;
    m_document = b.m_document;
    m_firstName = b.m_firstName;
    m_flags = b.m_flags;
    m_game = b.m_game;
    m_geo = b.m_geo;
    m_lastName = b.m_lastName;
    m_phoneNumber = b.m_phoneNumber;
    m_photo = b.m_photo;
    m_photoWebDocument = b.m_photoWebDocument;
    m_provider = b.m_provider;
    m_receiptMsgId = b.m_receiptMsgId;
    m_startParam = b.m_startParam;
    m_title = b.m_title;
    m_totalAmount = b.m_totalAmount;
    m_userId = b.m_userId;
    m_venueId = b.m_venueId;
    m_webpage = b.m_webpage;
    setNull(b.isNull());
    return *this;
}

void MessageMedia::setClassType(MessageMedia::MessageMediaClassType classType) {
    m_classType = classType;
}

MessageMedia::MessageMediaClassType MessageMedia::classType() const {
    return m_classType;
}

bool MessageMedia::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeMessageMediaEmpty: {
        m_classType = static_cast<MessageMediaClassType>(x);
        return true;
    }
        break;
    
    case typeMessageMediaPhoto: {
        m_photo.fetch(in);
        m_caption = in->fetchQString();
        m_classType = static_cast<MessageMediaClassType>(x);
        return true;
    }
        break;
    
    case typeMessageMediaGeo: {
        m_geo.fetch(in);
        m_classType = static_cast<MessageMediaClassType>(x);
        return true;
    }
        break;
    
    case typeMessageMediaContact: {
        m_phoneNumber = in->fetchQString();
        m_firstName = in->fetchQString();
        m_lastName = in->fetchQString();
        m_userId = in->fetchInt();
        m_classType = static_cast<MessageMediaClassType>(x);
        return true;
    }
        break;
    
    case typeMessageMediaUnsupported: {
        m_classType = static_cast<MessageMediaClassType>(x);
        return true;
    }
        break;
    
    case typeMessageMediaDocument: {
        m_document.fetch(in);
        m_caption = in->fetchQString();
        m_classType = static_cast<MessageMediaClassType>(x);
        return true;
    }
        break;
    
    case typeMessageMediaWebPage: {
        m_webpage.fetch(in);
        m_classType = static_cast<MessageMediaClassType>(x);
        return true;
    }
        break;
    
    case typeMessageMediaVenue: {
        m_geo.fetch(in);
        m_title = in->fetchQString();
        m_address = in->fetchQString();
        m_provider = in->fetchQString();
        m_venueId = in->fetchQString();
        m_classType = static_cast<MessageMediaClassType>(x);
        return true;
    }
        break;
    
    case typeMessageMediaGame: {
        m_game.fetch(in);
        m_classType = static_cast<MessageMediaClassType>(x);
        return true;
    }
        break;
    
    case typeMessageMediaInvoice: {
        m_flags = in->fetchInt();
        m_title = in->fetchQString();
        m_description = in->fetchQString();
        if(m_flags & 1<<0) {
            m_photoWebDocument.fetch(in);
        }
        if(m_flags & 1<<2) {
            m_receiptMsgId = in->fetchInt();
        }
        m_currency = in->fetchQString();
        m_totalAmount = in->fetchLong();
        m_startParam = in->fetchQString();
        m_classType = static_cast<MessageMediaClassType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool MessageMedia::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeMessageMediaEmpty: {
        return true;
    }
        break;
    
    case typeMessageMediaPhoto: {
        m_photo.push(out);
        out->appendQString(m_caption);
        return true;
    }
        break;
    
    case typeMessageMediaGeo: {
        m_geo.push(out);
        return true;
    }
        break;
    
    case typeMessageMediaContact: {
        out->appendQString(m_phoneNumber);
        out->appendQString(m_firstName);
        out->appendQString(m_lastName);
        out->appendInt(m_userId);
        return true;
    }
        break;
    
    case typeMessageMediaUnsupported: {
        return true;
    }
        break;
    
    case typeMessageMediaDocument: {
        m_document.push(out);
        out->appendQString(m_caption);
        return true;
    }
        break;
    
    case typeMessageMediaWebPage: {
        m_webpage.push(out);
        return true;
    }
        break;
    
    case typeMessageMediaVenue: {
        m_geo.push(out);
        out->appendQString(m_title);
        out->appendQString(m_address);
        out->appendQString(m_provider);
        out->appendQString(m_venueId);
        return true;
    }
        break;
    
    case typeMessageMediaGame: {
        m_game.push(out);
        return true;
    }
        break;
    
    case typeMessageMediaInvoice: {
        out->appendInt(m_flags);
        out->appendQString(m_title);
        out->appendQString(m_description);
        if(m_flags & 1<<0) {
            m_photoWebDocument.push(out);
        }
        if(m_flags & 1<<2) {
            out->appendInt(m_receiptMsgId);
        }
        out->appendQString(m_currency);
        out->appendLong(m_totalAmount);
        out->appendQString(m_startParam);
        return true;
    }
        break;
    
    default:
        return false;
    }
}

QMap<QString, QVariant> MessageMedia::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeMessageMediaEmpty: {
        result["classType"] = "MessageMedia::typeMessageMediaEmpty";
        return result;
    }
        break;
    
    case typeMessageMediaPhoto: {
        result["classType"] = "MessageMedia::typeMessageMediaPhoto";
        if( !m_photo.isNull() ) result["photo"] = m_photo.toMap();
        if( !m_caption.isEmpty() ) result["caption"] = QVariant::fromValue<QString>(m_caption);
        return result;
    }
        break;
    
    case typeMessageMediaGeo: {
        result["classType"] = "MessageMedia::typeMessageMediaGeo";
        if( !m_geo.isNull() ) result["geo"] = m_geo.toMap();
        return result;
    }
        break;
    
    case typeMessageMediaContact: {
        result["classType"] = "MessageMedia::typeMessageMediaContact";
        if( !m_phoneNumber.isEmpty() ) result["phoneNumber"] = QVariant::fromValue<QString>(m_phoneNumber);
        if( !m_firstName.isEmpty() ) result["firstName"] = QVariant::fromValue<QString>(m_firstName);
        if( !m_lastName.isEmpty() ) result["lastName"] = QVariant::fromValue<QString>(m_lastName);
        if( userId() ) result["userId"] = QString::number(userId());
        return result;
    }
        break;
    
    case typeMessageMediaUnsupported: {
        result["classType"] = "MessageMedia::typeMessageMediaUnsupported";
        return result;
    }
        break;
    
    case typeMessageMediaDocument: {
        result["classType"] = "MessageMedia::typeMessageMediaDocument";
        if( !m_document.isNull() ) result["document"] = m_document.toMap();
        if( !m_caption.isEmpty() ) result["caption"] = QVariant::fromValue<QString>(m_caption);
        return result;
    }
        break;
    
    case typeMessageMediaWebPage: {
        result["classType"] = "MessageMedia::typeMessageMediaWebPage";
        if( !m_webpage.isNull() ) result["webpage"] = m_webpage.toMap();
        return result;
    }
        break;
    
    case typeMessageMediaVenue: {
        result["classType"] = "MessageMedia::typeMessageMediaVenue";
        if( !m_geo.isNull() ) result["geo"] = m_geo.toMap();
        if( !m_title.isEmpty() ) result["title"] = QVariant::fromValue<QString>(m_title);
        if( !m_address.isEmpty() ) result["address"] = QVariant::fromValue<QString>(m_address);
        if( !m_provider.isEmpty() ) result["provider"] = QVariant::fromValue<QString>(m_provider);
        if( !m_venueId.isEmpty() ) result["venueId"] = QVariant::fromValue<QString>(m_venueId);
        return result;
    }
        break;
    
    case typeMessageMediaGame: {
        result["classType"] = "MessageMedia::typeMessageMediaGame";
        if( !m_game.isNull() ) result["game"] = m_game.toMap();
        return result;
    }
        break;
    
    case typeMessageMediaInvoice: {
        result["classType"] = "MessageMedia::typeMessageMediaInvoice";
        if( shippingAddressRequested() ) result["shippingAddressRequested"] = QString::number(shippingAddressRequested());
        if( test() ) result["test"] = QString::number(test());
        if( !m_title.isEmpty() ) result["title"] = QVariant::fromValue<QString>(m_title);
        if( !m_description.isEmpty() ) result["description"] = QVariant::fromValue<QString>(m_description);
        if( !m_photoWebDocument.isNull() ) result["photoWebDocument"] = m_photoWebDocument.toMap();
        if( receiptMsgId() ) result["receiptMsgId"] = QString::number(receiptMsgId());
        if( !m_currency.isEmpty() ) result["currency"] = QVariant::fromValue<QString>(m_currency);
        if( totalAmount() ) result["totalAmount"] = QString::number(totalAmount());
        if( !m_startParam.isEmpty() ) result["startParam"] = QVariant::fromValue<QString>(m_startParam);
        return result;
    }
        break;
    
    default:
        return result;
    }
}

MessageMedia MessageMedia::fromMap(const QMap<QString, QVariant> &map) {
    MessageMedia result;
    if(map.value("classType").toString() == "MessageMedia::typeMessageMediaEmpty") {
        result.setClassType(typeMessageMediaEmpty);
        return result;
    }
    if(map.value("classType").toString() == "MessageMedia::typeMessageMediaPhoto") {
        result.setClassType(typeMessageMediaPhoto);
        QVariant _photo_var = map.value("photo");
        if( !_photo_var.isNull() )
            result.setPhoto( Photo::fromMap(_photo_var.toMap()) );
        
        QVariant _caption_var = map.value("caption");
        if( !_caption_var.isNull() ) {
            _caption_var.convert( QVariant::nameToType("QString") );
            result.setCaption( _caption_var.value<QString>() );
        }
        
        return result;
    }
    if(map.value("classType").toString() == "MessageMedia::typeMessageMediaGeo") {
        result.setClassType(typeMessageMediaGeo);
        QVariant _geo_var = map.value("geo");
        if( !_geo_var.isNull() )
            result.setGeo( GeoPoint::fromMap(_geo_var.toMap()) );
        
        return result;
    }
    if(map.value("classType").toString() == "MessageMedia::typeMessageMediaContact") {
        result.setClassType(typeMessageMediaContact);
        QVariant _phoneNumber_var = map.value("phoneNumber");
        if( !_phoneNumber_var.isNull() ) {
            _phoneNumber_var.convert( QVariant::nameToType("QString") );
            result.setPhoneNumber( _phoneNumber_var.value<QString>() );
        }
        
        QVariant _firstName_var = map.value("firstName");
        if( !_firstName_var.isNull() ) {
            _firstName_var.convert( QVariant::nameToType("QString") );
            result.setFirstName( _firstName_var.value<QString>() );
        }
        
        QVariant _lastName_var = map.value("lastName");
        if( !_lastName_var.isNull() ) {
            _lastName_var.convert( QVariant::nameToType("QString") );
            result.setLastName( _lastName_var.value<QString>() );
        }
        
        QVariant _userId_var = map.value("userId");
        if( !_userId_var.isNull() ) {
            _userId_var.convert( QVariant::nameToType("qint32") );
            result.setUserId( _userId_var.value<qint32>() );
        }
        
        return result;
    }
    if(map.value("classType").toString() == "MessageMedia::typeMessageMediaUnsupported") {
        result.setClassType(typeMessageMediaUnsupported);
        return result;
    }
    if(map.value("classType").toString() == "MessageMedia::typeMessageMediaDocument") {
        result.setClassType(typeMessageMediaDocument);
        QVariant _document_var = map.value("document");
        if( !_document_var.isNull() )
            result.setDocument( Document::fromMap(_document_var.toMap()) );
        
        QVariant _caption_var = map.value("caption");
        if( !_caption_var.isNull() ) {
            _caption_var.convert( QVariant::nameToType("QString") );
            result.setCaption( _caption_var.value<QString>() );
        }
        
        return result;
    }
    if(map.value("classType").toString() == "MessageMedia::typeMessageMediaWebPage") {
        result.setClassType(typeMessageMediaWebPage);
        QVariant _webpage_var = map.value("webpage");
        if( !_webpage_var.isNull() )
            result.setWebpage( WebPage::fromMap(_webpage_var.toMap()) );
        
        return result;
    }
    if(map.value("classType").toString() == "MessageMedia::typeMessageMediaVenue") {
        result.setClassType(typeMessageMediaVenue);
        QVariant _geo_var = map.value("geo");
        if( !_geo_var.isNull() )
            result.setGeo( GeoPoint::fromMap(_geo_var.toMap()) );
        
        QVariant _title_var = map.value("title");
        if( !_title_var.isNull() ) {
            _title_var.convert( QVariant::nameToType("QString") );
            result.setTitle( _title_var.value<QString>() );
        }
        
        QVariant _address_var = map.value("address");
        if( !_address_var.isNull() ) {
            _address_var.convert( QVariant::nameToType("QString") );
            result.setAddress( _address_var.value<QString>() );
        }
        
        QVariant _provider_var = map.value("provider");
        if( !_provider_var.isNull() ) {
            _provider_var.convert( QVariant::nameToType("QString") );
            result.setProvider( _provider_var.value<QString>() );
        }
        
        QVariant _venueId_var = map.value("venueId");
        if( !_venueId_var.isNull() ) {
            _venueId_var.convert( QVariant::nameToType("QString") );
            result.setVenueId( _venueId_var.value<QString>() );
        }
        
        return result;
    }
    if(map.value("classType").toString() == "MessageMedia::typeMessageMediaGame") {
        result.setClassType(typeMessageMediaGame);
        QVariant _game_var = map.value("game");
        if( !_game_var.isNull() )
            result.setGame( Game::fromMap(_game_var.toMap()) );
        
        return result;
    }
    if(map.value("classType").toString() == "MessageMedia::typeMessageMediaInvoice") {
        result.setClassType(typeMessageMediaInvoice);
        QVariant _shippingAddressRequested_var = map.value("shippingAddressRequested");
        if( !_shippingAddressRequested_var.isNull() ) {
            _shippingAddressRequested_var.convert( QVariant::nameToType("bool") );
            result.setShippingAddressRequested( _shippingAddressRequested_var.value<bool>() );
        }
        
        QVariant _test_var = map.value("test");
        if( !_test_var.isNull() ) {
            _test_var.convert( QVariant::nameToType("bool") );
            result.setTest( _test_var.value<bool>() );
        }
        
        QVariant _title_var = map.value("title");
        if( !_title_var.isNull() ) {
            _title_var.convert( QVariant::nameToType("QString") );
            result.setTitle( _title_var.value<QString>() );
        }
        
        QVariant _description_var = map.value("description");
        if( !_description_var.isNull() ) {
            _description_var.convert( QVariant::nameToType("QString") );
            result.setDescription( _description_var.value<QString>() );
        }
        
        QVariant _photoWebDocument_var = map.value("photoWebDocument");
        if( !_photoWebDocument_var.isNull() )
            result.setPhotoWebDocument( WebDocument::fromMap(_photoWebDocument_var.toMap()) );
        
        QVariant _receiptMsgId_var = map.value("receiptMsgId");
        if( !_receiptMsgId_var.isNull() ) {
            _receiptMsgId_var.convert( QVariant::nameToType("qint32") );
            result.setReceiptMsgId( _receiptMsgId_var.value<qint32>() );
        }
        
        QVariant _currency_var = map.value("currency");
        if( !_currency_var.isNull() ) {
            _currency_var.convert( QVariant::nameToType("QString") );
            result.setCurrency( _currency_var.value<QString>() );
        }
        
        QVariant _totalAmount_var = map.value("totalAmount");
        if( !_totalAmount_var.isNull() ) {
            _totalAmount_var.convert( QVariant::nameToType("qint64") );
            result.setTotalAmount( _totalAmount_var.value<qint64>() );
        }
        
        QVariant _startParam_var = map.value("startParam");
        if( !_startParam_var.isNull() ) {
            _startParam_var.convert( QVariant::nameToType("QString") );
            result.setStartParam( _startParam_var.value<QString>() );
        }
        
        return result;
    }
    return result;
}

MessageMedia MessageMedia::fromJson(const QString &json) {
    return MessageMedia::fromMap(QJsonDocument::fromJson(json.toUtf8()).toVariant().toMap());
}

QByteArray MessageMedia::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const MessageMedia &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case MessageMedia::typeMessageMediaEmpty:
        
        break;
    case MessageMedia::typeMessageMediaPhoto:
        stream << item.photo();
        stream << item.caption();
        break;
    case MessageMedia::typeMessageMediaGeo:
        stream << item.geo();
        break;
    case MessageMedia::typeMessageMediaContact:
        stream << item.phoneNumber();
        stream << item.firstName();
        stream << item.lastName();
        stream << item.userId();
        break;
    case MessageMedia::typeMessageMediaUnsupported:
        
        break;
    case MessageMedia::typeMessageMediaDocument:
        stream << item.document();
        stream << item.caption();
        break;
    case MessageMedia::typeMessageMediaWebPage:
        stream << item.webpage();
        break;
    case MessageMedia::typeMessageMediaVenue:
        stream << item.geo();
        stream << item.title();
        stream << item.address();
        stream << item.provider();
        stream << item.venueId();
        break;
    case MessageMedia::typeMessageMediaGame:
        stream << item.game();
        break;
    case MessageMedia::typeMessageMediaInvoice:
        stream << item.flags();
        stream << item.title();
        stream << item.description();
        stream << item.photoWebDocument();
        stream << item.receiptMsgId();
        stream << item.currency();
        stream << item.totalAmount();
        stream << item.startParam();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, MessageMedia &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<MessageMedia::MessageMediaClassType>(type));
    switch(type) {
    case MessageMedia::typeMessageMediaEmpty: {
        
    }
        break;
    case MessageMedia::typeMessageMediaPhoto: {
        Photo m_photo;
        stream >> m_photo;
        item.setPhoto(m_photo);
        QString m_caption;
        stream >> m_caption;
        item.setCaption(m_caption);
    }
        break;
    case MessageMedia::typeMessageMediaGeo: {
        GeoPoint m_geo;
        stream >> m_geo;
        item.setGeo(m_geo);
    }
        break;
    case MessageMedia::typeMessageMediaContact: {
        QString m_phone_number;
        stream >> m_phone_number;
        item.setPhoneNumber(m_phone_number);
        QString m_first_name;
        stream >> m_first_name;
        item.setFirstName(m_first_name);
        QString m_last_name;
        stream >> m_last_name;
        item.setLastName(m_last_name);
        qint32 m_user_id;
        stream >> m_user_id;
        item.setUserId(m_user_id);
    }
        break;
    case MessageMedia::typeMessageMediaUnsupported: {
        
    }
        break;
    case MessageMedia::typeMessageMediaDocument: {
        Document m_document;
        stream >> m_document;
        item.setDocument(m_document);
        QString m_caption;
        stream >> m_caption;
        item.setCaption(m_caption);
    }
        break;
    case MessageMedia::typeMessageMediaWebPage: {
        WebPage m_webpage;
        stream >> m_webpage;
        item.setWebpage(m_webpage);
    }
        break;
    case MessageMedia::typeMessageMediaVenue: {
        GeoPoint m_geo;
        stream >> m_geo;
        item.setGeo(m_geo);
        QString m_title;
        stream >> m_title;
        item.setTitle(m_title);
        QString m_address;
        stream >> m_address;
        item.setAddress(m_address);
        QString m_provider;
        stream >> m_provider;
        item.setProvider(m_provider);
        QString m_venue_id;
        stream >> m_venue_id;
        item.setVenueId(m_venue_id);
    }
        break;
    case MessageMedia::typeMessageMediaGame: {
        Game m_game;
        stream >> m_game;
        item.setGame(m_game);
    }
        break;
    case MessageMedia::typeMessageMediaInvoice: {
        qint32 m_flags;
        stream >> m_flags;
        item.setFlags(m_flags);
        QString m_title;
        stream >> m_title;
        item.setTitle(m_title);
        QString m_description;
        stream >> m_description;
        item.setDescription(m_description);
        WebDocument m_photo_WebDocument;
        stream >> m_photo_WebDocument;
        item.setPhotoWebDocument(m_photo_WebDocument);
        qint32 m_receipt_msg_id;
        stream >> m_receipt_msg_id;
        item.setReceiptMsgId(m_receipt_msg_id);
        QString m_currency;
        stream >> m_currency;
        item.setCurrency(m_currency);
        qint64 m_total_amount;
        stream >> m_total_amount;
        item.setTotalAmount(m_total_amount);
        QString m_start_param;
        stream >> m_start_param;
        item.setStartParam(m_start_param);
    }
        break;
    }
    return stream;
}

QDebug operator<<(QDebug debug,  const MessageMedia &item) {
    QDebugStateSaver saver(debug);
    Q_UNUSED(saver)
    debug.nospace() << "Telegram.MessageMedia(";
    switch(item.classType()) {
    case MessageMedia::typeMessageMediaEmpty:
        debug.nospace() << "classType: typeMessageMediaEmpty";
        break;
    case MessageMedia::typeMessageMediaPhoto:
        debug.nospace() << "classType: typeMessageMediaPhoto";
        debug.nospace() << ", photo: " << item.photo();
        debug.nospace() << ", caption: " << item.caption();
        break;
    case MessageMedia::typeMessageMediaGeo:
        debug.nospace() << "classType: typeMessageMediaGeo";
        debug.nospace() << ", geo: " << item.geo();
        break;
    case MessageMedia::typeMessageMediaContact:
        debug.nospace() << "classType: typeMessageMediaContact";
        debug.nospace() << ", phoneNumber: " << item.phoneNumber();
        debug.nospace() << ", firstName: " << item.firstName();
        debug.nospace() << ", lastName: " << item.lastName();
        debug.nospace() << ", userId: " << item.userId();
        break;
    case MessageMedia::typeMessageMediaUnsupported:
        debug.nospace() << "classType: typeMessageMediaUnsupported";
        break;
    case MessageMedia::typeMessageMediaDocument:
        debug.nospace() << "classType: typeMessageMediaDocument";
        debug.nospace() << ", document: " << item.document();
        debug.nospace() << ", caption: " << item.caption();
        break;
    case MessageMedia::typeMessageMediaWebPage:
        debug.nospace() << "classType: typeMessageMediaWebPage";
        debug.nospace() << ", webpage: " << item.webpage();
        break;
    case MessageMedia::typeMessageMediaVenue:
        debug.nospace() << "classType: typeMessageMediaVenue";
        debug.nospace() << ", geo: " << item.geo();
        debug.nospace() << ", title: " << item.title();
        debug.nospace() << ", address: " << item.address();
        debug.nospace() << ", provider: " << item.provider();
        debug.nospace() << ", venueId: " << item.venueId();
        break;
    case MessageMedia::typeMessageMediaGame:
        debug.nospace() << "classType: typeMessageMediaGame";
        debug.nospace() << ", game: " << item.game();
        break;
    case MessageMedia::typeMessageMediaInvoice:
        debug.nospace() << "classType: typeMessageMediaInvoice";
        debug.nospace() << ", flags: " << item.flags();
        debug.nospace() << ", title: " << item.title();
        debug.nospace() << ", description: " << item.description();
        debug.nospace() << ", photoWebDocument: " << item.photoWebDocument();
        debug.nospace() << ", receiptMsgId: " << item.receiptMsgId();
        debug.nospace() << ", currency: " << item.currency();
        debug.nospace() << ", totalAmount: " << item.totalAmount();
        debug.nospace() << ", startParam: " << item.startParam();
        break;
    }
    debug.nospace() << ")";
    return debug;
}

