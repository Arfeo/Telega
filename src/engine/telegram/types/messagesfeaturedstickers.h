// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_MESSAGESFEATUREDSTICKERS
#define LQTG_TYPE_MESSAGESFEATUREDSTICKERS

#include "telegramtypeobject.h"

#include <QMetaType>
#include <QVariant>
#include "../coretypes.h"

#include <QDataStream>

#include <QtGlobal>
#include <QList>
#include "stickersetcovered.h"

class LIBQTELEGRAMSHARED_EXPORT MessagesFeaturedStickers : public TelegramTypeObject
{
public:
    enum MessagesFeaturedStickersClassType {
        typeMessagesFeaturedStickersNotModified = 0x4ede3cf,
        typeMessagesFeaturedStickers = 0xf89d88e5
    };

    MessagesFeaturedStickers(MessagesFeaturedStickersClassType classType = typeMessagesFeaturedStickersNotModified, InboundPkt *in = 0);
    MessagesFeaturedStickers(InboundPkt *in);
    MessagesFeaturedStickers(const Null&);
    MessagesFeaturedStickers(const MessagesFeaturedStickers &another);
    virtual ~MessagesFeaturedStickers();

    void setHash(qint32 hash);
    qint32 hash() const;

    void setSets(const QList<StickerSetCovered> &sets);
    QList<StickerSetCovered> sets() const;

    void setUnread(const QList<qint64> &unread);
    QList<qint64> unread() const;

    void setClassType(MessagesFeaturedStickersClassType classType);
    MessagesFeaturedStickersClassType classType() const;

    bool fetch(InboundPkt *in);
    bool push(OutboundPkt *out) const;

    QMap<QString, QVariant> toMap() const;
    static MessagesFeaturedStickers fromMap(const QMap<QString, QVariant> &map);
    static MessagesFeaturedStickers fromJson(const QString &json);

    bool operator ==(const MessagesFeaturedStickers &b) const;
    MessagesFeaturedStickers &operator =(const MessagesFeaturedStickers &b);

    bool operator==(bool stt) const { return isNull() != stt; }
    bool operator!=(bool stt) const { return !operator ==(stt); }

    QByteArray getHash(QCryptographicHash::Algorithm alg = QCryptographicHash::Md5) const;

private:
    qint32 m_hash;
    QList<StickerSetCovered> m_sets;
    QList<qint64> m_unread;
    MessagesFeaturedStickersClassType m_classType;
};

Q_DECLARE_METATYPE(MessagesFeaturedStickers)

QDataStream LIBQTELEGRAMSHARED_EXPORT &operator<<(QDataStream &stream, const MessagesFeaturedStickers &item);
QDataStream LIBQTELEGRAMSHARED_EXPORT &operator>>(QDataStream &stream, MessagesFeaturedStickers &item);

QDebug LIBQTELEGRAMSHARED_EXPORT operator<<(QDebug debug,  const MessagesFeaturedStickers &item);

#endif // LQTG_TYPE_MESSAGESFEATUREDSTICKERS
