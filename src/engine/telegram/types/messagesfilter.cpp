// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "messagesfilter.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

MessagesFilter::MessagesFilter(MessagesFilterClassType classType, InboundPkt *in) :
    m_flags(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

MessagesFilter::MessagesFilter(InboundPkt *in) :
    m_flags(0),
    m_classType(typeInputMessagesFilterEmpty)
{
    fetch(in);
}

MessagesFilter::MessagesFilter(const MessagesFilter &another) :
    TelegramTypeObject(),
    m_flags(0),
    m_classType(typeInputMessagesFilterEmpty)
{
    operator=(another);
}

MessagesFilter::MessagesFilter(const Null &null) :
    TelegramTypeObject(null),
    m_flags(0),
    m_classType(typeInputMessagesFilterEmpty)
{
}

MessagesFilter::~MessagesFilter() {

}

void MessagesFilter::setFlags(qint32 flags) {
    m_flags = flags;
}

qint32 MessagesFilter::flags() const {
    return m_flags;
}

void MessagesFilter::setMissed(bool missed) {
    if(missed) m_flags = (m_flags | (1<<0));
    else m_flags = (m_flags & ~(1<<0));
}

bool MessagesFilter::missed() const {
    return (m_flags & 1<<0);
}

bool MessagesFilter::operator ==(const MessagesFilter &b) const {
    return m_classType == b.m_classType &&
           m_flags == b.m_flags;
}

MessagesFilter &MessagesFilter::operator =(const MessagesFilter &b) {
    m_classType = b.m_classType;
    m_flags = b.m_flags;
    setNull(b.isNull());
    return *this;
}

void MessagesFilter::setClassType(MessagesFilter::MessagesFilterClassType classType) {
    m_classType = classType;
}

MessagesFilter::MessagesFilterClassType MessagesFilter::classType() const {
    return m_classType;
}

bool MessagesFilter::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeInputMessagesFilterEmpty: {
        m_classType = static_cast<MessagesFilterClassType>(x);
        return true;
    }
        break;

    case typeInputMessagesFilterPhotos: {
        m_classType = static_cast<MessagesFilterClassType>(x);
        return true;
    }
        break;

    case typeInputMessagesFilterVideo: {
        m_classType = static_cast<MessagesFilterClassType>(x);
        return true;
    }
        break;

    case typeInputMessagesFilterPhotoVideo: {
        m_classType = static_cast<MessagesFilterClassType>(x);
        return true;
    }
        break;

    case typeInputMessagesFilterPhotoVideoDocuments: {
        m_classType = static_cast<MessagesFilterClassType>(x);
        return true;
    }
        break;

    case typeInputMessagesFilterDocument: {
        m_classType = static_cast<MessagesFilterClassType>(x);
        return true;
    }
        break;

    case typeInputMessagesFilterUrl: {
        m_classType = static_cast<MessagesFilterClassType>(x);
        return true;
    }
        break;

    case typeInputMessagesFilterGif: {
        m_classType = static_cast<MessagesFilterClassType>(x);
        return true;
    }
        break;

    case typeInputMessagesFilterVoice: {
        m_classType = static_cast<MessagesFilterClassType>(x);
        return true;
    }
        break;

    case typeInputMessagesFilterMusic: {
        m_classType = static_cast<MessagesFilterClassType>(x);
        return true;
    }
        break;

    case typeInputMessagesFilterChatPhotos: {
        m_classType = static_cast<MessagesFilterClassType>(x);
        return true;
    }
        break;

    case typeInputMessagesFilterPhoneCalls: {
        m_flags = in->fetchInt();
        m_classType = static_cast<MessagesFilterClassType>(x);
        return true;
    }
        break;

    case typeInputMessagesFilterRoundVoice: {
        m_classType = static_cast<MessagesFilterClassType>(x);
        return true;
    }
        break;

    case typeInputMessagesFilterRoundVideo: {
        m_classType = static_cast<MessagesFilterClassType>(x);
        return true;
    }
        break;

    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool MessagesFilter::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeInputMessagesFilterEmpty: {
        return true;
    }
        break;

    case typeInputMessagesFilterPhotos: {
        return true;
    }
        break;

    case typeInputMessagesFilterVideo: {
        return true;
    }
        break;

    case typeInputMessagesFilterPhotoVideo: {
        return true;
    }
        break;

    case typeInputMessagesFilterPhotoVideoDocuments: {
        return true;
    }
        break;

    case typeInputMessagesFilterDocument: {
        return true;
    }
        break;

    case typeInputMessagesFilterUrl: {
        return true;
    }
        break;

    case typeInputMessagesFilterGif: {
        return true;
    }
        break;

    case typeInputMessagesFilterVoice: {
        return true;
    }
        break;

    case typeInputMessagesFilterMusic: {
        return true;
    }
        break;

    case typeInputMessagesFilterChatPhotos: {
        return true;
    }
        break;

    case typeInputMessagesFilterPhoneCalls: {
        out->appendInt(m_flags);
        return true;
    }
        break;

    case typeInputMessagesFilterRoundVoice: {
        return true;
    }
        break;

    case typeInputMessagesFilterRoundVideo: {
        return true;
    }
        break;

    default:
        return false;
    }
}

QMap<QString, QVariant> MessagesFilter::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeInputMessagesFilterEmpty: {
        result["classType"] = "MessagesFilter::typeInputMessagesFilterEmpty";
        return result;
    }
        break;

    case typeInputMessagesFilterPhotos: {
        result["classType"] = "MessagesFilter::typeInputMessagesFilterPhotos";
        return result;
    }
        break;

    case typeInputMessagesFilterVideo: {
        result["classType"] = "MessagesFilter::typeInputMessagesFilterVideo";
        return result;
    }
        break;

    case typeInputMessagesFilterPhotoVideo: {
        result["classType"] = "MessagesFilter::typeInputMessagesFilterPhotoVideo";
        return result;
    }
        break;

    case typeInputMessagesFilterPhotoVideoDocuments: {
        result["classType"] = "MessagesFilter::typeInputMessagesFilterPhotoVideoDocuments";
        return result;
    }
        break;

    case typeInputMessagesFilterDocument: {
        result["classType"] = "MessagesFilter::typeInputMessagesFilterDocument";
        return result;
    }
        break;

    case typeInputMessagesFilterUrl: {
        result["classType"] = "MessagesFilter::typeInputMessagesFilterUrl";
        return result;
    }
        break;

    case typeInputMessagesFilterGif: {
        result["classType"] = "MessagesFilter::typeInputMessagesFilterGif";
        return result;
    }
        break;

    case typeInputMessagesFilterVoice: {
        result["classType"] = "MessagesFilter::typeInputMessagesFilterVoice";
        return result;
    }
        break;

    case typeInputMessagesFilterMusic: {
        result["classType"] = "MessagesFilter::typeInputMessagesFilterMusic";
        return result;
    }
        break;

    case typeInputMessagesFilterChatPhotos: {
        result["classType"] = "MessagesFilter::typeInputMessagesFilterChatPhotos";
        return result;
    }
        break;

    case typeInputMessagesFilterPhoneCalls: {
        result["classType"] = "MessagesFilter::typeInputMessagesFilterPhoneCalls";
        if( missed() ) result["missed"] = QString::number(missed());
        return result;
    }
        break;

    case typeInputMessagesFilterRoundVoice: {
        result["classType"] = "MessagesFilter::typeInputMessagesFilterRoundVoice";
        return result;
    }
        break;

    case typeInputMessagesFilterRoundVideo: {
        result["classType"] = "MessagesFilter::typeInputMessagesFilterRoundVideo";
        return result;
    }
        break;

    default:
        return result;
    }
}

MessagesFilter MessagesFilter::fromMap(const QMap<QString, QVariant> &map) {
    MessagesFilter result;
    if(map.value("classType").toString() == "MessagesFilter::typeInputMessagesFilterEmpty") {
        result.setClassType(typeInputMessagesFilterEmpty);
        return result;
    }
    if(map.value("classType").toString() == "MessagesFilter::typeInputMessagesFilterPhotos") {
        result.setClassType(typeInputMessagesFilterPhotos);
        return result;
    }
    if(map.value("classType").toString() == "MessagesFilter::typeInputMessagesFilterVideo") {
        result.setClassType(typeInputMessagesFilterVideo);
        return result;
    }
    if(map.value("classType").toString() == "MessagesFilter::typeInputMessagesFilterPhotoVideo") {
        result.setClassType(typeInputMessagesFilterPhotoVideo);
        return result;
    }
    if(map.value("classType").toString() == "MessagesFilter::typeInputMessagesFilterPhotoVideoDocuments") {
        result.setClassType(typeInputMessagesFilterPhotoVideoDocuments);
        return result;
    }
    if(map.value("classType").toString() == "MessagesFilter::typeInputMessagesFilterDocument") {
        result.setClassType(typeInputMessagesFilterDocument);
        return result;
    }
    if(map.value("classType").toString() == "MessagesFilter::typeInputMessagesFilterUrl") {
        result.setClassType(typeInputMessagesFilterUrl);
        return result;
    }
    if(map.value("classType").toString() == "MessagesFilter::typeInputMessagesFilterGif") {
        result.setClassType(typeInputMessagesFilterGif);
        return result;
    }
    if(map.value("classType").toString() == "MessagesFilter::typeInputMessagesFilterVoice") {
        result.setClassType(typeInputMessagesFilterVoice);
        return result;
    }
    if(map.value("classType").toString() == "MessagesFilter::typeInputMessagesFilterMusic") {
        result.setClassType(typeInputMessagesFilterMusic);
        return result;
    }
    if(map.value("classType").toString() == "MessagesFilter::typeInputMessagesFilterChatPhotos") {
        result.setClassType(typeInputMessagesFilterChatPhotos);
        return result;
    }
    if(map.value("classType").toString() == "MessagesFilter::typeInputMessagesFilterPhoneCalls") {
        result.setClassType(typeInputMessagesFilterPhoneCalls);
        QVariant _missed_var = map.value("missed");
        if( !_missed_var.isNull() ) {
            _missed_var.convert( QVariant::nameToType("bool") );
            result.setMissed( _missed_var.value<bool>() );
        }

        return result;
    }
    if(map.value("classType").toString() == "MessagesFilter::typeInputMessagesFilterRoundVoice") {
        result.setClassType(typeInputMessagesFilterRoundVoice);
        return result;
    }
    if(map.value("classType").toString() == "MessagesFilter::typeInputMessagesFilterRoundVideo") {
        result.setClassType(typeInputMessagesFilterRoundVideo);
        return result;
    }
    return result;
}

MessagesFilter MessagesFilter::fromJson(const QString &json) {
    return MessagesFilter::fromMap(QJsonDocument::fromJson(json.toUtf8()).toVariant().toMap());
}

QByteArray MessagesFilter::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const MessagesFilter &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case MessagesFilter::typeInputMessagesFilterEmpty:

        break;
    case MessagesFilter::typeInputMessagesFilterPhotos:

        break;
    case MessagesFilter::typeInputMessagesFilterVideo:

        break;
    case MessagesFilter::typeInputMessagesFilterPhotoVideo:

        break;
    case MessagesFilter::typeInputMessagesFilterPhotoVideoDocuments:

        break;
    case MessagesFilter::typeInputMessagesFilterDocument:

        break;
    case MessagesFilter::typeInputMessagesFilterUrl:

        break;
    case MessagesFilter::typeInputMessagesFilterGif:

        break;
    case MessagesFilter::typeInputMessagesFilterVoice:

        break;
    case MessagesFilter::typeInputMessagesFilterMusic:

        break;
    case MessagesFilter::typeInputMessagesFilterChatPhotos:

        break;
    case MessagesFilter::typeInputMessagesFilterPhoneCalls:
        stream << item.flags();
        break;
    case MessagesFilter::typeInputMessagesFilterRoundVoice:

        break;
    case MessagesFilter::typeInputMessagesFilterRoundVideo:

        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, MessagesFilter &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<MessagesFilter::MessagesFilterClassType>(type));
    switch(type) {
    case MessagesFilter::typeInputMessagesFilterEmpty: {

    }
        break;
    case MessagesFilter::typeInputMessagesFilterPhotos: {

    }
        break;
    case MessagesFilter::typeInputMessagesFilterVideo: {

    }
        break;
    case MessagesFilter::typeInputMessagesFilterPhotoVideo: {

    }
        break;
    case MessagesFilter::typeInputMessagesFilterPhotoVideoDocuments: {

    }
        break;
    case MessagesFilter::typeInputMessagesFilterDocument: {

    }
        break;
    case MessagesFilter::typeInputMessagesFilterUrl: {

    }
        break;
    case MessagesFilter::typeInputMessagesFilterGif: {

    }
        break;
    case MessagesFilter::typeInputMessagesFilterVoice: {

    }
        break;
    case MessagesFilter::typeInputMessagesFilterMusic: {

    }
        break;
    case MessagesFilter::typeInputMessagesFilterChatPhotos: {

    }
        break;
    case MessagesFilter::typeInputMessagesFilterPhoneCalls: {
        qint32 m_flags;
        stream >> m_flags;
        item.setFlags(m_flags);
    }
        break;
    case MessagesFilter::typeInputMessagesFilterRoundVoice: {

    }
        break;
    case MessagesFilter::typeInputMessagesFilterRoundVideo: {

    }
        break;
    }
    return stream;
}

/*QDebug operator<<(QDebug debug,  const MessagesFilter &item) {
    QDebugStateSaver saver(debug);
    Q_UNUSED(saver)
    debug.nospace() << "Telegram.MessagesFilter(";
    switch(item.classType()) {
    case MessagesFilter::typeInputMessagesFilterEmpty:
        debug.nospace() << "classType: typeInputMessagesFilterEmpty";
        break;
    case MessagesFilter::typeInputMessagesFilterPhotos:
        debug.nospace() << "classType: typeInputMessagesFilterPhotos";
        break;
    case MessagesFilter::typeInputMessagesFilterVideo:
        debug.nospace() << "classType: typeInputMessagesFilterVideo";
        break;
    case MessagesFilter::typeInputMessagesFilterPhotoVideo:
        debug.nospace() << "classType: typeInputMessagesFilterPhotoVideo";
        break;
    case MessagesFilter::typeInputMessagesFilterPhotoVideoDocuments:
        debug.nospace() << "classType: typeInputMessagesFilterPhotoVideoDocuments";
        break;
    case MessagesFilter::typeInputMessagesFilterDocument:
        debug.nospace() << "classType: typeInputMessagesFilterDocument";
        break;
    case MessagesFilter::typeInputMessagesFilterUrl:
        debug.nospace() << "classType: typeInputMessagesFilterUrl";
        break;
    case MessagesFilter::typeInputMessagesFilterGif:
        debug.nospace() << "classType: typeInputMessagesFilterGif";
        break;
    case MessagesFilter::typeInputMessagesFilterVoice:
        debug.nospace() << "classType: typeInputMessagesFilterVoice";
        break;
    case MessagesFilter::typeInputMessagesFilterMusic:
        debug.nospace() << "classType: typeInputMessagesFilterMusic";
        break;
    case MessagesFilter::typeInputMessagesFilterChatPhotos:
        debug.nospace() << "classType: typeInputMessagesFilterChatPhotos";
        break;
    case MessagesFilter::typeInputMessagesFilterPhoneCalls:
        debug.nospace() << "classType: typeInputMessagesFilterPhoneCalls";
        debug.nospace() << ", flags: " << item.flags();
        break;
    case MessagesFilter::typeInputMessagesFilterRoundVoice:
        debug.nospace() << "classType: typeInputMessagesFilterRoundVoice";
        break;
    case MessagesFilter::typeInputMessagesFilterRoundVideo:
        debug.nospace() << "classType: typeInputMessagesFilterRoundVideo";
        break;
    }
    debug.nospace() << ")";
    return debug;
}
*/
