// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "messageshighscores.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

MessagesHighScores::MessagesHighScores(MessagesHighScoresClassType classType, InboundPkt *in) :
    m_classType(classType)
{
    if(in) fetch(in);
}

MessagesHighScores::MessagesHighScores(InboundPkt *in) :
    m_classType(typeMessagesHighScores)
{
    fetch(in);
}

MessagesHighScores::MessagesHighScores(const MessagesHighScores &another) :
    TelegramTypeObject(),
    m_classType(typeMessagesHighScores)
{
    operator=(another);
}

MessagesHighScores::MessagesHighScores(const Null &null) :
    TelegramTypeObject(null),
    m_classType(typeMessagesHighScores)
{
}

MessagesHighScores::~MessagesHighScores() {

}

void MessagesHighScores::setScores(const QList<HighScore> &scores) {
    m_scores = scores;
}

QList<HighScore> MessagesHighScores::scores() const {
    return m_scores;
}

void MessagesHighScores::setUsers(const QList<User> &users) {
    m_users = users;
}

QList<User> MessagesHighScores::users() const {
    return m_users;
}

bool MessagesHighScores::operator ==(const MessagesHighScores &b) const {
    return m_classType == b.m_classType &&
           m_scores == b.m_scores &&
           m_users == b.m_users;
}

MessagesHighScores &MessagesHighScores::operator =(const MessagesHighScores &b) {
    m_classType = b.m_classType;
    m_scores = b.m_scores;
    m_users = b.m_users;
    setNull(b.isNull());
    return *this;
}

void MessagesHighScores::setClassType(MessagesHighScores::MessagesHighScoresClassType classType) {
    m_classType = classType;
}

MessagesHighScores::MessagesHighScoresClassType MessagesHighScores::classType() const {
    return m_classType;
}

bool MessagesHighScores::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeMessagesHighScores: {
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_scores_length = in->fetchInt();
        m_scores.clear();
        for (qint32 i = 0; i < m_scores_length; i++) {
            HighScore type;
            type.fetch(in);
            m_scores.append(type);
        }
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_users_length = in->fetchInt();
        m_users.clear();
        for (qint32 i = 0; i < m_users_length; i++) {
            User type;
            type.fetch(in);
            m_users.append(type);
        }
        m_classType = static_cast<MessagesHighScoresClassType>(x);
        return true;
    }
        break;

    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool MessagesHighScores::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeMessagesHighScores: {
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_scores.count());
        for (qint32 i = 0; i < m_scores.count(); i++) {
            m_scores[i].push(out);
        }
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_users.count());
        for (qint32 i = 0; i < m_users.count(); i++) {
            m_users[i].push(out);
        }
        return true;
    }
        break;

    default:
        return false;
    }
}

QMap<QString, QVariant> MessagesHighScores::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeMessagesHighScores: {
        result["classType"] = "MessagesHighScores::typeMessagesHighScores";
        QList<QVariant> _scores;
        //for(const HighScore &m__type: m_scores)
        for(int i = 0; i < m_scores.size(); ++i) {
            const HighScore &m__type = m_scores[i];
            if( !m__type.isNull() ) _scores << m__type.toMap();
        }
        result["scores"] = _scores;
        QList<QVariant> _users;
        //for(const User &m__type: m_users)
        for(int i = 0; i < m_users.size(); ++i) {
            const User &m__type = m_users[i];
            if( !m__type.isNull() ) _users << m__type.toMap();
        }
        result["users"] = _users;
        return result;
    }
        break;

    default:
        return result;
    }
}

MessagesHighScores MessagesHighScores::fromMap(const QMap<QString, QVariant> &map) {
    MessagesHighScores result;
    if(map.value("classType").toString() == "MessagesHighScores::typeMessagesHighScores") {
        result.setClassType(typeMessagesHighScores);
        QList<QVariant> map_scores = map["scores"].toList();
        QList<HighScore> _scores;
        //for(const QVariant &var: map_scores)
        for(int i = 0; i < map_scores.size(); ++i) {
            const QVariant &var = map_scores[i];
            _scores << HighScore::fromMap(var.toMap());
        }
        result.setScores(_scores);
        QList<QVariant> map_users = map["users"].toList();
        QList<User> _users;
        //for(const QVariant &var: map_users)
        for(int i = 0; i < map_users.size(); ++i) {
            const QVariant &var = map_users[i];
            _users << User::fromMap(var.toMap());
        }
        result.setUsers(_users);
        return result;
    }
    return result;
}

MessagesHighScores MessagesHighScores::fromJson(const QString &json) {
    return MessagesHighScores::fromMap(QJsonDocument::fromJson(json.toUtf8()).toVariant().toMap());
}

QByteArray MessagesHighScores::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const MessagesHighScores &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case MessagesHighScores::typeMessagesHighScores:
        stream << item.scores();
        stream << item.users();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, MessagesHighScores &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<MessagesHighScores::MessagesHighScoresClassType>(type));
    switch(type) {
    case MessagesHighScores::typeMessagesHighScores: {
        QList<HighScore> m_scores;
        stream >> m_scores;
        item.setScores(m_scores);
        QList<User> m_users;
        stream >> m_users;
        item.setUsers(m_users);
    }
        break;
    }
    return stream;
}

/*QDebug operator<<(QDebug debug,  const MessagesHighScores &item) {
    QDebugStateSaver saver(debug);
    Q_UNUSED(saver)
    debug.nospace() << "Telegram.MessagesHighScores(";
    switch(item.classType()) {
    case MessagesHighScores::typeMessagesHighScores:
        debug.nospace() << "classType: typeMessagesHighScores";
        debug.nospace() << ", scores: " << item.scores();
        debug.nospace() << ", users: " << item.users();
        break;
    }
    debug.nospace() << ")";
    return debug;
}
*/
