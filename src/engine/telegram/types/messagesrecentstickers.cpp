// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "messagesrecentstickers.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

MessagesRecentStickers::MessagesRecentStickers(MessagesRecentStickersClassType classType, InboundPkt *in) :
    m_hash(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

MessagesRecentStickers::MessagesRecentStickers(InboundPkt *in) :
    m_hash(0),
    m_classType(typeMessagesRecentStickersNotModified)
{
    fetch(in);
}

MessagesRecentStickers::MessagesRecentStickers(const MessagesRecentStickers &another) :
    TelegramTypeObject(),
    m_hash(0),
    m_classType(typeMessagesRecentStickersNotModified)
{
    operator=(another);
}

MessagesRecentStickers::MessagesRecentStickers(const Null &null) :
    TelegramTypeObject(null),
    m_hash(0),
    m_classType(typeMessagesRecentStickersNotModified)
{
}

MessagesRecentStickers::~MessagesRecentStickers() {
    
}

void MessagesRecentStickers::setHash(qint32 hash) {
    m_hash = hash;
}

qint32 MessagesRecentStickers::hash() const {
    return m_hash;
}

void MessagesRecentStickers::setStickers(const QList<Document> &stickers) {
    m_stickers = stickers;
}

QList<Document> MessagesRecentStickers::stickers() const {
    return m_stickers;
}

bool MessagesRecentStickers::operator ==(const MessagesRecentStickers &b) const {
    return m_classType == b.m_classType &&
           m_hash == b.m_hash &&
           m_stickers == b.m_stickers;
}

MessagesRecentStickers &MessagesRecentStickers::operator =(const MessagesRecentStickers &b) {
    m_classType = b.m_classType;
    m_hash = b.m_hash;
    m_stickers = b.m_stickers;
    setNull(b.isNull());
    return *this;
}

void MessagesRecentStickers::setClassType(MessagesRecentStickers::MessagesRecentStickersClassType classType) {
    m_classType = classType;
}

MessagesRecentStickers::MessagesRecentStickersClassType MessagesRecentStickers::classType() const {
    return m_classType;
}

bool MessagesRecentStickers::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeMessagesRecentStickersNotModified: {
        m_classType = static_cast<MessagesRecentStickersClassType>(x);
        return true;
    }
        break;
    
    case typeMessagesRecentStickers: {
        m_hash = in->fetchInt();
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_stickers_length = in->fetchInt();
        m_stickers.clear();
        for (qint32 i = 0; i < m_stickers_length; i++) {
            Document type;
            type.fetch(in);
            m_stickers.append(type);
        }
        m_classType = static_cast<MessagesRecentStickersClassType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool MessagesRecentStickers::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeMessagesRecentStickersNotModified: {
        return true;
    }
        break;
    
    case typeMessagesRecentStickers: {
        out->appendInt(m_hash);
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_stickers.count());
        for (qint32 i = 0; i < m_stickers.count(); i++) {
            m_stickers[i].push(out);
        }
        return true;
    }
        break;
    
    default:
        return false;
    }
}

QMap<QString, QVariant> MessagesRecentStickers::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeMessagesRecentStickersNotModified: {
        result["classType"] = "MessagesRecentStickers::typeMessagesRecentStickersNotModified";
        return result;
    }
        break;
    
    case typeMessagesRecentStickers: {
        result["classType"] = "MessagesRecentStickers::typeMessagesRecentStickers";
        if( hash() ) result["hash"] = QString::number(hash());
        QList<QVariant> _stickers;
        for(const Document &m__type: m_stickers)
            if( !m__type.isNull() ) _stickers << m__type.toMap();
        result["stickers"] = _stickers;
        return result;
    }
        break;
    
    default:
        return result;
    }
}

MessagesRecentStickers MessagesRecentStickers::fromMap(const QMap<QString, QVariant> &map) {
    MessagesRecentStickers result;
    if(map.value("classType").toString() == "MessagesRecentStickers::typeMessagesRecentStickersNotModified") {
        result.setClassType(typeMessagesRecentStickersNotModified);
        return result;
    }
    if(map.value("classType").toString() == "MessagesRecentStickers::typeMessagesRecentStickers") {
        result.setClassType(typeMessagesRecentStickers);
        QVariant _hash_var = map.value("hash");
        if( !_hash_var.isNull() ) {
            _hash_var.convert( QVariant::nameToType("qint32") );
            result.setHash( _hash_var.value<qint32>() );
        }
        
        QList<QVariant> map_stickers = map["stickers"].toList();
        QList<Document> _stickers;
        for(const QVariant &var: map_stickers)
            _stickers << Document::fromMap(var.toMap());
        result.setStickers(_stickers);
        return result;
    }
    return result;
}

MessagesRecentStickers MessagesRecentStickers::fromJson(const QString &json) {
    return MessagesRecentStickers::fromMap(QJsonDocument::fromJson(json.toUtf8()).toVariant().toMap());
}

QByteArray MessagesRecentStickers::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const MessagesRecentStickers &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case MessagesRecentStickers::typeMessagesRecentStickersNotModified:
        
        break;
    case MessagesRecentStickers::typeMessagesRecentStickers:
        stream << item.hash();
        stream << item.stickers();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, MessagesRecentStickers &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<MessagesRecentStickers::MessagesRecentStickersClassType>(type));
    switch(type) {
    case MessagesRecentStickers::typeMessagesRecentStickersNotModified: {
        
    }
        break;
    case MessagesRecentStickers::typeMessagesRecentStickers: {
        qint32 m_hash;
        stream >> m_hash;
        item.setHash(m_hash);
        QList<Document> m_stickers;
        stream >> m_stickers;
        item.setStickers(m_stickers);
    }
        break;
    }
    return stream;
}

QDebug operator<<(QDebug debug,  const MessagesRecentStickers &item) {
    QDebugStateSaver saver(debug);
    Q_UNUSED(saver)
    debug.nospace() << "Telegram.MessagesRecentStickers(";
    switch(item.classType()) {
    case MessagesRecentStickers::typeMessagesRecentStickersNotModified:
        debug.nospace() << "classType: typeMessagesRecentStickersNotModified";
        break;
    case MessagesRecentStickers::typeMessagesRecentStickers:
        debug.nospace() << "classType: typeMessagesRecentStickers";
        debug.nospace() << ", hash: " << item.hash();
        debug.nospace() << ", stickers: " << item.stickers();
        break;
    }
    debug.nospace() << ")";
    return debug;
}

