// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "page.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

Page::Page(PageClassType classType, InboundPkt *in) :
    m_classType(classType)
{
    if(in) fetch(in);
}

Page::Page(InboundPkt *in) :
    m_classType(typePagePart)
{
    fetch(in);
}

Page::Page(const Page &another) :
    TelegramTypeObject(),
    m_classType(typePagePart)
{
    operator=(another);
}

Page::Page(const Null &null) :
    TelegramTypeObject(null),
    m_classType(typePagePart)
{
}

Page::~Page() {
    
}

void Page::setBlocks(const QList<PageBlock> &blocks) {
    m_blocks = blocks;
}

QList<PageBlock> Page::blocks() const {
    return m_blocks;
}

void Page::setDocuments(const QList<Document> &documents) {
    m_documents = documents;
}

QList<Document> Page::documents() const {
    return m_documents;
}

void Page::setPhotos(const QList<Photo> &photos) {
    m_photos = photos;
}

QList<Photo> Page::photos() const {
    return m_photos;
}

bool Page::operator ==(const Page &b) const {
    return m_classType == b.m_classType &&
           m_blocks == b.m_blocks &&
           m_documents == b.m_documents &&
           m_photos == b.m_photos;
}

Page &Page::operator =(const Page &b) {
    m_classType = b.m_classType;
    m_blocks = b.m_blocks;
    m_documents = b.m_documents;
    m_photos = b.m_photos;
    setNull(b.isNull());
    return *this;
}

void Page::setClassType(Page::PageClassType classType) {
    m_classType = classType;
}

Page::PageClassType Page::classType() const {
    return m_classType;
}

bool Page::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typePagePart: {
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_blocks_length = in->fetchInt();
        m_blocks.clear();
        for (qint32 i = 0; i < m_blocks_length; i++) {
            PageBlock type;
            type.fetch(in);
            m_blocks.append(type);
        }
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_photos_length = in->fetchInt();
        m_photos.clear();
        for (qint32 i = 0; i < m_photos_length; i++) {
            Photo type;
            type.fetch(in);
            m_photos.append(type);
        }
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_documents_length = in->fetchInt();
        m_documents.clear();
        for (qint32 i = 0; i < m_documents_length; i++) {
            Document type;
            type.fetch(in);
            m_documents.append(type);
        }
        m_classType = static_cast<PageClassType>(x);
        return true;
    }
        break;
    
    case typePageFull: {
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_blocks_length = in->fetchInt();
        m_blocks.clear();
        for (qint32 i = 0; i < m_blocks_length; i++) {
            PageBlock type;
            type.fetch(in);
            m_blocks.append(type);
        }
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_photos_length = in->fetchInt();
        m_photos.clear();
        for (qint32 i = 0; i < m_photos_length; i++) {
            Photo type;
            type.fetch(in);
            m_photos.append(type);
        }
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_documents_length = in->fetchInt();
        m_documents.clear();
        for (qint32 i = 0; i < m_documents_length; i++) {
            Document type;
            type.fetch(in);
            m_documents.append(type);
        }
        m_classType = static_cast<PageClassType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool Page::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typePagePart: {
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_blocks.count());
        for (qint32 i = 0; i < m_blocks.count(); i++) {
            m_blocks[i].push(out);
        }
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_photos.count());
        for (qint32 i = 0; i < m_photos.count(); i++) {
            m_photos[i].push(out);
        }
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_documents.count());
        for (qint32 i = 0; i < m_documents.count(); i++) {
            m_documents[i].push(out);
        }
        return true;
    }
        break;
    
    case typePageFull: {
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_blocks.count());
        for (qint32 i = 0; i < m_blocks.count(); i++) {
            m_blocks[i].push(out);
        }
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_photos.count());
        for (qint32 i = 0; i < m_photos.count(); i++) {
            m_photos[i].push(out);
        }
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_documents.count());
        for (qint32 i = 0; i < m_documents.count(); i++) {
            m_documents[i].push(out);
        }
        return true;
    }
        break;
    
    default:
        return false;
    }
}

QMap<QString, QVariant> Page::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typePagePart: {
        result["classType"] = "Page::typePagePart";
        QList<QVariant> _blocks;
        for(const PageBlock &m__type: m_blocks)
            if( !m__type.isNull() ) _blocks << m__type.toMap();
        result["blocks"] = _blocks;
        QList<QVariant> _photos;
        for(const Photo &m__type: m_photos)
            if( !m__type.isNull() ) _photos << m__type.toMap();
        result["photos"] = _photos;
        QList<QVariant> _documents;
        for(const Document &m__type: m_documents)
            if( !m__type.isNull() ) _documents << m__type.toMap();
        result["documents"] = _documents;
        return result;
    }
        break;
    
    case typePageFull: {
        result["classType"] = "Page::typePageFull";
        QList<QVariant> _blocks;
        for(const PageBlock &m__type: m_blocks)
            if( !m__type.isNull() ) _blocks << m__type.toMap();
        result["blocks"] = _blocks;
        QList<QVariant> _photos;
        for(const Photo &m__type: m_photos)
            if( !m__type.isNull() ) _photos << m__type.toMap();
        result["photos"] = _photos;
        QList<QVariant> _documents;
        for(const Document &m__type: m_documents)
            if( !m__type.isNull() ) _documents << m__type.toMap();
        result["documents"] = _documents;
        return result;
    }
        break;
    
    default:
        return result;
    }
}

Page Page::fromMap(const QMap<QString, QVariant> &map) {
    Page result;
    if(map.value("classType").toString() == "Page::typePagePart") {
        result.setClassType(typePagePart);
        QList<QVariant> map_blocks = map["blocks"].toList();
        QList<PageBlock> _blocks;
        for(const QVariant &var: map_blocks)
            _blocks << PageBlock::fromMap(var.toMap());
        result.setBlocks(_blocks);
        QList<QVariant> map_photos = map["photos"].toList();
        QList<Photo> _photos;
        for(const QVariant &var: map_photos)
            _photos << Photo::fromMap(var.toMap());
        result.setPhotos(_photos);
        QList<QVariant> map_documents = map["documents"].toList();
        QList<Document> _documents;
        for(const QVariant &var: map_documents)
            _documents << Document::fromMap(var.toMap());
        result.setDocuments(_documents);
        return result;
    }
    if(map.value("classType").toString() == "Page::typePageFull") {
        result.setClassType(typePageFull);
        QList<QVariant> map_blocks = map["blocks"].toList();
        QList<PageBlock> _blocks;
        for(const QVariant &var: map_blocks)
            _blocks << PageBlock::fromMap(var.toMap());
        result.setBlocks(_blocks);
        QList<QVariant> map_photos = map["photos"].toList();
        QList<Photo> _photos;
        for(const QVariant &var: map_photos)
            _photos << Photo::fromMap(var.toMap());
        result.setPhotos(_photos);
        QList<QVariant> map_documents = map["documents"].toList();
        QList<Document> _documents;
        for(const QVariant &var: map_documents)
            _documents << Document::fromMap(var.toMap());
        result.setDocuments(_documents);
        return result;
    }
    return result;
}

Page Page::fromJson(const QString &json) {
    return Page::fromMap(QJsonDocument::fromJson(json.toUtf8()).toVariant().toMap());
}

QByteArray Page::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const Page &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case Page::typePagePart:
        stream << item.blocks();
        stream << item.photos();
        stream << item.documents();
        break;
    case Page::typePageFull:
        stream << item.blocks();
        stream << item.photos();
        stream << item.documents();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, Page &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<Page::PageClassType>(type));
    switch(type) {
    case Page::typePagePart: {
        QList<PageBlock> m_blocks;
        stream >> m_blocks;
        item.setBlocks(m_blocks);
        QList<Photo> m_photos;
        stream >> m_photos;
        item.setPhotos(m_photos);
        QList<Document> m_documents;
        stream >> m_documents;
        item.setDocuments(m_documents);
    }
        break;
    case Page::typePageFull: {
        QList<PageBlock> m_blocks;
        stream >> m_blocks;
        item.setBlocks(m_blocks);
        QList<Photo> m_photos;
        stream >> m_photos;
        item.setPhotos(m_photos);
        QList<Document> m_documents;
        stream >> m_documents;
        item.setDocuments(m_documents);
    }
        break;
    }
    return stream;
}

QDebug operator<<(QDebug debug,  const Page &item) {
    QDebugStateSaver saver(debug);
    Q_UNUSED(saver)
    debug.nospace() << "Telegram.Page(";
    switch(item.classType()) {
    case Page::typePagePart:
        debug.nospace() << "classType: typePagePart";
        debug.nospace() << ", blocks: " << item.blocks();
        debug.nospace() << ", photos: " << item.photos();
        debug.nospace() << ", documents: " << item.documents();
        break;
    case Page::typePageFull:
        debug.nospace() << "classType: typePageFull";
        debug.nospace() << ", blocks: " << item.blocks();
        debug.nospace() << ", photos: " << item.photos();
        debug.nospace() << ", documents: " << item.documents();
        break;
    }
    debug.nospace() << ")";
    return debug;
}

