// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "pageblock.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

PageBlock::PageBlock(PageBlockClassType classType, InboundPkt *in) :
    m_audioId(0),
    m_authorPhotoId(0),
    m_cover(0),
    m_date(0),
    m_flags(0),
    m_h(0),
    m_ordered(false),
    m_photoId(0),
    m_posterPhotoId(0),
    m_publishedDate(0),
    m_videoId(0),
    m_w(0),
    m_webpageId(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

PageBlock::PageBlock(InboundPkt *in) :
    m_audioId(0),
    m_authorPhotoId(0),
    m_cover(0),
    m_date(0),
    m_flags(0),
    m_h(0),
    m_ordered(false),
    m_photoId(0),
    m_posterPhotoId(0),
    m_publishedDate(0),
    m_videoId(0),
    m_w(0),
    m_webpageId(0),
    m_classType(typePageBlockUnsupported)
{
    fetch(in);
}

PageBlock::PageBlock(const PageBlock &another) :
    TelegramTypeObject(),
    m_audioId(0),
    m_authorPhotoId(0),
    m_cover(0),
    m_date(0),
    m_flags(0),
    m_h(0),
    m_ordered(false),
    m_photoId(0),
    m_posterPhotoId(0),
    m_publishedDate(0),
    m_videoId(0),
    m_w(0),
    m_webpageId(0),
    m_classType(typePageBlockUnsupported)
{
    operator=(another);
}

PageBlock::PageBlock(const Null &null) :
    TelegramTypeObject(null),
    m_audioId(0),
    m_authorPhotoId(0),
    m_cover(0),
    m_date(0),
    m_flags(0),
    m_h(0),
    m_ordered(false),
    m_photoId(0),
    m_posterPhotoId(0),
    m_publishedDate(0),
    m_videoId(0),
    m_w(0),
    m_webpageId(0),
    m_classType(typePageBlockUnsupported)
{
}

PageBlock::~PageBlock() {
    if(m_cover) delete m_cover;
}

void PageBlock::setAllowScrolling(bool allowScrolling) {
    if(allowScrolling) m_flags = (m_flags | (1<<3));
    else m_flags = (m_flags & ~(1<<3));
}

bool PageBlock::allowScrolling() const {
    return (m_flags & 1<<3);
}

void PageBlock::setAudioId(qint64 audioId) {
    m_audioId = audioId;
}

qint64 PageBlock::audioId() const {
    return m_audioId;
}

void PageBlock::setAuthorString(const QString &authorString) {
    m_authorString = authorString;
}

QString PageBlock::authorString() const {
    return m_authorString;
}

void PageBlock::setAuthorRichText(const RichText &authorRichText) {
    m_authorRichText = authorRichText;
}

RichText PageBlock::authorRichText() const {
    return m_authorRichText;
}

void PageBlock::setAuthorPhotoId(qint64 authorPhotoId) {
    m_authorPhotoId = authorPhotoId;
}

qint64 PageBlock::authorPhotoId() const {
    return m_authorPhotoId;
}

void PageBlock::setAutoplay(bool autoplay) {
    if(autoplay) m_flags = (m_flags | (1<<0));
    else m_flags = (m_flags & ~(1<<0));
}

bool PageBlock::autoplay() const {
    return (m_flags & 1<<0);
}

void PageBlock::setBlocks(const QList<PageBlock> &blocks) {
    m_blocks = blocks;
}

QList<PageBlock> PageBlock::blocks() const {
    return m_blocks;
}

void PageBlock::setCaption(const RichText &caption) {
    m_caption = caption;
}

RichText PageBlock::caption() const {
    return m_caption;
}

void PageBlock::setChannel(const Chat &channel) {
    m_channel = channel;
}

Chat PageBlock::channel() const {
    return m_channel;
}

void PageBlock::setCover(const PageBlock &cover) {
    if(cover.isNull()) {
        if(m_cover) delete m_cover;
        m_cover = 0;
        return;
    }
    if(!m_cover) m_cover = new PageBlock();
    *m_cover = cover;
}

PageBlock PageBlock::cover() const {
    return m_cover? *m_cover : PageBlock(PageBlock::null);
}

void PageBlock::setDate(qint32 date) {
    m_date = date;
}

qint32 PageBlock::date() const {
    return m_date;
}

void PageBlock::setFlags(qint32 flags) {
    m_flags = flags;
}

qint32 PageBlock::flags() const {
    return m_flags;
}

void PageBlock::setFullWidth(bool fullWidth) {
    if(fullWidth) m_flags = (m_flags | (1<<0));
    else m_flags = (m_flags & ~(1<<0));
}

bool PageBlock::fullWidth() const {
    return (m_flags & 1<<0);
}

void PageBlock::setH(qint32 h) {
    m_h = h;
}

qint32 PageBlock::h() const {
    return m_h;
}

void PageBlock::setHtml(const QString &html) {
    if(!html.isNull()) m_flags = (m_flags | (1<<2));
    else m_flags = (m_flags & ~(1<<2));
    m_html = html;
}

QString PageBlock::html() const {
    return m_html;
}

void PageBlock::setItemsVectorPageBlock(const QList<PageBlock> &itemsVectorPageBlock) {
    m_itemsVectorPageBlock = itemsVectorPageBlock;
}

QList<PageBlock> PageBlock::itemsVectorPageBlock() const {
    return m_itemsVectorPageBlock;
}

void PageBlock::setItemsVectorRichText(const QList<RichText> &itemsVectorRichText) {
    m_itemsVectorRichText = itemsVectorRichText;
}

QList<RichText> PageBlock::itemsVectorRichText() const {
    return m_itemsVectorRichText;
}

void PageBlock::setLanguage(const QString &language) {
    m_language = language;
}

QString PageBlock::language() const {
    return m_language;
}

void PageBlock::setLoop(bool loop) {
    if(loop) m_flags = (m_flags | (1<<1));
    else m_flags = (m_flags & ~(1<<1));
}

bool PageBlock::loop() const {
    return (m_flags & 1<<1);
}

void PageBlock::setName(const QString &name) {
    m_name = name;
}

QString PageBlock::name() const {
    return m_name;
}

void PageBlock::setOrdered(bool ordered) {
    m_ordered = ordered;
}

bool PageBlock::ordered() const {
    return m_ordered;
}

void PageBlock::setPhotoId(qint64 photoId) {
    m_photoId = photoId;
}

qint64 PageBlock::photoId() const {
    return m_photoId;
}

void PageBlock::setPosterPhotoId(qint64 posterPhotoId) {
    if(posterPhotoId) m_flags = (m_flags | (1<<4));
    else m_flags = (m_flags & ~(1<<4));
    m_posterPhotoId = posterPhotoId;
}

qint64 PageBlock::posterPhotoId() const {
    return m_posterPhotoId;
}

void PageBlock::setPublishedDate(qint32 publishedDate) {
    m_publishedDate = publishedDate;
}

qint32 PageBlock::publishedDate() const {
    return m_publishedDate;
}

void PageBlock::setText(const RichText &text) {
    m_text = text;
}

RichText PageBlock::text() const {
    return m_text;
}

void PageBlock::setUrl(const QString &url) {
    if(!url.isNull()) m_flags = (m_flags | (1<<1));
    else m_flags = (m_flags & ~(1<<1));
    m_url = url;
}

QString PageBlock::url() const {
    return m_url;
}

void PageBlock::setVideoId(qint64 videoId) {
    m_videoId = videoId;
}

qint64 PageBlock::videoId() const {
    return m_videoId;
}

void PageBlock::setW(qint32 w) {
    m_w = w;
}

qint32 PageBlock::w() const {
    return m_w;
}

void PageBlock::setWebpageId(qint64 webpageId) {
    m_webpageId = webpageId;
}

qint64 PageBlock::webpageId() const {
    return m_webpageId;
}

bool PageBlock::operator ==(const PageBlock &b) const {
    return m_classType == b.m_classType &&
           m_audioId == b.m_audioId &&
           m_authorString == b.m_authorString &&
           m_authorRichText == b.m_authorRichText &&
           m_authorPhotoId == b.m_authorPhotoId &&
           m_blocks == b.m_blocks &&
           m_caption == b.m_caption &&
           m_channel == b.m_channel &&
           m_cover == b.m_cover &&
           m_date == b.m_date &&
           m_flags == b.m_flags &&
           m_h == b.m_h &&
           m_html == b.m_html &&
           m_itemsVectorPageBlock == b.m_itemsVectorPageBlock &&
           m_itemsVectorRichText == b.m_itemsVectorRichText &&
           m_language == b.m_language &&
           m_name == b.m_name &&
           m_ordered == b.m_ordered &&
           m_photoId == b.m_photoId &&
           m_posterPhotoId == b.m_posterPhotoId &&
           m_publishedDate == b.m_publishedDate &&
           m_text == b.m_text &&
           m_url == b.m_url &&
           m_videoId == b.m_videoId &&
           m_w == b.m_w &&
           m_webpageId == b.m_webpageId;
}

PageBlock &PageBlock::operator =(const PageBlock &b) {
    m_classType = b.m_classType;
    m_audioId = b.m_audioId;
    m_authorString = b.m_authorString;
    m_authorRichText = b.m_authorRichText;
    m_authorPhotoId = b.m_authorPhotoId;
    m_blocks = b.m_blocks;
    m_caption = b.m_caption;
    m_channel = b.m_channel;
    setCover(b.cover());
    m_date = b.m_date;
    m_flags = b.m_flags;
    m_h = b.m_h;
    m_html = b.m_html;
    m_itemsVectorPageBlock = b.m_itemsVectorPageBlock;
    m_itemsVectorRichText = b.m_itemsVectorRichText;
    m_language = b.m_language;
    m_name = b.m_name;
    m_ordered = b.m_ordered;
    m_photoId = b.m_photoId;
    m_posterPhotoId = b.m_posterPhotoId;
    m_publishedDate = b.m_publishedDate;
    m_text = b.m_text;
    m_url = b.m_url;
    m_videoId = b.m_videoId;
    m_w = b.m_w;
    m_webpageId = b.m_webpageId;
    setNull(b.isNull());
    return *this;
}

void PageBlock::setClassType(PageBlock::PageBlockClassType classType) {
    m_classType = classType;
}

PageBlock::PageBlockClassType PageBlock::classType() const {
    return m_classType;
}

bool PageBlock::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typePageBlockUnsupported: {
        m_classType = static_cast<PageBlockClassType>(x);
        return true;
    }
        break;

    case typePageBlockTitle: {
        m_text.fetch(in);
        m_classType = static_cast<PageBlockClassType>(x);
        return true;
    }
        break;

    case typePageBlockSubtitle: {
        m_text.fetch(in);
        m_classType = static_cast<PageBlockClassType>(x);
        return true;
    }
        break;

    case typePageBlockAuthorDate: {
        m_authorRichText.fetch(in);
        m_publishedDate = in->fetchInt();
        m_classType = static_cast<PageBlockClassType>(x);
        return true;
    }
        break;

    case typePageBlockHeader: {
        m_text.fetch(in);
        m_classType = static_cast<PageBlockClassType>(x);
        return true;
    }
        break;

    case typePageBlockSubheader: {
        m_text.fetch(in);
        m_classType = static_cast<PageBlockClassType>(x);
        return true;
    }
        break;

    case typePageBlockParagraph: {
        m_text.fetch(in);
        m_classType = static_cast<PageBlockClassType>(x);
        return true;
    }
        break;

    case typePageBlockPreformatted: {
        m_text.fetch(in);
        m_language = in->fetchQString();
        m_classType = static_cast<PageBlockClassType>(x);
        return true;
    }
        break;

    case typePageBlockFooter: {
        m_text.fetch(in);
        m_classType = static_cast<PageBlockClassType>(x);
        return true;
    }
        break;

    case typePageBlockDivider: {
        m_classType = static_cast<PageBlockClassType>(x);
        return true;
    }
        break;

    case typePageBlockAnchor: {
        m_name = in->fetchQString();
        m_classType = static_cast<PageBlockClassType>(x);
        return true;
    }
        break;

    case typePageBlockList: {
        m_ordered = in->fetchBool();
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_itemsVectorRichText_length = in->fetchInt();
        m_itemsVectorRichText.clear();
        for (qint32 i = 0; i < m_itemsVectorRichText_length; i++) {
            RichText type;
            type.fetch(in);
            m_itemsVectorRichText.append(type);
        }
        m_classType = static_cast<PageBlockClassType>(x);
        return true;
    }
        break;

    case typePageBlockBlockquote: {
        m_text.fetch(in);
        m_caption.fetch(in);
        m_classType = static_cast<PageBlockClassType>(x);
        return true;
    }
        break;

    case typePageBlockPullquote: {
        m_text.fetch(in);
        m_caption.fetch(in);
        m_classType = static_cast<PageBlockClassType>(x);
        return true;
    }
        break;

    case typePageBlockPhoto: {
        m_photoId = in->fetchLong();
        m_caption.fetch(in);
        m_classType = static_cast<PageBlockClassType>(x);
        return true;
    }
        break;

    case typePageBlockVideo: {
        m_flags = in->fetchInt();
        m_videoId = in->fetchLong();
        m_caption.fetch(in);
        m_classType = static_cast<PageBlockClassType>(x);
        return true;
    }
        break;

    case typePageBlockCover: {
        if(!m_cover) m_cover = new PageBlock();
        m_cover->fetch(in);
        m_classType = static_cast<PageBlockClassType>(x);
        return true;
    }
        break;

    case typePageBlockEmbed: {
        m_flags = in->fetchInt();
        if(m_flags & 1<<1) {
            m_url = in->fetchQString();
        }
        if(m_flags & 1<<2) {
            m_html = in->fetchQString();
        }
        if(m_flags & 1<<4) {
            m_posterPhotoId = in->fetchLong();
        }
        m_w = in->fetchInt();
        m_h = in->fetchInt();
        m_caption.fetch(in);
        m_classType = static_cast<PageBlockClassType>(x);
        return true;
    }
        break;

    case typePageBlockEmbedPost: {
        m_url = in->fetchQString();
        m_webpageId = in->fetchLong();
        m_authorPhotoId = in->fetchLong();
        m_authorString = in->fetchQString();
        m_date = in->fetchInt();
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_blocks_length = in->fetchInt();
        m_blocks.clear();
        for (qint32 i = 0; i < m_blocks_length; i++) {
            PageBlock type;
            type.fetch(in);
            m_blocks.append(type);
        }
        m_caption.fetch(in);
        m_classType = static_cast<PageBlockClassType>(x);
        return true;
    }
        break;

    case typePageBlockCollage: {
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_itemsVectorPageBlock_length = in->fetchInt();
        m_itemsVectorPageBlock.clear();
        for (qint32 i = 0; i < m_itemsVectorPageBlock_length; i++) {
            PageBlock type;
            type.fetch(in);
            m_itemsVectorPageBlock.append(type);
        }
        m_caption.fetch(in);
        m_classType = static_cast<PageBlockClassType>(x);
        return true;
    }
        break;

    case typePageBlockSlideshow: {
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_itemsVectorPageBlock_length = in->fetchInt();
        m_itemsVectorPageBlock.clear();
        for (qint32 i = 0; i < m_itemsVectorPageBlock_length; i++) {
            PageBlock type;
            type.fetch(in);
            m_itemsVectorPageBlock.append(type);
        }
        m_caption.fetch(in);
        m_classType = static_cast<PageBlockClassType>(x);
        return true;
    }
        break;

    case typePageBlockChannel: {
        m_channel.fetch(in);
        m_classType = static_cast<PageBlockClassType>(x);
        return true;
    }
        break;

    case typePageBlockAudio: {
        m_audioId = in->fetchLong();
        m_caption.fetch(in);
        m_classType = static_cast<PageBlockClassType>(x);
        return true;
    }
        break;

    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool PageBlock::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typePageBlockUnsupported: {
        return true;
    }
        break;

    case typePageBlockTitle: {
        m_text.push(out);
        return true;
    }
        break;

    case typePageBlockSubtitle: {
        m_text.push(out);
        return true;
    }
        break;

    case typePageBlockAuthorDate: {
        m_authorRichText.push(out);
        out->appendInt(m_publishedDate);
        return true;
    }
        break;

    case typePageBlockHeader: {
        m_text.push(out);
        return true;
    }
        break;

    case typePageBlockSubheader: {
        m_text.push(out);
        return true;
    }
        break;

    case typePageBlockParagraph: {
        m_text.push(out);
        return true;
    }
        break;

    case typePageBlockPreformatted: {
        m_text.push(out);
        out->appendQString(m_language);
        return true;
    }
        break;

    case typePageBlockFooter: {
        m_text.push(out);
        return true;
    }
        break;

    case typePageBlockDivider: {
        return true;
    }
        break;

    case typePageBlockAnchor: {
        out->appendQString(m_name);
        return true;
    }
        break;

    case typePageBlockList: {
        out->appendBool(m_ordered);
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_itemsVectorRichText.count());
        for (qint32 i = 0; i < m_itemsVectorRichText.count(); i++) {
            m_itemsVectorRichText[i].push(out);
        }
        return true;
    }
        break;

    case typePageBlockBlockquote: {
        m_text.push(out);
        m_caption.push(out);
        return true;
    }
        break;

    case typePageBlockPullquote: {
        m_text.push(out);
        m_caption.push(out);
        return true;
    }
        break;

    case typePageBlockPhoto: {
        out->appendLong(m_photoId);
        m_caption.push(out);
        return true;
    }
        break;

    case typePageBlockVideo: {
        out->appendInt(m_flags);
        out->appendLong(m_videoId);
        m_caption.push(out);
        return true;
    }
        break;

    case typePageBlockCover: {
        if(m_cover) m_cover->push(out);
        else PageBlock().push(out);
        return true;
    }
        break;

    case typePageBlockEmbed: {
        out->appendInt(m_flags);
        if(m_flags & 1<<1) {
            out->appendQString(m_url);
        }
        if(m_flags & 1<<2) {
            out->appendQString(m_html);
        }
        if(m_flags & 1<<4) {
            out->appendLong(m_posterPhotoId);
        }
        out->appendInt(m_w);
        out->appendInt(m_h);
        m_caption.push(out);
        return true;
    }
        break;

    case typePageBlockEmbedPost: {
        out->appendQString(m_url);
        out->appendLong(m_webpageId);
        out->appendLong(m_authorPhotoId);
        out->appendQString(m_authorString);
        out->appendInt(m_date);
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_blocks.count());
        for (qint32 i = 0; i < m_blocks.count(); i++) {
            m_blocks[i].push(out);
        }
        m_caption.push(out);
        return true;
    }
        break;

    case typePageBlockCollage: {
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_itemsVectorPageBlock.count());
        for (qint32 i = 0; i < m_itemsVectorPageBlock.count(); i++) {
            m_itemsVectorPageBlock[i].push(out);
        }
        m_caption.push(out);
        return true;
    }
        break;

    case typePageBlockSlideshow: {
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_itemsVectorPageBlock.count());
        for (qint32 i = 0; i < m_itemsVectorPageBlock.count(); i++) {
            m_itemsVectorPageBlock[i].push(out);
        }
        m_caption.push(out);
        return true;
    }
        break;

    case typePageBlockChannel: {
        m_channel.push(out);
        return true;
    }
        break;

    case typePageBlockAudio: {
        out->appendLong(m_audioId);
        m_caption.push(out);
        return true;
    }
        break;

    default:
        return false;
    }
}

QMap<QString, QVariant> PageBlock::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typePageBlockUnsupported: {
        result["classType"] = "PageBlock::typePageBlockUnsupported";
        return result;
    }
        break;

    case typePageBlockTitle: {
        result["classType"] = "PageBlock::typePageBlockTitle";
        if( !m_text.isNull() ) result["text"] = m_text.toMap();
        return result;
    }
        break;

    case typePageBlockSubtitle: {
        result["classType"] = "PageBlock::typePageBlockSubtitle";
        if( !m_text.isNull() ) result["text"] = m_text.toMap();
        return result;
    }
        break;

    case typePageBlockAuthorDate: {
        result["classType"] = "PageBlock::typePageBlockAuthorDate";
        if( !m_authorRichText.isNull() ) result["authorRichText"] = m_authorRichText.toMap();
        if( publishedDate() ) result["publishedDate"] = QString::number(publishedDate());
        return result;
    }
        break;

    case typePageBlockHeader: {
        result["classType"] = "PageBlock::typePageBlockHeader";
        if( !m_text.isNull() ) result["text"] = m_text.toMap();
        return result;
    }
        break;

    case typePageBlockSubheader: {
        result["classType"] = "PageBlock::typePageBlockSubheader";
        if( !m_text.isNull() ) result["text"] = m_text.toMap();
        return result;
    }
        break;

    case typePageBlockParagraph: {
        result["classType"] = "PageBlock::typePageBlockParagraph";
        if( !m_text.isNull() ) result["text"] = m_text.toMap();
        return result;
    }
        break;

    case typePageBlockPreformatted: {
        result["classType"] = "PageBlock::typePageBlockPreformatted";
        if( !m_text.isNull() ) result["text"] = m_text.toMap();
        if( !m_language.isEmpty() ) result["language"] = QVariant::fromValue<QString>(m_language);
        return result;
    }
        break;

    case typePageBlockFooter: {
        result["classType"] = "PageBlock::typePageBlockFooter";
        if( !m_text.isNull() ) result["text"] = m_text.toMap();
        return result;
    }
        break;

    case typePageBlockDivider: {
        result["classType"] = "PageBlock::typePageBlockDivider";
        return result;
    }
        break;

    case typePageBlockAnchor: {
        result["classType"] = "PageBlock::typePageBlockAnchor";
        if( !m_name.isEmpty() ) result["name"] = QVariant::fromValue<QString>(m_name);
        return result;
    }
        break;

    case typePageBlockList: {
        result["classType"] = "PageBlock::typePageBlockList";
        if( ordered() ) result["ordered"] = QString::number(ordered());
        QList<QVariant> _itemsVectorRichText;
        for(const RichText &m__type: m_itemsVectorRichText)
            if( !m__type.isNull() ) _itemsVectorRichText << m__type.toMap();
        result["itemsVectorRichText"] = _itemsVectorRichText;
        return result;
    }
        break;

    case typePageBlockBlockquote: {
        result["classType"] = "PageBlock::typePageBlockBlockquote";
        if( !m_text.isNull() ) result["text"] = m_text.toMap();
        if( !m_caption.isNull() ) result["caption"] = m_caption.toMap();
        return result;
    }
        break;

    case typePageBlockPullquote: {
        result["classType"] = "PageBlock::typePageBlockPullquote";
        if( !m_text.isNull() ) result["text"] = m_text.toMap();
        if( !m_caption.isNull() ) result["caption"] = m_caption.toMap();
        return result;
    }
        break;

    case typePageBlockPhoto: {
        result["classType"] = "PageBlock::typePageBlockPhoto";
        if( photoId() ) result["photoId"] = QString::number(photoId());
        if( !m_caption.isNull() ) result["caption"] = m_caption.toMap();
        return result;
    }
        break;

    case typePageBlockVideo: {
        result["classType"] = "PageBlock::typePageBlockVideo";
        if( autoplay() ) result["autoplay"] = QString::number(autoplay());
        if( loop() ) result["loop"] = QString::number(loop());
        if( videoId() ) result["videoId"] = QString::number(videoId());
        if( !m_caption.isNull() ) result["caption"] = m_caption.toMap();
        return result;
    }
        break;

    case typePageBlockCover: {
        result["classType"] = "PageBlock::typePageBlockCover";
        result["cover"] = (m_cover? *m_cover : PageBlock()).toMap();
        return result;
    }
        break;

    case typePageBlockEmbed: {
        result["classType"] = "PageBlock::typePageBlockEmbed";
        if( fullWidth() ) result["fullWidth"] = QString::number(fullWidth());
        if( allowScrolling() ) result["allowScrolling"] = QString::number(allowScrolling());
        if( !m_url.isEmpty() ) result["url"] = QVariant::fromValue<QString>(m_url);
        if( !m_html.isEmpty() ) result["html"] = QVariant::fromValue<QString>(m_html);
        if( posterPhotoId() ) result["posterPhotoId"] = QString::number(posterPhotoId());
        if( w() ) result["w"] = QString::number(w());
        if( h() ) result["h"] = QString::number(h());
        if( !m_caption.isNull() ) result["caption"] = m_caption.toMap();
        return result;
    }
        break;

    case typePageBlockEmbedPost: {
        result["classType"] = "PageBlock::typePageBlockEmbedPost";
        if( !m_url.isEmpty() ) result["url"] = QVariant::fromValue<QString>(m_url);
        if( webpageId() ) result["webpageId"] = QString::number(webpageId());
        if( authorPhotoId() ) result["authorPhotoId"] = QString::number(authorPhotoId());
        if( !m_authorString.isEmpty() ) result["authorString"] = QVariant::fromValue<QString>(m_authorString);
        if( date() ) result["date"] = QString::number(date());
        QList<QVariant> _blocks;
        for(const PageBlock &m__type: m_blocks)
            if( !m__type.isNull() ) _blocks << m__type.toMap();
        result["blocks"] = _blocks;
        if( !m_caption.isNull() ) result["caption"] = m_caption.toMap();
        return result;
    }
        break;

    case typePageBlockCollage: {
        result["classType"] = "PageBlock::typePageBlockCollage";
        QList<QVariant> _itemsVectorPageBlock;
        for(const PageBlock &m__type: m_itemsVectorPageBlock)
            if( !m__type.isNull() ) _itemsVectorPageBlock << m__type.toMap();
        result["itemsVectorPageBlock"] = _itemsVectorPageBlock;
        if( !m_caption.isNull() ) result["caption"] = m_caption.toMap();
        return result;
    }
        break;

    case typePageBlockSlideshow: {
        result["classType"] = "PageBlock::typePageBlockSlideshow";
        QList<QVariant> _itemsVectorPageBlock;
        for(const PageBlock &m__type: m_itemsVectorPageBlock)
            if( !m__type.isNull() ) _itemsVectorPageBlock << m__type.toMap();
        result["itemsVectorPageBlock"] = _itemsVectorPageBlock;
        if( !m_caption.isNull() ) result["caption"] = m_caption.toMap();
        return result;
    }
        break;

    case typePageBlockChannel: {
        result["classType"] = "PageBlock::typePageBlockChannel";
        if( !m_channel.isNull() ) result["channel"] = m_channel.toMap();
        return result;
    }
        break;

    case typePageBlockAudio: {
        result["classType"] = "PageBlock::typePageBlockAudio";
        if( audioId() ) result["audioId"] = QString::number(audioId());
        if( !m_caption.isNull() ) result["caption"] = m_caption.toMap();
        return result;
    }
        break;

    default:
        return result;
    }
}

PageBlock PageBlock::fromMap(const QMap<QString, QVariant> &map) {
    PageBlock result;
    if(map.value("classType").toString() == "PageBlock::typePageBlockUnsupported") {
        result.setClassType(typePageBlockUnsupported);
        return result;
    }
    if(map.value("classType").toString() == "PageBlock::typePageBlockTitle") {
        result.setClassType(typePageBlockTitle);
        QVariant _text_var = map.value("text");
        if( !_text_var.isNull() )
            result.setText( RichText::fromMap(_text_var.toMap()) );

        return result;
    }
    if(map.value("classType").toString() == "PageBlock::typePageBlockSubtitle") {
        result.setClassType(typePageBlockSubtitle);
        QVariant _text_var = map.value("text");
        if( !_text_var.isNull() )
            result.setText( RichText::fromMap(_text_var.toMap()) );

        return result;
    }
    if(map.value("classType").toString() == "PageBlock::typePageBlockAuthorDate") {
        result.setClassType(typePageBlockAuthorDate);
        QVariant _authorRichText_var = map.value("authorRichText");
        if( !_authorRichText_var.isNull() )
            result.setAuthorRichText( RichText::fromMap(_authorRichText_var.toMap()) );

        QVariant _publishedDate_var = map.value("publishedDate");
        if( !_publishedDate_var.isNull() ) {
            _publishedDate_var.convert( QVariant::nameToType("qint32") );
            result.setPublishedDate( _publishedDate_var.value<qint32>() );
        }

        return result;
    }
    if(map.value("classType").toString() == "PageBlock::typePageBlockHeader") {
        result.setClassType(typePageBlockHeader);
        QVariant _text_var = map.value("text");
        if( !_text_var.isNull() )
            result.setText( RichText::fromMap(_text_var.toMap()) );

        return result;
    }
    if(map.value("classType").toString() == "PageBlock::typePageBlockSubheader") {
        result.setClassType(typePageBlockSubheader);
        QVariant _text_var = map.value("text");
        if( !_text_var.isNull() )
            result.setText( RichText::fromMap(_text_var.toMap()) );

        return result;
    }
    if(map.value("classType").toString() == "PageBlock::typePageBlockParagraph") {
        result.setClassType(typePageBlockParagraph);
        QVariant _text_var = map.value("text");
        if( !_text_var.isNull() )
            result.setText( RichText::fromMap(_text_var.toMap()) );

        return result;
    }
    if(map.value("classType").toString() == "PageBlock::typePageBlockPreformatted") {
        result.setClassType(typePageBlockPreformatted);
        QVariant _text_var = map.value("text");
        if( !_text_var.isNull() )
            result.setText( RichText::fromMap(_text_var.toMap()) );

        QVariant _language_var = map.value("language");
        if( !_language_var.isNull() ) {
            _language_var.convert( QVariant::nameToType("QString") );
            result.setLanguage( _language_var.value<QString>() );
        }

        return result;
    }
    if(map.value("classType").toString() == "PageBlock::typePageBlockFooter") {
        result.setClassType(typePageBlockFooter);
        QVariant _text_var = map.value("text");
        if( !_text_var.isNull() )
            result.setText( RichText::fromMap(_text_var.toMap()) );

        return result;
    }
    if(map.value("classType").toString() == "PageBlock::typePageBlockDivider") {
        result.setClassType(typePageBlockDivider);
        return result;
    }
    if(map.value("classType").toString() == "PageBlock::typePageBlockAnchor") {
        result.setClassType(typePageBlockAnchor);
        QVariant _name_var = map.value("name");
        if( !_name_var.isNull() ) {
            _name_var.convert( QVariant::nameToType("QString") );
            result.setName( _name_var.value<QString>() );
        }

        return result;
    }
    if(map.value("classType").toString() == "PageBlock::typePageBlockList") {
        result.setClassType(typePageBlockList);
        QVariant _ordered_var = map.value("ordered");
        if( !_ordered_var.isNull() ) {
            _ordered_var.convert( QVariant::nameToType("bool") );
            result.setOrdered( _ordered_var.value<bool>() );
        }

        QList<QVariant> map_itemsVectorRichText = map["itemsVectorRichText"].toList();
        QList<RichText> _itemsVectorRichText;
        for(const QVariant &var: map_itemsVectorRichText)
            _itemsVectorRichText << RichText::fromMap(var.toMap());
        result.setItemsVectorRichText(_itemsVectorRichText);
        return result;
    }
    if(map.value("classType").toString() == "PageBlock::typePageBlockBlockquote") {
        result.setClassType(typePageBlockBlockquote);
        QVariant _text_var = map.value("text");
        if( !_text_var.isNull() )
            result.setText( RichText::fromMap(_text_var.toMap()) );

        QVariant _caption_var = map.value("caption");
        if( !_caption_var.isNull() )
            result.setCaption( RichText::fromMap(_caption_var.toMap()) );

        return result;
    }
    if(map.value("classType").toString() == "PageBlock::typePageBlockPullquote") {
        result.setClassType(typePageBlockPullquote);
        QVariant _text_var = map.value("text");
        if( !_text_var.isNull() )
            result.setText( RichText::fromMap(_text_var.toMap()) );

        QVariant _caption_var = map.value("caption");
        if( !_caption_var.isNull() )
            result.setCaption( RichText::fromMap(_caption_var.toMap()) );

        return result;
    }
    if(map.value("classType").toString() == "PageBlock::typePageBlockPhoto") {
        result.setClassType(typePageBlockPhoto);
        QVariant _photoId_var = map.value("photoId");
        if( !_photoId_var.isNull() ) {
            _photoId_var.convert( QVariant::nameToType("qint64") );
            result.setPhotoId( _photoId_var.value<qint64>() );
        }

        QVariant _caption_var = map.value("caption");
        if( !_caption_var.isNull() )
            result.setCaption( RichText::fromMap(_caption_var.toMap()) );

        return result;
    }
    if(map.value("classType").toString() == "PageBlock::typePageBlockVideo") {
        result.setClassType(typePageBlockVideo);
        QVariant _autoplay_var = map.value("autoplay");
        if( !_autoplay_var.isNull() ) {
            _autoplay_var.convert( QVariant::nameToType("bool") );
            result.setAutoplay( _autoplay_var.value<bool>() );
        }

        QVariant _loop_var = map.value("loop");
        if( !_loop_var.isNull() ) {
            _loop_var.convert( QVariant::nameToType("bool") );
            result.setLoop( _loop_var.value<bool>() );
        }

        QVariant _videoId_var = map.value("videoId");
        if( !_videoId_var.isNull() ) {
            _videoId_var.convert( QVariant::nameToType("qint64") );
            result.setVideoId( _videoId_var.value<qint64>() );
        }

        QVariant _caption_var = map.value("caption");
        if( !_caption_var.isNull() )
            result.setCaption( RichText::fromMap(_caption_var.toMap()) );

        return result;
    }
    if(map.value("classType").toString() == "PageBlock::typePageBlockCover") {
        result.setClassType(typePageBlockCover);
        QVariant _cover_var = map.value("cover");
        if( !_cover_var.isNull() )
            result.setCover( PageBlock::fromMap(_cover_var.toMap()) );

        return result;
    }
    if(map.value("classType").toString() == "PageBlock::typePageBlockEmbed") {
        result.setClassType(typePageBlockEmbed);
        QVariant _fullWidth_var = map.value("fullWidth");
        if( !_fullWidth_var.isNull() ) {
            _fullWidth_var.convert( QVariant::nameToType("bool") );
            result.setFullWidth( _fullWidth_var.value<bool>() );
        }

        QVariant _allowScrolling_var = map.value("allowScrolling");
        if( !_allowScrolling_var.isNull() ) {
            _allowScrolling_var.convert( QVariant::nameToType("bool") );
            result.setAllowScrolling( _allowScrolling_var.value<bool>() );
        }

        QVariant _url_var = map.value("url");
        if( !_url_var.isNull() ) {
            _url_var.convert( QVariant::nameToType("QString") );
            result.setUrl( _url_var.value<QString>() );
        }

        QVariant _html_var = map.value("html");
        if( !_html_var.isNull() ) {
            _html_var.convert( QVariant::nameToType("QString") );
            result.setHtml( _html_var.value<QString>() );
        }

        QVariant _posterPhotoId_var = map.value("posterPhotoId");
        if( !_posterPhotoId_var.isNull() ) {
            _posterPhotoId_var.convert( QVariant::nameToType("qint64") );
            result.setPosterPhotoId( _posterPhotoId_var.value<qint64>() );
        }

        QVariant _w_var = map.value("w");
        if( !_w_var.isNull() ) {
            _w_var.convert( QVariant::nameToType("qint32") );
            result.setW( _w_var.value<qint32>() );
        }

        QVariant _h_var = map.value("h");
        if( !_h_var.isNull() ) {
            _h_var.convert( QVariant::nameToType("qint32") );
            result.setH( _h_var.value<qint32>() );
        }

        QVariant _caption_var = map.value("caption");
        if( !_caption_var.isNull() )
            result.setCaption( RichText::fromMap(_caption_var.toMap()) );

        return result;
    }
    if(map.value("classType").toString() == "PageBlock::typePageBlockEmbedPost") {
        result.setClassType(typePageBlockEmbedPost);
        QVariant _url_var = map.value("url");
        if( !_url_var.isNull() ) {
            _url_var.convert( QVariant::nameToType("QString") );
            result.setUrl( _url_var.value<QString>() );
        }

        QVariant _webpageId_var = map.value("webpageId");
        if( !_webpageId_var.isNull() ) {
            _webpageId_var.convert( QVariant::nameToType("qint64") );
            result.setWebpageId( _webpageId_var.value<qint64>() );
        }

        QVariant _authorPhotoId_var = map.value("authorPhotoId");
        if( !_authorPhotoId_var.isNull() ) {
            _authorPhotoId_var.convert( QVariant::nameToType("qint64") );
            result.setAuthorPhotoId( _authorPhotoId_var.value<qint64>() );
        }

        QVariant _authorString_var = map.value("authorString");
        if( !_authorString_var.isNull() ) {
            _authorString_var.convert( QVariant::nameToType("QString") );
            result.setAuthorString( _authorString_var.value<QString>() );
        }

        QVariant _date_var = map.value("date");
        if( !_date_var.isNull() ) {
            _date_var.convert( QVariant::nameToType("qint32") );
            result.setDate( _date_var.value<qint32>() );
        }

        QList<QVariant> map_blocks = map["blocks"].toList();
        QList<PageBlock> _blocks;
        for(const QVariant &var: map_blocks)
            _blocks << PageBlock::fromMap(var.toMap());
        result.setBlocks(_blocks);
        QVariant _caption_var = map.value("caption");
        if( !_caption_var.isNull() )
            result.setCaption( RichText::fromMap(_caption_var.toMap()) );

        return result;
    }
    if(map.value("classType").toString() == "PageBlock::typePageBlockCollage") {
        result.setClassType(typePageBlockCollage);
        QList<QVariant> map_itemsVectorPageBlock = map["itemsVectorPageBlock"].toList();
        QList<PageBlock> _itemsVectorPageBlock;
        for(const QVariant &var: map_itemsVectorPageBlock)
            _itemsVectorPageBlock << PageBlock::fromMap(var.toMap());
        result.setItemsVectorPageBlock(_itemsVectorPageBlock);
        QVariant _caption_var = map.value("caption");
        if( !_caption_var.isNull() )
            result.setCaption( RichText::fromMap(_caption_var.toMap()) );

        return result;
    }
    if(map.value("classType").toString() == "PageBlock::typePageBlockSlideshow") {
        result.setClassType(typePageBlockSlideshow);
        QList<QVariant> map_itemsVectorPageBlock = map["itemsVectorPageBlock"].toList();
        QList<PageBlock> _itemsVectorPageBlock;
        for(const QVariant &var: map_itemsVectorPageBlock)
            _itemsVectorPageBlock << PageBlock::fromMap(var.toMap());
        result.setItemsVectorPageBlock(_itemsVectorPageBlock);
        QVariant _caption_var = map.value("caption");
        if( !_caption_var.isNull() )
            result.setCaption( RichText::fromMap(_caption_var.toMap()) );

        return result;
    }
    if(map.value("classType").toString() == "PageBlock::typePageBlockChannel") {
        result.setClassType(typePageBlockChannel);
        QVariant _channel_var = map.value("channel");
        if( !_channel_var.isNull() )
            result.setChannel( Chat::fromMap(_channel_var.toMap()) );

        return result;
    }
    if(map.value("classType").toString() == "PageBlock::typePageBlockAudio") {
        result.setClassType(typePageBlockAudio);
        QVariant _audioId_var = map.value("audioId");
        if( !_audioId_var.isNull() ) {
            _audioId_var.convert( QVariant::nameToType("qint64") );
            result.setAudioId( _audioId_var.value<qint64>() );
        }

        QVariant _caption_var = map.value("caption");
        if( !_caption_var.isNull() )
            result.setCaption( RichText::fromMap(_caption_var.toMap()) );

        return result;
    }
    return result;
}

PageBlock PageBlock::fromJson(const QString &json) {
    return PageBlock::fromMap(QJsonDocument::fromJson(json.toUtf8()).toVariant().toMap());
}

QByteArray PageBlock::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const PageBlock &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case PageBlock::typePageBlockUnsupported:

        break;
    case PageBlock::typePageBlockTitle:
        stream << item.text();
        break;
    case PageBlock::typePageBlockSubtitle:
        stream << item.text();
        break;
    case PageBlock::typePageBlockAuthorDate:
        stream << item.authorRichText();
        stream << item.publishedDate();
        break;
    case PageBlock::typePageBlockHeader:
        stream << item.text();
        break;
    case PageBlock::typePageBlockSubheader:
        stream << item.text();
        break;
    case PageBlock::typePageBlockParagraph:
        stream << item.text();
        break;
    case PageBlock::typePageBlockPreformatted:
        stream << item.text();
        stream << item.language();
        break;
    case PageBlock::typePageBlockFooter:
        stream << item.text();
        break;
    case PageBlock::typePageBlockDivider:

        break;
    case PageBlock::typePageBlockAnchor:
        stream << item.name();
        break;
    case PageBlock::typePageBlockList:
        stream << item.ordered();
        stream << item.itemsVectorRichText();
        break;
    case PageBlock::typePageBlockBlockquote:
        stream << item.text();
        stream << item.caption();
        break;
    case PageBlock::typePageBlockPullquote:
        stream << item.text();
        stream << item.caption();
        break;
    case PageBlock::typePageBlockPhoto:
        stream << item.photoId();
        stream << item.caption();
        break;
    case PageBlock::typePageBlockVideo:
        stream << item.flags();
        stream << item.videoId();
        stream << item.caption();
        break;
    case PageBlock::typePageBlockCover:
        stream << item.cover();
        break;
    case PageBlock::typePageBlockEmbed:
        stream << item.flags();
        stream << item.url();
        stream << item.html();
        stream << item.posterPhotoId();
        stream << item.w();
        stream << item.h();
        stream << item.caption();
        break;
    case PageBlock::typePageBlockEmbedPost:
        stream << item.url();
        stream << item.webpageId();
        stream << item.authorPhotoId();
        stream << item.authorString();
        stream << item.date();
        stream << item.blocks();
        stream << item.caption();
        break;
    case PageBlock::typePageBlockCollage:
        stream << item.itemsVectorPageBlock();
        stream << item.caption();
        break;
    case PageBlock::typePageBlockSlideshow:
        stream << item.itemsVectorPageBlock();
        stream << item.caption();
        break;
    case PageBlock::typePageBlockChannel:
        stream << item.channel();
        break;
    case PageBlock::typePageBlockAudio:
        stream << item.audioId();
        stream << item.caption();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, PageBlock &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<PageBlock::PageBlockClassType>(type));
    switch(type) {
    case PageBlock::typePageBlockUnsupported: {

    }
        break;
    case PageBlock::typePageBlockTitle: {
        RichText m_text;
        stream >> m_text;
        item.setText(m_text);
    }
        break;
    case PageBlock::typePageBlockSubtitle: {
        RichText m_text;
        stream >> m_text;
        item.setText(m_text);
    }
        break;
    case PageBlock::typePageBlockAuthorDate: {
        RichText m_author_RichText;
        stream >> m_author_RichText;
        item.setAuthorRichText(m_author_RichText);
        qint32 m_published_date;
        stream >> m_published_date;
        item.setPublishedDate(m_published_date);
    }
        break;
    case PageBlock::typePageBlockHeader: {
        RichText m_text;
        stream >> m_text;
        item.setText(m_text);
    }
        break;
    case PageBlock::typePageBlockSubheader: {
        RichText m_text;
        stream >> m_text;
        item.setText(m_text);
    }
        break;
    case PageBlock::typePageBlockParagraph: {
        RichText m_text;
        stream >> m_text;
        item.setText(m_text);
    }
        break;
    case PageBlock::typePageBlockPreformatted: {
        RichText m_text;
        stream >> m_text;
        item.setText(m_text);
        QString m_language;
        stream >> m_language;
        item.setLanguage(m_language);
    }
        break;
    case PageBlock::typePageBlockFooter: {
        RichText m_text;
        stream >> m_text;
        item.setText(m_text);
    }
        break;
    case PageBlock::typePageBlockDivider: {

    }
        break;
    case PageBlock::typePageBlockAnchor: {
        QString m_name;
        stream >> m_name;
        item.setName(m_name);
    }
        break;
    case PageBlock::typePageBlockList: {
        bool m_ordered;
        stream >> m_ordered;
        item.setOrdered(m_ordered);
        QList<RichText> m_items_VectorRichText;
        stream >> m_items_VectorRichText;
        item.setItemsVectorRichText(m_items_VectorRichText);
    }
        break;
    case PageBlock::typePageBlockBlockquote: {
        RichText m_text;
        stream >> m_text;
        item.setText(m_text);
        RichText m_caption;
        stream >> m_caption;
        item.setCaption(m_caption);
    }
        break;
    case PageBlock::typePageBlockPullquote: {
        RichText m_text;
        stream >> m_text;
        item.setText(m_text);
        RichText m_caption;
        stream >> m_caption;
        item.setCaption(m_caption);
    }
        break;
    case PageBlock::typePageBlockPhoto: {
        qint64 m_photo_id;
        stream >> m_photo_id;
        item.setPhotoId(m_photo_id);
        RichText m_caption;
        stream >> m_caption;
        item.setCaption(m_caption);
    }
        break;
    case PageBlock::typePageBlockVideo: {
        qint32 m_flags;
        stream >> m_flags;
        item.setFlags(m_flags);
        qint64 m_video_id;
        stream >> m_video_id;
        item.setVideoId(m_video_id);
        RichText m_caption;
        stream >> m_caption;
        item.setCaption(m_caption);
    }
        break;
    case PageBlock::typePageBlockCover: {
        PageBlock m_cover;
        stream >> m_cover;
        item.setCover(m_cover);
    }
        break;
    case PageBlock::typePageBlockEmbed: {
        qint32 m_flags;
        stream >> m_flags;
        item.setFlags(m_flags);
        QString m_url;
        stream >> m_url;
        item.setUrl(m_url);
        QString m_html;
        stream >> m_html;
        item.setHtml(m_html);
        qint64 m_poster_photo_id;
        stream >> m_poster_photo_id;
        item.setPosterPhotoId(m_poster_photo_id);
        qint32 m_w;
        stream >> m_w;
        item.setW(m_w);
        qint32 m_h;
        stream >> m_h;
        item.setH(m_h);
        RichText m_caption;
        stream >> m_caption;
        item.setCaption(m_caption);
    }
        break;
    case PageBlock::typePageBlockEmbedPost: {
        QString m_url;
        stream >> m_url;
        item.setUrl(m_url);
        qint64 m_webpage_id;
        stream >> m_webpage_id;
        item.setWebpageId(m_webpage_id);
        qint64 m_author_photo_id;
        stream >> m_author_photo_id;
        item.setAuthorPhotoId(m_author_photo_id);
        QString m_author_string;
        stream >> m_author_string;
        item.setAuthorString(m_author_string);
        qint32 m_date;
        stream >> m_date;
        item.setDate(m_date);
        QList<PageBlock> m_blocks;
        stream >> m_blocks;
        item.setBlocks(m_blocks);
        RichText m_caption;
        stream >> m_caption;
        item.setCaption(m_caption);
    }
        break;
    case PageBlock::typePageBlockCollage: {
        QList<PageBlock> m_items_VectorPageBlock;
        stream >> m_items_VectorPageBlock;
        item.setItemsVectorPageBlock(m_items_VectorPageBlock);
        RichText m_caption;
        stream >> m_caption;
        item.setCaption(m_caption);
    }
        break;
    case PageBlock::typePageBlockSlideshow: {
        QList<PageBlock> m_items_VectorPageBlock;
        stream >> m_items_VectorPageBlock;
        item.setItemsVectorPageBlock(m_items_VectorPageBlock);
        RichText m_caption;
        stream >> m_caption;
        item.setCaption(m_caption);
    }
        break;
    case PageBlock::typePageBlockChannel: {
        Chat m_channel;
        stream >> m_channel;
        item.setChannel(m_channel);
    }
        break;
    case PageBlock::typePageBlockAudio: {
        qint64 m_audio_id;
        stream >> m_audio_id;
        item.setAudioId(m_audio_id);
        RichText m_caption;
        stream >> m_caption;
        item.setCaption(m_caption);
    }
        break;
    }
    return stream;
}

/*QDebug operator<<(QDebug debug,  const PageBlock &item) {
    QDebugStateSaver saver(debug);
    Q_UNUSED(saver)
    debug.nospace() << "Telegram.PageBlock(";
    switch(item.classType()) {
    case PageBlock::typePageBlockUnsupported:
        debug.nospace() << "classType: typePageBlockUnsupported";
        break;
    case PageBlock::typePageBlockTitle:
        debug.nospace() << "classType: typePageBlockTitle";
        debug.nospace() << ", text: " << item.text();
        break;
    case PageBlock::typePageBlockSubtitle:
        debug.nospace() << "classType: typePageBlockSubtitle";
        debug.nospace() << ", text: " << item.text();
        break;
    case PageBlock::typePageBlockAuthorDate:
        debug.nospace() << "classType: typePageBlockAuthorDate";
        debug.nospace() << ", authorRichText: " << item.authorRichText();
        debug.nospace() << ", publishedDate: " << item.publishedDate();
        break;
    case PageBlock::typePageBlockHeader:
        debug.nospace() << "classType: typePageBlockHeader";
        debug.nospace() << ", text: " << item.text();
        break;
    case PageBlock::typePageBlockSubheader:
        debug.nospace() << "classType: typePageBlockSubheader";
        debug.nospace() << ", text: " << item.text();
        break;
    case PageBlock::typePageBlockParagraph:
        debug.nospace() << "classType: typePageBlockParagraph";
        debug.nospace() << ", text: " << item.text();
        break;
    case PageBlock::typePageBlockPreformatted:
        debug.nospace() << "classType: typePageBlockPreformatted";
        debug.nospace() << ", text: " << item.text();
        debug.nospace() << ", language: " << item.language();
        break;
    case PageBlock::typePageBlockFooter:
        debug.nospace() << "classType: typePageBlockFooter";
        debug.nospace() << ", text: " << item.text();
        break;
    case PageBlock::typePageBlockDivider:
        debug.nospace() << "classType: typePageBlockDivider";
        break;
    case PageBlock::typePageBlockAnchor:
        debug.nospace() << "classType: typePageBlockAnchor";
        debug.nospace() << ", name: " << item.name();
        break;
    case PageBlock::typePageBlockList:
        debug.nospace() << "classType: typePageBlockList";
        debug.nospace() << ", ordered: " << item.ordered();
        debug.nospace() << ", itemsVectorRichText: " << item.itemsVectorRichText();
        break;
    case PageBlock::typePageBlockBlockquote:
        debug.nospace() << "classType: typePageBlockBlockquote";
        debug.nospace() << ", text: " << item.text();
        debug.nospace() << ", caption: " << item.caption();
        break;
    case PageBlock::typePageBlockPullquote:
        debug.nospace() << "classType: typePageBlockPullquote";
        debug.nospace() << ", text: " << item.text();
        debug.nospace() << ", caption: " << item.caption();
        break;
    case PageBlock::typePageBlockPhoto:
        debug.nospace() << "classType: typePageBlockPhoto";
        debug.nospace() << ", photoId: " << item.photoId();
        debug.nospace() << ", caption: " << item.caption();
        break;
    case PageBlock::typePageBlockVideo:
        debug.nospace() << "classType: typePageBlockVideo";
        debug.nospace() << ", flags: " << item.flags();
        debug.nospace() << ", videoId: " << item.videoId();
        debug.nospace() << ", caption: " << item.caption();
        break;
    case PageBlock::typePageBlockCover:
        debug.nospace() << "classType: typePageBlockCover";
        debug.nospace() << ", cover: " << item.cover();
        break;
    case PageBlock::typePageBlockEmbed:
        debug.nospace() << "classType: typePageBlockEmbed";
        debug.nospace() << ", flags: " << item.flags();
        debug.nospace() << ", url: " << item.url();
        debug.nospace() << ", html: " << item.html();
        debug.nospace() << ", posterPhotoId: " << item.posterPhotoId();
        debug.nospace() << ", w: " << item.w();
        debug.nospace() << ", h: " << item.h();
        debug.nospace() << ", caption: " << item.caption();
        break;
    case PageBlock::typePageBlockEmbedPost:
        debug.nospace() << "classType: typePageBlockEmbedPost";
        debug.nospace() << ", url: " << item.url();
        debug.nospace() << ", webpageId: " << item.webpageId();
        debug.nospace() << ", authorPhotoId: " << item.authorPhotoId();
        debug.nospace() << ", authorString: " << item.authorString();
        debug.nospace() << ", date: " << item.date();
        debug.nospace() << ", blocks: " << item.blocks();
        debug.nospace() << ", caption: " << item.caption();
        break;
    case PageBlock::typePageBlockCollage:
        debug.nospace() << "classType: typePageBlockCollage";
        debug.nospace() << ", itemsVectorPageBlock: " << item.itemsVectorPageBlock();
        debug.nospace() << ", caption: " << item.caption();
        break;
    case PageBlock::typePageBlockSlideshow:
        debug.nospace() << "classType: typePageBlockSlideshow";
        debug.nospace() << ", itemsVectorPageBlock: " << item.itemsVectorPageBlock();
        debug.nospace() << ", caption: " << item.caption();
        break;
    case PageBlock::typePageBlockChannel:
        debug.nospace() << "classType: typePageBlockChannel";
        debug.nospace() << ", channel: " << item.channel();
        break;
    case PageBlock::typePageBlockAudio:
        debug.nospace() << "classType: typePageBlockAudio";
        debug.nospace() << ", audioId: " << item.audioId();
        debug.nospace() << ", caption: " << item.caption();
        break;
    }
    debug.nospace() << ")";
    return debug;
}
*/
