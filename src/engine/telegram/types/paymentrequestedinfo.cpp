// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "paymentrequestedinfo.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

PaymentRequestedInfo::PaymentRequestedInfo(PaymentRequestedInfoClassType classType, InboundPkt *in) :
    m_flags(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

PaymentRequestedInfo::PaymentRequestedInfo(InboundPkt *in) :
    m_flags(0),
    m_classType(typePaymentRequestedInfo)
{
    fetch(in);
}

PaymentRequestedInfo::PaymentRequestedInfo(const PaymentRequestedInfo &another) :
    TelegramTypeObject(),
    m_flags(0),
    m_classType(typePaymentRequestedInfo)
{
    operator=(another);
}

PaymentRequestedInfo::PaymentRequestedInfo(const Null &null) :
    TelegramTypeObject(null),
    m_flags(0),
    m_classType(typePaymentRequestedInfo)
{
}

PaymentRequestedInfo::~PaymentRequestedInfo() {
    
}

void PaymentRequestedInfo::setEmail(const QString &email) {
    if(!email.isNull()) m_flags = (m_flags | (1<<2));
    else m_flags = (m_flags & ~(1<<2));
    m_email = email;
}

QString PaymentRequestedInfo::email() const {
    return m_email;
}

void PaymentRequestedInfo::setFlags(qint32 flags) {
    m_flags = flags;
}

qint32 PaymentRequestedInfo::flags() const {
    return m_flags;
}

void PaymentRequestedInfo::setName(const QString &name) {
    if(!name.isNull()) m_flags = (m_flags | (1<<0));
    else m_flags = (m_flags & ~(1<<0));
    m_name = name;
}

QString PaymentRequestedInfo::name() const {
    return m_name;
}

void PaymentRequestedInfo::setPhone(const QString &phone) {
    if(!phone.isNull()) m_flags = (m_flags | (1<<1));
    else m_flags = (m_flags & ~(1<<1));
    m_phone = phone;
}

QString PaymentRequestedInfo::phone() const {
    return m_phone;
}

void PaymentRequestedInfo::setShippingAddress(const PostAddress &shippingAddress) {
    if(!shippingAddress.isNull()) m_flags = (m_flags | (1<<3));
    else m_flags = (m_flags & ~(1<<3));
    m_shippingAddress = shippingAddress;
}

PostAddress PaymentRequestedInfo::shippingAddress() const {
    return m_shippingAddress;
}

bool PaymentRequestedInfo::operator ==(const PaymentRequestedInfo &b) const {
    return m_classType == b.m_classType &&
           m_email == b.m_email &&
           m_flags == b.m_flags &&
           m_name == b.m_name &&
           m_phone == b.m_phone &&
           m_shippingAddress == b.m_shippingAddress;
}

PaymentRequestedInfo &PaymentRequestedInfo::operator =(const PaymentRequestedInfo &b) {
    m_classType = b.m_classType;
    m_email = b.m_email;
    m_flags = b.m_flags;
    m_name = b.m_name;
    m_phone = b.m_phone;
    m_shippingAddress = b.m_shippingAddress;
    setNull(b.isNull());
    return *this;
}

void PaymentRequestedInfo::setClassType(PaymentRequestedInfo::PaymentRequestedInfoClassType classType) {
    m_classType = classType;
}

PaymentRequestedInfo::PaymentRequestedInfoClassType PaymentRequestedInfo::classType() const {
    return m_classType;
}

bool PaymentRequestedInfo::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typePaymentRequestedInfo: {
        m_flags = in->fetchInt();
        if(m_flags & 1<<0) {
            m_name = in->fetchQString();
        }
        if(m_flags & 1<<1) {
            m_phone = in->fetchQString();
        }
        if(m_flags & 1<<2) {
            m_email = in->fetchQString();
        }
        if(m_flags & 1<<3) {
            m_shippingAddress.fetch(in);
        }
        m_classType = static_cast<PaymentRequestedInfoClassType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool PaymentRequestedInfo::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typePaymentRequestedInfo: {
        out->appendInt(m_flags);
        if(m_flags & 1<<0) {
            out->appendQString(m_name);
        }
        if(m_flags & 1<<1) {
            out->appendQString(m_phone);
        }
        if(m_flags & 1<<2) {
            out->appendQString(m_email);
        }
        if(m_flags & 1<<3) {
            m_shippingAddress.push(out);
        }
        return true;
    }
        break;
    
    default:
        return false;
    }
}

QMap<QString, QVariant> PaymentRequestedInfo::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typePaymentRequestedInfo: {
        result["classType"] = "PaymentRequestedInfo::typePaymentRequestedInfo";
        if( !m_name.isEmpty() ) result["name"] = QVariant::fromValue<QString>(m_name);
        if( !m_phone.isEmpty() ) result["phone"] = QVariant::fromValue<QString>(m_phone);
        if( !m_email.isEmpty() ) result["email"] = QVariant::fromValue<QString>(m_email);
        if( !m_shippingAddress.isNull() ) result["shippingAddress"] = m_shippingAddress.toMap();
        return result;
    }
        break;
    
    default:
        return result;
    }
}

PaymentRequestedInfo PaymentRequestedInfo::fromMap(const QMap<QString, QVariant> &map) {
    PaymentRequestedInfo result;
    if(map.value("classType").toString() == "PaymentRequestedInfo::typePaymentRequestedInfo") {
        result.setClassType(typePaymentRequestedInfo);
        QVariant _name_var = map.value("name");
        if( !_name_var.isNull() ) {
            _name_var.convert( QVariant::nameToType("QString") );
            result.setName( _name_var.value<QString>() );
        }
        
        QVariant _phone_var = map.value("phone");
        if( !_phone_var.isNull() ) {
            _phone_var.convert( QVariant::nameToType("QString") );
            result.setPhone( _phone_var.value<QString>() );
        }
        
        QVariant _email_var = map.value("email");
        if( !_email_var.isNull() ) {
            _email_var.convert( QVariant::nameToType("QString") );
            result.setEmail( _email_var.value<QString>() );
        }
        
        QVariant _shippingAddress_var = map.value("shippingAddress");
        if( !_shippingAddress_var.isNull() )
            result.setShippingAddress( PostAddress::fromMap(_shippingAddress_var.toMap()) );
        
        return result;
    }
    return result;
}

PaymentRequestedInfo PaymentRequestedInfo::fromJson(const QString &json) {
    return PaymentRequestedInfo::fromMap(QJsonDocument::fromJson(json.toUtf8()).toVariant().toMap());
}

QByteArray PaymentRequestedInfo::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const PaymentRequestedInfo &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case PaymentRequestedInfo::typePaymentRequestedInfo:
        stream << item.flags();
        stream << item.name();
        stream << item.phone();
        stream << item.email();
        stream << item.shippingAddress();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, PaymentRequestedInfo &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<PaymentRequestedInfo::PaymentRequestedInfoClassType>(type));
    switch(type) {
    case PaymentRequestedInfo::typePaymentRequestedInfo: {
        qint32 m_flags;
        stream >> m_flags;
        item.setFlags(m_flags);
        QString m_name;
        stream >> m_name;
        item.setName(m_name);
        QString m_phone;
        stream >> m_phone;
        item.setPhone(m_phone);
        QString m_email;
        stream >> m_email;
        item.setEmail(m_email);
        PostAddress m_shipping_address;
        stream >> m_shipping_address;
        item.setShippingAddress(m_shipping_address);
    }
        break;
    }
    return stream;
}

QDebug operator<<(QDebug debug,  const PaymentRequestedInfo &item) {
    QDebugStateSaver saver(debug);
    Q_UNUSED(saver)
    debug.nospace() << "Telegram.PaymentRequestedInfo(";
    switch(item.classType()) {
    case PaymentRequestedInfo::typePaymentRequestedInfo:
        debug.nospace() << "classType: typePaymentRequestedInfo";
        debug.nospace() << ", flags: " << item.flags();
        debug.nospace() << ", name: " << item.name();
        debug.nospace() << ", phone: " << item.phone();
        debug.nospace() << ", email: " << item.email();
        debug.nospace() << ", shippingAddress: " << item.shippingAddress();
        break;
    }
    debug.nospace() << ")";
    return debug;
}

