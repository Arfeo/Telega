// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "paymentspaymentform.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

PaymentsPaymentForm::PaymentsPaymentForm(PaymentsPaymentFormClassType classType, InboundPkt *in) :
    m_botId(0),
    m_flags(0),
    m_providerId(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

PaymentsPaymentForm::PaymentsPaymentForm(InboundPkt *in) :
    m_botId(0),
    m_flags(0),
    m_providerId(0),
    m_classType(typePaymentsPaymentForm)
{
    fetch(in);
}

PaymentsPaymentForm::PaymentsPaymentForm(const PaymentsPaymentForm &another) :
    TelegramTypeObject(),
    m_botId(0),
    m_flags(0),
    m_providerId(0),
    m_classType(typePaymentsPaymentForm)
{
    operator=(another);
}

PaymentsPaymentForm::PaymentsPaymentForm(const Null &null) :
    TelegramTypeObject(null),
    m_botId(0),
    m_flags(0),
    m_providerId(0),
    m_classType(typePaymentsPaymentForm)
{
}

PaymentsPaymentForm::~PaymentsPaymentForm() {

}

void PaymentsPaymentForm::setBotId(qint32 botId) {
    m_botId = botId;
}

qint32 PaymentsPaymentForm::botId() const {
    return m_botId;
}

void PaymentsPaymentForm::setCanSaveCredentials(bool canSaveCredentials) {
    if(canSaveCredentials) m_flags = (m_flags | (1<<2));
    else m_flags = (m_flags & ~(1<<2));
}

bool PaymentsPaymentForm::canSaveCredentials() const {
    return (m_flags & 1<<2);
}

void PaymentsPaymentForm::setFlags(qint32 flags) {
    m_flags = flags;
}

qint32 PaymentsPaymentForm::flags() const {
    return m_flags;
}

void PaymentsPaymentForm::setInvoice(const Invoice &invoice) {
    m_invoice = invoice;
}

Invoice PaymentsPaymentForm::invoice() const {
    return m_invoice;
}

void PaymentsPaymentForm::setNativeParams(const DataJSON &nativeParams) {
    if(!nativeParams.isNull()) m_flags = (m_flags | (1<<4));
    else m_flags = (m_flags & ~(1<<4));
    m_nativeParams = nativeParams;
}

DataJSON PaymentsPaymentForm::nativeParams() const {
    return m_nativeParams;
}

void PaymentsPaymentForm::setNativeProvider(const QString &nativeProvider) {
    if(!nativeProvider.isNull()) m_flags = (m_flags | (1<<4));
    else m_flags = (m_flags & ~(1<<4));
    m_nativeProvider = nativeProvider;
}

QString PaymentsPaymentForm::nativeProvider() const {
    return m_nativeProvider;
}

void PaymentsPaymentForm::setPasswordMissing(bool passwordMissing) {
    if(passwordMissing) m_flags = (m_flags | (1<<3));
    else m_flags = (m_flags & ~(1<<3));
}

bool PaymentsPaymentForm::passwordMissing() const {
    return (m_flags & 1<<3);
}

void PaymentsPaymentForm::setProviderId(qint32 providerId) {
    m_providerId = providerId;
}

qint32 PaymentsPaymentForm::providerId() const {
    return m_providerId;
}

void PaymentsPaymentForm::setSavedCredentials(const PaymentSavedCredentials &savedCredentials) {
    if(!savedCredentials.isNull()) m_flags = (m_flags | (1<<1));
    else m_flags = (m_flags & ~(1<<1));
    m_savedCredentials = savedCredentials;
}

PaymentSavedCredentials PaymentsPaymentForm::savedCredentials() const {
    return m_savedCredentials;
}

void PaymentsPaymentForm::setSavedInfo(const PaymentRequestedInfo &savedInfo) {
    if(!savedInfo.isNull()) m_flags = (m_flags | (1<<0));
    else m_flags = (m_flags & ~(1<<0));
    m_savedInfo = savedInfo;
}

PaymentRequestedInfo PaymentsPaymentForm::savedInfo() const {
    return m_savedInfo;
}

void PaymentsPaymentForm::setUrl(const QString &url) {
    m_url = url;
}

QString PaymentsPaymentForm::url() const {
    return m_url;
}

void PaymentsPaymentForm::setUsers(const QList<User> &users) {
    m_users = users;
}

QList<User> PaymentsPaymentForm::users() const {
    return m_users;
}

bool PaymentsPaymentForm::operator ==(const PaymentsPaymentForm &b) const {
    return m_classType == b.m_classType &&
           m_botId == b.m_botId &&
           m_flags == b.m_flags &&
           m_invoice == b.m_invoice &&
           m_nativeParams == b.m_nativeParams &&
           m_nativeProvider == b.m_nativeProvider &&
           m_providerId == b.m_providerId &&
           m_savedCredentials == b.m_savedCredentials &&
           m_savedInfo == b.m_savedInfo &&
           m_url == b.m_url &&
           m_users == b.m_users;
}

PaymentsPaymentForm &PaymentsPaymentForm::operator =(const PaymentsPaymentForm &b) {
    m_classType = b.m_classType;
    m_botId = b.m_botId;
    m_flags = b.m_flags;
    m_invoice = b.m_invoice;
    m_nativeParams = b.m_nativeParams;
    m_nativeProvider = b.m_nativeProvider;
    m_providerId = b.m_providerId;
    m_savedCredentials = b.m_savedCredentials;
    m_savedInfo = b.m_savedInfo;
    m_url = b.m_url;
    m_users = b.m_users;
    setNull(b.isNull());
    return *this;
}

void PaymentsPaymentForm::setClassType(PaymentsPaymentForm::PaymentsPaymentFormClassType classType) {
    m_classType = classType;
}

PaymentsPaymentForm::PaymentsPaymentFormClassType PaymentsPaymentForm::classType() const {
    return m_classType;
}

bool PaymentsPaymentForm::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typePaymentsPaymentForm: {
        m_flags = in->fetchInt();
        m_botId = in->fetchInt();
        m_invoice.fetch(in);
        m_providerId = in->fetchInt();
        m_url = in->fetchQString();
        if(m_flags & 1<<4) {
            m_nativeProvider = in->fetchQString();
        }
        if(m_flags & 1<<4) {
            m_nativeParams.fetch(in);
        }
        if(m_flags & 1<<0) {
            m_savedInfo.fetch(in);
        }
        if(m_flags & 1<<1) {
            m_savedCredentials.fetch(in);
        }
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_users_length = in->fetchInt();
        m_users.clear();
        for (qint32 i = 0; i < m_users_length; i++) {
            User type;
            type.fetch(in);
            m_users.append(type);
        }
        m_classType = static_cast<PaymentsPaymentFormClassType>(x);
        return true;
    }
        break;

    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool PaymentsPaymentForm::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typePaymentsPaymentForm: {
        out->appendInt(m_flags);
        out->appendInt(m_botId);
        m_invoice.push(out);
        out->appendInt(m_providerId);
        out->appendQString(m_url);
        if(m_flags & 1<<4) {
            out->appendQString(m_nativeProvider);
        }
        if(m_flags & 1<<4) {
            m_nativeParams.push(out);
        }
        if(m_flags & 1<<0) {
            m_savedInfo.push(out);
        }
        if(m_flags & 1<<1) {
            m_savedCredentials.push(out);
        }
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_users.count());
        for (qint32 i = 0; i < m_users.count(); i++) {
            m_users[i].push(out);
        }
        return true;
    }
        break;

    default:
        return false;
    }
}

QMap<QString, QVariant> PaymentsPaymentForm::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typePaymentsPaymentForm: {
        result["classType"] = "PaymentsPaymentForm::typePaymentsPaymentForm";
        if( canSaveCredentials() ) result["canSaveCredentials"] = QString::number(canSaveCredentials());
        if( passwordMissing() ) result["passwordMissing"] = QString::number(passwordMissing());
        if( botId() ) result["botId"] = QString::number(botId());
        if( !m_invoice.isNull() ) result["invoice"] = m_invoice.toMap();
        if( providerId() ) result["providerId"] = QString::number(providerId());
        if( !m_url.isEmpty() ) result["url"] = QVariant::fromValue<QString>(m_url);
        if( !m_nativeProvider.isEmpty() ) result["nativeProvider"] = QVariant::fromValue<QString>(m_nativeProvider);
        if( !m_nativeParams.isNull() ) result["nativeParams"] = m_nativeParams.toMap();
        if( !m_savedInfo.isNull() ) result["savedInfo"] = m_savedInfo.toMap();
        if( !m_savedCredentials.isNull() ) result["savedCredentials"] = m_savedCredentials.toMap();
        QList<QVariant> _users;
        //for(const User &m__type: m_users)
        for(int i = 0; i < m_users.size(); ++i) {
            const User &m__type = m_users[i];
            if( !m__type.isNull() ) _users << m__type.toMap();
        }
        result["users"] = _users;
        return result;
    }
        break;

    default:
        return result;
    }
}

PaymentsPaymentForm PaymentsPaymentForm::fromMap(const QMap<QString, QVariant> &map) {
    PaymentsPaymentForm result;
    if(map.value("classType").toString() == "PaymentsPaymentForm::typePaymentsPaymentForm") {
        result.setClassType(typePaymentsPaymentForm);
        QVariant _canSaveCredentials_var = map.value("canSaveCredentials");
        if( !_canSaveCredentials_var.isNull() ) {
            _canSaveCredentials_var.convert( QVariant::nameToType("bool") );
            result.setCanSaveCredentials( _canSaveCredentials_var.value<bool>() );
        }

        QVariant _passwordMissing_var = map.value("passwordMissing");
        if( !_passwordMissing_var.isNull() ) {
            _passwordMissing_var.convert( QVariant::nameToType("bool") );
            result.setPasswordMissing( _passwordMissing_var.value<bool>() );
        }

        QVariant _botId_var = map.value("botId");
        if( !_botId_var.isNull() ) {
            _botId_var.convert( QVariant::nameToType("qint32") );
            result.setBotId( _botId_var.value<qint32>() );
        }

        QVariant _invoice_var = map.value("invoice");
        if( !_invoice_var.isNull() )
            result.setInvoice( Invoice::fromMap(_invoice_var.toMap()) );

        QVariant _providerId_var = map.value("providerId");
        if( !_providerId_var.isNull() ) {
            _providerId_var.convert( QVariant::nameToType("qint32") );
            result.setProviderId( _providerId_var.value<qint32>() );
        }

        QVariant _url_var = map.value("url");
        if( !_url_var.isNull() ) {
            _url_var.convert( QVariant::nameToType("QString") );
            result.setUrl( _url_var.value<QString>() );
        }

        QVariant _nativeProvider_var = map.value("nativeProvider");
        if( !_nativeProvider_var.isNull() ) {
            _nativeProvider_var.convert( QVariant::nameToType("QString") );
            result.setNativeProvider( _nativeProvider_var.value<QString>() );
        }

        QVariant _nativeParams_var = map.value("nativeParams");
        if( !_nativeParams_var.isNull() )
            result.setNativeParams( DataJSON::fromMap(_nativeParams_var.toMap()) );

        QVariant _savedInfo_var = map.value("savedInfo");
        if( !_savedInfo_var.isNull() )
            result.setSavedInfo( PaymentRequestedInfo::fromMap(_savedInfo_var.toMap()) );

        QVariant _savedCredentials_var = map.value("savedCredentials");
        if( !_savedCredentials_var.isNull() )
            result.setSavedCredentials( PaymentSavedCredentials::fromMap(_savedCredentials_var.toMap()) );

        QList<QVariant> map_users = map["users"].toList();
        QList<User> _users;
        //for(const QVariant &var: map_users)
        for(int i = 0; i < map_users.size(); ++i) {
            const QVariant &var = map_users[i];
            _users << User::fromMap(var.toMap());
        }
        result.setUsers(_users);
        return result;
    }
    return result;
}

PaymentsPaymentForm PaymentsPaymentForm::fromJson(const QString &json) {
    return PaymentsPaymentForm::fromMap(QJsonDocument::fromJson(json.toUtf8()).toVariant().toMap());
}

QByteArray PaymentsPaymentForm::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const PaymentsPaymentForm &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case PaymentsPaymentForm::typePaymentsPaymentForm:
        stream << item.flags();
        stream << item.botId();
        stream << item.invoice();
        stream << item.providerId();
        stream << item.url();
        stream << item.nativeProvider();
        stream << item.nativeParams();
        stream << item.savedInfo();
        stream << item.savedCredentials();
        stream << item.users();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, PaymentsPaymentForm &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<PaymentsPaymentForm::PaymentsPaymentFormClassType>(type));
    switch(type) {
    case PaymentsPaymentForm::typePaymentsPaymentForm: {
        qint32 m_flags;
        stream >> m_flags;
        item.setFlags(m_flags);
        qint32 m_bot_id;
        stream >> m_bot_id;
        item.setBotId(m_bot_id);
        Invoice m_invoice;
        stream >> m_invoice;
        item.setInvoice(m_invoice);
        qint32 m_provider_id;
        stream >> m_provider_id;
        item.setProviderId(m_provider_id);
        QString m_url;
        stream >> m_url;
        item.setUrl(m_url);
        QString m_native_provider;
        stream >> m_native_provider;
        item.setNativeProvider(m_native_provider);
        DataJSON m_native_params;
        stream >> m_native_params;
        item.setNativeParams(m_native_params);
        PaymentRequestedInfo m_saved_info;
        stream >> m_saved_info;
        item.setSavedInfo(m_saved_info);
        PaymentSavedCredentials m_saved_credentials;
        stream >> m_saved_credentials;
        item.setSavedCredentials(m_saved_credentials);
        QList<User> m_users;
        stream >> m_users;
        item.setUsers(m_users);
    }
        break;
    }
    return stream;
}

/*QDebug operator<<(QDebug debug,  const PaymentsPaymentForm &item) {
    QDebugStateSaver saver(debug);
    Q_UNUSED(saver)
    debug.nospace() << "Telegram.PaymentsPaymentForm(";
    switch(item.classType()) {
    case PaymentsPaymentForm::typePaymentsPaymentForm:
        debug.nospace() << "classType: typePaymentsPaymentForm";
        debug.nospace() << ", flags: " << item.flags();
        debug.nospace() << ", botId: " << item.botId();
        debug.nospace() << ", invoice: " << item.invoice();
        debug.nospace() << ", providerId: " << item.providerId();
        debug.nospace() << ", url: " << item.url();
        debug.nospace() << ", nativeProvider: " << item.nativeProvider();
        debug.nospace() << ", nativeParams: " << item.nativeParams();
        debug.nospace() << ", savedInfo: " << item.savedInfo();
        debug.nospace() << ", savedCredentials: " << item.savedCredentials();
        debug.nospace() << ", users: " << item.users();
        break;
    }
    debug.nospace() << ")";
    return debug;
}
*/
