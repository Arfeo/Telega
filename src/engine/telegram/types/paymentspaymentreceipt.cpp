// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "paymentspaymentreceipt.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

PaymentsPaymentReceipt::PaymentsPaymentReceipt(PaymentsPaymentReceiptClassType classType, InboundPkt *in) :
    m_botId(0),
    m_date(0),
    m_flags(0),
    m_providerId(0),
    m_totalAmount(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

PaymentsPaymentReceipt::PaymentsPaymentReceipt(InboundPkt *in) :
    m_botId(0),
    m_date(0),
    m_flags(0),
    m_providerId(0),
    m_totalAmount(0),
    m_classType(typePaymentsPaymentReceipt)
{
    fetch(in);
}

PaymentsPaymentReceipt::PaymentsPaymentReceipt(const PaymentsPaymentReceipt &another) :
    TelegramTypeObject(),
    m_botId(0),
    m_date(0),
    m_flags(0),
    m_providerId(0),
    m_totalAmount(0),
    m_classType(typePaymentsPaymentReceipt)
{
    operator=(another);
}

PaymentsPaymentReceipt::PaymentsPaymentReceipt(const Null &null) :
    TelegramTypeObject(null),
    m_botId(0),
    m_date(0),
    m_flags(0),
    m_providerId(0),
    m_totalAmount(0),
    m_classType(typePaymentsPaymentReceipt)
{
}

PaymentsPaymentReceipt::~PaymentsPaymentReceipt() {

}

void PaymentsPaymentReceipt::setBotId(qint32 botId) {
    m_botId = botId;
}

qint32 PaymentsPaymentReceipt::botId() const {
    return m_botId;
}

void PaymentsPaymentReceipt::setCredentialsTitle(const QString &credentialsTitle) {
    m_credentialsTitle = credentialsTitle;
}

QString PaymentsPaymentReceipt::credentialsTitle() const {
    return m_credentialsTitle;
}

void PaymentsPaymentReceipt::setCurrency(const QString &currency) {
    m_currency = currency;
}

QString PaymentsPaymentReceipt::currency() const {
    return m_currency;
}

void PaymentsPaymentReceipt::setDate(qint32 date) {
    m_date = date;
}

qint32 PaymentsPaymentReceipt::date() const {
    return m_date;
}

void PaymentsPaymentReceipt::setFlags(qint32 flags) {
    m_flags = flags;
}

qint32 PaymentsPaymentReceipt::flags() const {
    return m_flags;
}

void PaymentsPaymentReceipt::setInfo(const PaymentRequestedInfo &info) {
    if(!info.isNull()) m_flags = (m_flags | (1<<0));
    else m_flags = (m_flags & ~(1<<0));
    m_info = info;
}

PaymentRequestedInfo PaymentsPaymentReceipt::info() const {
    return m_info;
}

void PaymentsPaymentReceipt::setInvoice(const Invoice &invoice) {
    m_invoice = invoice;
}

Invoice PaymentsPaymentReceipt::invoice() const {
    return m_invoice;
}

void PaymentsPaymentReceipt::setProviderId(qint32 providerId) {
    m_providerId = providerId;
}

qint32 PaymentsPaymentReceipt::providerId() const {
    return m_providerId;
}

void PaymentsPaymentReceipt::setShipping(const ShippingOption &shipping) {
    if(!shipping.isNull()) m_flags = (m_flags | (1<<1));
    else m_flags = (m_flags & ~(1<<1));
    m_shipping = shipping;
}

ShippingOption PaymentsPaymentReceipt::shipping() const {
    return m_shipping;
}

void PaymentsPaymentReceipt::setTotalAmount(qint64 totalAmount) {
    m_totalAmount = totalAmount;
}

qint64 PaymentsPaymentReceipt::totalAmount() const {
    return m_totalAmount;
}

void PaymentsPaymentReceipt::setUsers(const QList<User> &users) {
    m_users = users;
}

QList<User> PaymentsPaymentReceipt::users() const {
    return m_users;
}

bool PaymentsPaymentReceipt::operator ==(const PaymentsPaymentReceipt &b) const {
    return m_classType == b.m_classType &&
           m_botId == b.m_botId &&
           m_credentialsTitle == b.m_credentialsTitle &&
           m_currency == b.m_currency &&
           m_date == b.m_date &&
           m_flags == b.m_flags &&
           m_info == b.m_info &&
           m_invoice == b.m_invoice &&
           m_providerId == b.m_providerId &&
           m_shipping == b.m_shipping &&
           m_totalAmount == b.m_totalAmount &&
           m_users == b.m_users;
}

PaymentsPaymentReceipt &PaymentsPaymentReceipt::operator =(const PaymentsPaymentReceipt &b) {
    m_classType = b.m_classType;
    m_botId = b.m_botId;
    m_credentialsTitle = b.m_credentialsTitle;
    m_currency = b.m_currency;
    m_date = b.m_date;
    m_flags = b.m_flags;
    m_info = b.m_info;
    m_invoice = b.m_invoice;
    m_providerId = b.m_providerId;
    m_shipping = b.m_shipping;
    m_totalAmount = b.m_totalAmount;
    m_users = b.m_users;
    setNull(b.isNull());
    return *this;
}

void PaymentsPaymentReceipt::setClassType(PaymentsPaymentReceipt::PaymentsPaymentReceiptClassType classType) {
    m_classType = classType;
}

PaymentsPaymentReceipt::PaymentsPaymentReceiptClassType PaymentsPaymentReceipt::classType() const {
    return m_classType;
}

bool PaymentsPaymentReceipt::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typePaymentsPaymentReceipt: {
        m_flags = in->fetchInt();
        m_date = in->fetchInt();
        m_botId = in->fetchInt();
        m_invoice.fetch(in);
        m_providerId = in->fetchInt();
        if(m_flags & 1<<0) {
            m_info.fetch(in);
        }
        if(m_flags & 1<<1) {
            m_shipping.fetch(in);
        }
        m_currency = in->fetchQString();
        m_totalAmount = in->fetchLong();
        m_credentialsTitle = in->fetchQString();
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_users_length = in->fetchInt();
        m_users.clear();
        for (qint32 i = 0; i < m_users_length; i++) {
            User type;
            type.fetch(in);
            m_users.append(type);
        }
        m_classType = static_cast<PaymentsPaymentReceiptClassType>(x);
        return true;
    }
        break;

    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool PaymentsPaymentReceipt::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typePaymentsPaymentReceipt: {
        out->appendInt(m_flags);
        out->appendInt(m_date);
        out->appendInt(m_botId);
        m_invoice.push(out);
        out->appendInt(m_providerId);
        if(m_flags & 1<<0) {
            m_info.push(out);
        }
        if(m_flags & 1<<1) {
            m_shipping.push(out);
        }
        out->appendQString(m_currency);
        out->appendLong(m_totalAmount);
        out->appendQString(m_credentialsTitle);
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_users.count());
        for (qint32 i = 0; i < m_users.count(); i++) {
            m_users[i].push(out);
        }
        return true;
    }
        break;

    default:
        return false;
    }
}

QMap<QString, QVariant> PaymentsPaymentReceipt::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typePaymentsPaymentReceipt: {
        result["classType"] = "PaymentsPaymentReceipt::typePaymentsPaymentReceipt";
        if( date() ) result["date"] = QString::number(date());
        if( botId() ) result["botId"] = QString::number(botId());
        if( !m_invoice.isNull() ) result["invoice"] = m_invoice.toMap();
        if( providerId() ) result["providerId"] = QString::number(providerId());
        if( !m_info.isNull() ) result["info"] = m_info.toMap();
        if( !m_shipping.isNull() ) result["shipping"] = m_shipping.toMap();
        if( !m_currency.isEmpty() ) result["currency"] = QVariant::fromValue<QString>(m_currency);
        if( totalAmount() ) result["totalAmount"] = QString::number(totalAmount());
        if( !m_credentialsTitle.isEmpty() ) result["credentialsTitle"] = QVariant::fromValue<QString>(m_credentialsTitle);
        QList<QVariant> _users;
        for(const User &m__type: m_users)
            if( !m__type.isNull() ) _users << m__type.toMap();
        result["users"] = _users;
        return result;
    }
        break;

    default:
        return result;
    }
}

PaymentsPaymentReceipt PaymentsPaymentReceipt::fromMap(const QMap<QString, QVariant> &map) {
    PaymentsPaymentReceipt result;
    if(map.value("classType").toString() == "PaymentsPaymentReceipt::typePaymentsPaymentReceipt") {
        result.setClassType(typePaymentsPaymentReceipt);
        QVariant _date_var = map.value("date");
        if( !_date_var.isNull() ) {
            _date_var.convert( QVariant::nameToType("qint32") );
            result.setDate( _date_var.value<qint32>() );
        }

        QVariant _botId_var = map.value("botId");
        if( !_botId_var.isNull() ) {
            _botId_var.convert( QVariant::nameToType("qint32") );
            result.setBotId( _botId_var.value<qint32>() );
        }

        QVariant _invoice_var = map.value("invoice");
        if( !_invoice_var.isNull() )
            result.setInvoice( Invoice::fromMap(_invoice_var.toMap()) );

        QVariant _providerId_var = map.value("providerId");
        if( !_providerId_var.isNull() ) {
            _providerId_var.convert( QVariant::nameToType("qint32") );
            result.setProviderId( _providerId_var.value<qint32>() );
        }

        QVariant _info_var = map.value("info");
        if( !_info_var.isNull() )
            result.setInfo( PaymentRequestedInfo::fromMap(_info_var.toMap()) );

        QVariant _shipping_var = map.value("shipping");
        if( !_shipping_var.isNull() )
            result.setShipping( ShippingOption::fromMap(_shipping_var.toMap()) );

        QVariant _currency_var = map.value("currency");
        if( !_currency_var.isNull() ) {
            _currency_var.convert( QVariant::nameToType("QString") );
            result.setCurrency( _currency_var.value<QString>() );
        }

        QVariant _totalAmount_var = map.value("totalAmount");
        if( !_totalAmount_var.isNull() ) {
            _totalAmount_var.convert( QVariant::nameToType("qint64") );
            result.setTotalAmount( _totalAmount_var.value<qint64>() );
        }

        QVariant _credentialsTitle_var = map.value("credentialsTitle");
        if( !_credentialsTitle_var.isNull() ) {
            _credentialsTitle_var.convert( QVariant::nameToType("QString") );
            result.setCredentialsTitle( _credentialsTitle_var.value<QString>() );
        }

        QList<QVariant> map_users = map["users"].toList();
        QList<User> _users;
        for(const QVariant &var: map_users)
            _users << User::fromMap(var.toMap());
        result.setUsers(_users);
        return result;
    }
    return result;
}

PaymentsPaymentReceipt PaymentsPaymentReceipt::fromJson(const QString &json) {
    return PaymentsPaymentReceipt::fromMap(QJsonDocument::fromJson(json.toUtf8()).toVariant().toMap());
}

QByteArray PaymentsPaymentReceipt::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const PaymentsPaymentReceipt &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case PaymentsPaymentReceipt::typePaymentsPaymentReceipt:
        stream << item.flags();
        stream << item.date();
        stream << item.botId();
        stream << item.invoice();
        stream << item.providerId();
        stream << item.info();
        stream << item.shipping();
        stream << item.currency();
        stream << item.totalAmount();
        stream << item.credentialsTitle();
        stream << item.users();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, PaymentsPaymentReceipt &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<PaymentsPaymentReceipt::PaymentsPaymentReceiptClassType>(type));
    switch(type) {
    case PaymentsPaymentReceipt::typePaymentsPaymentReceipt: {
        qint32 m_flags;
        stream >> m_flags;
        item.setFlags(m_flags);
        qint32 m_date;
        stream >> m_date;
        item.setDate(m_date);
        qint32 m_bot_id;
        stream >> m_bot_id;
        item.setBotId(m_bot_id);
        Invoice m_invoice;
        stream >> m_invoice;
        item.setInvoice(m_invoice);
        qint32 m_provider_id;
        stream >> m_provider_id;
        item.setProviderId(m_provider_id);
        PaymentRequestedInfo m_info;
        stream >> m_info;
        item.setInfo(m_info);
        ShippingOption m_shipping;
        stream >> m_shipping;
        item.setShipping(m_shipping);
        QString m_currency;
        stream >> m_currency;
        item.setCurrency(m_currency);
        qint64 m_total_amount;
        stream >> m_total_amount;
        item.setTotalAmount(m_total_amount);
        QString m_credentials_title;
        stream >> m_credentials_title;
        item.setCredentialsTitle(m_credentials_title);
        QList<User> m_users;
        stream >> m_users;
        item.setUsers(m_users);
    }
        break;
    }
    return stream;
}

/*QDebug operator<<(QDebug debug,  const PaymentsPaymentReceipt &item) {
    QDebugStateSaver saver(debug);
    Q_UNUSED(saver)
    debug.nospace() << "Telegram.PaymentsPaymentReceipt(";
    switch(item.classType()) {
    case PaymentsPaymentReceipt::typePaymentsPaymentReceipt:
        debug.nospace() << "classType: typePaymentsPaymentReceipt";
        debug.nospace() << ", flags: " << item.flags();
        debug.nospace() << ", date: " << item.date();
        debug.nospace() << ", botId: " << item.botId();
        debug.nospace() << ", invoice: " << item.invoice();
        debug.nospace() << ", providerId: " << item.providerId();
        debug.nospace() << ", info: " << item.info();
        debug.nospace() << ", shipping: " << item.shipping();
        debug.nospace() << ", currency: " << item.currency();
        debug.nospace() << ", totalAmount: " << item.totalAmount();
        debug.nospace() << ", credentialsTitle: " << item.credentialsTitle();
        debug.nospace() << ", users: " << item.users();
        break;
    }
    debug.nospace() << ")";
    return debug;
}
*/
