// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "paymentspaymentresult.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

PaymentsPaymentResult::PaymentsPaymentResult(PaymentsPaymentResultClassType classType, InboundPkt *in) :
    m_classType(classType)
{
    if(in) fetch(in);
}

PaymentsPaymentResult::PaymentsPaymentResult(InboundPkt *in) :
    m_classType(typePaymentsPaymentResult)
{
    fetch(in);
}

PaymentsPaymentResult::PaymentsPaymentResult(const PaymentsPaymentResult &another) :
    TelegramTypeObject(),
    m_classType(typePaymentsPaymentResult)
{
    operator=(another);
}

PaymentsPaymentResult::PaymentsPaymentResult(const Null &null) :
    TelegramTypeObject(null),
    m_classType(typePaymentsPaymentResult)
{
}

PaymentsPaymentResult::~PaymentsPaymentResult() {
    
}

void PaymentsPaymentResult::setUpdates(const UpdatesType &updates) {
    m_updates = updates;
}

UpdatesType PaymentsPaymentResult::updates() const {
    return m_updates;
}

void PaymentsPaymentResult::setUrl(const QString &url) {
    m_url = url;
}

QString PaymentsPaymentResult::url() const {
    return m_url;
}

bool PaymentsPaymentResult::operator ==(const PaymentsPaymentResult &b) const {
    return m_classType == b.m_classType &&
           m_updates == b.m_updates &&
           m_url == b.m_url;
}

PaymentsPaymentResult &PaymentsPaymentResult::operator =(const PaymentsPaymentResult &b) {
    m_classType = b.m_classType;
    m_updates = b.m_updates;
    m_url = b.m_url;
    setNull(b.isNull());
    return *this;
}

void PaymentsPaymentResult::setClassType(PaymentsPaymentResult::PaymentsPaymentResultClassType classType) {
    m_classType = classType;
}

PaymentsPaymentResult::PaymentsPaymentResultClassType PaymentsPaymentResult::classType() const {
    return m_classType;
}

bool PaymentsPaymentResult::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typePaymentsPaymentResult: {
        m_updates.fetch(in);
        m_classType = static_cast<PaymentsPaymentResultClassType>(x);
        return true;
    }
        break;
    
    case typePaymentsPaymentVerficationNeeded: {
        m_url = in->fetchQString();
        m_classType = static_cast<PaymentsPaymentResultClassType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool PaymentsPaymentResult::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typePaymentsPaymentResult: {
        m_updates.push(out);
        return true;
    }
        break;
    
    case typePaymentsPaymentVerficationNeeded: {
        out->appendQString(m_url);
        return true;
    }
        break;
    
    default:
        return false;
    }
}

QMap<QString, QVariant> PaymentsPaymentResult::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typePaymentsPaymentResult: {
        result["classType"] = "PaymentsPaymentResult::typePaymentsPaymentResult";
        if( !m_updates.isNull() ) result["updates"] = m_updates.toMap();
        return result;
    }
        break;
    
    case typePaymentsPaymentVerficationNeeded: {
        result["classType"] = "PaymentsPaymentResult::typePaymentsPaymentVerficationNeeded";
        if( !m_url.isEmpty() ) result["url"] = QVariant::fromValue<QString>(m_url);
        return result;
    }
        break;
    
    default:
        return result;
    }
}

PaymentsPaymentResult PaymentsPaymentResult::fromMap(const QMap<QString, QVariant> &map) {
    PaymentsPaymentResult result;
    if(map.value("classType").toString() == "PaymentsPaymentResult::typePaymentsPaymentResult") {
        result.setClassType(typePaymentsPaymentResult);
        QVariant _updates_var = map.value("updates");
        if( !_updates_var.isNull() )
            result.setUpdates( UpdatesType::fromMap(_updates_var.toMap()) );
        
        return result;
    }
    if(map.value("classType").toString() == "PaymentsPaymentResult::typePaymentsPaymentVerficationNeeded") {
        result.setClassType(typePaymentsPaymentVerficationNeeded);
        QVariant _url_var = map.value("url");
        if( !_url_var.isNull() ) {
            _url_var.convert( QVariant::nameToType("QString") );
            result.setUrl( _url_var.value<QString>() );
        }
        
        return result;
    }
    return result;
}

PaymentsPaymentResult PaymentsPaymentResult::fromJson(const QString &json) {
    return PaymentsPaymentResult::fromMap(QJsonDocument::fromJson(json.toUtf8()).toVariant().toMap());
}

QByteArray PaymentsPaymentResult::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const PaymentsPaymentResult &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case PaymentsPaymentResult::typePaymentsPaymentResult:
        stream << item.updates();
        break;
    case PaymentsPaymentResult::typePaymentsPaymentVerficationNeeded:
        stream << item.url();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, PaymentsPaymentResult &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<PaymentsPaymentResult::PaymentsPaymentResultClassType>(type));
    switch(type) {
    case PaymentsPaymentResult::typePaymentsPaymentResult: {
        UpdatesType m_updates;
        stream >> m_updates;
        item.setUpdates(m_updates);
    }
        break;
    case PaymentsPaymentResult::typePaymentsPaymentVerficationNeeded: {
        QString m_url;
        stream >> m_url;
        item.setUrl(m_url);
    }
        break;
    }
    return stream;
}

QDebug operator<<(QDebug debug,  const PaymentsPaymentResult &item) {
    QDebugStateSaver saver(debug);
    Q_UNUSED(saver)
    debug.nospace() << "Telegram.PaymentsPaymentResult(";
    switch(item.classType()) {
    case PaymentsPaymentResult::typePaymentsPaymentResult:
        debug.nospace() << "classType: typePaymentsPaymentResult";
        debug.nospace() << ", updates: " << item.updates();
        break;
    case PaymentsPaymentResult::typePaymentsPaymentVerficationNeeded:
        debug.nospace() << "classType: typePaymentsPaymentVerficationNeeded";
        debug.nospace() << ", url: " << item.url();
        break;
    }
    debug.nospace() << ")";
    return debug;
}

