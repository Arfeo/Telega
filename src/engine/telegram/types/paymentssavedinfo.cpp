// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "paymentssavedinfo.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

PaymentsSavedInfo::PaymentsSavedInfo(PaymentsSavedInfoClassType classType, InboundPkt *in) :
    m_flags(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

PaymentsSavedInfo::PaymentsSavedInfo(InboundPkt *in) :
    m_flags(0),
    m_classType(typePaymentsSavedInfo)
{
    fetch(in);
}

PaymentsSavedInfo::PaymentsSavedInfo(const PaymentsSavedInfo &another) :
    TelegramTypeObject(),
    m_flags(0),
    m_classType(typePaymentsSavedInfo)
{
    operator=(another);
}

PaymentsSavedInfo::PaymentsSavedInfo(const Null &null) :
    TelegramTypeObject(null),
    m_flags(0),
    m_classType(typePaymentsSavedInfo)
{
}

PaymentsSavedInfo::~PaymentsSavedInfo() {
    
}

void PaymentsSavedInfo::setFlags(qint32 flags) {
    m_flags = flags;
}

qint32 PaymentsSavedInfo::flags() const {
    return m_flags;
}

void PaymentsSavedInfo::setHasSavedCredentials(bool hasSavedCredentials) {
    if(hasSavedCredentials) m_flags = (m_flags | (1<<1));
    else m_flags = (m_flags & ~(1<<1));
}

bool PaymentsSavedInfo::hasSavedCredentials() const {
    return (m_flags & 1<<1);
}

void PaymentsSavedInfo::setSavedInfo(const PaymentRequestedInfo &savedInfo) {
    if(!savedInfo.isNull()) m_flags = (m_flags | (1<<0));
    else m_flags = (m_flags & ~(1<<0));
    m_savedInfo = savedInfo;
}

PaymentRequestedInfo PaymentsSavedInfo::savedInfo() const {
    return m_savedInfo;
}

bool PaymentsSavedInfo::operator ==(const PaymentsSavedInfo &b) const {
    return m_classType == b.m_classType &&
           m_flags == b.m_flags &&
           m_savedInfo == b.m_savedInfo;
}

PaymentsSavedInfo &PaymentsSavedInfo::operator =(const PaymentsSavedInfo &b) {
    m_classType = b.m_classType;
    m_flags = b.m_flags;
    m_savedInfo = b.m_savedInfo;
    setNull(b.isNull());
    return *this;
}

void PaymentsSavedInfo::setClassType(PaymentsSavedInfo::PaymentsSavedInfoClassType classType) {
    m_classType = classType;
}

PaymentsSavedInfo::PaymentsSavedInfoClassType PaymentsSavedInfo::classType() const {
    return m_classType;
}

bool PaymentsSavedInfo::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typePaymentsSavedInfo: {
        m_flags = in->fetchInt();
        if(m_flags & 1<<0) {
            m_savedInfo.fetch(in);
        }
        m_classType = static_cast<PaymentsSavedInfoClassType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool PaymentsSavedInfo::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typePaymentsSavedInfo: {
        out->appendInt(m_flags);
        if(m_flags & 1<<0) {
            m_savedInfo.push(out);
        }
        return true;
    }
        break;
    
    default:
        return false;
    }
}

QMap<QString, QVariant> PaymentsSavedInfo::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typePaymentsSavedInfo: {
        result["classType"] = "PaymentsSavedInfo::typePaymentsSavedInfo";
        if( hasSavedCredentials() ) result["hasSavedCredentials"] = QString::number(hasSavedCredentials());
        if( !m_savedInfo.isNull() ) result["savedInfo"] = m_savedInfo.toMap();
        return result;
    }
        break;
    
    default:
        return result;
    }
}

PaymentsSavedInfo PaymentsSavedInfo::fromMap(const QMap<QString, QVariant> &map) {
    PaymentsSavedInfo result;
    if(map.value("classType").toString() == "PaymentsSavedInfo::typePaymentsSavedInfo") {
        result.setClassType(typePaymentsSavedInfo);
        QVariant _hasSavedCredentials_var = map.value("hasSavedCredentials");
        if( !_hasSavedCredentials_var.isNull() ) {
            _hasSavedCredentials_var.convert( QVariant::nameToType("bool") );
            result.setHasSavedCredentials( _hasSavedCredentials_var.value<bool>() );
        }
        
        QVariant _savedInfo_var = map.value("savedInfo");
        if( !_savedInfo_var.isNull() )
            result.setSavedInfo( PaymentRequestedInfo::fromMap(_savedInfo_var.toMap()) );
        
        return result;
    }
    return result;
}

PaymentsSavedInfo PaymentsSavedInfo::fromJson(const QString &json) {
    return PaymentsSavedInfo::fromMap(QJsonDocument::fromJson(json.toUtf8()).toVariant().toMap());
}

QByteArray PaymentsSavedInfo::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const PaymentsSavedInfo &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case PaymentsSavedInfo::typePaymentsSavedInfo:
        stream << item.flags();
        stream << item.savedInfo();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, PaymentsSavedInfo &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<PaymentsSavedInfo::PaymentsSavedInfoClassType>(type));
    switch(type) {
    case PaymentsSavedInfo::typePaymentsSavedInfo: {
        qint32 m_flags;
        stream >> m_flags;
        item.setFlags(m_flags);
        PaymentRequestedInfo m_saved_info;
        stream >> m_saved_info;
        item.setSavedInfo(m_saved_info);
    }
        break;
    }
    return stream;
}

QDebug operator<<(QDebug debug,  const PaymentsSavedInfo &item) {
    QDebugStateSaver saver(debug);
    Q_UNUSED(saver)
    debug.nospace() << "Telegram.PaymentsSavedInfo(";
    switch(item.classType()) {
    case PaymentsSavedInfo::typePaymentsSavedInfo:
        debug.nospace() << "classType: typePaymentsSavedInfo";
        debug.nospace() << ", flags: " << item.flags();
        debug.nospace() << ", savedInfo: " << item.savedInfo();
        break;
    }
    debug.nospace() << ")";
    return debug;
}

