// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "paymentsvalidatedrequestedinfo.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

PaymentsValidatedRequestedInfo::PaymentsValidatedRequestedInfo(PaymentsValidatedRequestedInfoClassType classType, InboundPkt *in) :
    m_flags(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

PaymentsValidatedRequestedInfo::PaymentsValidatedRequestedInfo(InboundPkt *in) :
    m_flags(0),
    m_classType(typePaymentsValidatedRequestedInfo)
{
    fetch(in);
}

PaymentsValidatedRequestedInfo::PaymentsValidatedRequestedInfo(const PaymentsValidatedRequestedInfo &another) :
    TelegramTypeObject(),
    m_flags(0),
    m_classType(typePaymentsValidatedRequestedInfo)
{
    operator=(another);
}

PaymentsValidatedRequestedInfo::PaymentsValidatedRequestedInfo(const Null &null) :
    TelegramTypeObject(null),
    m_flags(0),
    m_classType(typePaymentsValidatedRequestedInfo)
{
}

PaymentsValidatedRequestedInfo::~PaymentsValidatedRequestedInfo() {
    
}

void PaymentsValidatedRequestedInfo::setFlags(qint32 flags) {
    m_flags = flags;
}

qint32 PaymentsValidatedRequestedInfo::flags() const {
    return m_flags;
}

void PaymentsValidatedRequestedInfo::setId(const QString &id) {
    if(!id.isNull()) m_flags = (m_flags | (1<<0));
    else m_flags = (m_flags & ~(1<<0));
    m_id = id;
}

QString PaymentsValidatedRequestedInfo::id() const {
    return m_id;
}

void PaymentsValidatedRequestedInfo::setShippingOptions(const QList<ShippingOption> &shippingOptions) {
    if(shippingOptions.length()) m_flags = (m_flags | (1<<1));
    else m_flags = (m_flags & ~(1<<1));
    m_shippingOptions = shippingOptions;
}

QList<ShippingOption> PaymentsValidatedRequestedInfo::shippingOptions() const {
    return m_shippingOptions;
}

bool PaymentsValidatedRequestedInfo::operator ==(const PaymentsValidatedRequestedInfo &b) const {
    return m_classType == b.m_classType &&
           m_flags == b.m_flags &&
           m_id == b.m_id &&
           m_shippingOptions == b.m_shippingOptions;
}

PaymentsValidatedRequestedInfo &PaymentsValidatedRequestedInfo::operator =(const PaymentsValidatedRequestedInfo &b) {
    m_classType = b.m_classType;
    m_flags = b.m_flags;
    m_id = b.m_id;
    m_shippingOptions = b.m_shippingOptions;
    setNull(b.isNull());
    return *this;
}

void PaymentsValidatedRequestedInfo::setClassType(PaymentsValidatedRequestedInfo::PaymentsValidatedRequestedInfoClassType classType) {
    m_classType = classType;
}

PaymentsValidatedRequestedInfo::PaymentsValidatedRequestedInfoClassType PaymentsValidatedRequestedInfo::classType() const {
    return m_classType;
}

bool PaymentsValidatedRequestedInfo::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typePaymentsValidatedRequestedInfo: {
        m_flags = in->fetchInt();
        if(m_flags & 1<<0) {
            m_id = in->fetchQString();
        }
        if(m_flags & 1<<1) {
            if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
            qint32 m_shippingOptions_length = in->fetchInt();
            m_shippingOptions.clear();
            for (qint32 i = 0; i < m_shippingOptions_length; i++) {
                ShippingOption type;
                if(m_flags & 1<<1) {
                type.fetch(in);
            }
                m_shippingOptions.append(type);
            }
        }
        m_classType = static_cast<PaymentsValidatedRequestedInfoClassType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool PaymentsValidatedRequestedInfo::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typePaymentsValidatedRequestedInfo: {
        out->appendInt(m_flags);
        if(m_flags & 1<<0) {
            out->appendQString(m_id);
        }
        if(m_flags & 1<<1) {
            out->appendInt(CoreTypes::typeVector);
            out->appendInt(m_shippingOptions.count());
            for (qint32 i = 0; i < m_shippingOptions.count(); i++) {
                m_shippingOptions[i].push(out);
            }
        }
        return true;
    }
        break;
    
    default:
        return false;
    }
}

QMap<QString, QVariant> PaymentsValidatedRequestedInfo::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typePaymentsValidatedRequestedInfo: {
        result["classType"] = "PaymentsValidatedRequestedInfo::typePaymentsValidatedRequestedInfo";
        if( !m_id.isEmpty() ) result["id"] = QVariant::fromValue<QString>(m_id);
        QList<QVariant> _shippingOptions;
        for(const ShippingOption &m__type: m_shippingOptions)
            if( !m__type.isNull() ) _shippingOptions << m__type.toMap();
        result["shippingOptions"] = _shippingOptions;
        return result;
    }
        break;
    
    default:
        return result;
    }
}

PaymentsValidatedRequestedInfo PaymentsValidatedRequestedInfo::fromMap(const QMap<QString, QVariant> &map) {
    PaymentsValidatedRequestedInfo result;
    if(map.value("classType").toString() == "PaymentsValidatedRequestedInfo::typePaymentsValidatedRequestedInfo") {
        result.setClassType(typePaymentsValidatedRequestedInfo);
        QVariant _id_var = map.value("id");
        if( !_id_var.isNull() ) {
            _id_var.convert( QVariant::nameToType("QString") );
            result.setId( _id_var.value<QString>() );
        }
        
        QList<QVariant> map_shippingOptions = map["shippingOptions"].toList();
        QList<ShippingOption> _shippingOptions;
        for(const QVariant &var: map_shippingOptions)
            _shippingOptions << ShippingOption::fromMap(var.toMap());
        result.setShippingOptions(_shippingOptions);
        return result;
    }
    return result;
}

PaymentsValidatedRequestedInfo PaymentsValidatedRequestedInfo::fromJson(const QString &json) {
    return PaymentsValidatedRequestedInfo::fromMap(QJsonDocument::fromJson(json.toUtf8()).toVariant().toMap());
}

QByteArray PaymentsValidatedRequestedInfo::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const PaymentsValidatedRequestedInfo &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case PaymentsValidatedRequestedInfo::typePaymentsValidatedRequestedInfo:
        stream << item.flags();
        stream << item.id();
        stream << item.shippingOptions();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, PaymentsValidatedRequestedInfo &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<PaymentsValidatedRequestedInfo::PaymentsValidatedRequestedInfoClassType>(type));
    switch(type) {
    case PaymentsValidatedRequestedInfo::typePaymentsValidatedRequestedInfo: {
        qint32 m_flags;
        stream >> m_flags;
        item.setFlags(m_flags);
        QString m_id;
        stream >> m_id;
        item.setId(m_id);
        QList<ShippingOption> m_shipping_options;
        stream >> m_shipping_options;
        item.setShippingOptions(m_shipping_options);
    }
        break;
    }
    return stream;
}

QDebug operator<<(QDebug debug,  const PaymentsValidatedRequestedInfo &item) {
    QDebugStateSaver saver(debug);
    Q_UNUSED(saver)
    debug.nospace() << "Telegram.PaymentsValidatedRequestedInfo(";
    switch(item.classType()) {
    case PaymentsValidatedRequestedInfo::typePaymentsValidatedRequestedInfo:
        debug.nospace() << "classType: typePaymentsValidatedRequestedInfo";
        debug.nospace() << ", flags: " << item.flags();
        debug.nospace() << ", id: " << item.id();
        debug.nospace() << ", shippingOptions: " << item.shippingOptions();
        break;
    }
    debug.nospace() << ")";
    return debug;
}

