// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "peernotifysettings.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

PeerNotifySettings::PeerNotifySettings(PeerNotifySettingsClassType classType, InboundPkt *in) :
    m_flags(0),
    m_muteUntil(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

PeerNotifySettings::PeerNotifySettings(InboundPkt *in) :
    m_flags(0),
    m_muteUntil(0),
    m_classType(typePeerNotifySettingsEmpty)
{
    fetch(in);
}

PeerNotifySettings::PeerNotifySettings(const PeerNotifySettings &another) :
    TelegramTypeObject(),
    m_flags(0),
    m_muteUntil(0),
    m_classType(typePeerNotifySettingsEmpty)
{
    operator=(another);
}

PeerNotifySettings::PeerNotifySettings(const Null &null) :
    TelegramTypeObject(null),
    m_flags(0),
    m_muteUntil(0),
    m_classType(typePeerNotifySettingsEmpty)
{
}

PeerNotifySettings::~PeerNotifySettings() {
    
}

void PeerNotifySettings::setFlags(qint32 flags) {
    m_flags = flags;
}

qint32 PeerNotifySettings::flags() const {
    return m_flags;
}

void PeerNotifySettings::setMuteUntil(qint32 muteUntil) {
    m_muteUntil = muteUntil;
}

qint32 PeerNotifySettings::muteUntil() const {
    return m_muteUntil;
}

void PeerNotifySettings::setShowPreviews(bool showPreviews) {
    if(showPreviews) m_flags = (m_flags | (1<<0));
    else m_flags = (m_flags & ~(1<<0));
}

bool PeerNotifySettings::showPreviews() const {
    return (m_flags & 1<<0);
}

void PeerNotifySettings::setSilent(bool silent) {
    if(silent) m_flags = (m_flags | (1<<1));
    else m_flags = (m_flags & ~(1<<1));
}

bool PeerNotifySettings::silent() const {
    return (m_flags & 1<<1);
}

void PeerNotifySettings::setSound(const QString &sound) {
    m_sound = sound;
}

QString PeerNotifySettings::sound() const {
    return m_sound;
}

bool PeerNotifySettings::operator ==(const PeerNotifySettings &b) const {
    return m_classType == b.m_classType &&
           m_flags == b.m_flags &&
           m_muteUntil == b.m_muteUntil &&
           m_sound == b.m_sound;
}

PeerNotifySettings &PeerNotifySettings::operator =(const PeerNotifySettings &b) {
    m_classType = b.m_classType;
    m_flags = b.m_flags;
    m_muteUntil = b.m_muteUntil;
    m_sound = b.m_sound;
    setNull(b.isNull());
    return *this;
}

void PeerNotifySettings::setClassType(PeerNotifySettings::PeerNotifySettingsClassType classType) {
    m_classType = classType;
}

PeerNotifySettings::PeerNotifySettingsClassType PeerNotifySettings::classType() const {
    return m_classType;
}

bool PeerNotifySettings::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typePeerNotifySettingsEmpty: {
        m_classType = static_cast<PeerNotifySettingsClassType>(x);
        return true;
    }
        break;
    
    case typePeerNotifySettings: {
        m_flags = in->fetchInt();
        m_muteUntil = in->fetchInt();
        m_sound = in->fetchQString();
        m_classType = static_cast<PeerNotifySettingsClassType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool PeerNotifySettings::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typePeerNotifySettingsEmpty: {
        return true;
    }
        break;
    
    case typePeerNotifySettings: {
        out->appendInt(m_flags);
        out->appendInt(m_muteUntil);
        out->appendQString(m_sound);
        return true;
    }
        break;
    
    default:
        return false;
    }
}

QMap<QString, QVariant> PeerNotifySettings::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typePeerNotifySettingsEmpty: {
        result["classType"] = "PeerNotifySettings::typePeerNotifySettingsEmpty";
        return result;
    }
        break;
    
    case typePeerNotifySettings: {
        result["classType"] = "PeerNotifySettings::typePeerNotifySettings";
        if( showPreviews() ) result["showPreviews"] = QString::number(showPreviews());
        if( silent() ) result["silent"] = QString::number(silent());
        if( muteUntil() ) result["muteUntil"] = QString::number(muteUntil());
        if( !m_sound.isEmpty() ) result["sound"] = QVariant::fromValue<QString>(m_sound);
        return result;
    }
        break;
    
    default:
        return result;
    }
}

PeerNotifySettings PeerNotifySettings::fromMap(const QMap<QString, QVariant> &map) {
    PeerNotifySettings result;
    if(map.value("classType").toString() == "PeerNotifySettings::typePeerNotifySettingsEmpty") {
        result.setClassType(typePeerNotifySettingsEmpty);
        return result;
    }
    if(map.value("classType").toString() == "PeerNotifySettings::typePeerNotifySettings") {
        result.setClassType(typePeerNotifySettings);
        QVariant _showPreviews_var = map.value("showPreviews");
        if( !_showPreviews_var.isNull() ) {
            _showPreviews_var.convert( QVariant::nameToType("bool") );
            result.setShowPreviews( _showPreviews_var.value<bool>() );
        }
        
        QVariant _silent_var = map.value("silent");
        if( !_silent_var.isNull() ) {
            _silent_var.convert( QVariant::nameToType("bool") );
            result.setSilent( _silent_var.value<bool>() );
        }
        
        QVariant _muteUntil_var = map.value("muteUntil");
        if( !_muteUntil_var.isNull() ) {
            _muteUntil_var.convert( QVariant::nameToType("qint32") );
            result.setMuteUntil( _muteUntil_var.value<qint32>() );
        }
        
        QVariant _sound_var = map.value("sound");
        if( !_sound_var.isNull() ) {
            _sound_var.convert( QVariant::nameToType("QString") );
            result.setSound( _sound_var.value<QString>() );
        }
        
        return result;
    }
    return result;
}

PeerNotifySettings PeerNotifySettings::fromJson(const QString &json) {
    return PeerNotifySettings::fromMap(QJsonDocument::fromJson(json.toUtf8()).toVariant().toMap());
}

QByteArray PeerNotifySettings::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const PeerNotifySettings &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case PeerNotifySettings::typePeerNotifySettingsEmpty:
        
        break;
    case PeerNotifySettings::typePeerNotifySettings:
        stream << item.flags();
        stream << item.muteUntil();
        stream << item.sound();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, PeerNotifySettings &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<PeerNotifySettings::PeerNotifySettingsClassType>(type));
    switch(type) {
    case PeerNotifySettings::typePeerNotifySettingsEmpty: {
        
    }
        break;
    case PeerNotifySettings::typePeerNotifySettings: {
        qint32 m_flags;
        stream >> m_flags;
        item.setFlags(m_flags);
        qint32 m_mute_until;
        stream >> m_mute_until;
        item.setMuteUntil(m_mute_until);
        QString m_sound;
        stream >> m_sound;
        item.setSound(m_sound);
    }
        break;
    }
    return stream;
}

QDebug operator<<(QDebug debug,  const PeerNotifySettings &item) {
    QDebugStateSaver saver(debug);
    Q_UNUSED(saver)
    debug.nospace() << "Telegram.PeerNotifySettings(";
    switch(item.classType()) {
    case PeerNotifySettings::typePeerNotifySettingsEmpty:
        debug.nospace() << "classType: typePeerNotifySettingsEmpty";
        break;
    case PeerNotifySettings::typePeerNotifySettings:
        debug.nospace() << "classType: typePeerNotifySettings";
        debug.nospace() << ", flags: " << item.flags();
        debug.nospace() << ", muteUntil: " << item.muteUntil();
        debug.nospace() << ", sound: " << item.sound();
        break;
    }
    debug.nospace() << ")";
    return debug;
}

