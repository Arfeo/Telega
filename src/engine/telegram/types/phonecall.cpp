// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "phonecall.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

PhoneCall::PhoneCall(PhoneCallClassType classType, InboundPkt *in) :
    m_accessHash(0),
    m_adminId(0),
    m_date(0),
    m_duration(0),
    m_flags(0),
    m_id(0),
    m_keyFingerprint(0),
    m_participantId(0),
    m_receiveDate(0),
    m_startDate(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

PhoneCall::PhoneCall(InboundPkt *in) :
    m_accessHash(0),
    m_adminId(0),
    m_date(0),
    m_duration(0),
    m_flags(0),
    m_id(0),
    m_keyFingerprint(0),
    m_participantId(0),
    m_receiveDate(0),
    m_startDate(0),
    m_classType(typePhoneCallEmpty)
{
    fetch(in);
}

PhoneCall::PhoneCall(const PhoneCall &another) :
    TelegramTypeObject(),
    m_accessHash(0),
    m_adminId(0),
    m_date(0),
    m_duration(0),
    m_flags(0),
    m_id(0),
    m_keyFingerprint(0),
    m_participantId(0),
    m_receiveDate(0),
    m_startDate(0),
    m_classType(typePhoneCallEmpty)
{
    operator=(another);
}

PhoneCall::PhoneCall(const Null &null) :
    TelegramTypeObject(null),
    m_accessHash(0),
    m_adminId(0),
    m_date(0),
    m_duration(0),
    m_flags(0),
    m_id(0),
    m_keyFingerprint(0),
    m_participantId(0),
    m_receiveDate(0),
    m_startDate(0),
    m_classType(typePhoneCallEmpty)
{
}

PhoneCall::~PhoneCall() {

}

void PhoneCall::setAccessHash(qint64 accessHash) {
    m_accessHash = accessHash;
}

qint64 PhoneCall::accessHash() const {
    return m_accessHash;
}

void PhoneCall::setAdminId(qint32 adminId) {
    m_adminId = adminId;
}

qint32 PhoneCall::adminId() const {
    return m_adminId;
}

void PhoneCall::setAlternativeConnections(const QList<PhoneConnection> &alternativeConnections) {
    m_alternativeConnections = alternativeConnections;
}

QList<PhoneConnection> PhoneCall::alternativeConnections() const {
    return m_alternativeConnections;
}

void PhoneCall::setConnection(const PhoneConnection &connection) {
    m_connection = connection;
}

PhoneConnection PhoneCall::connection() const {
    return m_connection;
}

void PhoneCall::setDate(qint32 date) {
    m_date = date;
}

qint32 PhoneCall::date() const {
    return m_date;
}

void PhoneCall::setDuration(qint32 duration) {
    if(duration) m_flags = (m_flags | (1<<1));
    else m_flags = (m_flags & ~(1<<1));
    m_duration = duration;
}

qint32 PhoneCall::duration() const {
    return m_duration;
}

void PhoneCall::setFlags(qint32 flags) {
    m_flags = flags;
}

qint32 PhoneCall::flags() const {
    return m_flags;
}

void PhoneCall::setGAHash(const QByteArray &gAHash) {
    m_gAHash = gAHash;
}

QByteArray PhoneCall::gAHash() const {
    return m_gAHash;
}

void PhoneCall::setGAOrB(const QByteArray &gAOrB) {
    m_gAOrB = gAOrB;
}

QByteArray PhoneCall::gAOrB() const {
    return m_gAOrB;
}

void PhoneCall::setGB(const QByteArray &gB) {
    m_gB = gB;
}

QByteArray PhoneCall::gB() const {
    return m_gB;
}

void PhoneCall::setId(qint64 id) {
    m_id = id;
}

qint64 PhoneCall::id() const {
    return m_id;
}

void PhoneCall::setKeyFingerprint(qint64 keyFingerprint) {
    m_keyFingerprint = keyFingerprint;
}

qint64 PhoneCall::keyFingerprint() const {
    return m_keyFingerprint;
}

void PhoneCall::setNeedDebug(bool needDebug) {
    if(needDebug) m_flags = (m_flags | (1<<3));
    else m_flags = (m_flags & ~(1<<3));
}

bool PhoneCall::needDebug() const {
    return (m_flags & 1<<3);
}

void PhoneCall::setNeedRating(bool needRating) {
    if(needRating) m_flags = (m_flags | (1<<2));
    else m_flags = (m_flags & ~(1<<2));
}

bool PhoneCall::needRating() const {
    return (m_flags & 1<<2);
}

void PhoneCall::setParticipantId(qint32 participantId) {
    m_participantId = participantId;
}

qint32 PhoneCall::participantId() const {
    return m_participantId;
}

void PhoneCall::setProtocol(const PhoneCallProtocol &protocol) {
    m_protocol = protocol;
}

PhoneCallProtocol PhoneCall::protocol() const {
    return m_protocol;
}

void PhoneCall::setReason(const PhoneCallDiscardReason &reason) {
    if(!reason.isNull()) m_flags = (m_flags | (1<<0));
    else m_flags = (m_flags & ~(1<<0));
    m_reason = reason;
}

PhoneCallDiscardReason PhoneCall::reason() const {
    return m_reason;
}

void PhoneCall::setReceiveDate(qint32 receiveDate) {
    if(receiveDate) m_flags = (m_flags | (1<<0));
    else m_flags = (m_flags & ~(1<<0));
    m_receiveDate = receiveDate;
}

qint32 PhoneCall::receiveDate() const {
    return m_receiveDate;
}

void PhoneCall::setStartDate(qint32 startDate) {
    m_startDate = startDate;
}

qint32 PhoneCall::startDate() const {
    return m_startDate;
}

bool PhoneCall::operator ==(const PhoneCall &b) const {
    return m_classType == b.m_classType &&
           m_accessHash == b.m_accessHash &&
           m_adminId == b.m_adminId &&
           m_alternativeConnections == b.m_alternativeConnections &&
           m_connection == b.m_connection &&
           m_date == b.m_date &&
           m_duration == b.m_duration &&
           m_flags == b.m_flags &&
           m_gAHash == b.m_gAHash &&
           m_gAOrB == b.m_gAOrB &&
           m_gB == b.m_gB &&
           m_id == b.m_id &&
           m_keyFingerprint == b.m_keyFingerprint &&
           m_participantId == b.m_participantId &&
           m_protocol == b.m_protocol &&
           m_reason == b.m_reason &&
           m_receiveDate == b.m_receiveDate &&
           m_startDate == b.m_startDate;
}

PhoneCall &PhoneCall::operator =(const PhoneCall &b) {
    m_classType = b.m_classType;
    m_accessHash = b.m_accessHash;
    m_adminId = b.m_adminId;
    m_alternativeConnections = b.m_alternativeConnections;
    m_connection = b.m_connection;
    m_date = b.m_date;
    m_duration = b.m_duration;
    m_flags = b.m_flags;
    m_gAHash = b.m_gAHash;
    m_gAOrB = b.m_gAOrB;
    m_gB = b.m_gB;
    m_id = b.m_id;
    m_keyFingerprint = b.m_keyFingerprint;
    m_participantId = b.m_participantId;
    m_protocol = b.m_protocol;
    m_reason = b.m_reason;
    m_receiveDate = b.m_receiveDate;
    m_startDate = b.m_startDate;
    setNull(b.isNull());
    return *this;
}

void PhoneCall::setClassType(PhoneCall::PhoneCallClassType classType) {
    m_classType = classType;
}

PhoneCall::PhoneCallClassType PhoneCall::classType() const {
    return m_classType;
}

bool PhoneCall::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typePhoneCallEmpty: {
        m_id = in->fetchLong();
        m_classType = static_cast<PhoneCallClassType>(x);
        return true;
    }
        break;

    case typePhoneCallWaiting: {
        m_flags = in->fetchInt();
        m_id = in->fetchLong();
        m_accessHash = in->fetchLong();
        m_date = in->fetchInt();
        m_adminId = in->fetchInt();
        m_participantId = in->fetchInt();
        m_protocol.fetch(in);
        if(m_flags & 1<<0) {
            m_receiveDate = in->fetchInt();
        }
        m_classType = static_cast<PhoneCallClassType>(x);
        return true;
    }
        break;

    case typePhoneCallRequested: {
        m_id = in->fetchLong();
        m_accessHash = in->fetchLong();
        m_date = in->fetchInt();
        m_adminId = in->fetchInt();
        m_participantId = in->fetchInt();
        m_gAHash = in->fetchBytes();
        m_protocol.fetch(in);
        m_classType = static_cast<PhoneCallClassType>(x);
        return true;
    }
        break;

    case typePhoneCallAccepted: {
        m_id = in->fetchLong();
        m_accessHash = in->fetchLong();
        m_date = in->fetchInt();
        m_adminId = in->fetchInt();
        m_participantId = in->fetchInt();
        m_gB = in->fetchBytes();
        m_protocol.fetch(in);
        m_classType = static_cast<PhoneCallClassType>(x);
        return true;
    }
        break;

    case typePhoneCall: {
        m_id = in->fetchLong();
        m_accessHash = in->fetchLong();
        m_date = in->fetchInt();
        m_adminId = in->fetchInt();
        m_participantId = in->fetchInt();
        m_gAOrB = in->fetchBytes();
        m_keyFingerprint = in->fetchLong();
        m_protocol.fetch(in);
        m_connection.fetch(in);
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_alternativeConnections_length = in->fetchInt();
        m_alternativeConnections.clear();
        for (qint32 i = 0; i < m_alternativeConnections_length; i++) {
            PhoneConnection type;
            type.fetch(in);
            m_alternativeConnections.append(type);
        }
        m_startDate = in->fetchInt();
        m_classType = static_cast<PhoneCallClassType>(x);
        return true;
    }
        break;

    case typePhoneCallDiscarded: {
        m_flags = in->fetchInt();
        m_id = in->fetchLong();
        if(m_flags & 1<<0) {
            m_reason.fetch(in);
        }
        if(m_flags & 1<<1) {
            m_duration = in->fetchInt();
        }
        m_classType = static_cast<PhoneCallClassType>(x);
        return true;
    }
        break;

    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool PhoneCall::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typePhoneCallEmpty: {
        out->appendLong(m_id);
        return true;
    }
        break;

    case typePhoneCallWaiting: {
        out->appendInt(m_flags);
        out->appendLong(m_id);
        out->appendLong(m_accessHash);
        out->appendInt(m_date);
        out->appendInt(m_adminId);
        out->appendInt(m_participantId);
        m_protocol.push(out);
        if(m_flags & 1<<0) {
            out->appendInt(m_receiveDate);
        }
        return true;
    }
        break;

    case typePhoneCallRequested: {
        out->appendLong(m_id);
        out->appendLong(m_accessHash);
        out->appendInt(m_date);
        out->appendInt(m_adminId);
        out->appendInt(m_participantId);
        out->appendBytes(m_gAHash);
        m_protocol.push(out);
        return true;
    }
        break;

    case typePhoneCallAccepted: {
        out->appendLong(m_id);
        out->appendLong(m_accessHash);
        out->appendInt(m_date);
        out->appendInt(m_adminId);
        out->appendInt(m_participantId);
        out->appendBytes(m_gB);
        m_protocol.push(out);
        return true;
    }
        break;

    case typePhoneCall: {
        out->appendLong(m_id);
        out->appendLong(m_accessHash);
        out->appendInt(m_date);
        out->appendInt(m_adminId);
        out->appendInt(m_participantId);
        out->appendBytes(m_gAOrB);
        out->appendLong(m_keyFingerprint);
        m_protocol.push(out);
        m_connection.push(out);
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_alternativeConnections.count());
        for (qint32 i = 0; i < m_alternativeConnections.count(); i++) {
            m_alternativeConnections[i].push(out);
        }
        out->appendInt(m_startDate);
        return true;
    }
        break;

    case typePhoneCallDiscarded: {
        out->appendInt(m_flags);
        out->appendLong(m_id);
        if(m_flags & 1<<0) {
            m_reason.push(out);
        }
        if(m_flags & 1<<1) {
            out->appendInt(m_duration);
        }
        return true;
    }
        break;

    default:
        return false;
    }
}

QMap<QString, QVariant> PhoneCall::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typePhoneCallEmpty: {
        result["classType"] = "PhoneCall::typePhoneCallEmpty";
        if( id() ) result["id"] = QString::number(id());
        return result;
    }
        break;

    case typePhoneCallWaiting: {
        result["classType"] = "PhoneCall::typePhoneCallWaiting";
        if( id() ) result["id"] = QString::number(id());
        if( accessHash() ) result["accessHash"] = QString::number(accessHash());
        if( date() ) result["date"] = QString::number(date());
        if( adminId() ) result["adminId"] = QString::number(adminId());
        if( participantId() ) result["participantId"] = QString::number(participantId());
        if( !m_protocol.isNull() ) result["protocol"] = m_protocol.toMap();
        if( receiveDate() ) result["receiveDate"] = QString::number(receiveDate());
        return result;
    }
        break;

    case typePhoneCallRequested: {
        result["classType"] = "PhoneCall::typePhoneCallRequested";
        if( id() ) result["id"] = QString::number(id());
        if( accessHash() ) result["accessHash"] = QString::number(accessHash());
        if( date() ) result["date"] = QString::number(date());
        if( adminId() ) result["adminId"] = QString::number(adminId());
        if( participantId() ) result["participantId"] = QString::number(participantId());
        if( !m_gAHash.isEmpty() ) result["gAHash"] = QVariant::fromValue<QByteArray>(m_gAHash);
        if( !m_protocol.isNull() ) result["protocol"] = m_protocol.toMap();
        return result;
    }
        break;

    case typePhoneCallAccepted: {
        result["classType"] = "PhoneCall::typePhoneCallAccepted";
        if( id() ) result["id"] = QString::number(id());
        if( accessHash() ) result["accessHash"] = QString::number(accessHash());
        if( date() ) result["date"] = QString::number(date());
        if( adminId() ) result["adminId"] = QString::number(adminId());
        if( participantId() ) result["participantId"] = QString::number(participantId());
        if( !m_gB.isEmpty() ) result["gB"] = QVariant::fromValue<QByteArray>(m_gB);
        if( !m_protocol.isNull() ) result["protocol"] = m_protocol.toMap();
        return result;
    }
        break;

    case typePhoneCall: {
        result["classType"] = "PhoneCall::typePhoneCall";
        if( id() ) result["id"] = QString::number(id());
        if( accessHash() ) result["accessHash"] = QString::number(accessHash());
        if( date() ) result["date"] = QString::number(date());
        if( adminId() ) result["adminId"] = QString::number(adminId());
        if( participantId() ) result["participantId"] = QString::number(participantId());
        if( !m_gAOrB.isEmpty() ) result["gAOrB"] = QVariant::fromValue<QByteArray>(m_gAOrB);
        if( keyFingerprint() ) result["keyFingerprint"] = QString::number(keyFingerprint());
        if( !m_protocol.isNull() ) result["protocol"] = m_protocol.toMap();
        if( !m_connection.isNull() ) result["connection"] = m_connection.toMap();
        QList<QVariant> _alternativeConnections;
        for(const PhoneConnection &m__type: m_alternativeConnections)
            if( !m__type.isNull() ) _alternativeConnections << m__type.toMap();
        result["alternativeConnections"] = _alternativeConnections;
        if( startDate() ) result["startDate"] = QString::number(startDate());
        return result;
    }
        break;

    case typePhoneCallDiscarded: {
        result["classType"] = "PhoneCall::typePhoneCallDiscarded";
        if( needRating() ) result["needRating"] = QString::number(needRating());
        if( needDebug() ) result["needDebug"] = QString::number(needDebug());
        if( id() ) result["id"] = QString::number(id());
        if( !m_reason.isNull() ) result["reason"] = m_reason.toMap();
        if( duration() ) result["duration"] = QString::number(duration());
        return result;
    }
        break;

    default:
        return result;
    }
}

PhoneCall PhoneCall::fromMap(const QMap<QString, QVariant> &map) {
    PhoneCall result;
    if(map.value("classType").toString() == "PhoneCall::typePhoneCallEmpty") {
        result.setClassType(typePhoneCallEmpty);
        QVariant _id_var = map.value("id");
        if( !_id_var.isNull() ) {
            _id_var.convert( QVariant::nameToType("qint64") );
            result.setId( _id_var.value<qint64>() );
        }

        return result;
    }
    if(map.value("classType").toString() == "PhoneCall::typePhoneCallWaiting") {
        result.setClassType(typePhoneCallWaiting);
        QVariant _id_var = map.value("id");
        if( !_id_var.isNull() ) {
            _id_var.convert( QVariant::nameToType("qint64") );
            result.setId( _id_var.value<qint64>() );
        }

        QVariant _accessHash_var = map.value("accessHash");
        if( !_accessHash_var.isNull() ) {
            _accessHash_var.convert( QVariant::nameToType("qint64") );
            result.setAccessHash( _accessHash_var.value<qint64>() );
        }

        QVariant _date_var = map.value("date");
        if( !_date_var.isNull() ) {
            _date_var.convert( QVariant::nameToType("qint32") );
            result.setDate( _date_var.value<qint32>() );
        }

        QVariant _adminId_var = map.value("adminId");
        if( !_adminId_var.isNull() ) {
            _adminId_var.convert( QVariant::nameToType("qint32") );
            result.setAdminId( _adminId_var.value<qint32>() );
        }

        QVariant _participantId_var = map.value("participantId");
        if( !_participantId_var.isNull() ) {
            _participantId_var.convert( QVariant::nameToType("qint32") );
            result.setParticipantId( _participantId_var.value<qint32>() );
        }

        QVariant _protocol_var = map.value("protocol");
        if( !_protocol_var.isNull() )
            result.setProtocol( PhoneCallProtocol::fromMap(_protocol_var.toMap()) );

        QVariant _receiveDate_var = map.value("receiveDate");
        if( !_receiveDate_var.isNull() ) {
            _receiveDate_var.convert( QVariant::nameToType("qint32") );
            result.setReceiveDate( _receiveDate_var.value<qint32>() );
        }

        return result;
    }
    if(map.value("classType").toString() == "PhoneCall::typePhoneCallRequested") {
        result.setClassType(typePhoneCallRequested);
        QVariant _id_var = map.value("id");
        if( !_id_var.isNull() ) {
            _id_var.convert( QVariant::nameToType("qint64") );
            result.setId( _id_var.value<qint64>() );
        }

        QVariant _accessHash_var = map.value("accessHash");
        if( !_accessHash_var.isNull() ) {
            _accessHash_var.convert( QVariant::nameToType("qint64") );
            result.setAccessHash( _accessHash_var.value<qint64>() );
        }

        QVariant _date_var = map.value("date");
        if( !_date_var.isNull() ) {
            _date_var.convert( QVariant::nameToType("qint32") );
            result.setDate( _date_var.value<qint32>() );
        }

        QVariant _adminId_var = map.value("adminId");
        if( !_adminId_var.isNull() ) {
            _adminId_var.convert( QVariant::nameToType("qint32") );
            result.setAdminId( _adminId_var.value<qint32>() );
        }

        QVariant _participantId_var = map.value("participantId");
        if( !_participantId_var.isNull() ) {
            _participantId_var.convert( QVariant::nameToType("qint32") );
            result.setParticipantId( _participantId_var.value<qint32>() );
        }

        QVariant _gAHash_var = map.value("gAHash");
        if( !_gAHash_var.isNull() ) {
            _gAHash_var.convert( QVariant::nameToType("QByteArray") );
            result.setGAHash( _gAHash_var.value<QByteArray>() );
        }

        QVariant _protocol_var = map.value("protocol");
        if( !_protocol_var.isNull() )
            result.setProtocol( PhoneCallProtocol::fromMap(_protocol_var.toMap()) );

        return result;
    }
    if(map.value("classType").toString() == "PhoneCall::typePhoneCallAccepted") {
        result.setClassType(typePhoneCallAccepted);
        QVariant _id_var = map.value("id");
        if( !_id_var.isNull() ) {
            _id_var.convert( QVariant::nameToType("qint64") );
            result.setId( _id_var.value<qint64>() );
        }

        QVariant _accessHash_var = map.value("accessHash");
        if( !_accessHash_var.isNull() ) {
            _accessHash_var.convert( QVariant::nameToType("qint64") );
            result.setAccessHash( _accessHash_var.value<qint64>() );
        }

        QVariant _date_var = map.value("date");
        if( !_date_var.isNull() ) {
            _date_var.convert( QVariant::nameToType("qint32") );
            result.setDate( _date_var.value<qint32>() );
        }

        QVariant _adminId_var = map.value("adminId");
        if( !_adminId_var.isNull() ) {
            _adminId_var.convert( QVariant::nameToType("qint32") );
            result.setAdminId( _adminId_var.value<qint32>() );
        }

        QVariant _participantId_var = map.value("participantId");
        if( !_participantId_var.isNull() ) {
            _participantId_var.convert( QVariant::nameToType("qint32") );
            result.setParticipantId( _participantId_var.value<qint32>() );
        }

        QVariant _gB_var = map.value("gB");
        if( !_gB_var.isNull() ) {
            _gB_var.convert( QVariant::nameToType("QByteArray") );
            result.setGB( _gB_var.value<QByteArray>() );
        }

        QVariant _protocol_var = map.value("protocol");
        if( !_protocol_var.isNull() )
            result.setProtocol( PhoneCallProtocol::fromMap(_protocol_var.toMap()) );

        return result;
    }
    if(map.value("classType").toString() == "PhoneCall::typePhoneCall") {
        result.setClassType(typePhoneCall);
        QVariant _id_var = map.value("id");
        if( !_id_var.isNull() ) {
            _id_var.convert( QVariant::nameToType("qint64") );
            result.setId( _id_var.value<qint64>() );
        }

        QVariant _accessHash_var = map.value("accessHash");
        if( !_accessHash_var.isNull() ) {
            _accessHash_var.convert( QVariant::nameToType("qint64") );
            result.setAccessHash( _accessHash_var.value<qint64>() );
        }

        QVariant _date_var = map.value("date");
        if( !_date_var.isNull() ) {
            _date_var.convert( QVariant::nameToType("qint32") );
            result.setDate( _date_var.value<qint32>() );
        }

        QVariant _adminId_var = map.value("adminId");
        if( !_adminId_var.isNull() ) {
            _adminId_var.convert( QVariant::nameToType("qint32") );
            result.setAdminId( _adminId_var.value<qint32>() );
        }

        QVariant _participantId_var = map.value("participantId");
        if( !_participantId_var.isNull() ) {
            _participantId_var.convert( QVariant::nameToType("qint32") );
            result.setParticipantId( _participantId_var.value<qint32>() );
        }

        QVariant _gAOrB_var = map.value("gAOrB");
        if( !_gAOrB_var.isNull() ) {
            _gAOrB_var.convert( QVariant::nameToType("QByteArray") );
            result.setGAOrB( _gAOrB_var.value<QByteArray>() );
        }

        QVariant _keyFingerprint_var = map.value("keyFingerprint");
        if( !_keyFingerprint_var.isNull() ) {
            _keyFingerprint_var.convert( QVariant::nameToType("qint64") );
            result.setKeyFingerprint( _keyFingerprint_var.value<qint64>() );
        }

        QVariant _protocol_var = map.value("protocol");
        if( !_protocol_var.isNull() )
            result.setProtocol( PhoneCallProtocol::fromMap(_protocol_var.toMap()) );

        QVariant _connection_var = map.value("connection");
        if( !_connection_var.isNull() )
            result.setConnection( PhoneConnection::fromMap(_connection_var.toMap()) );

        QList<QVariant> map_alternativeConnections = map["alternativeConnections"].toList();
        QList<PhoneConnection> _alternativeConnections;
        for(const QVariant &var: map_alternativeConnections)
            _alternativeConnections << PhoneConnection::fromMap(var.toMap());
        result.setAlternativeConnections(_alternativeConnections);
        QVariant _startDate_var = map.value("startDate");
        if( !_startDate_var.isNull() ) {
            _startDate_var.convert( QVariant::nameToType("qint32") );
            result.setStartDate( _startDate_var.value<qint32>() );
        }

        return result;
    }
    if(map.value("classType").toString() == "PhoneCall::typePhoneCallDiscarded") {
        result.setClassType(typePhoneCallDiscarded);
        QVariant _needRating_var = map.value("needRating");
        if( !_needRating_var.isNull() ) {
            _needRating_var.convert( QVariant::nameToType("bool") );
            result.setNeedRating( _needRating_var.value<bool>() );
        }

        QVariant _needDebug_var = map.value("needDebug");
        if( !_needDebug_var.isNull() ) {
            _needDebug_var.convert( QVariant::nameToType("bool") );
            result.setNeedDebug( _needDebug_var.value<bool>() );
        }

        QVariant _id_var = map.value("id");
        if( !_id_var.isNull() ) {
            _id_var.convert( QVariant::nameToType("qint64") );
            result.setId( _id_var.value<qint64>() );
        }

        QVariant _reason_var = map.value("reason");
        if( !_reason_var.isNull() )
            result.setReason( PhoneCallDiscardReason::fromMap(_reason_var.toMap()) );

        QVariant _duration_var = map.value("duration");
        if( !_duration_var.isNull() ) {
            _duration_var.convert( QVariant::nameToType("qint32") );
            result.setDuration( _duration_var.value<qint32>() );
        }

        return result;
    }
    return result;
}

PhoneCall PhoneCall::fromJson(const QString &json) {
    return PhoneCall::fromMap(QJsonDocument::fromJson(json.toUtf8()).toVariant().toMap());
}

QByteArray PhoneCall::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const PhoneCall &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case PhoneCall::typePhoneCallEmpty:
        stream << item.id();
        break;
    case PhoneCall::typePhoneCallWaiting:
        stream << item.flags();
        stream << item.id();
        stream << item.accessHash();
        stream << item.date();
        stream << item.adminId();
        stream << item.participantId();
        stream << item.protocol();
        stream << item.receiveDate();
        break;
    case PhoneCall::typePhoneCallRequested:
        stream << item.id();
        stream << item.accessHash();
        stream << item.date();
        stream << item.adminId();
        stream << item.participantId();
        stream << item.gAHash();
        stream << item.protocol();
        break;
    case PhoneCall::typePhoneCallAccepted:
        stream << item.id();
        stream << item.accessHash();
        stream << item.date();
        stream << item.adminId();
        stream << item.participantId();
        stream << item.gB();
        stream << item.protocol();
        break;
    case PhoneCall::typePhoneCall:
        stream << item.id();
        stream << item.accessHash();
        stream << item.date();
        stream << item.adminId();
        stream << item.participantId();
        stream << item.gAOrB();
        stream << item.keyFingerprint();
        stream << item.protocol();
        stream << item.connection();
        stream << item.alternativeConnections();
        stream << item.startDate();
        break;
    case PhoneCall::typePhoneCallDiscarded:
        stream << item.flags();
        stream << item.id();
        stream << item.reason();
        stream << item.duration();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, PhoneCall &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<PhoneCall::PhoneCallClassType>(type));
    switch(type) {
    case PhoneCall::typePhoneCallEmpty: {
        qint64 m_id;
        stream >> m_id;
        item.setId(m_id);
    }
        break;
    case PhoneCall::typePhoneCallWaiting: {
        qint32 m_flags;
        stream >> m_flags;
        item.setFlags(m_flags);
        qint64 m_id;
        stream >> m_id;
        item.setId(m_id);
        qint64 m_access_hash;
        stream >> m_access_hash;
        item.setAccessHash(m_access_hash);
        qint32 m_date;
        stream >> m_date;
        item.setDate(m_date);
        qint32 m_admin_id;
        stream >> m_admin_id;
        item.setAdminId(m_admin_id);
        qint32 m_participant_id;
        stream >> m_participant_id;
        item.setParticipantId(m_participant_id);
        PhoneCallProtocol m_protocol;
        stream >> m_protocol;
        item.setProtocol(m_protocol);
        qint32 m_receive_date;
        stream >> m_receive_date;
        item.setReceiveDate(m_receive_date);
    }
        break;
    case PhoneCall::typePhoneCallRequested: {
        qint64 m_id;
        stream >> m_id;
        item.setId(m_id);
        qint64 m_access_hash;
        stream >> m_access_hash;
        item.setAccessHash(m_access_hash);
        qint32 m_date;
        stream >> m_date;
        item.setDate(m_date);
        qint32 m_admin_id;
        stream >> m_admin_id;
        item.setAdminId(m_admin_id);
        qint32 m_participant_id;
        stream >> m_participant_id;
        item.setParticipantId(m_participant_id);
        QByteArray m_g_a_hash;
        stream >> m_g_a_hash;
        item.setGAHash(m_g_a_hash);
        PhoneCallProtocol m_protocol;
        stream >> m_protocol;
        item.setProtocol(m_protocol);
    }
        break;
    case PhoneCall::typePhoneCallAccepted: {
        qint64 m_id;
        stream >> m_id;
        item.setId(m_id);
        qint64 m_access_hash;
        stream >> m_access_hash;
        item.setAccessHash(m_access_hash);
        qint32 m_date;
        stream >> m_date;
        item.setDate(m_date);
        qint32 m_admin_id;
        stream >> m_admin_id;
        item.setAdminId(m_admin_id);
        qint32 m_participant_id;
        stream >> m_participant_id;
        item.setParticipantId(m_participant_id);
        QByteArray m_g_b;
        stream >> m_g_b;
        item.setGB(m_g_b);
        PhoneCallProtocol m_protocol;
        stream >> m_protocol;
        item.setProtocol(m_protocol);
    }
        break;
    case PhoneCall::typePhoneCall: {
        qint64 m_id;
        stream >> m_id;
        item.setId(m_id);
        qint64 m_access_hash;
        stream >> m_access_hash;
        item.setAccessHash(m_access_hash);
        qint32 m_date;
        stream >> m_date;
        item.setDate(m_date);
        qint32 m_admin_id;
        stream >> m_admin_id;
        item.setAdminId(m_admin_id);
        qint32 m_participant_id;
        stream >> m_participant_id;
        item.setParticipantId(m_participant_id);
        QByteArray m_g_a_or_b;
        stream >> m_g_a_or_b;
        item.setGAOrB(m_g_a_or_b);
        qint64 m_key_fingerprint;
        stream >> m_key_fingerprint;
        item.setKeyFingerprint(m_key_fingerprint);
        PhoneCallProtocol m_protocol;
        stream >> m_protocol;
        item.setProtocol(m_protocol);
        PhoneConnection m_connection;
        stream >> m_connection;
        item.setConnection(m_connection);
        QList<PhoneConnection> m_alternative_connections;
        stream >> m_alternative_connections;
        item.setAlternativeConnections(m_alternative_connections);
        qint32 m_start_date;
        stream >> m_start_date;
        item.setStartDate(m_start_date);
    }
        break;
    case PhoneCall::typePhoneCallDiscarded: {
        qint32 m_flags;
        stream >> m_flags;
        item.setFlags(m_flags);
        qint64 m_id;
        stream >> m_id;
        item.setId(m_id);
        PhoneCallDiscardReason m_reason;
        stream >> m_reason;
        item.setReason(m_reason);
        qint32 m_duration;
        stream >> m_duration;
        item.setDuration(m_duration);
    }
        break;
    }
    return stream;
}

/*QDebug operator<<(QDebug debug,  const PhoneCall &item) {
    QDebugStateSaver saver(debug);
    Q_UNUSED(saver)
    debug.nospace() << "Telegram.PhoneCall(";
    switch(item.classType()) {
    case PhoneCall::typePhoneCallEmpty:
        debug.nospace() << "classType: typePhoneCallEmpty";
        debug.nospace() << ", id: " << item.id();
        break;
    case PhoneCall::typePhoneCallWaiting:
        debug.nospace() << "classType: typePhoneCallWaiting";
        debug.nospace() << ", flags: " << item.flags();
        debug.nospace() << ", id: " << item.id();
        debug.nospace() << ", accessHash: " << item.accessHash();
        debug.nospace() << ", date: " << item.date();
        debug.nospace() << ", adminId: " << item.adminId();
        debug.nospace() << ", participantId: " << item.participantId();
        debug.nospace() << ", protocol: " << item.protocol();
        debug.nospace() << ", receiveDate: " << item.receiveDate();
        break;
    case PhoneCall::typePhoneCallRequested:
        debug.nospace() << "classType: typePhoneCallRequested";
        debug.nospace() << ", id: " << item.id();
        debug.nospace() << ", accessHash: " << item.accessHash();
        debug.nospace() << ", date: " << item.date();
        debug.nospace() << ", adminId: " << item.adminId();
        debug.nospace() << ", participantId: " << item.participantId();
        debug.nospace() << ", gAHash: " << item.gAHash();
        debug.nospace() << ", protocol: " << item.protocol();
        break;
    case PhoneCall::typePhoneCallAccepted:
        debug.nospace() << "classType: typePhoneCallAccepted";
        debug.nospace() << ", id: " << item.id();
        debug.nospace() << ", accessHash: " << item.accessHash();
        debug.nospace() << ", date: " << item.date();
        debug.nospace() << ", adminId: " << item.adminId();
        debug.nospace() << ", participantId: " << item.participantId();
        debug.nospace() << ", gB: " << item.gB();
        debug.nospace() << ", protocol: " << item.protocol();
        break;
    case PhoneCall::typePhoneCall:
        debug.nospace() << "classType: typePhoneCall";
        debug.nospace() << ", id: " << item.id();
        debug.nospace() << ", accessHash: " << item.accessHash();
        debug.nospace() << ", date: " << item.date();
        debug.nospace() << ", adminId: " << item.adminId();
        debug.nospace() << ", participantId: " << item.participantId();
        debug.nospace() << ", gAOrB: " << item.gAOrB();
        debug.nospace() << ", keyFingerprint: " << item.keyFingerprint();
        debug.nospace() << ", protocol: " << item.protocol();
        debug.nospace() << ", connection: " << item.connection();
        debug.nospace() << ", alternativeConnections: " << item.alternativeConnections();
        debug.nospace() << ", startDate: " << item.startDate();
        break;
    case PhoneCall::typePhoneCallDiscarded:
        debug.nospace() << "classType: typePhoneCallDiscarded";
        debug.nospace() << ", flags: " << item.flags();
        debug.nospace() << ", id: " << item.id();
        debug.nospace() << ", reason: " << item.reason();
        debug.nospace() << ", duration: " << item.duration();
        break;
    }
    debug.nospace() << ")";
    return debug;
}
*/
