// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "phonecalldiscardreason.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

PhoneCallDiscardReason::PhoneCallDiscardReason(PhoneCallDiscardReasonClassType classType, InboundPkt *in) :
    m_classType(classType)
{
    if(in) fetch(in);
}

PhoneCallDiscardReason::PhoneCallDiscardReason(InboundPkt *in) :
    m_classType(typePhoneCallDiscardReasonMissed)
{
    fetch(in);
}

PhoneCallDiscardReason::PhoneCallDiscardReason(const PhoneCallDiscardReason &another) :
    TelegramTypeObject(),
    m_classType(typePhoneCallDiscardReasonMissed)
{
    operator=(another);
}

PhoneCallDiscardReason::PhoneCallDiscardReason(const Null &null) :
    TelegramTypeObject(null),
    m_classType(typePhoneCallDiscardReasonMissed)
{
}

PhoneCallDiscardReason::~PhoneCallDiscardReason() {
    
}

bool PhoneCallDiscardReason::operator ==(const PhoneCallDiscardReason &b) const {
    return m_classType == b.m_classType;
}

PhoneCallDiscardReason &PhoneCallDiscardReason::operator =(const PhoneCallDiscardReason &b) {
    m_classType = b.m_classType;
    setNull(b.isNull());
    return *this;
}

void PhoneCallDiscardReason::setClassType(PhoneCallDiscardReason::PhoneCallDiscardReasonClassType classType) {
    m_classType = classType;
}

PhoneCallDiscardReason::PhoneCallDiscardReasonClassType PhoneCallDiscardReason::classType() const {
    return m_classType;
}

bool PhoneCallDiscardReason::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typePhoneCallDiscardReasonMissed: {
        m_classType = static_cast<PhoneCallDiscardReasonClassType>(x);
        return true;
    }
        break;
    
    case typePhoneCallDiscardReasonDisconnect: {
        m_classType = static_cast<PhoneCallDiscardReasonClassType>(x);
        return true;
    }
        break;
    
    case typePhoneCallDiscardReasonHangup: {
        m_classType = static_cast<PhoneCallDiscardReasonClassType>(x);
        return true;
    }
        break;
    
    case typePhoneCallDiscardReasonBusy: {
        m_classType = static_cast<PhoneCallDiscardReasonClassType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool PhoneCallDiscardReason::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typePhoneCallDiscardReasonMissed: {
        return true;
    }
        break;
    
    case typePhoneCallDiscardReasonDisconnect: {
        return true;
    }
        break;
    
    case typePhoneCallDiscardReasonHangup: {
        return true;
    }
        break;
    
    case typePhoneCallDiscardReasonBusy: {
        return true;
    }
        break;
    
    default:
        return false;
    }
}

QMap<QString, QVariant> PhoneCallDiscardReason::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typePhoneCallDiscardReasonMissed: {
        result["classType"] = "PhoneCallDiscardReason::typePhoneCallDiscardReasonMissed";
        return result;
    }
        break;
    
    case typePhoneCallDiscardReasonDisconnect: {
        result["classType"] = "PhoneCallDiscardReason::typePhoneCallDiscardReasonDisconnect";
        return result;
    }
        break;
    
    case typePhoneCallDiscardReasonHangup: {
        result["classType"] = "PhoneCallDiscardReason::typePhoneCallDiscardReasonHangup";
        return result;
    }
        break;
    
    case typePhoneCallDiscardReasonBusy: {
        result["classType"] = "PhoneCallDiscardReason::typePhoneCallDiscardReasonBusy";
        return result;
    }
        break;
    
    default:
        return result;
    }
}

PhoneCallDiscardReason PhoneCallDiscardReason::fromMap(const QMap<QString, QVariant> &map) {
    PhoneCallDiscardReason result;
    if(map.value("classType").toString() == "PhoneCallDiscardReason::typePhoneCallDiscardReasonMissed") {
        result.setClassType(typePhoneCallDiscardReasonMissed);
        return result;
    }
    if(map.value("classType").toString() == "PhoneCallDiscardReason::typePhoneCallDiscardReasonDisconnect") {
        result.setClassType(typePhoneCallDiscardReasonDisconnect);
        return result;
    }
    if(map.value("classType").toString() == "PhoneCallDiscardReason::typePhoneCallDiscardReasonHangup") {
        result.setClassType(typePhoneCallDiscardReasonHangup);
        return result;
    }
    if(map.value("classType").toString() == "PhoneCallDiscardReason::typePhoneCallDiscardReasonBusy") {
        result.setClassType(typePhoneCallDiscardReasonBusy);
        return result;
    }
    return result;
}

PhoneCallDiscardReason PhoneCallDiscardReason::fromJson(const QString &json) {
    return PhoneCallDiscardReason::fromMap(QJsonDocument::fromJson(json.toUtf8()).toVariant().toMap());
}

QByteArray PhoneCallDiscardReason::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const PhoneCallDiscardReason &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case PhoneCallDiscardReason::typePhoneCallDiscardReasonMissed:
        
        break;
    case PhoneCallDiscardReason::typePhoneCallDiscardReasonDisconnect:
        
        break;
    case PhoneCallDiscardReason::typePhoneCallDiscardReasonHangup:
        
        break;
    case PhoneCallDiscardReason::typePhoneCallDiscardReasonBusy:
        
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, PhoneCallDiscardReason &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<PhoneCallDiscardReason::PhoneCallDiscardReasonClassType>(type));
    switch(type) {
    case PhoneCallDiscardReason::typePhoneCallDiscardReasonMissed: {
        
    }
        break;
    case PhoneCallDiscardReason::typePhoneCallDiscardReasonDisconnect: {
        
    }
        break;
    case PhoneCallDiscardReason::typePhoneCallDiscardReasonHangup: {
        
    }
        break;
    case PhoneCallDiscardReason::typePhoneCallDiscardReasonBusy: {
        
    }
        break;
    }
    return stream;
}

QDebug operator<<(QDebug debug,  const PhoneCallDiscardReason &item) {
    QDebugStateSaver saver(debug);
    Q_UNUSED(saver)
    debug.nospace() << "Telegram.PhoneCallDiscardReason(";
    switch(item.classType()) {
    case PhoneCallDiscardReason::typePhoneCallDiscardReasonMissed:
        debug.nospace() << "classType: typePhoneCallDiscardReasonMissed";
        break;
    case PhoneCallDiscardReason::typePhoneCallDiscardReasonDisconnect:
        debug.nospace() << "classType: typePhoneCallDiscardReasonDisconnect";
        break;
    case PhoneCallDiscardReason::typePhoneCallDiscardReasonHangup:
        debug.nospace() << "classType: typePhoneCallDiscardReasonHangup";
        break;
    case PhoneCallDiscardReason::typePhoneCallDiscardReasonBusy:
        debug.nospace() << "classType: typePhoneCallDiscardReasonBusy";
        break;
    }
    debug.nospace() << ")";
    return debug;
}

