// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "phonecallprotocol.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

PhoneCallProtocol::PhoneCallProtocol(PhoneCallProtocolClassType classType, InboundPkt *in) :
    m_flags(0),
    m_maxLayer(0),
    m_minLayer(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

PhoneCallProtocol::PhoneCallProtocol(InboundPkt *in) :
    m_flags(0),
    m_maxLayer(0),
    m_minLayer(0),
    m_classType(typePhoneCallProtocol)
{
    fetch(in);
}

PhoneCallProtocol::PhoneCallProtocol(const PhoneCallProtocol &another) :
    TelegramTypeObject(),
    m_flags(0),
    m_maxLayer(0),
    m_minLayer(0),
    m_classType(typePhoneCallProtocol)
{
    operator=(another);
}

PhoneCallProtocol::PhoneCallProtocol(const Null &null) :
    TelegramTypeObject(null),
    m_flags(0),
    m_maxLayer(0),
    m_minLayer(0),
    m_classType(typePhoneCallProtocol)
{
}

PhoneCallProtocol::~PhoneCallProtocol() {

}

void PhoneCallProtocol::setFlags(qint32 flags) {
    m_flags = flags;
}

qint32 PhoneCallProtocol::flags() const {
    return m_flags;
}

void PhoneCallProtocol::setMaxLayer(qint32 maxLayer) {
    m_maxLayer = maxLayer;
}

qint32 PhoneCallProtocol::maxLayer() const {
    return m_maxLayer;
}

void PhoneCallProtocol::setMinLayer(qint32 minLayer) {
    m_minLayer = minLayer;
}

qint32 PhoneCallProtocol::minLayer() const {
    return m_minLayer;
}

void PhoneCallProtocol::setUdpP2p(bool udpP2p) {
    if(udpP2p) m_flags = (m_flags | (1<<0));
    else m_flags = (m_flags & ~(1<<0));
}

bool PhoneCallProtocol::udpP2p() const {
    return (m_flags & 1<<0);
}

void PhoneCallProtocol::setUdpReflector(bool udpReflector) {
    if(udpReflector) m_flags = (m_flags | (1<<1));
    else m_flags = (m_flags & ~(1<<1));
}

bool PhoneCallProtocol::udpReflector() const {
    return (m_flags & 1<<1);
}

bool PhoneCallProtocol::operator ==(const PhoneCallProtocol &b) const {
    return m_classType == b.m_classType &&
           m_flags == b.m_flags &&
           m_maxLayer == b.m_maxLayer &&
           m_minLayer == b.m_minLayer;
}

PhoneCallProtocol &PhoneCallProtocol::operator =(const PhoneCallProtocol &b) {
    m_classType = b.m_classType;
    m_flags = b.m_flags;
    m_maxLayer = b.m_maxLayer;
    m_minLayer = b.m_minLayer;
    setNull(b.isNull());
    return *this;
}

void PhoneCallProtocol::setClassType(PhoneCallProtocol::PhoneCallProtocolClassType classType) {
    m_classType = classType;
}

PhoneCallProtocol::PhoneCallProtocolClassType PhoneCallProtocol::classType() const {
    return m_classType;
}

bool PhoneCallProtocol::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typePhoneCallProtocol: {
        m_flags = in->fetchInt();
        m_minLayer = in->fetchInt();
        m_maxLayer = in->fetchInt();
        m_classType = static_cast<PhoneCallProtocolClassType>(x);
        return true;
    }
        break;

    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool PhoneCallProtocol::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typePhoneCallProtocol: {
        out->appendInt(m_flags);
        out->appendInt(m_minLayer);
        out->appendInt(m_maxLayer);
        return true;
    }
        break;

    default:
        return false;
    }
}

QMap<QString, QVariant> PhoneCallProtocol::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typePhoneCallProtocol: {
        result["classType"] = "PhoneCallProtocol::typePhoneCallProtocol";
        if( udpP2p() ) result["udpP2p"] = QString::number(udpP2p());
        if( udpReflector() ) result["udpReflector"] = QString::number(udpReflector());
        if( minLayer() ) result["minLayer"] = QString::number(minLayer());
        if( maxLayer() ) result["maxLayer"] = QString::number(maxLayer());
        return result;
    }
        break;

    default:
        return result;
    }
}

PhoneCallProtocol PhoneCallProtocol::fromMap(const QMap<QString, QVariant> &map) {
    PhoneCallProtocol result;
    if(map.value("classType").toString() == "PhoneCallProtocol::typePhoneCallProtocol") {
        result.setClassType(typePhoneCallProtocol);
        QVariant _udpP2p_var = map.value("udpP2p");
        if( !_udpP2p_var.isNull() ) {
            _udpP2p_var.convert( QVariant::nameToType("bool") );
            result.setUdpP2p( _udpP2p_var.value<bool>() );
        }

        QVariant _udpReflector_var = map.value("udpReflector");
        if( !_udpReflector_var.isNull() ) {
            _udpReflector_var.convert( QVariant::nameToType("bool") );
            result.setUdpReflector( _udpReflector_var.value<bool>() );
        }

        QVariant _minLayer_var = map.value("minLayer");
        if( !_minLayer_var.isNull() ) {
            _minLayer_var.convert( QVariant::nameToType("qint32") );
            result.setMinLayer( _minLayer_var.value<qint32>() );
        }

        QVariant _maxLayer_var = map.value("maxLayer");
        if( !_maxLayer_var.isNull() ) {
            _maxLayer_var.convert( QVariant::nameToType("qint32") );
            result.setMaxLayer( _maxLayer_var.value<qint32>() );
        }

        return result;
    }
    return result;
}

PhoneCallProtocol PhoneCallProtocol::fromJson(const QString &json) {
    return PhoneCallProtocol::fromMap(QJsonDocument::fromJson(json.toUtf8()).toVariant().toMap());
}

QByteArray PhoneCallProtocol::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const PhoneCallProtocol &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case PhoneCallProtocol::typePhoneCallProtocol:
        stream << item.flags();
        stream << item.minLayer();
        stream << item.maxLayer();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, PhoneCallProtocol &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<PhoneCallProtocol::PhoneCallProtocolClassType>(type));
    switch(type) {
    case PhoneCallProtocol::typePhoneCallProtocol: {
        qint32 m_flags;
        stream >> m_flags;
        item.setFlags(m_flags);
        qint32 m_min_layer;
        stream >> m_min_layer;
        item.setMinLayer(m_min_layer);
        qint32 m_max_layer;
        stream >> m_max_layer;
        item.setMaxLayer(m_max_layer);
    }
        break;
    }
    return stream;
}

/*QDebug operator<<(QDebug debug,  const PhoneCallProtocol &item) {
    QDebugStateSaver saver(debug);
    Q_UNUSED(saver)
    debug.nospace() << "Telegram.PhoneCallProtocol(";
    switch(item.classType()) {
    case PhoneCallProtocol::typePhoneCallProtocol:
        debug.nospace() << "classType: typePhoneCallProtocol";
        debug.nospace() << ", flags: " << item.flags();
        debug.nospace() << ", minLayer: " << item.minLayer();
        debug.nospace() << ", maxLayer: " << item.maxLayer();
        break;
    }
    debug.nospace() << ")";
    return debug;
}
*/
