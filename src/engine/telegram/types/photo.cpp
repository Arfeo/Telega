// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "photo.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

Photo::Photo(PhotoClassType classType, InboundPkt *in) :
    m_accessHash(0),
    m_date(0),
    m_flags(0),
    m_id(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

Photo::Photo(InboundPkt *in) :
    m_accessHash(0),
    m_date(0),
    m_flags(0),
    m_id(0),
    m_classType(typePhotoEmpty)
{
    fetch(in);
}

Photo::Photo(const Photo &another) :
    TelegramTypeObject(),
    m_accessHash(0),
    m_date(0),
    m_flags(0),
    m_id(0),
    m_classType(typePhotoEmpty)
{
    operator=(another);
}

Photo::Photo(const Null &null) :
    TelegramTypeObject(null),
    m_accessHash(0),
    m_date(0),
    m_flags(0),
    m_id(0),
    m_classType(typePhotoEmpty)
{
}

Photo::~Photo() {

}

void Photo::setAccessHash(qint64 accessHash) {
    m_accessHash = accessHash;
}

qint64 Photo::accessHash() const {
    return m_accessHash;
}

void Photo::setDate(qint32 date) {
    m_date = date;
}

qint32 Photo::date() const {
    return m_date;
}

void Photo::setFlags(qint32 flags) {
    m_flags = flags;
}

qint32 Photo::flags() const {
    return m_flags;
}

void Photo::setHasStickers(bool hasStickers) {
    if(hasStickers) m_flags = (m_flags | (1<<0));
    else m_flags = (m_flags & ~(1<<0));
}

bool Photo::hasStickers() const {
    return (m_flags & 1<<0);
}

void Photo::setId(qint64 id) {
    m_id = id;
}

qint64 Photo::id() const {
    return m_id;
}

void Photo::setSizes(const QList<PhotoSize> &sizes) {
    m_sizes = sizes;
}

QList<PhotoSize> Photo::sizes() const {
    return m_sizes;
}

bool Photo::operator ==(const Photo &b) const {
    return m_classType == b.m_classType &&
           m_accessHash == b.m_accessHash &&
           m_date == b.m_date &&
           m_flags == b.m_flags &&
           m_id == b.m_id &&
           m_sizes == b.m_sizes;
}

Photo &Photo::operator =(const Photo &b) {
    m_classType = b.m_classType;
    m_accessHash = b.m_accessHash;
    m_date = b.m_date;
    m_flags = b.m_flags;
    m_id = b.m_id;
    m_sizes = b.m_sizes;
    setNull(b.isNull());
    return *this;
}

void Photo::setClassType(Photo::PhotoClassType classType) {
    m_classType = classType;
}

Photo::PhotoClassType Photo::classType() const {
    return m_classType;
}

bool Photo::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typePhotoEmpty: {
        m_id = in->fetchLong();
        m_classType = static_cast<PhotoClassType>(x);
        return true;
    }
        break;

    case typePhoto: {
        m_flags = in->fetchInt();
        m_id = in->fetchLong();
        m_accessHash = in->fetchLong();
        m_date = in->fetchInt();
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_sizes_length = in->fetchInt();
        m_sizes.clear();
        for (qint32 i = 0; i < m_sizes_length; i++) {
            PhotoSize type;
            type.fetch(in);
            m_sizes.append(type);
        }
        m_classType = static_cast<PhotoClassType>(x);
        return true;
    }
        break;

    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool Photo::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typePhotoEmpty: {
        out->appendLong(m_id);
        return true;
    }
        break;

    case typePhoto: {
        out->appendInt(m_flags);
        out->appendLong(m_id);
        out->appendLong(m_accessHash);
        out->appendInt(m_date);
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_sizes.count());
        for (qint32 i = 0; i < m_sizes.count(); i++) {
            m_sizes[i].push(out);
        }
        return true;
    }
        break;

    default:
        return false;
    }
}

QMap<QString, QVariant> Photo::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typePhotoEmpty: {
        result["classType"] = "Photo::typePhotoEmpty";
        if( id() ) result["id"] = QString::number(id());
        return result;
    }
        break;

    case typePhoto: {
        result["classType"] = "Photo::typePhoto";
        if( hasStickers() ) result["hasStickers"] = QString::number(hasStickers());
        if( id() ) result["id"] = QString::number(id());
        if( accessHash() ) result["accessHash"] = QString::number(accessHash());
        if( date() ) result["date"] = QString::number(date());
        QList<QVariant> _sizes;
        for(const PhotoSize &m__type: m_sizes)
            if( !m__type.isNull() ) _sizes << m__type.toMap();
        result["sizes"] = _sizes;
        return result;
    }
        break;

    default:
        return result;
    }
}

Photo Photo::fromMap(const QMap<QString, QVariant> &map) {
    Photo result;
    if(map.value("classType").toString() == "Photo::typePhotoEmpty") {
        result.setClassType(typePhotoEmpty);
        QVariant _id_var = map.value("id");
        if( !_id_var.isNull() ) {
            _id_var.convert( QVariant::nameToType("qint64") );
            result.setId( _id_var.value<qint64>() );
        }

        return result;
    }
    if(map.value("classType").toString() == "Photo::typePhoto") {
        result.setClassType(typePhoto);
        QVariant _hasStickers_var = map.value("hasStickers");
        if( !_hasStickers_var.isNull() ) {
            _hasStickers_var.convert( QVariant::nameToType("bool") );
            result.setHasStickers( _hasStickers_var.value<bool>() );
        }

        QVariant _id_var = map.value("id");
        if( !_id_var.isNull() ) {
            _id_var.convert( QVariant::nameToType("qint64") );
            result.setId( _id_var.value<qint64>() );
        }

        QVariant _accessHash_var = map.value("accessHash");
        if( !_accessHash_var.isNull() ) {
            _accessHash_var.convert( QVariant::nameToType("qint64") );
            result.setAccessHash( _accessHash_var.value<qint64>() );
        }

        QVariant _date_var = map.value("date");
        if( !_date_var.isNull() ) {
            _date_var.convert( QVariant::nameToType("qint32") );
            result.setDate( _date_var.value<qint32>() );
        }

        QList<QVariant> map_sizes = map["sizes"].toList();
        QList<PhotoSize> _sizes;
        for(const QVariant &var: map_sizes)
            _sizes << PhotoSize::fromMap(var.toMap());
        result.setSizes(_sizes);
        return result;
    }
    return result;
}

Photo Photo::fromJson(const QString &json) {
    return Photo::fromMap(QJsonDocument::fromJson(json.toUtf8()).toVariant().toMap());
}

QByteArray Photo::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const Photo &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case Photo::typePhotoEmpty:
        stream << item.id();
        break;
    case Photo::typePhoto:
        stream << item.flags();
        stream << item.id();
        stream << item.accessHash();
        stream << item.date();
        stream << item.sizes();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, Photo &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<Photo::PhotoClassType>(type));
    switch(type) {
    case Photo::typePhotoEmpty: {
        qint64 m_id;
        stream >> m_id;
        item.setId(m_id);
    }
        break;
    case Photo::typePhoto: {
        qint32 m_flags;
        stream >> m_flags;
        item.setFlags(m_flags);
        qint64 m_id;
        stream >> m_id;
        item.setId(m_id);
        qint64 m_access_hash;
        stream >> m_access_hash;
        item.setAccessHash(m_access_hash);
        qint32 m_date;
        stream >> m_date;
        item.setDate(m_date);
        QList<PhotoSize> m_sizes;
        stream >> m_sizes;
        item.setSizes(m_sizes);
    }
        break;
    }
    return stream;
}

/*QDebug operator<<(QDebug debug,  const Photo &item) {
    QDebugStateSaver saver(debug);
    Q_UNUSED(saver)
    debug.nospace() << "Telegram.Photo(";
    switch(item.classType()) {
    case Photo::typePhotoEmpty:
        debug.nospace() << "classType: typePhotoEmpty";
        debug.nospace() << ", id: " << item.id();
        break;
    case Photo::typePhoto:
        debug.nospace() << "classType: typePhoto";
        debug.nospace() << ", flags: " << item.flags();
        debug.nospace() << ", id: " << item.id();
        debug.nospace() << ", accessHash: " << item.accessHash();
        debug.nospace() << ", date: " << item.date();
        debug.nospace() << ", sizes: " << item.sizes();
        break;
    }
    debug.nospace() << ")";
    return debug;
}
*/
