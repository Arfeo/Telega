// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "photosize.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

PhotoSize::PhotoSize(PhotoSizeClassType classType, InboundPkt *in) :
    m_h(0),
    m_size(0),
    m_w(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

PhotoSize::PhotoSize(InboundPkt *in) :
    m_h(0),
    m_size(0),
    m_w(0),
    m_classType(typePhotoSizeEmptySecret23)
{
    fetch(in);
}

PhotoSize::PhotoSize(const PhotoSize &another) :
    TelegramTypeObject(),
    m_h(0),
    m_size(0),
    m_w(0),
    m_classType(typePhotoSizeEmptySecret23)
{
    operator=(another);
}

PhotoSize::PhotoSize(const Null &null) :
    TelegramTypeObject(null),
    m_h(0),
    m_size(0),
    m_w(0),
    m_classType(typePhotoSizeEmptySecret23)
{
}

PhotoSize::~PhotoSize() {
    
}

void PhotoSize::setBytes(const QByteArray &bytes) {
    m_bytes = bytes;
}

QByteArray PhotoSize::bytes() const {
    return m_bytes;
}

void PhotoSize::setH(qint32 h) {
    m_h = h;
}

qint32 PhotoSize::h() const {
    return m_h;
}

void PhotoSize::setLocation(const FileLocation &location) {
    m_location = location;
}

FileLocation PhotoSize::location() const {
    return m_location;
}

void PhotoSize::setSize(qint32 size) {
    m_size = size;
}

qint32 PhotoSize::size() const {
    return m_size;
}

void PhotoSize::setType(const QString &type) {
    m_type = type;
}

QString PhotoSize::type() const {
    return m_type;
}

void PhotoSize::setW(qint32 w) {
    m_w = w;
}

qint32 PhotoSize::w() const {
    return m_w;
}

bool PhotoSize::operator ==(const PhotoSize &b) const {
    return m_classType == b.m_classType &&
           m_bytes == b.m_bytes &&
           m_h == b.m_h &&
           m_location == b.m_location &&
           m_size == b.m_size &&
           m_type == b.m_type &&
           m_w == b.m_w;
}

PhotoSize &PhotoSize::operator =(const PhotoSize &b) {
    m_classType = b.m_classType;
    m_bytes = b.m_bytes;
    m_h = b.m_h;
    m_location = b.m_location;
    m_size = b.m_size;
    m_type = b.m_type;
    m_w = b.m_w;
    setNull(b.isNull());
    return *this;
}

void PhotoSize::setClassType(PhotoSize::PhotoSizeClassType classType) {
    m_classType = classType;
}

PhotoSize::PhotoSizeClassType PhotoSize::classType() const {
    return m_classType;
}

bool PhotoSize::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typePhotoSizeEmpty: {
        m_type = in->fetchQString();
        m_classType = static_cast<PhotoSizeClassType>(x);
        return true;
    }
        break;
    
    case typePhotoSize: {
        m_type = in->fetchQString();
        m_location.fetch(in);
        m_w = in->fetchInt();
        m_h = in->fetchInt();
        m_size = in->fetchInt();
        m_classType = static_cast<PhotoSizeClassType>(x);
        return true;
    }
        break;
    
    case typePhotoCachedSize: {
        m_type = in->fetchQString();
        m_location.fetch(in);
        m_w = in->fetchInt();
        m_h = in->fetchInt();
        m_bytes = in->fetchBytes();
        m_classType = static_cast<PhotoSizeClassType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool PhotoSize::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typePhotoSizeEmpty: {
        out->appendQString(m_type);
        return true;
    }
        break;
    
    case typePhotoSize: {
        out->appendQString(m_type);
        m_location.push(out);
        out->appendInt(m_w);
        out->appendInt(m_h);
        out->appendInt(m_size);
        return true;
    }
        break;
    
    case typePhotoCachedSize: {
        out->appendQString(m_type);
        m_location.push(out);
        out->appendInt(m_w);
        out->appendInt(m_h);
        out->appendBytes(m_bytes);
        return true;
    }
        break;
    
    default:
        return false;
    }
}

QMap<QString, QVariant> PhotoSize::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typePhotoSizeEmpty: {
        result["classType"] = "PhotoSize::typePhotoSizeEmpty";
        if( !m_type.isEmpty() ) result["type"] = QVariant::fromValue<QString>(m_type);
        return result;
    }
        break;
    
    case typePhotoSize: {
        result["classType"] = "PhotoSize::typePhotoSize";
        if( !m_type.isEmpty() ) result["type"] = QVariant::fromValue<QString>(m_type);
        if( !m_location.isNull() ) result["location"] = m_location.toMap();
        if( w() ) result["w"] = QString::number(w());
        if( h() ) result["h"] = QString::number(h());
        if( size() ) result["size"] = QString::number(size());
        return result;
    }
        break;
    
    case typePhotoCachedSize: {
        result["classType"] = "PhotoSize::typePhotoCachedSize";
        if( !m_type.isEmpty() ) result["type"] = QVariant::fromValue<QString>(m_type);
        if( !m_location.isNull() ) result["location"] = m_location.toMap();
        if( w() ) result["w"] = QString::number(w());
        if( h() ) result["h"] = QString::number(h());
        if( !m_bytes.isEmpty() ) result["bytes"] = QVariant::fromValue<QByteArray>(m_bytes);
        return result;
    }
        break;
    
    default:
        return result;
    }
}

PhotoSize PhotoSize::fromMap(const QMap<QString, QVariant> &map) {
    PhotoSize result;
    if(map.value("classType").toString() == "PhotoSize::typePhotoSizeEmpty") {
        result.setClassType(typePhotoSizeEmpty);
        QVariant _type_var = map.value("type");
        if( !_type_var.isNull() ) {
            _type_var.convert( QVariant::nameToType("QString") );
            result.setType( _type_var.value<QString>() );
        }
        
        return result;
    }
    if(map.value("classType").toString() == "PhotoSize::typePhotoSize") {
        result.setClassType(typePhotoSize);
        QVariant _type_var = map.value("type");
        if( !_type_var.isNull() ) {
            _type_var.convert( QVariant::nameToType("QString") );
            result.setType( _type_var.value<QString>() );
        }
        
        QVariant _location_var = map.value("location");
        if( !_location_var.isNull() )
            result.setLocation( FileLocation::fromMap(_location_var.toMap()) );
        
        QVariant _w_var = map.value("w");
        if( !_w_var.isNull() ) {
            _w_var.convert( QVariant::nameToType("qint32") );
            result.setW( _w_var.value<qint32>() );
        }
        
        QVariant _h_var = map.value("h");
        if( !_h_var.isNull() ) {
            _h_var.convert( QVariant::nameToType("qint32") );
            result.setH( _h_var.value<qint32>() );
        }
        
        QVariant _size_var = map.value("size");
        if( !_size_var.isNull() ) {
            _size_var.convert( QVariant::nameToType("qint32") );
            result.setSize( _size_var.value<qint32>() );
        }
        
        return result;
    }
    if(map.value("classType").toString() == "PhotoSize::typePhotoCachedSize") {
        result.setClassType(typePhotoCachedSize);
        QVariant _type_var = map.value("type");
        if( !_type_var.isNull() ) {
            _type_var.convert( QVariant::nameToType("QString") );
            result.setType( _type_var.value<QString>() );
        }
        
        QVariant _location_var = map.value("location");
        if( !_location_var.isNull() )
            result.setLocation( FileLocation::fromMap(_location_var.toMap()) );
        
        QVariant _w_var = map.value("w");
        if( !_w_var.isNull() ) {
            _w_var.convert( QVariant::nameToType("qint32") );
            result.setW( _w_var.value<qint32>() );
        }
        
        QVariant _h_var = map.value("h");
        if( !_h_var.isNull() ) {
            _h_var.convert( QVariant::nameToType("qint32") );
            result.setH( _h_var.value<qint32>() );
        }
        
        QVariant _bytes_var = map.value("bytes");
        if( !_bytes_var.isNull() ) {
            _bytes_var.convert( QVariant::nameToType("QByteArray") );
            result.setBytes( _bytes_var.value<QByteArray>() );
        }
        
        return result;
    }
    if(map.value("classType").toString() == "PhotoSize::typePhotoSizeEmptySecret23") {
        result.setClassType(typePhotoSizeEmptySecret23);
        QVariant _type_var = map.value("type");
        if( !_type_var.isNull() ) {
            _type_var.convert( QVariant::nameToType("QString") );
            result.setType( _type_var.value<QString>() );
        }
        
        return result;
    }
    if(map.value("classType").toString() == "PhotoSize::typePhotoSizeSecret23") {
        result.setClassType(typePhotoSizeSecret23);
        QVariant _type_var = map.value("type");
        if( !_type_var.isNull() ) {
            _type_var.convert( QVariant::nameToType("QString") );
            result.setType( _type_var.value<QString>() );
        }
        
        QVariant _location_var = map.value("location");
        if( !_location_var.isNull() )
            result.setLocation( FileLocation::fromMap(_location_var.toMap()) );
        
        QVariant _w_var = map.value("w");
        if( !_w_var.isNull() ) {
            _w_var.convert( QVariant::nameToType("qint32") );
            result.setW( _w_var.value<qint32>() );
        }
        
        QVariant _h_var = map.value("h");
        if( !_h_var.isNull() ) {
            _h_var.convert( QVariant::nameToType("qint32") );
            result.setH( _h_var.value<qint32>() );
        }
        
        QVariant _size_var = map.value("size");
        if( !_size_var.isNull() ) {
            _size_var.convert( QVariant::nameToType("qint32") );
            result.setSize( _size_var.value<qint32>() );
        }
        
        return result;
    }
    if(map.value("classType").toString() == "PhotoSize::typePhotoCachedSizeSecret23") {
        result.setClassType(typePhotoCachedSizeSecret23);
        QVariant _type_var = map.value("type");
        if( !_type_var.isNull() ) {
            _type_var.convert( QVariant::nameToType("QString") );
            result.setType( _type_var.value<QString>() );
        }
        
        QVariant _location_var = map.value("location");
        if( !_location_var.isNull() )
            result.setLocation( FileLocation::fromMap(_location_var.toMap()) );
        
        QVariant _w_var = map.value("w");
        if( !_w_var.isNull() ) {
            _w_var.convert( QVariant::nameToType("qint32") );
            result.setW( _w_var.value<qint32>() );
        }
        
        QVariant _h_var = map.value("h");
        if( !_h_var.isNull() ) {
            _h_var.convert( QVariant::nameToType("qint32") );
            result.setH( _h_var.value<qint32>() );
        }
        
        QVariant _bytes_var = map.value("bytes");
        if( !_bytes_var.isNull() ) {
            _bytes_var.convert( QVariant::nameToType("QByteArray") );
            result.setBytes( _bytes_var.value<QByteArray>() );
        }
        
        return result;
    }
    return result;
}

PhotoSize PhotoSize::fromJson(const QString &json) {
    return PhotoSize::fromMap(QJsonDocument::fromJson(json.toUtf8()).toVariant().toMap());
}

QByteArray PhotoSize::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const PhotoSize &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case PhotoSize::typePhotoSizeEmpty:
        stream << item.type();
        break;
    case PhotoSize::typePhotoSize:
        stream << item.type();
        stream << item.location();
        stream << item.w();
        stream << item.h();
        stream << item.size();
        break;
    case PhotoSize::typePhotoCachedSize:
        stream << item.type();
        stream << item.location();
        stream << item.w();
        stream << item.h();
        stream << item.bytes();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, PhotoSize &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<PhotoSize::PhotoSizeClassType>(type));
    switch(type) {
    case PhotoSize::typePhotoSizeEmpty: {
        QString m_type;
        stream >> m_type;
        item.setType(m_type);
    }
        break;
    case PhotoSize::typePhotoSize: {
        QString m_type;
        stream >> m_type;
        item.setType(m_type);
        FileLocation m_location;
        stream >> m_location;
        item.setLocation(m_location);
        qint32 m_w;
        stream >> m_w;
        item.setW(m_w);
        qint32 m_h;
        stream >> m_h;
        item.setH(m_h);
        qint32 m_size;
        stream >> m_size;
        item.setSize(m_size);
    }
        break;
    case PhotoSize::typePhotoCachedSize: {
        QString m_type;
        stream >> m_type;
        item.setType(m_type);
        FileLocation m_location;
        stream >> m_location;
        item.setLocation(m_location);
        qint32 m_w;
        stream >> m_w;
        item.setW(m_w);
        qint32 m_h;
        stream >> m_h;
        item.setH(m_h);
        QByteArray m_bytes;
        stream >> m_bytes;
        item.setBytes(m_bytes);
    }
        break;
    }
    return stream;
}

QDebug operator<<(QDebug debug,  const PhotoSize &item) {
    QDebugStateSaver saver(debug);
    Q_UNUSED(saver)
    debug.nospace() << "Telegram.PhotoSize(";
    switch(item.classType()) {
    case PhotoSize::typePhotoSizeEmpty:
        debug.nospace() << "classType: typePhotoSizeEmpty";
        debug.nospace() << ", type: " << item.type();
        break;
    case PhotoSize::typePhotoSize:
        debug.nospace() << "classType: typePhotoSize";
        debug.nospace() << ", type: " << item.type();
        debug.nospace() << ", location: " << item.location();
        debug.nospace() << ", w: " << item.w();
        debug.nospace() << ", h: " << item.h();
        debug.nospace() << ", size: " << item.size();
        break;
    case PhotoSize::typePhotoCachedSize:
        debug.nospace() << "classType: typePhotoCachedSize";
        debug.nospace() << ", type: " << item.type();
        debug.nospace() << ", location: " << item.location();
        debug.nospace() << ", w: " << item.w();
        debug.nospace() << ", h: " << item.h();
        debug.nospace() << ", bytes: " << item.bytes();
        break;
    }
    debug.nospace() << ")";
    return debug;
}

