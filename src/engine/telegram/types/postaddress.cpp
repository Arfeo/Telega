// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "postaddress.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

PostAddress::PostAddress(PostAddressClassType classType, InboundPkt *in) :
    m_classType(classType)
{
    if(in) fetch(in);
}

PostAddress::PostAddress(InboundPkt *in) :
    m_classType(typePostAddress)
{
    fetch(in);
}

PostAddress::PostAddress(const PostAddress &another) :
    TelegramTypeObject(),
    m_classType(typePostAddress)
{
    operator=(another);
}

PostAddress::PostAddress(const Null &null) :
    TelegramTypeObject(null),
    m_classType(typePostAddress)
{
}

PostAddress::~PostAddress() {
    
}

void PostAddress::setCity(const QString &city) {
    m_city = city;
}

QString PostAddress::city() const {
    return m_city;
}

void PostAddress::setCountryIso2(const QString &countryIso2) {
    m_countryIso2 = countryIso2;
}

QString PostAddress::countryIso2() const {
    return m_countryIso2;
}

void PostAddress::setPostCode(const QString &postCode) {
    m_postCode = postCode;
}

QString PostAddress::postCode() const {
    return m_postCode;
}

void PostAddress::setState(const QString &state) {
    m_state = state;
}

QString PostAddress::state() const {
    return m_state;
}

void PostAddress::setStreetLine1(const QString &streetLine1) {
    m_streetLine1 = streetLine1;
}

QString PostAddress::streetLine1() const {
    return m_streetLine1;
}

void PostAddress::setStreetLine2(const QString &streetLine2) {
    m_streetLine2 = streetLine2;
}

QString PostAddress::streetLine2() const {
    return m_streetLine2;
}

bool PostAddress::operator ==(const PostAddress &b) const {
    return m_classType == b.m_classType &&
           m_city == b.m_city &&
           m_countryIso2 == b.m_countryIso2 &&
           m_postCode == b.m_postCode &&
           m_state == b.m_state &&
           m_streetLine1 == b.m_streetLine1 &&
           m_streetLine2 == b.m_streetLine2;
}

PostAddress &PostAddress::operator =(const PostAddress &b) {
    m_classType = b.m_classType;
    m_city = b.m_city;
    m_countryIso2 = b.m_countryIso2;
    m_postCode = b.m_postCode;
    m_state = b.m_state;
    m_streetLine1 = b.m_streetLine1;
    m_streetLine2 = b.m_streetLine2;
    setNull(b.isNull());
    return *this;
}

void PostAddress::setClassType(PostAddress::PostAddressClassType classType) {
    m_classType = classType;
}

PostAddress::PostAddressClassType PostAddress::classType() const {
    return m_classType;
}

bool PostAddress::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typePostAddress: {
        m_streetLine1 = in->fetchQString();
        m_streetLine2 = in->fetchQString();
        m_city = in->fetchQString();
        m_state = in->fetchQString();
        m_countryIso2 = in->fetchQString();
        m_postCode = in->fetchQString();
        m_classType = static_cast<PostAddressClassType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool PostAddress::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typePostAddress: {
        out->appendQString(m_streetLine1);
        out->appendQString(m_streetLine2);
        out->appendQString(m_city);
        out->appendQString(m_state);
        out->appendQString(m_countryIso2);
        out->appendQString(m_postCode);
        return true;
    }
        break;
    
    default:
        return false;
    }
}

QMap<QString, QVariant> PostAddress::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typePostAddress: {
        result["classType"] = "PostAddress::typePostAddress";
        if( !m_streetLine1.isEmpty() ) result["streetLine1"] = QVariant::fromValue<QString>(m_streetLine1);
        if( !m_streetLine2.isEmpty() ) result["streetLine2"] = QVariant::fromValue<QString>(m_streetLine2);
        if( !m_city.isEmpty() ) result["city"] = QVariant::fromValue<QString>(m_city);
        if( !m_state.isEmpty() ) result["state"] = QVariant::fromValue<QString>(m_state);
        if( !m_countryIso2.isEmpty() ) result["countryIso2"] = QVariant::fromValue<QString>(m_countryIso2);
        if( !m_postCode.isEmpty() ) result["postCode"] = QVariant::fromValue<QString>(m_postCode);
        return result;
    }
        break;
    
    default:
        return result;
    }
}

PostAddress PostAddress::fromMap(const QMap<QString, QVariant> &map) {
    PostAddress result;
    if(map.value("classType").toString() == "PostAddress::typePostAddress") {
        result.setClassType(typePostAddress);
        QVariant _streetLine1_var = map.value("streetLine1");
        if( !_streetLine1_var.isNull() ) {
            _streetLine1_var.convert( QVariant::nameToType("QString") );
            result.setStreetLine1( _streetLine1_var.value<QString>() );
        }
        
        QVariant _streetLine2_var = map.value("streetLine2");
        if( !_streetLine2_var.isNull() ) {
            _streetLine2_var.convert( QVariant::nameToType("QString") );
            result.setStreetLine2( _streetLine2_var.value<QString>() );
        }
        
        QVariant _city_var = map.value("city");
        if( !_city_var.isNull() ) {
            _city_var.convert( QVariant::nameToType("QString") );
            result.setCity( _city_var.value<QString>() );
        }
        
        QVariant _state_var = map.value("state");
        if( !_state_var.isNull() ) {
            _state_var.convert( QVariant::nameToType("QString") );
            result.setState( _state_var.value<QString>() );
        }
        
        QVariant _countryIso2_var = map.value("countryIso2");
        if( !_countryIso2_var.isNull() ) {
            _countryIso2_var.convert( QVariant::nameToType("QString") );
            result.setCountryIso2( _countryIso2_var.value<QString>() );
        }
        
        QVariant _postCode_var = map.value("postCode");
        if( !_postCode_var.isNull() ) {
            _postCode_var.convert( QVariant::nameToType("QString") );
            result.setPostCode( _postCode_var.value<QString>() );
        }
        
        return result;
    }
    return result;
}

PostAddress PostAddress::fromJson(const QString &json) {
    return PostAddress::fromMap(QJsonDocument::fromJson(json.toUtf8()).toVariant().toMap());
}

QByteArray PostAddress::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const PostAddress &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case PostAddress::typePostAddress:
        stream << item.streetLine1();
        stream << item.streetLine2();
        stream << item.city();
        stream << item.state();
        stream << item.countryIso2();
        stream << item.postCode();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, PostAddress &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<PostAddress::PostAddressClassType>(type));
    switch(type) {
    case PostAddress::typePostAddress: {
        QString m_street_line1;
        stream >> m_street_line1;
        item.setStreetLine1(m_street_line1);
        QString m_street_line2;
        stream >> m_street_line2;
        item.setStreetLine2(m_street_line2);
        QString m_city;
        stream >> m_city;
        item.setCity(m_city);
        QString m_state;
        stream >> m_state;
        item.setState(m_state);
        QString m_country_iso2;
        stream >> m_country_iso2;
        item.setCountryIso2(m_country_iso2);
        QString m_post_code;
        stream >> m_post_code;
        item.setPostCode(m_post_code);
    }
        break;
    }
    return stream;
}

QDebug operator<<(QDebug debug,  const PostAddress &item) {
    QDebugStateSaver saver(debug);
    Q_UNUSED(saver)
    debug.nospace() << "Telegram.PostAddress(";
    switch(item.classType()) {
    case PostAddress::typePostAddress:
        debug.nospace() << "classType: typePostAddress";
        debug.nospace() << ", streetLine1: " << item.streetLine1();
        debug.nospace() << ", streetLine2: " << item.streetLine2();
        debug.nospace() << ", city: " << item.city();
        debug.nospace() << ", state: " << item.state();
        debug.nospace() << ", countryIso2: " << item.countryIso2();
        debug.nospace() << ", postCode: " << item.postCode();
        break;
    }
    debug.nospace() << ")";
    return debug;
}

