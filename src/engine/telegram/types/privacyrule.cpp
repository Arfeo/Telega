// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "privacyrule.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

PrivacyRule::PrivacyRule(PrivacyRuleClassType classType, InboundPkt *in) :
    m_classType(classType)
{
    if(in) fetch(in);
}

PrivacyRule::PrivacyRule(InboundPkt *in) :
    m_classType(typePrivacyValueAllowContacts)
{
    fetch(in);
}

PrivacyRule::PrivacyRule(const PrivacyRule &another) :
    TelegramTypeObject(),
    m_classType(typePrivacyValueAllowContacts)
{
    operator=(another);
}

PrivacyRule::PrivacyRule(const Null &null) :
    TelegramTypeObject(null),
    m_classType(typePrivacyValueAllowContacts)
{
}

PrivacyRule::~PrivacyRule() {

}

void PrivacyRule::setUsers(const QList<qint32> &users) {
    m_users = users;
}

QList<qint32> PrivacyRule::users() const {
    return m_users;
}

bool PrivacyRule::operator ==(const PrivacyRule &b) const {
    return m_classType == b.m_classType &&
           m_users == b.m_users;
}

PrivacyRule &PrivacyRule::operator =(const PrivacyRule &b) {
    m_classType = b.m_classType;
    m_users = b.m_users;
    setNull(b.isNull());
    return *this;
}

void PrivacyRule::setClassType(PrivacyRule::PrivacyRuleClassType classType) {
    m_classType = classType;
}

PrivacyRule::PrivacyRuleClassType PrivacyRule::classType() const {
    return m_classType;
}

bool PrivacyRule::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typePrivacyValueAllowContacts: {
        m_classType = static_cast<PrivacyRuleClassType>(x);
        return true;
    }
        break;

    case typePrivacyValueAllowAll: {
        m_classType = static_cast<PrivacyRuleClassType>(x);
        return true;
    }
        break;

    case typePrivacyValueAllowUsers: {
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_users_length = in->fetchInt();
        m_users.clear();
        for (qint32 i = 0; i < m_users_length; i++) {
            qint32 type;
            type = in->fetchInt();
            m_users.append(type);
        }
        m_classType = static_cast<PrivacyRuleClassType>(x);
        return true;
    }
        break;

    case typePrivacyValueDisallowContacts: {
        m_classType = static_cast<PrivacyRuleClassType>(x);
        return true;
    }
        break;

    case typePrivacyValueDisallowAll: {
        m_classType = static_cast<PrivacyRuleClassType>(x);
        return true;
    }
        break;

    case typePrivacyValueDisallowUsers: {
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_users_length = in->fetchInt();
        m_users.clear();
        for (qint32 i = 0; i < m_users_length; i++) {
            qint32 type;
            type = in->fetchInt();
            m_users.append(type);
        }
        m_classType = static_cast<PrivacyRuleClassType>(x);
        return true;
    }
        break;

    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool PrivacyRule::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typePrivacyValueAllowContacts: {
        return true;
    }
        break;

    case typePrivacyValueAllowAll: {
        return true;
    }
        break;

    case typePrivacyValueAllowUsers: {
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_users.count());
        for (qint32 i = 0; i < m_users.count(); i++) {
            out->appendInt(m_users[i]);
        }
        return true;
    }
        break;

    case typePrivacyValueDisallowContacts: {
        return true;
    }
        break;

    case typePrivacyValueDisallowAll: {
        return true;
    }
        break;

    case typePrivacyValueDisallowUsers: {
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_users.count());
        for (qint32 i = 0; i < m_users.count(); i++) {
            out->appendInt(m_users[i]);
        }
        return true;
    }
        break;

    default:
        return false;
    }
}

QMap<QString, QVariant> PrivacyRule::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typePrivacyValueAllowContacts: {
        result["classType"] = "PrivacyRule::typePrivacyValueAllowContacts";
        return result;
    }
        break;

    case typePrivacyValueAllowAll: {
        result["classType"] = "PrivacyRule::typePrivacyValueAllowAll";
        return result;
    }
        break;

    case typePrivacyValueAllowUsers: {
        result["classType"] = "PrivacyRule::typePrivacyValueAllowUsers";
        QList<QVariant> _users;
        //for(const qint32 &m__type: m_users)
        for(int i = 0; i < m_users.size(); ++i) {
            const qint32 &m__type = m_users[i];
            _users << QVariant::fromValue<qint32>(m__type);
        }
        result["users"] = _users;
        return result;
    }
        break;

    case typePrivacyValueDisallowContacts: {
        result["classType"] = "PrivacyRule::typePrivacyValueDisallowContacts";
        return result;
    }
        break;

    case typePrivacyValueDisallowAll: {
        result["classType"] = "PrivacyRule::typePrivacyValueDisallowAll";
        return result;
    }
        break;

    case typePrivacyValueDisallowUsers: {
        result["classType"] = "PrivacyRule::typePrivacyValueDisallowUsers";
        QList<QVariant> _users;
        //for(const qint32 &m__type: m_users)
        for(int i = 0; i < m_users.size(); ++i) {
            const qint32 &m__type = m_users[i];
            _users << QVariant::fromValue<qint32>(m__type);
        }
        result["users"] = _users;
        return result;
    }
        break;

    default:
        return result;
    }
}

PrivacyRule PrivacyRule::fromMap(const QMap<QString, QVariant> &map) {
    PrivacyRule result;
    if(map.value("classType").toString() == "PrivacyRule::typePrivacyValueAllowContacts") {
        result.setClassType(typePrivacyValueAllowContacts);
        return result;
    }
    if(map.value("classType").toString() == "PrivacyRule::typePrivacyValueAllowAll") {
        result.setClassType(typePrivacyValueAllowAll);
        return result;
    }
    if(map.value("classType").toString() == "PrivacyRule::typePrivacyValueAllowUsers") {
        result.setClassType(typePrivacyValueAllowUsers);
        QList<QVariant> map_users = map["users"].toList();
        QList<qint32> _users;
        //for(const QVariant &var: map_users)
        for(int i = 0; i < map_users.size(); ++i) {
            const QVariant &var = map_users[i];
            _users << var.value<qint32>();
        }
        result.setUsers(_users);
        return result;
    }
    if(map.value("classType").toString() == "PrivacyRule::typePrivacyValueDisallowContacts") {
        result.setClassType(typePrivacyValueDisallowContacts);
        return result;
    }
    if(map.value("classType").toString() == "PrivacyRule::typePrivacyValueDisallowAll") {
        result.setClassType(typePrivacyValueDisallowAll);
        return result;
    }
    if(map.value("classType").toString() == "PrivacyRule::typePrivacyValueDisallowUsers") {
        result.setClassType(typePrivacyValueDisallowUsers);
        QList<QVariant> map_users = map["users"].toList();
        QList<qint32> _users;
        //for(const QVariant &var: map_users)
        for(int i = 0; i < map_users.size(); ++i) {
            const QVariant &var = map_users[i];
            _users << var.value<qint32>();
        }
        result.setUsers(_users);
        return result;
    }
    return result;
}

PrivacyRule PrivacyRule::fromJson(const QString &json) {
    return PrivacyRule::fromMap(QJsonDocument::fromJson(json.toUtf8()).toVariant().toMap());
}

QByteArray PrivacyRule::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const PrivacyRule &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case PrivacyRule::typePrivacyValueAllowContacts:

        break;
    case PrivacyRule::typePrivacyValueAllowAll:

        break;
    case PrivacyRule::typePrivacyValueAllowUsers:
        stream << item.users();
        break;
    case PrivacyRule::typePrivacyValueDisallowContacts:

        break;
    case PrivacyRule::typePrivacyValueDisallowAll:

        break;
    case PrivacyRule::typePrivacyValueDisallowUsers:
        stream << item.users();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, PrivacyRule &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<PrivacyRule::PrivacyRuleClassType>(type));
    switch(type) {
    case PrivacyRule::typePrivacyValueAllowContacts: {

    }
        break;
    case PrivacyRule::typePrivacyValueAllowAll: {

    }
        break;
    case PrivacyRule::typePrivacyValueAllowUsers: {
        QList<qint32> m_users;
        stream >> m_users;
        item.setUsers(m_users);
    }
        break;
    case PrivacyRule::typePrivacyValueDisallowContacts: {

    }
        break;
    case PrivacyRule::typePrivacyValueDisallowAll: {

    }
        break;
    case PrivacyRule::typePrivacyValueDisallowUsers: {
        QList<qint32> m_users;
        stream >> m_users;
        item.setUsers(m_users);
    }
        break;
    }
    return stream;
}

/*QDebug operator<<(QDebug debug,  const PrivacyRule &item) {
    QDebugStateSaver saver(debug);
    Q_UNUSED(saver)
    debug.nospace() << "Telegram.PrivacyRule(";
    switch(item.classType()) {
    case PrivacyRule::typePrivacyValueAllowContacts:
        debug.nospace() << "classType: typePrivacyValueAllowContacts";
        break;
    case PrivacyRule::typePrivacyValueAllowAll:
        debug.nospace() << "classType: typePrivacyValueAllowAll";
        break;
    case PrivacyRule::typePrivacyValueAllowUsers:
        debug.nospace() << "classType: typePrivacyValueAllowUsers";
        debug.nospace() << ", users: " << item.users();
        break;
    case PrivacyRule::typePrivacyValueDisallowContacts:
        debug.nospace() << "classType: typePrivacyValueDisallowContacts";
        break;
    case PrivacyRule::typePrivacyValueDisallowAll:
        debug.nospace() << "classType: typePrivacyValueDisallowAll";
        break;
    case PrivacyRule::typePrivacyValueDisallowUsers:
        debug.nospace() << "classType: typePrivacyValueDisallowUsers";
        debug.nospace() << ", users: " << item.users();
        break;
    }
    debug.nospace() << ")";
    return debug;
}
*/
