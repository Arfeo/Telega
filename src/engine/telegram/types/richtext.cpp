// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "richtext.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

RichText::RichText(RichTextClassType classType, InboundPkt *in) :
    m_textRich(0),
    m_webpageId(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

RichText::RichText(InboundPkt *in) :
    m_textRich(0),
    m_webpageId(0),
    m_classType(typeTextEmpty)
{
    fetch(in);
}

RichText::RichText(const RichText &another) :
    TelegramTypeObject(),
    m_textRich(0),
    m_webpageId(0),
    m_classType(typeTextEmpty)
{
    operator=(another);
}

RichText::RichText(const Null &null) :
    TelegramTypeObject(null),
    m_textRich(0),
    m_webpageId(0),
    m_classType(typeTextEmpty)
{
}

RichText::~RichText() {
    if(m_textRich) delete m_textRich;
}

void RichText::setEmail(const QString &email) {
    m_email = email;
}

QString RichText::email() const {
    return m_email;
}

void RichText::setTextString(const QString &textString) {
    m_textString = textString;
}

QString RichText::textString() const {
    return m_textString;
}

void RichText::setTextRich(const RichText &textRich) {
    if(textRich.isNull()) {
        if(m_textRich) delete m_textRich;
        m_textRich = 0;
        return;
    }
    if(!m_textRich) m_textRich = new RichText();
    *m_textRich = textRich;
}

RichText RichText::textRich() const {
    return m_textRich? *m_textRich : RichText(RichText::null);
}

void RichText::setTexts(const QList<RichText> &texts) {
    m_texts = texts;
}

QList<RichText> RichText::texts() const {
    return m_texts;
}

void RichText::setUrl(const QString &url) {
    m_url = url;
}

QString RichText::url() const {
    return m_url;
}

void RichText::setWebpageId(qint64 webpageId) {
    m_webpageId = webpageId;
}

qint64 RichText::webpageId() const {
    return m_webpageId;
}

bool RichText::operator ==(const RichText &b) const {
    return m_classType == b.m_classType &&
           m_email == b.m_email &&
           m_textString == b.m_textString &&
           m_textRich == b.m_textRich &&
           m_texts == b.m_texts &&
           m_url == b.m_url &&
           m_webpageId == b.m_webpageId;
}

RichText &RichText::operator =(const RichText &b) {
    m_classType = b.m_classType;
    m_email = b.m_email;
    m_textString = b.m_textString;
    setTextRich(b.textRich());
    m_texts = b.m_texts;
    m_url = b.m_url;
    m_webpageId = b.m_webpageId;
    setNull(b.isNull());
    return *this;
}

void RichText::setClassType(RichText::RichTextClassType classType) {
    m_classType = classType;
}

RichText::RichTextClassType RichText::classType() const {
    return m_classType;
}

bool RichText::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeTextEmpty: {
        m_classType = static_cast<RichTextClassType>(x);
        return true;
    }
        break;

    case typeTextPlain: {
        m_textString = in->fetchQString();
        m_classType = static_cast<RichTextClassType>(x);
        return true;
    }
        break;

    case typeTextBold: {
        if(!m_textRich) m_textRich = new RichText();
        m_textRich->fetch(in);
        m_classType = static_cast<RichTextClassType>(x);
        return true;
    }
        break;

    case typeTextItalic: {
        if(!m_textRich) m_textRich = new RichText();
        m_textRich->fetch(in);
        m_classType = static_cast<RichTextClassType>(x);
        return true;
    }
        break;

    case typeTextUnderline: {
        if(!m_textRich) m_textRich = new RichText();
        m_textRich->fetch(in);
        m_classType = static_cast<RichTextClassType>(x);
        return true;
    }
        break;

    case typeTextStrike: {
        if(!m_textRich) m_textRich = new RichText();
        m_textRich->fetch(in);
        m_classType = static_cast<RichTextClassType>(x);
        return true;
    }
        break;

    case typeTextFixed: {
        if(!m_textRich) m_textRich = new RichText();
        m_textRich->fetch(in);
        m_classType = static_cast<RichTextClassType>(x);
        return true;
    }
        break;

    case typeTextUrl: {
        if(!m_textRich) m_textRich = new RichText();
        m_textRich->fetch(in);
        m_url = in->fetchQString();
        m_webpageId = in->fetchLong();
        m_classType = static_cast<RichTextClassType>(x);
        return true;
    }
        break;

    case typeTextEmail: {
        if(!m_textRich) m_textRich = new RichText();
        m_textRich->fetch(in);
        m_email = in->fetchQString();
        m_classType = static_cast<RichTextClassType>(x);
        return true;
    }
        break;

    case typeTextConcat: {
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_texts_length = in->fetchInt();
        m_texts.clear();
        for (qint32 i = 0; i < m_texts_length; i++) {
            RichText type;
            type.fetch(in);
            m_texts.append(type);
        }
        m_classType = static_cast<RichTextClassType>(x);
        return true;
    }
        break;

    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool RichText::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeTextEmpty: {
        return true;
    }
        break;

    case typeTextPlain: {
        out->appendQString(m_textString);
        return true;
    }
        break;

    case typeTextBold: {
        if(m_textRich) m_textRich->push(out);
        else RichText().push(out);
        return true;
    }
        break;

    case typeTextItalic: {
        if(m_textRich) m_textRich->push(out);
        else RichText().push(out);
        return true;
    }
        break;

    case typeTextUnderline: {
        if(m_textRich) m_textRich->push(out);
        else RichText().push(out);
        return true;
    }
        break;

    case typeTextStrike: {
        if(m_textRich) m_textRich->push(out);
        else RichText().push(out);
        return true;
    }
        break;

    case typeTextFixed: {
        if(m_textRich) m_textRich->push(out);
        else RichText().push(out);
        return true;
    }
        break;

    case typeTextUrl: {
        if(m_textRich) m_textRich->push(out);
        else RichText().push(out);
        out->appendQString(m_url);
        out->appendLong(m_webpageId);
        return true;
    }
        break;

    case typeTextEmail: {
        if(m_textRich) m_textRich->push(out);
        else RichText().push(out);
        out->appendQString(m_email);
        return true;
    }
        break;

    case typeTextConcat: {
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_texts.count());
        for (qint32 i = 0; i < m_texts.count(); i++) {
            m_texts[i].push(out);
        }
        return true;
    }
        break;

    default:
        return false;
    }
}

QMap<QString, QVariant> RichText::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeTextEmpty: {
        result["classType"] = "RichText::typeTextEmpty";
        return result;
    }
        break;

    case typeTextPlain: {
        result["classType"] = "RichText::typeTextPlain";
        if( !m_textString.isEmpty() ) result["textString"] = QVariant::fromValue<QString>(m_textString);
        return result;
    }
        break;

    case typeTextBold: {
        result["classType"] = "RichText::typeTextBold";
        result["textRich"] = (m_textRich? *m_textRich : RichText()).toMap();
        return result;
    }
        break;

    case typeTextItalic: {
        result["classType"] = "RichText::typeTextItalic";
        result["textRich"] = (m_textRich? *m_textRich : RichText()).toMap();
        return result;
    }
        break;

    case typeTextUnderline: {
        result["classType"] = "RichText::typeTextUnderline";
        result["textRich"] = (m_textRich? *m_textRich : RichText()).toMap();
        return result;
    }
        break;

    case typeTextStrike: {
        result["classType"] = "RichText::typeTextStrike";
        result["textRich"] = (m_textRich? *m_textRich : RichText()).toMap();
        return result;
    }
        break;

    case typeTextFixed: {
        result["classType"] = "RichText::typeTextFixed";
        result["textRich"] = (m_textRich? *m_textRich : RichText()).toMap();
        return result;
    }
        break;

    case typeTextUrl: {
        result["classType"] = "RichText::typeTextUrl";
        result["textRich"] = (m_textRich? *m_textRich : RichText()).toMap();
        if( !m_url.isEmpty() ) result["url"] = QVariant::fromValue<QString>(m_url);
        if( webpageId() ) result["webpageId"] = QString::number(webpageId());
        return result;
    }
        break;

    case typeTextEmail: {
        result["classType"] = "RichText::typeTextEmail";
        result["textRich"] = (m_textRich? *m_textRich : RichText()).toMap();
        if( !m_email.isEmpty() ) result["email"] = QVariant::fromValue<QString>(m_email);
        return result;
    }
        break;

    case typeTextConcat: {
        result["classType"] = "RichText::typeTextConcat";
        QList<QVariant> _texts;
        for(const RichText &m__type: m_texts)
            if( !m__type.isNull() ) _texts << m__type.toMap();
        result["texts"] = _texts;
        return result;
    }
        break;

    default:
        return result;
    }
}

RichText RichText::fromMap(const QMap<QString, QVariant> &map) {
    RichText result;
    if(map.value("classType").toString() == "RichText::typeTextEmpty") {
        result.setClassType(typeTextEmpty);
        return result;
    }
    if(map.value("classType").toString() == "RichText::typeTextPlain") {
        result.setClassType(typeTextPlain);
        QVariant _textString_var = map.value("textString");
        if( !_textString_var.isNull() ) {
            _textString_var.convert( QVariant::nameToType("QString") );
            result.setTextString( _textString_var.value<QString>() );
        }

        return result;
    }
    if(map.value("classType").toString() == "RichText::typeTextBold") {
        result.setClassType(typeTextBold);
        QVariant _textRich_var = map.value("textRich");
        if( !_textRich_var.isNull() )
            result.setTextRich( RichText::fromMap(_textRich_var.toMap()) );

        return result;
    }
    if(map.value("classType").toString() == "RichText::typeTextItalic") {
        result.setClassType(typeTextItalic);
        QVariant _textRich_var = map.value("textRich");
        if( !_textRich_var.isNull() )
            result.setTextRich( RichText::fromMap(_textRich_var.toMap()) );

        return result;
    }
    if(map.value("classType").toString() == "RichText::typeTextUnderline") {
        result.setClassType(typeTextUnderline);
        QVariant _textRich_var = map.value("textRich");
        if( !_textRich_var.isNull() )
            result.setTextRich( RichText::fromMap(_textRich_var.toMap()) );

        return result;
    }
    if(map.value("classType").toString() == "RichText::typeTextStrike") {
        result.setClassType(typeTextStrike);
        QVariant _textRich_var = map.value("textRich");
        if( !_textRich_var.isNull() )
            result.setTextRich( RichText::fromMap(_textRich_var.toMap()) );

        return result;
    }
    if(map.value("classType").toString() == "RichText::typeTextFixed") {
        result.setClassType(typeTextFixed);
        QVariant _textRich_var = map.value("textRich");
        if( !_textRich_var.isNull() )
            result.setTextRich( RichText::fromMap(_textRich_var.toMap()) );

        return result;
    }
    if(map.value("classType").toString() == "RichText::typeTextUrl") {
        result.setClassType(typeTextUrl);
        QVariant _textRich_var = map.value("textRich");
        if( !_textRich_var.isNull() )
            result.setTextRich( RichText::fromMap(_textRich_var.toMap()) );

        QVariant _url_var = map.value("url");
        if( !_url_var.isNull() ) {
            _url_var.convert( QVariant::nameToType("QString") );
            result.setUrl( _url_var.value<QString>() );
        }

        QVariant _webpageId_var = map.value("webpageId");
        if( !_webpageId_var.isNull() ) {
            _webpageId_var.convert( QVariant::nameToType("qint64") );
            result.setWebpageId( _webpageId_var.value<qint64>() );
        }

        return result;
    }
    if(map.value("classType").toString() == "RichText::typeTextEmail") {
        result.setClassType(typeTextEmail);
        QVariant _textRich_var = map.value("textRich");
        if( !_textRich_var.isNull() )
            result.setTextRich( RichText::fromMap(_textRich_var.toMap()) );

        QVariant _email_var = map.value("email");
        if( !_email_var.isNull() ) {
            _email_var.convert( QVariant::nameToType("QString") );
            result.setEmail( _email_var.value<QString>() );
        }

        return result;
    }
    if(map.value("classType").toString() == "RichText::typeTextConcat") {
        result.setClassType(typeTextConcat);
        QList<QVariant> map_texts = map["texts"].toList();
        QList<RichText> _texts;
        for(const QVariant &var: map_texts)
            _texts << RichText::fromMap(var.toMap());
        result.setTexts(_texts);
        return result;
    }
    return result;
}

RichText RichText::fromJson(const QString &json) {
    return RichText::fromMap(QJsonDocument::fromJson(json.toUtf8()).toVariant().toMap());
}

QByteArray RichText::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const RichText &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case RichText::typeTextEmpty:

        break;
    case RichText::typeTextPlain:
        stream << item.textString();
        break;
    case RichText::typeTextBold:
        stream << item.textRich();
        break;
    case RichText::typeTextItalic:
        stream << item.textRich();
        break;
    case RichText::typeTextUnderline:
        stream << item.textRich();
        break;
    case RichText::typeTextStrike:
        stream << item.textRich();
        break;
    case RichText::typeTextFixed:
        stream << item.textRich();
        break;
    case RichText::typeTextUrl:
        stream << item.textRich();
        stream << item.url();
        stream << item.webpageId();
        break;
    case RichText::typeTextEmail:
        stream << item.textRich();
        stream << item.email();
        break;
    case RichText::typeTextConcat:
        stream << item.texts();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, RichText &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<RichText::RichTextClassType>(type));
    switch(type) {
    case RichText::typeTextEmpty: {

    }
        break;
    case RichText::typeTextPlain: {
        QString m_text_string;
        stream >> m_text_string;
        item.setTextString(m_text_string);
    }
        break;
    case RichText::typeTextBold: {
        RichText m_text_Rich;
        stream >> m_text_Rich;
        item.setTextRich(m_text_Rich);
    }
        break;
    case RichText::typeTextItalic: {
        RichText m_text_Rich;
        stream >> m_text_Rich;
        item.setTextRich(m_text_Rich);
    }
        break;
    case RichText::typeTextUnderline: {
        RichText m_text_Rich;
        stream >> m_text_Rich;
        item.setTextRich(m_text_Rich);
    }
        break;
    case RichText::typeTextStrike: {
        RichText m_text_Rich;
        stream >> m_text_Rich;
        item.setTextRich(m_text_Rich);
    }
        break;
    case RichText::typeTextFixed: {
        RichText m_text_Rich;
        stream >> m_text_Rich;
        item.setTextRich(m_text_Rich);
    }
        break;
    case RichText::typeTextUrl: {
        RichText m_text_Rich;
        stream >> m_text_Rich;
        item.setTextRich(m_text_Rich);
        QString m_url;
        stream >> m_url;
        item.setUrl(m_url);
        qint64 m_webpage_id;
        stream >> m_webpage_id;
        item.setWebpageId(m_webpage_id);
    }
        break;
    case RichText::typeTextEmail: {
        RichText m_text_Rich;
        stream >> m_text_Rich;
        item.setTextRich(m_text_Rich);
        QString m_email;
        stream >> m_email;
        item.setEmail(m_email);
    }
        break;
    case RichText::typeTextConcat: {
        QList<RichText> m_texts;
        stream >> m_texts;
        item.setTexts(m_texts);
    }
        break;
    }
    return stream;
}

/*QDebug operator<<(QDebug debug,  const RichText &item) {
    QDebugStateSaver saver(debug);
    Q_UNUSED(saver)
    debug.nospace() << "Telegram.RichText(";
    switch(item.classType()) {
    case RichText::typeTextEmpty:
        debug.nospace() << "classType: typeTextEmpty";
        break;
    case RichText::typeTextPlain:
        debug.nospace() << "classType: typeTextPlain";
        debug.nospace() << ", textString: " << item.textString();
        break;
    case RichText::typeTextBold:
        debug.nospace() << "classType: typeTextBold";
        debug.nospace() << ", textRich: " << item.textRich();
        break;
    case RichText::typeTextItalic:
        debug.nospace() << "classType: typeTextItalic";
        debug.nospace() << ", textRich: " << item.textRich();
        break;
    case RichText::typeTextUnderline:
        debug.nospace() << "classType: typeTextUnderline";
        debug.nospace() << ", textRich: " << item.textRich();
        break;
    case RichText::typeTextStrike:
        debug.nospace() << "classType: typeTextStrike";
        debug.nospace() << ", textRich: " << item.textRich();
        break;
    case RichText::typeTextFixed:
        debug.nospace() << "classType: typeTextFixed";
        debug.nospace() << ", textRich: " << item.textRich();
        break;
    case RichText::typeTextUrl:
        debug.nospace() << "classType: typeTextUrl";
        debug.nospace() << ", textRich: " << item.textRich();
        debug.nospace() << ", url: " << item.url();
        debug.nospace() << ", webpageId: " << item.webpageId();
        break;
    case RichText::typeTextEmail:
        debug.nospace() << "classType: typeTextEmail";
        debug.nospace() << ", textRich: " << item.textRich();
        debug.nospace() << ", email: " << item.email();
        break;
    case RichText::typeTextConcat:
        debug.nospace() << "classType: typeTextConcat";
        debug.nospace() << ", texts: " << item.texts();
        break;
    }
    debug.nospace() << ")";
    return debug;
}
*/
