// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_STICKERSET
#define LQTG_TYPE_STICKERSET

#include "telegramtypeobject.h"

#include <QMetaType>
#include <QVariant>
#include "../coretypes.h"

#include <QDataStream>

#include <QtGlobal>
#include <QString>

class LIBQTELEGRAMSHARED_EXPORT StickerSet : public TelegramTypeObject
{
public:
    enum StickerSetClassType {
        typeStickerSet = 0xcd303b41
    };

    StickerSet(StickerSetClassType classType = typeStickerSet, InboundPkt *in = 0);
    StickerSet(InboundPkt *in);
    StickerSet(const Null&);
    StickerSet(const StickerSet &another);
    virtual ~StickerSet();

    void setAccessHash(qint64 accessHash);
    qint64 accessHash() const;

    void setArchived(bool archived);
    bool archived() const;

    void setCount(qint32 count);
    qint32 count() const;

    void setFlags(qint32 flags);
    qint32 flags() const;

    void setHash(qint32 hash);
    qint32 hash() const;

    void setId(qint64 id);
    qint64 id() const;

    void setInstalled(bool installed);
    bool installed() const;

    void setMasks(bool masks);
    bool masks() const;

    void setOfficial(bool official);
    bool official() const;

    void setShortName(const QString &shortName);
    QString shortName() const;

    void setTitle(const QString &title);
    QString title() const;

    void setClassType(StickerSetClassType classType);
    StickerSetClassType classType() const;

    bool fetch(InboundPkt *in);
    bool push(OutboundPkt *out) const;

    QMap<QString, QVariant> toMap() const;
    static StickerSet fromMap(const QMap<QString, QVariant> &map);
    static StickerSet fromJson(const QString &json);

    bool operator ==(const StickerSet &b) const;
    StickerSet &operator =(const StickerSet &b);

    bool operator==(bool stt) const { return isNull() != stt; }
    bool operator!=(bool stt) const { return !operator ==(stt); }

    QByteArray getHash(QCryptographicHash::Algorithm alg = QCryptographicHash::Md5) const;

private:
    qint64 m_accessHash;
    qint32 m_count;
    qint32 m_flags;
    qint32 m_hash;
    qint64 m_id;
    QString m_shortName;
    QString m_title;
    StickerSetClassType m_classType;
};

Q_DECLARE_METATYPE(StickerSet)

QDataStream LIBQTELEGRAMSHARED_EXPORT &operator<<(QDataStream &stream, const StickerSet &item);
QDataStream LIBQTELEGRAMSHARED_EXPORT &operator>>(QDataStream &stream, StickerSet &item);

QDebug LIBQTELEGRAMSHARED_EXPORT operator<<(QDebug debug,  const StickerSet &item);

#endif // LQTG_TYPE_STICKERSET
