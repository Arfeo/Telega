// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "stickersetcovered.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

StickerSetCovered::StickerSetCovered(StickerSetCoveredClassType classType, InboundPkt *in) :
    m_classType(classType)
{
    if(in) fetch(in);
}

StickerSetCovered::StickerSetCovered(InboundPkt *in) :
    m_classType(typeStickerSetCovered)
{
    fetch(in);
}

StickerSetCovered::StickerSetCovered(const StickerSetCovered &another) :
    TelegramTypeObject(),
    m_classType(typeStickerSetCovered)
{
    operator=(another);
}

StickerSetCovered::StickerSetCovered(const Null &null) :
    TelegramTypeObject(null),
    m_classType(typeStickerSetCovered)
{
}

StickerSetCovered::~StickerSetCovered() {

}

void StickerSetCovered::setCover(const Document &cover) {
    m_cover = cover;
}

Document StickerSetCovered::cover() const {
    return m_cover;
}

void StickerSetCovered::setCovers(const QList<Document> &covers) {
    m_covers = covers;
}

QList<Document> StickerSetCovered::covers() const {
    return m_covers;
}

void StickerSetCovered::setSet(const StickerSet &set) {
    m_set = set;
}

StickerSet StickerSetCovered::set() const {
    return m_set;
}

bool StickerSetCovered::operator ==(const StickerSetCovered &b) const {
    return m_classType == b.m_classType &&
           m_cover == b.m_cover &&
           m_covers == b.m_covers &&
           m_set == b.m_set;
}

StickerSetCovered &StickerSetCovered::operator =(const StickerSetCovered &b) {
    m_classType = b.m_classType;
    m_cover = b.m_cover;
    m_covers = b.m_covers;
    m_set = b.m_set;
    setNull(b.isNull());
    return *this;
}

void StickerSetCovered::setClassType(StickerSetCovered::StickerSetCoveredClassType classType) {
    m_classType = classType;
}

StickerSetCovered::StickerSetCoveredClassType StickerSetCovered::classType() const {
    return m_classType;
}

bool StickerSetCovered::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeStickerSetCovered: {
        m_set.fetch(in);
        m_cover.fetch(in);
        m_classType = static_cast<StickerSetCoveredClassType>(x);
        return true;
    }
        break;

    case typeStickerSetMultiCovered: {
        m_set.fetch(in);
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_covers_length = in->fetchInt();
        m_covers.clear();
        for (qint32 i = 0; i < m_covers_length; i++) {
            Document type;
            type.fetch(in);
            m_covers.append(type);
        }
        m_classType = static_cast<StickerSetCoveredClassType>(x);
        return true;
    }
        break;

    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool StickerSetCovered::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeStickerSetCovered: {
        m_set.push(out);
        m_cover.push(out);
        return true;
    }
        break;

    case typeStickerSetMultiCovered: {
        m_set.push(out);
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_covers.count());
        for (qint32 i = 0; i < m_covers.count(); i++) {
            m_covers[i].push(out);
        }
        return true;
    }
        break;

    default:
        return false;
    }
}

QMap<QString, QVariant> StickerSetCovered::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeStickerSetCovered: {
        result["classType"] = "StickerSetCovered::typeStickerSetCovered";
        if( !m_set.isNull() ) result["set"] = m_set.toMap();
        if( !m_cover.isNull() ) result["cover"] = m_cover.toMap();
        return result;
    }
        break;

    case typeStickerSetMultiCovered: {
        result["classType"] = "StickerSetCovered::typeStickerSetMultiCovered";
        if( !m_set.isNull() ) result["set"] = m_set.toMap();
        QList<QVariant> _covers;
        for(const Document &m__type: m_covers)
            if( !m__type.isNull() ) _covers << m__type.toMap();
        result["covers"] = _covers;
        return result;
    }
        break;

    default:
        return result;
    }
}

StickerSetCovered StickerSetCovered::fromMap(const QMap<QString, QVariant> &map) {
    StickerSetCovered result;
    if(map.value("classType").toString() == "StickerSetCovered::typeStickerSetCovered") {
        result.setClassType(typeStickerSetCovered);
        QVariant _set_var = map.value("set");
        if( !_set_var.isNull() )
            result.setSet( StickerSet::fromMap(_set_var.toMap()) );

        QVariant _cover_var = map.value("cover");
        if( !_cover_var.isNull() )
            result.setCover( Document::fromMap(_cover_var.toMap()) );

        return result;
    }
    if(map.value("classType").toString() == "StickerSetCovered::typeStickerSetMultiCovered") {
        result.setClassType(typeStickerSetMultiCovered);
        QVariant _set_var = map.value("set");
        if( !_set_var.isNull() )
            result.setSet( StickerSet::fromMap(_set_var.toMap()) );

        QList<QVariant> map_covers = map["covers"].toList();
        QList<Document> _covers;
        for(const QVariant &var: map_covers)
            _covers << Document::fromMap(var.toMap());
        result.setCovers(_covers);
        return result;
    }
    return result;
}

StickerSetCovered StickerSetCovered::fromJson(const QString &json) {
    return StickerSetCovered::fromMap(QJsonDocument::fromJson(json.toUtf8()).toVariant().toMap());
}

QByteArray StickerSetCovered::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const StickerSetCovered &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case StickerSetCovered::typeStickerSetCovered:
        stream << item.set();
        stream << item.cover();
        break;
    case StickerSetCovered::typeStickerSetMultiCovered:
        stream << item.set();
        stream << item.covers();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, StickerSetCovered &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<StickerSetCovered::StickerSetCoveredClassType>(type));
    switch(type) {
    case StickerSetCovered::typeStickerSetCovered: {
        StickerSet m_set;
        stream >> m_set;
        item.setSet(m_set);
        Document m_cover;
        stream >> m_cover;
        item.setCover(m_cover);
    }
        break;
    case StickerSetCovered::typeStickerSetMultiCovered: {
        StickerSet m_set;
        stream >> m_set;
        item.setSet(m_set);
        QList<Document> m_covers;
        stream >> m_covers;
        item.setCovers(m_covers);
    }
        break;
    }
    return stream;
}

/*QDebug operator<<(QDebug debug,  const StickerSetCovered &item) {
    QDebugStateSaver saver(debug);
    Q_UNUSED(saver)
    debug.nospace() << "Telegram.StickerSetCovered(";
    switch(item.classType()) {
    case StickerSetCovered::typeStickerSetCovered:
        debug.nospace() << "classType: typeStickerSetCovered";
        debug.nospace() << ", set: " << item.set();
        debug.nospace() << ", cover: " << item.cover();
        break;
    case StickerSetCovered::typeStickerSetMultiCovered:
        debug.nospace() << "classType: typeStickerSetMultiCovered";
        debug.nospace() << ", set: " << item.set();
        debug.nospace() << ", covers: " << item.covers();
        break;
    }
    debug.nospace() << ")";
    return debug;
}
*/
