// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_STICKERSETCOVERED
#define LQTG_TYPE_STICKERSETCOVERED

#include "telegramtypeobject.h"

#include <QMetaType>
#include <QVariant>
#include "../coretypes.h"

#include <QDataStream>

#include "document.h"
#include <QList>
#include "stickerset.h"

class LIBQTELEGRAMSHARED_EXPORT StickerSetCovered : public TelegramTypeObject
{
public:
    enum StickerSetCoveredClassType {
        typeStickerSetCovered = 0x6410a5d2,
        typeStickerSetMultiCovered = 0x3407e51b
    };

    StickerSetCovered(StickerSetCoveredClassType classType = typeStickerSetCovered, InboundPkt *in = 0);
    StickerSetCovered(InboundPkt *in);
    StickerSetCovered(const Null&);
    StickerSetCovered(const StickerSetCovered &another);
    virtual ~StickerSetCovered();

    void setCover(const Document &cover);
    Document cover() const;

    void setCovers(const QList<Document> &covers);
    QList<Document> covers() const;

    void setSet(const StickerSet &set);
    StickerSet set() const;

    void setClassType(StickerSetCoveredClassType classType);
    StickerSetCoveredClassType classType() const;

    bool fetch(InboundPkt *in);
    bool push(OutboundPkt *out) const;

    QMap<QString, QVariant> toMap() const;
    static StickerSetCovered fromMap(const QMap<QString, QVariant> &map);
    static StickerSetCovered fromJson(const QString &json);

    bool operator ==(const StickerSetCovered &b) const;
    StickerSetCovered &operator =(const StickerSetCovered &b);

    bool operator==(bool stt) const { return isNull() != stt; }
    bool operator!=(bool stt) const { return !operator ==(stt); }

    QByteArray getHash(QCryptographicHash::Algorithm alg = QCryptographicHash::Md5) const;

private:
    Document m_cover;
    QList<Document> m_covers;
    StickerSet m_set;
    StickerSetCoveredClassType m_classType;
};

Q_DECLARE_METATYPE(StickerSetCovered)

QDataStream LIBQTELEGRAMSHARED_EXPORT &operator<<(QDataStream &stream, const StickerSetCovered &item);
QDataStream LIBQTELEGRAMSHARED_EXPORT &operator>>(QDataStream &stream, StickerSetCovered &item);

QDebug LIBQTELEGRAMSHARED_EXPORT operator<<(QDebug debug,  const StickerSetCovered &item);

#endif // LQTG_TYPE_STICKERSETCOVERED
