// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "update.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

Update::Update(UpdateClassType classType, InboundPkt *in) :
    m_blocked(false),
    m_channelId(0),
    m_chatId(0),
    m_chatInstance(0),
    m_date(0),
    m_enabled(false),
    m_flags(0),
    m_idInt(0),
    m_inboxDate(0),
    m_inviterId(0),
    m_isAdmin(false),
    m_maxDate(0),
    m_maxId(0),
    m_msgIdInt(0),
    m_previous(false),
    m_pts(0),
    m_ptsCount(0),
    m_qts(0),
    m_queryId(0),
    m_randomId(0),
    m_timeout(0),
    m_totalAmount(0),
    m_userId(0),
    m_version(0),
    m_views(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

Update::Update(InboundPkt *in) :
    m_blocked(false),
    m_channelId(0),
    m_chatId(0),
    m_chatInstance(0),
    m_date(0),
    m_enabled(false),
    m_flags(0),
    m_idInt(0),
    m_inboxDate(0),
    m_inviterId(0),
    m_isAdmin(false),
    m_maxDate(0),
    m_maxId(0),
    m_msgIdInt(0),
    m_previous(false),
    m_pts(0),
    m_ptsCount(0),
    m_qts(0),
    m_queryId(0),
    m_randomId(0),
    m_timeout(0),
    m_totalAmount(0),
    m_userId(0),
    m_version(0),
    m_views(0),
    m_classType(typeUpdateNewMessage)
{
    fetch(in);
}

Update::Update(const Update &another) :
    TelegramTypeObject(),
    m_blocked(false),
    m_channelId(0),
    m_chatId(0),
    m_chatInstance(0),
    m_date(0),
    m_enabled(false),
    m_flags(0),
    m_idInt(0),
    m_inboxDate(0),
    m_inviterId(0),
    m_isAdmin(false),
    m_maxDate(0),
    m_maxId(0),
    m_msgIdInt(0),
    m_previous(false),
    m_pts(0),
    m_ptsCount(0),
    m_qts(0),
    m_queryId(0),
    m_randomId(0),
    m_timeout(0),
    m_totalAmount(0),
    m_userId(0),
    m_version(0),
    m_views(0),
    m_classType(typeUpdateNewMessage)
{
    operator=(another);
}

Update::Update(const Null &null) :
    TelegramTypeObject(null),
    m_blocked(false),
    m_channelId(0),
    m_chatId(0),
    m_chatInstance(0),
    m_date(0),
    m_enabled(false),
    m_flags(0),
    m_idInt(0),
    m_inboxDate(0),
    m_inviterId(0),
    m_isAdmin(false),
    m_maxDate(0),
    m_maxId(0),
    m_msgIdInt(0),
    m_previous(false),
    m_pts(0),
    m_ptsCount(0),
    m_qts(0),
    m_queryId(0),
    m_randomId(0),
    m_timeout(0),
    m_totalAmount(0),
    m_userId(0),
    m_version(0),
    m_views(0),
    m_classType(typeUpdateNewMessage)
{
}

Update::~Update() {

}

void Update::setAction(const SendMessageAction &action) {
    m_action = action;
}

SendMessageAction Update::action() const {
    return m_action;
}

void Update::setBlocked(bool blocked) {
    m_blocked = blocked;
}

bool Update::blocked() const {
    return m_blocked;
}

void Update::setChannelId(qint32 channelId) {
    m_channelId = channelId;
}

qint32 Update::channelId() const {
    return m_channelId;
}

void Update::setChat(const EncryptedChat &chat) {
    m_chat = chat;
}

EncryptedChat Update::chat() const {
    return m_chat;
}

void Update::setChatId(qint32 chatId) {
    m_chatId = chatId;
}

qint32 Update::chatId() const {
    return m_chatId;
}

void Update::setChatInstance(qint64 chatInstance) {
    m_chatInstance = chatInstance;
}

qint64 Update::chatInstance() const {
    return m_chatInstance;
}

void Update::setCurrency(const QString &currency) {
    m_currency = currency;
}

QString Update::currency() const {
    return m_currency;
}

void Update::setDataJSON(const DataJSON &dataJSON) {
    m_dataJSON = dataJSON;
}

DataJSON Update::dataJSON() const {
    return m_dataJSON;
}

void Update::setDataBytes(const QByteArray &dataBytes) {
    if(!dataBytes.isNull()) m_flags = (m_flags | (1<<0));
    else m_flags = (m_flags & ~(1<<0));
    m_dataBytes = dataBytes;
}

QByteArray Update::dataBytes() const {
    return m_dataBytes;
}

void Update::setDate(qint32 date) {
    m_date = date;
}

qint32 Update::date() const {
    return m_date;
}

void Update::setDcOptions(const QList<DcOption> &dcOptions) {
    m_dcOptions = dcOptions;
}

QList<DcOption> Update::dcOptions() const {
    return m_dcOptions;
}

void Update::setDifference(const LangPackDifference &difference) {
    m_difference = difference;
}

LangPackDifference Update::difference() const {
    return m_difference;
}

void Update::setDraft(const DraftMessage &draft) {
    m_draft = draft;
}

DraftMessage Update::draft() const {
    return m_draft;
}

void Update::setEnabled(bool enabled) {
    m_enabled = enabled;
}

bool Update::enabled() const {
    return m_enabled;
}

void Update::setEntities(const QList<MessageEntity> &entities) {
    m_entities = entities;
}

QList<MessageEntity> Update::entities() const {
    return m_entities;
}

void Update::setFirstName(const QString &firstName) {
    m_firstName = firstName;
}

QString Update::firstName() const {
    return m_firstName;
}

void Update::setFlags(qint32 flags) {
    m_flags = flags;
}

qint32 Update::flags() const {
    return m_flags;
}

void Update::setForeignLink(const ContactLink &foreignLink) {
    m_foreignLink = foreignLink;
}

ContactLink Update::foreignLink() const {
    return m_foreignLink;
}

void Update::setGameShortName(const QString &gameShortName) {
    if(!gameShortName.isNull()) m_flags = (m_flags | (1<<1));
    else m_flags = (m_flags & ~(1<<1));
    m_gameShortName = gameShortName;
}

QString Update::gameShortName() const {
    return m_gameShortName;
}

void Update::setGeo(const GeoPoint &geo) {
    if(!geo.isNull()) m_flags = (m_flags | (1<<0));
    else m_flags = (m_flags & ~(1<<0));
    m_geo = geo;
}

GeoPoint Update::geo() const {
    return m_geo;
}

void Update::setIdString(const QString &idString) {
    m_idString = idString;
}

QString Update::idString() const {
    return m_idString;
}

void Update::setIdInt(qint32 idInt) {
    m_idInt = idInt;
}

qint32 Update::idInt() const {
    return m_idInt;
}

void Update::setInboxDate(qint32 inboxDate) {
    if(inboxDate) m_flags = (m_flags | (1<<1));
    else m_flags = (m_flags & ~(1<<1));
    m_inboxDate = inboxDate;
}

qint32 Update::inboxDate() const {
    return m_inboxDate;
}

void Update::setInfo(const PaymentRequestedInfo &info) {
    if(!info.isNull()) m_flags = (m_flags | (1<<0));
    else m_flags = (m_flags & ~(1<<0));
    m_info = info;
}

PaymentRequestedInfo Update::info() const {
    return m_info;
}

void Update::setInviterId(qint32 inviterId) {
    m_inviterId = inviterId;
}

qint32 Update::inviterId() const {
    return m_inviterId;
}

void Update::setIsAdmin(bool isAdmin) {
    m_isAdmin = isAdmin;
}

bool Update::isAdmin() const {
    return m_isAdmin;
}

void Update::setKey(const PrivacyKey &key) {
    m_key = key;
}

PrivacyKey Update::key() const {
    return m_key;
}

void Update::setLastName(const QString &lastName) {
    m_lastName = lastName;
}

QString Update::lastName() const {
    return m_lastName;
}

void Update::setMasks(bool masks) {
    if(masks) m_flags = (m_flags | (1<<0));
    else m_flags = (m_flags & ~(1<<0));
}

bool Update::masks() const {
    return (m_flags & 1<<0);
}

void Update::setMaxDate(qint32 maxDate) {
    m_maxDate = maxDate;
}

qint32 Update::maxDate() const {
    return m_maxDate;
}

void Update::setMaxId(qint32 maxId) {
    m_maxId = maxId;
}

qint32 Update::maxId() const {
    return m_maxId;
}

void Update::setMedia(const MessageMedia &media) {
    m_media = media;
}

MessageMedia Update::media() const {
    return m_media;
}

void Update::setMessageEncrypted(const EncryptedMessage &messageEncrypted) {
    m_messageEncrypted = messageEncrypted;
}

EncryptedMessage Update::messageEncrypted() const {
    return m_messageEncrypted;
}

void Update::setMessage(const Message &message) {
    m_message = message;
}

Message Update::message() const {
    return m_message;
}

void Update::setMessageString(const QString &messageString) {
    m_messageString = messageString;
}

QString Update::messageString() const {
    return m_messageString;
}

void Update::setMessages(const QList<qint32> &messages) {
    m_messages = messages;
}

QList<qint32> Update::messages() const {
    return m_messages;
}

void Update::setMsgIdInputBotInlineMessageID(const InputBotInlineMessageID &msgIdInputBotInlineMessageID) {
    if(!msgIdInputBotInlineMessageID.isNull()) m_flags = (m_flags | (1<<1));
    else m_flags = (m_flags & ~(1<<1));
    m_msgIdInputBotInlineMessageID = msgIdInputBotInlineMessageID;
}

InputBotInlineMessageID Update::msgIdInputBotInlineMessageID() const {
    return m_msgIdInputBotInlineMessageID;
}

void Update::setMsgIdInt(qint32 msgIdInt) {
    m_msgIdInt = msgIdInt;
}

qint32 Update::msgIdInt() const {
    return m_msgIdInt;
}

void Update::setMyLink(const ContactLink &myLink) {
    m_myLink = myLink;
}

ContactLink Update::myLink() const {
    return m_myLink;
}

void Update::setNotifySettings(const PeerNotifySettings &notifySettings) {
    m_notifySettings = notifySettings;
}

PeerNotifySettings Update::notifySettings() const {
    return m_notifySettings;
}

void Update::setOffset(const QString &offset) {
    m_offset = offset;
}

QString Update::offset() const {
    return m_offset;
}

void Update::setOrderVectorPeer(const QList<Peer> &orderVectorPeer) {
    if(orderVectorPeer.length()) m_flags = (m_flags | (1<<0));
    else m_flags = (m_flags & ~(1<<0));
    m_orderVectorPeer = orderVectorPeer;
}

QList<Peer> Update::orderVectorPeer() const {
    return m_orderVectorPeer;
}

void Update::setOrderVectorlong(const QList<qint64> &orderVectorlong) {
    m_orderVectorlong = orderVectorlong;
}

QList<qint64> Update::orderVectorlong() const {
    return m_orderVectorlong;
}

void Update::setParticipants(const ChatParticipants &participants) {
    m_participants = participants;
}

ChatParticipants Update::participants() const {
    return m_participants;
}

void Update::setPayload(const QByteArray &payload) {
    m_payload = payload;
}

QByteArray Update::payload() const {
    return m_payload;
}

void Update::setPeerNotify(const NotifyPeer &peerNotify) {
    m_peerNotify = peerNotify;
}

NotifyPeer Update::peerNotify() const {
    return m_peerNotify;
}

void Update::setPeer(const Peer &peer) {
    m_peer = peer;
}

Peer Update::peer() const {
    return m_peer;
}

void Update::setPhone(const QString &phone) {
    m_phone = phone;
}

QString Update::phone() const {
    return m_phone;
}

void Update::setPhoneCall(const PhoneCall &phoneCall) {
    m_phoneCall = phoneCall;
}

PhoneCall Update::phoneCall() const {
    return m_phoneCall;
}

void Update::setPhoto(const UserProfilePhoto &photo) {
    m_photo = photo;
}

UserProfilePhoto Update::photo() const {
    return m_photo;
}

void Update::setPinned(bool pinned) {
    if(pinned) m_flags = (m_flags | (1<<0));
    else m_flags = (m_flags & ~(1<<0));
}

bool Update::pinned() const {
    return (m_flags & 1<<0);
}

void Update::setPopup(bool popup) {
    if(popup) m_flags = (m_flags | (1<<0));
    else m_flags = (m_flags & ~(1<<0));
}

bool Update::popup() const {
    return (m_flags & 1<<0);
}

void Update::setPrevious(bool previous) {
    m_previous = previous;
}

bool Update::previous() const {
    return m_previous;
}

void Update::setPts(qint32 pts) {
    m_pts = pts;
}

qint32 Update::pts() const {
    return m_pts;
}

void Update::setPtsCount(qint32 ptsCount) {
    m_ptsCount = ptsCount;
}

qint32 Update::ptsCount() const {
    return m_ptsCount;
}

void Update::setQts(qint32 qts) {
    m_qts = qts;
}

qint32 Update::qts() const {
    return m_qts;
}

void Update::setQuery(const QString &query) {
    m_query = query;
}

QString Update::query() const {
    return m_query;
}

void Update::setQueryId(qint64 queryId) {
    m_queryId = queryId;
}

qint64 Update::queryId() const {
    return m_queryId;
}

void Update::setRandomId(qint64 randomId) {
    m_randomId = randomId;
}

qint64 Update::randomId() const {
    return m_randomId;
}

void Update::setRules(const QList<PrivacyRule> &rules) {
    m_rules = rules;
}

QList<PrivacyRule> Update::rules() const {
    return m_rules;
}

void Update::setShippingAddress(const PostAddress &shippingAddress) {
    m_shippingAddress = shippingAddress;
}

PostAddress Update::shippingAddress() const {
    return m_shippingAddress;
}

void Update::setShippingOptionId(const QString &shippingOptionId) {
    if(!shippingOptionId.isNull()) m_flags = (m_flags | (1<<1));
    else m_flags = (m_flags & ~(1<<1));
    m_shippingOptionId = shippingOptionId;
}

QString Update::shippingOptionId() const {
    return m_shippingOptionId;
}

void Update::setStatus(const UserStatus &status) {
    m_status = status;
}

UserStatus Update::status() const {
    return m_status;
}

void Update::setStickerset(const MessagesStickerSet &stickerset) {
    m_stickerset = stickerset;
}

MessagesStickerSet Update::stickerset() const {
    return m_stickerset;
}

void Update::setTimeout(qint32 timeout) {
    m_timeout = timeout;
}

qint32 Update::timeout() const {
    return m_timeout;
}

void Update::setTotalAmount(qint64 totalAmount) {
    m_totalAmount = totalAmount;
}

qint64 Update::totalAmount() const {
    return m_totalAmount;
}

void Update::setType(const QString &type) {
    m_type = type;
}

QString Update::type() const {
    return m_type;
}

void Update::setUserId(qint32 userId) {
    m_userId = userId;
}

qint32 Update::userId() const {
    return m_userId;
}

void Update::setUsername(const QString &username) {
    m_username = username;
}

QString Update::username() const {
    return m_username;
}

void Update::setVersion(qint32 version) {
    m_version = version;
}

qint32 Update::version() const {
    return m_version;
}

void Update::setViews(qint32 views) {
    m_views = views;
}

qint32 Update::views() const {
    return m_views;
}

void Update::setWebpage(const WebPage &webpage) {
    m_webpage = webpage;
}

WebPage Update::webpage() const {
    return m_webpage;
}

bool Update::operator ==(const Update &b) const {
    return m_classType == b.m_classType &&
           m_action == b.m_action &&
           m_blocked == b.m_blocked &&
           m_channelId == b.m_channelId &&
           m_chat == b.m_chat &&
           m_chatId == b.m_chatId &&
           m_chatInstance == b.m_chatInstance &&
           m_currency == b.m_currency &&
           m_dataJSON == b.m_dataJSON &&
           m_dataBytes == b.m_dataBytes &&
           m_date == b.m_date &&
           m_dcOptions == b.m_dcOptions &&
           m_difference == b.m_difference &&
           m_draft == b.m_draft &&
           m_enabled == b.m_enabled &&
           m_entities == b.m_entities &&
           m_firstName == b.m_firstName &&
           m_flags == b.m_flags &&
           m_foreignLink == b.m_foreignLink &&
           m_gameShortName == b.m_gameShortName &&
           m_geo == b.m_geo &&
           m_idString == b.m_idString &&
           m_idInt == b.m_idInt &&
           m_inboxDate == b.m_inboxDate &&
           m_info == b.m_info &&
           m_inviterId == b.m_inviterId &&
           m_isAdmin == b.m_isAdmin &&
           m_key == b.m_key &&
           m_lastName == b.m_lastName &&
           m_maxDate == b.m_maxDate &&
           m_maxId == b.m_maxId &&
           m_media == b.m_media &&
           m_messageEncrypted == b.m_messageEncrypted &&
           m_message == b.m_message &&
           m_messageString == b.m_messageString &&
           m_messages == b.m_messages &&
           m_msgIdInputBotInlineMessageID == b.m_msgIdInputBotInlineMessageID &&
           m_msgIdInt == b.m_msgIdInt &&
           m_myLink == b.m_myLink &&
           m_notifySettings == b.m_notifySettings &&
           m_offset == b.m_offset &&
           m_orderVectorPeer == b.m_orderVectorPeer &&
           m_orderVectorlong == b.m_orderVectorlong &&
           m_participants == b.m_participants &&
           m_payload == b.m_payload &&
           m_peerNotify == b.m_peerNotify &&
           m_peer == b.m_peer &&
           m_phone == b.m_phone &&
           m_phoneCall == b.m_phoneCall &&
           m_photo == b.m_photo &&
           m_previous == b.m_previous &&
           m_pts == b.m_pts &&
           m_ptsCount == b.m_ptsCount &&
           m_qts == b.m_qts &&
           m_query == b.m_query &&
           m_queryId == b.m_queryId &&
           m_randomId == b.m_randomId &&
           m_rules == b.m_rules &&
           m_shippingAddress == b.m_shippingAddress &&
           m_shippingOptionId == b.m_shippingOptionId &&
           m_status == b.m_status &&
           m_stickerset == b.m_stickerset &&
           m_timeout == b.m_timeout &&
           m_totalAmount == b.m_totalAmount &&
           m_type == b.m_type &&
           m_userId == b.m_userId &&
           m_username == b.m_username &&
           m_version == b.m_version &&
           m_views == b.m_views &&
           m_webpage == b.m_webpage;
}

Update &Update::operator =(const Update &b) {
    m_classType = b.m_classType;
    m_action = b.m_action;
    m_blocked = b.m_blocked;
    m_channelId = b.m_channelId;
    m_chat = b.m_chat;
    m_chatId = b.m_chatId;
    m_chatInstance = b.m_chatInstance;
    m_currency = b.m_currency;
    m_dataJSON = b.m_dataJSON;
    m_dataBytes = b.m_dataBytes;
    m_date = b.m_date;
    m_dcOptions = b.m_dcOptions;
    m_difference = b.m_difference;
    m_draft = b.m_draft;
    m_enabled = b.m_enabled;
    m_entities = b.m_entities;
    m_firstName = b.m_firstName;
    m_flags = b.m_flags;
    m_foreignLink = b.m_foreignLink;
    m_gameShortName = b.m_gameShortName;
    m_geo = b.m_geo;
    m_idString = b.m_idString;
    m_idInt = b.m_idInt;
    m_inboxDate = b.m_inboxDate;
    m_info = b.m_info;
    m_inviterId = b.m_inviterId;
    m_isAdmin = b.m_isAdmin;
    m_key = b.m_key;
    m_lastName = b.m_lastName;
    m_maxDate = b.m_maxDate;
    m_maxId = b.m_maxId;
    m_media = b.m_media;
    m_messageEncrypted = b.m_messageEncrypted;
    m_message = b.m_message;
    m_messageString = b.m_messageString;
    m_messages = b.m_messages;
    m_msgIdInputBotInlineMessageID = b.m_msgIdInputBotInlineMessageID;
    m_msgIdInt = b.m_msgIdInt;
    m_myLink = b.m_myLink;
    m_notifySettings = b.m_notifySettings;
    m_offset = b.m_offset;
    m_orderVectorPeer = b.m_orderVectorPeer;
    m_orderVectorlong = b.m_orderVectorlong;
    m_participants = b.m_participants;
    m_payload = b.m_payload;
    m_peerNotify = b.m_peerNotify;
    m_peer = b.m_peer;
    m_phone = b.m_phone;
    m_phoneCall = b.m_phoneCall;
    m_photo = b.m_photo;
    m_previous = b.m_previous;
    m_pts = b.m_pts;
    m_ptsCount = b.m_ptsCount;
    m_qts = b.m_qts;
    m_query = b.m_query;
    m_queryId = b.m_queryId;
    m_randomId = b.m_randomId;
    m_rules = b.m_rules;
    m_shippingAddress = b.m_shippingAddress;
    m_shippingOptionId = b.m_shippingOptionId;
    m_status = b.m_status;
    m_stickerset = b.m_stickerset;
    m_timeout = b.m_timeout;
    m_totalAmount = b.m_totalAmount;
    m_type = b.m_type;
    m_userId = b.m_userId;
    m_username = b.m_username;
    m_version = b.m_version;
    m_views = b.m_views;
    m_webpage = b.m_webpage;
    setNull(b.isNull());
    return *this;
}

void Update::setClassType(Update::UpdateClassType classType) {
    m_classType = classType;
}

Update::UpdateClassType Update::classType() const {
    return m_classType;
}

bool Update::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeUpdateNewMessage: {
        m_message.fetch(in);
        m_pts = in->fetchInt();
        m_ptsCount = in->fetchInt();
        m_classType = static_cast<UpdateClassType>(x);
        return true;
    }
        break;

    case typeUpdateMessageID: {
        m_idInt = in->fetchInt();
        m_randomId = in->fetchLong();
        m_classType = static_cast<UpdateClassType>(x);
        return true;
    }
        break;

    case typeUpdateDeleteMessages: {
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_messages_length = in->fetchInt();
        m_messages.clear();
        for (qint32 i = 0; i < m_messages_length; i++) {
            qint32 type;
            type = in->fetchInt();
            m_messages.append(type);
        }
        m_pts = in->fetchInt();
        m_ptsCount = in->fetchInt();
        m_classType = static_cast<UpdateClassType>(x);
        return true;
    }
        break;

    case typeUpdateUserTyping: {
        m_userId = in->fetchInt();
        m_action.fetch(in);
        m_classType = static_cast<UpdateClassType>(x);
        return true;
    }
        break;

    case typeUpdateChatUserTyping: {
        m_chatId = in->fetchInt();
        m_userId = in->fetchInt();
        m_action.fetch(in);
        m_classType = static_cast<UpdateClassType>(x);
        return true;
    }
        break;

    case typeUpdateChatParticipants: {
        m_participants.fetch(in);
        m_classType = static_cast<UpdateClassType>(x);
        return true;
    }
        break;

    case typeUpdateUserStatus: {
        m_userId = in->fetchInt();
        m_status.fetch(in);
        m_classType = static_cast<UpdateClassType>(x);
        return true;
    }
        break;

    case typeUpdateUserName: {
        m_userId = in->fetchInt();
        m_firstName = in->fetchQString();
        m_lastName = in->fetchQString();
        m_username = in->fetchQString();
        m_classType = static_cast<UpdateClassType>(x);
        return true;
    }
        break;

    case typeUpdateUserPhoto: {
        m_userId = in->fetchInt();
        m_date = in->fetchInt();
        m_photo.fetch(in);
        m_previous = in->fetchBool();
        m_classType = static_cast<UpdateClassType>(x);
        return true;
    }
        break;

    case typeUpdateContactRegistered: {
        m_userId = in->fetchInt();
        m_date = in->fetchInt();
        m_classType = static_cast<UpdateClassType>(x);
        return true;
    }
        break;

    case typeUpdateContactLink: {
        m_userId = in->fetchInt();
        m_myLink.fetch(in);
        m_foreignLink.fetch(in);
        m_classType = static_cast<UpdateClassType>(x);
        return true;
    }
        break;

    case typeUpdateNewEncryptedMessage: {
        m_messageEncrypted.fetch(in);
        m_qts = in->fetchInt();
        m_classType = static_cast<UpdateClassType>(x);
        return true;
    }
        break;

    case typeUpdateEncryptedChatTyping: {
        m_chatId = in->fetchInt();
        m_classType = static_cast<UpdateClassType>(x);
        return true;
    }
        break;

    case typeUpdateEncryption: {
        m_chat.fetch(in);
        m_date = in->fetchInt();
        m_classType = static_cast<UpdateClassType>(x);
        return true;
    }
        break;

    case typeUpdateEncryptedMessagesRead: {
        m_chatId = in->fetchInt();
        m_maxDate = in->fetchInt();
        m_date = in->fetchInt();
        m_classType = static_cast<UpdateClassType>(x);
        return true;
    }
        break;

    case typeUpdateChatParticipantAdd: {
        m_chatId = in->fetchInt();
        m_userId = in->fetchInt();
        m_inviterId = in->fetchInt();
        m_date = in->fetchInt();
        m_version = in->fetchInt();
        m_classType = static_cast<UpdateClassType>(x);
        return true;
    }
        break;

    case typeUpdateChatParticipantDelete: {
        m_chatId = in->fetchInt();
        m_userId = in->fetchInt();
        m_version = in->fetchInt();
        m_classType = static_cast<UpdateClassType>(x);
        return true;
    }
        break;

    case typeUpdateDcOptions: {
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_dcOptions_length = in->fetchInt();
        m_dcOptions.clear();
        for (qint32 i = 0; i < m_dcOptions_length; i++) {
            DcOption type;
            type.fetch(in);
            m_dcOptions.append(type);
        }
        m_classType = static_cast<UpdateClassType>(x);
        return true;
    }
        break;

    case typeUpdateUserBlocked: {
        m_userId = in->fetchInt();
        m_blocked = in->fetchBool();
        m_classType = static_cast<UpdateClassType>(x);
        return true;
    }
        break;

    case typeUpdateNotifySettings: {
        m_peerNotify.fetch(in);
        m_notifySettings.fetch(in);
        m_classType = static_cast<UpdateClassType>(x);
        return true;
    }
        break;

    case typeUpdateServiceNotification: {
        m_flags = in->fetchInt();
        if(m_flags & 1<<1) {
            m_inboxDate = in->fetchInt();
        }
        m_type = in->fetchQString();
        m_messageString = in->fetchQString();
        m_media.fetch(in);
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_entities_length = in->fetchInt();
        m_entities.clear();
        for (qint32 i = 0; i < m_entities_length; i++) {
            MessageEntity type;
            type.fetch(in);
            m_entities.append(type);
        }
        m_classType = static_cast<UpdateClassType>(x);
        return true;
    }
        break;

    case typeUpdatePrivacy: {
        m_key.fetch(in);
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_rules_length = in->fetchInt();
        m_rules.clear();
        for (qint32 i = 0; i < m_rules_length; i++) {
            PrivacyRule type;
            type.fetch(in);
            m_rules.append(type);
        }
        m_classType = static_cast<UpdateClassType>(x);
        return true;
    }
        break;

    case typeUpdateUserPhone: {
        m_userId = in->fetchInt();
        m_phone = in->fetchQString();
        m_classType = static_cast<UpdateClassType>(x);
        return true;
    }
        break;

    case typeUpdateReadHistoryInbox: {
        m_peer.fetch(in);
        m_maxId = in->fetchInt();
        m_pts = in->fetchInt();
        m_ptsCount = in->fetchInt();
        m_classType = static_cast<UpdateClassType>(x);
        return true;
    }
        break;

    case typeUpdateReadHistoryOutbox: {
        m_peer.fetch(in);
        m_maxId = in->fetchInt();
        m_pts = in->fetchInt();
        m_ptsCount = in->fetchInt();
        m_classType = static_cast<UpdateClassType>(x);
        return true;
    }
        break;

    case typeUpdateWebPage: {
        m_webpage.fetch(in);
        m_pts = in->fetchInt();
        m_ptsCount = in->fetchInt();
        m_classType = static_cast<UpdateClassType>(x);
        return true;
    }
        break;

    case typeUpdateReadMessagesContents: {
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_messages_length = in->fetchInt();
        m_messages.clear();
        for (qint32 i = 0; i < m_messages_length; i++) {
            qint32 type;
            type = in->fetchInt();
            m_messages.append(type);
        }
        m_pts = in->fetchInt();
        m_ptsCount = in->fetchInt();
        m_classType = static_cast<UpdateClassType>(x);
        return true;
    }
        break;

    case typeUpdateChannelTooLong: {
        m_flags = in->fetchInt();
        m_channelId = in->fetchInt();
        if(m_flags & 1<<0) {
            m_pts = in->fetchInt();
        }
        m_classType = static_cast<UpdateClassType>(x);
        return true;
    }
        break;

    case typeUpdateChannel: {
        m_channelId = in->fetchInt();
        m_classType = static_cast<UpdateClassType>(x);
        return true;
    }
        break;

    case typeUpdateNewChannelMessage: {
        m_message.fetch(in);
        m_pts = in->fetchInt();
        m_ptsCount = in->fetchInt();
        m_classType = static_cast<UpdateClassType>(x);
        return true;
    }
        break;

    case typeUpdateReadChannelInbox: {
        m_channelId = in->fetchInt();
        m_maxId = in->fetchInt();
        m_classType = static_cast<UpdateClassType>(x);
        return true;
    }
        break;

    case typeUpdateDeleteChannelMessages: {
        m_channelId = in->fetchInt();
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_messages_length = in->fetchInt();
        m_messages.clear();
        for (qint32 i = 0; i < m_messages_length; i++) {
            qint32 type;
            type = in->fetchInt();
            m_messages.append(type);
        }
        m_pts = in->fetchInt();
        m_ptsCount = in->fetchInt();
        m_classType = static_cast<UpdateClassType>(x);
        return true;
    }
        break;

    case typeUpdateChannelMessageViews: {
        m_channelId = in->fetchInt();
        m_idInt = in->fetchInt();
        m_views = in->fetchInt();
        m_classType = static_cast<UpdateClassType>(x);
        return true;
    }
        break;

    case typeUpdateChatAdmins: {
        m_chatId = in->fetchInt();
        m_enabled = in->fetchBool();
        m_version = in->fetchInt();
        m_classType = static_cast<UpdateClassType>(x);
        return true;
    }
        break;

    case typeUpdateChatParticipantAdmin: {
        m_chatId = in->fetchInt();
        m_userId = in->fetchInt();
        m_isAdmin = in->fetchBool();
        m_version = in->fetchInt();
        m_classType = static_cast<UpdateClassType>(x);
        return true;
    }
        break;

    case typeUpdateNewStickerSet: {
        m_stickerset.fetch(in);
        m_classType = static_cast<UpdateClassType>(x);
        return true;
    }
        break;

    case typeUpdateStickerSetsOrder: {
        m_flags = in->fetchInt();
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_orderVectorlong_length = in->fetchInt();
        m_orderVectorlong.clear();
        for (qint32 i = 0; i < m_orderVectorlong_length; i++) {
            qint64 type;
            type = in->fetchLong();
            m_orderVectorlong.append(type);
        }
        m_classType = static_cast<UpdateClassType>(x);
        return true;
    }
        break;

    case typeUpdateStickerSets: {
        m_classType = static_cast<UpdateClassType>(x);
        return true;
    }
        break;

    case typeUpdateSavedGifs: {
        m_classType = static_cast<UpdateClassType>(x);
        return true;
    }
        break;

    case typeUpdateBotInlineQuery: {
        m_flags = in->fetchInt();
        m_queryId = in->fetchLong();
        m_userId = in->fetchInt();
        m_query = in->fetchQString();
        if(m_flags & 1<<0) {
            m_geo.fetch(in);
        }
        m_offset = in->fetchQString();
        m_classType = static_cast<UpdateClassType>(x);
        return true;
    }
        break;

    case typeUpdateBotInlineSend: {
        m_flags = in->fetchInt();
        m_userId = in->fetchInt();
        m_query = in->fetchQString();
        if(m_flags & 1<<0) {
            m_geo.fetch(in);
        }
        m_idString = in->fetchQString();
        if(m_flags & 1<<1) {
            m_msgIdInputBotInlineMessageID.fetch(in);
        }
        m_classType = static_cast<UpdateClassType>(x);
        return true;
    }
        break;

    case typeUpdateEditChannelMessage: {
        m_message.fetch(in);
        m_pts = in->fetchInt();
        m_ptsCount = in->fetchInt();
        m_classType = static_cast<UpdateClassType>(x);
        return true;
    }
        break;

    case typeUpdateChannelPinnedMessage: {
        m_channelId = in->fetchInt();
        m_idInt = in->fetchInt();
        m_classType = static_cast<UpdateClassType>(x);
        return true;
    }
        break;

    case typeUpdateBotCallbackQuery: {
        m_flags = in->fetchInt();
        m_queryId = in->fetchLong();
        m_userId = in->fetchInt();
        m_peer.fetch(in);
        m_msgIdInt = in->fetchInt();
        m_chatInstance = in->fetchLong();
        if(m_flags & 1<<0) {
            m_dataBytes = in->fetchBytes();
        }
        if(m_flags & 1<<1) {
            m_gameShortName = in->fetchQString();
        }
        m_classType = static_cast<UpdateClassType>(x);
        return true;
    }
        break;

    case typeUpdateEditMessage: {
        m_message.fetch(in);
        m_pts = in->fetchInt();
        m_ptsCount = in->fetchInt();
        m_classType = static_cast<UpdateClassType>(x);
        return true;
    }
        break;

    case typeUpdateInlineBotCallbackQuery: {
        m_flags = in->fetchInt();
        m_queryId = in->fetchLong();
        m_userId = in->fetchInt();
        m_msgIdInputBotInlineMessageID.fetch(in);
        m_chatInstance = in->fetchLong();
        if(m_flags & 1<<0) {
            m_dataBytes = in->fetchBytes();
        }
        if(m_flags & 1<<1) {
            m_gameShortName = in->fetchQString();
        }
        m_classType = static_cast<UpdateClassType>(x);
        return true;
    }
        break;

    case typeUpdateReadChannelOutbox: {
        m_channelId = in->fetchInt();
        m_maxId = in->fetchInt();
        m_classType = static_cast<UpdateClassType>(x);
        return true;
    }
        break;

    case typeUpdateDraftMessage: {
        m_peer.fetch(in);
        m_draft.fetch(in);
        m_classType = static_cast<UpdateClassType>(x);
        return true;
    }
        break;

    case typeUpdateReadFeaturedStickers: {
        m_classType = static_cast<UpdateClassType>(x);
        return true;
    }
        break;

    case typeUpdateRecentStickers: {
        m_classType = static_cast<UpdateClassType>(x);
        return true;
    }
        break;

    case typeUpdateConfig: {
        m_classType = static_cast<UpdateClassType>(x);
        return true;
    }
        break;

    case typeUpdatePtsChanged: {
        m_classType = static_cast<UpdateClassType>(x);
        return true;
    }
        break;

    case typeUpdateChannelWebPage: {
        m_channelId = in->fetchInt();
        m_webpage.fetch(in);
        m_pts = in->fetchInt();
        m_ptsCount = in->fetchInt();
        m_classType = static_cast<UpdateClassType>(x);
        return true;
    }
        break;

    case typeUpdateDialogPinned: {
        m_flags = in->fetchInt();
        m_peer.fetch(in);
        m_classType = static_cast<UpdateClassType>(x);
        return true;
    }
        break;

    case typeUpdatePinnedDialogs: {
        m_flags = in->fetchInt();
        if(m_flags & 1<<0) {
            if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
            qint32 m_orderVectorPeer_length = in->fetchInt();
            m_orderVectorPeer.clear();
            for (qint32 i = 0; i < m_orderVectorPeer_length; i++) {
                Peer type;
                if(m_flags & 1<<0) {
                type.fetch(in);
            }
                m_orderVectorPeer.append(type);
            }
        }
        m_classType = static_cast<UpdateClassType>(x);
        return true;
    }
        break;

    case typeUpdateBotWebhookJSON: {
        m_dataJSON.fetch(in);
        m_classType = static_cast<UpdateClassType>(x);
        return true;
    }
        break;

    case typeUpdateBotWebhookJSONQuery: {
        m_queryId = in->fetchLong();
        m_dataJSON.fetch(in);
        m_timeout = in->fetchInt();
        m_classType = static_cast<UpdateClassType>(x);
        return true;
    }
        break;

    case typeUpdateBotShippingQuery: {
        m_queryId = in->fetchLong();
        m_userId = in->fetchInt();
        m_payload = in->fetchBytes();
        m_shippingAddress.fetch(in);
        m_classType = static_cast<UpdateClassType>(x);
        return true;
    }
        break;

    case typeUpdateBotPrecheckoutQuery: {
        m_flags = in->fetchInt();
        m_queryId = in->fetchLong();
        m_userId = in->fetchInt();
        m_payload = in->fetchBytes();
        if(m_flags & 1<<0) {
            m_info.fetch(in);
        }
        if(m_flags & 1<<1) {
            m_shippingOptionId = in->fetchQString();
        }
        m_currency = in->fetchQString();
        m_totalAmount = in->fetchLong();
        m_classType = static_cast<UpdateClassType>(x);
        return true;
    }
        break;

    case typeUpdatePhoneCall: {
        m_phoneCall.fetch(in);
        m_classType = static_cast<UpdateClassType>(x);
        return true;
    }
        break;

    case typeUpdateLangPackTooLong: {
        m_classType = static_cast<UpdateClassType>(x);
        return true;
    }
        break;

    case typeUpdateLangPack: {
        m_difference.fetch(in);
        m_classType = static_cast<UpdateClassType>(x);
        return true;
    }
        break;

    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool Update::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeUpdateNewMessage: {
        m_message.push(out);
        out->appendInt(m_pts);
        out->appendInt(m_ptsCount);
        return true;
    }
        break;

    case typeUpdateMessageID: {
        out->appendInt(m_idInt);
        out->appendLong(m_randomId);
        return true;
    }
        break;

    case typeUpdateDeleteMessages: {
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_messages.count());
        for (qint32 i = 0; i < m_messages.count(); i++) {
            out->appendInt(m_messages[i]);
        }
        out->appendInt(m_pts);
        out->appendInt(m_ptsCount);
        return true;
    }
        break;

    case typeUpdateUserTyping: {
        out->appendInt(m_userId);
        m_action.push(out);
        return true;
    }
        break;

    case typeUpdateChatUserTyping: {
        out->appendInt(m_chatId);
        out->appendInt(m_userId);
        m_action.push(out);
        return true;
    }
        break;

    case typeUpdateChatParticipants: {
        m_participants.push(out);
        return true;
    }
        break;

    case typeUpdateUserStatus: {
        out->appendInt(m_userId);
        m_status.push(out);
        return true;
    }
        break;

    case typeUpdateUserName: {
        out->appendInt(m_userId);
        out->appendQString(m_firstName);
        out->appendQString(m_lastName);
        out->appendQString(m_username);
        return true;
    }
        break;

    case typeUpdateUserPhoto: {
        out->appendInt(m_userId);
        out->appendInt(m_date);
        m_photo.push(out);
        out->appendBool(m_previous);
        return true;
    }
        break;

    case typeUpdateContactRegistered: {
        out->appendInt(m_userId);
        out->appendInt(m_date);
        return true;
    }
        break;

    case typeUpdateContactLink: {
        out->appendInt(m_userId);
        m_myLink.push(out);
        m_foreignLink.push(out);
        return true;
    }
        break;

    case typeUpdateNewEncryptedMessage: {
        m_messageEncrypted.push(out);
        out->appendInt(m_qts);
        return true;
    }
        break;

    case typeUpdateEncryptedChatTyping: {
        out->appendInt(m_chatId);
        return true;
    }
        break;

    case typeUpdateEncryption: {
        m_chat.push(out);
        out->appendInt(m_date);
        return true;
    }
        break;

    case typeUpdateEncryptedMessagesRead: {
        out->appendInt(m_chatId);
        out->appendInt(m_maxDate);
        out->appendInt(m_date);
        return true;
    }
        break;

    case typeUpdateChatParticipantAdd: {
        out->appendInt(m_chatId);
        out->appendInt(m_userId);
        out->appendInt(m_inviterId);
        out->appendInt(m_date);
        out->appendInt(m_version);
        return true;
    }
        break;

    case typeUpdateChatParticipantDelete: {
        out->appendInt(m_chatId);
        out->appendInt(m_userId);
        out->appendInt(m_version);
        return true;
    }
        break;

    case typeUpdateDcOptions: {
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_dcOptions.count());
        for (qint32 i = 0; i < m_dcOptions.count(); i++) {
            m_dcOptions[i].push(out);
        }
        return true;
    }
        break;

    case typeUpdateUserBlocked: {
        out->appendInt(m_userId);
        out->appendBool(m_blocked);
        return true;
    }
        break;

    case typeUpdateNotifySettings: {
        m_peerNotify.push(out);
        m_notifySettings.push(out);
        return true;
    }
        break;

    case typeUpdateServiceNotification: {
        out->appendInt(m_flags);
        if(m_flags & 1<<1) {
            out->appendInt(m_inboxDate);
        }
        out->appendQString(m_type);
        out->appendQString(m_messageString);
        m_media.push(out);
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_entities.count());
        for (qint32 i = 0; i < m_entities.count(); i++) {
            m_entities[i].push(out);
        }
        return true;
    }
        break;

    case typeUpdatePrivacy: {
        m_key.push(out);
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_rules.count());
        for (qint32 i = 0; i < m_rules.count(); i++) {
            m_rules[i].push(out);
        }
        return true;
    }
        break;

    case typeUpdateUserPhone: {
        out->appendInt(m_userId);
        out->appendQString(m_phone);
        return true;
    }
        break;

    case typeUpdateReadHistoryInbox: {
        m_peer.push(out);
        out->appendInt(m_maxId);
        out->appendInt(m_pts);
        out->appendInt(m_ptsCount);
        return true;
    }
        break;

    case typeUpdateReadHistoryOutbox: {
        m_peer.push(out);
        out->appendInt(m_maxId);
        out->appendInt(m_pts);
        out->appendInt(m_ptsCount);
        return true;
    }
        break;

    case typeUpdateWebPage: {
        m_webpage.push(out);
        out->appendInt(m_pts);
        out->appendInt(m_ptsCount);
        return true;
    }
        break;

    case typeUpdateReadMessagesContents: {
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_messages.count());
        for (qint32 i = 0; i < m_messages.count(); i++) {
            out->appendInt(m_messages[i]);
        }
        out->appendInt(m_pts);
        out->appendInt(m_ptsCount);
        return true;
    }
        break;

    case typeUpdateChannelTooLong: {
        out->appendInt(m_flags);
        out->appendInt(m_channelId);
        if(m_flags & 1<<0) {
            out->appendInt(m_pts);
        }
        return true;
    }
        break;

    case typeUpdateChannel: {
        out->appendInt(m_channelId);
        return true;
    }
        break;

    case typeUpdateNewChannelMessage: {
        m_message.push(out);
        out->appendInt(m_pts);
        out->appendInt(m_ptsCount);
        return true;
    }
        break;

    case typeUpdateReadChannelInbox: {
        out->appendInt(m_channelId);
        out->appendInt(m_maxId);
        return true;
    }
        break;

    case typeUpdateDeleteChannelMessages: {
        out->appendInt(m_channelId);
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_messages.count());
        for (qint32 i = 0; i < m_messages.count(); i++) {
            out->appendInt(m_messages[i]);
        }
        out->appendInt(m_pts);
        out->appendInt(m_ptsCount);
        return true;
    }
        break;

    case typeUpdateChannelMessageViews: {
        out->appendInt(m_channelId);
        out->appendInt(m_idInt);
        out->appendInt(m_views);
        return true;
    }
        break;

    case typeUpdateChatAdmins: {
        out->appendInt(m_chatId);
        out->appendBool(m_enabled);
        out->appendInt(m_version);
        return true;
    }
        break;

    case typeUpdateChatParticipantAdmin: {
        out->appendInt(m_chatId);
        out->appendInt(m_userId);
        out->appendBool(m_isAdmin);
        out->appendInt(m_version);
        return true;
    }
        break;

    case typeUpdateNewStickerSet: {
        m_stickerset.push(out);
        return true;
    }
        break;

    case typeUpdateStickerSetsOrder: {
        out->appendInt(m_flags);
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_orderVectorlong.count());
        for (qint32 i = 0; i < m_orderVectorlong.count(); i++) {
            out->appendLong(m_orderVectorlong[i]);
        }
        return true;
    }
        break;

    case typeUpdateStickerSets: {
        return true;
    }
        break;

    case typeUpdateSavedGifs: {
        return true;
    }
        break;

    case typeUpdateBotInlineQuery: {
        out->appendInt(m_flags);
        out->appendLong(m_queryId);
        out->appendInt(m_userId);
        out->appendQString(m_query);
        if(m_flags & 1<<0) {
            m_geo.push(out);
        }
        out->appendQString(m_offset);
        return true;
    }
        break;

    case typeUpdateBotInlineSend: {
        out->appendInt(m_flags);
        out->appendInt(m_userId);
        out->appendQString(m_query);
        if(m_flags & 1<<0) {
            m_geo.push(out);
        }
        out->appendQString(m_idString);
        if(m_flags & 1<<1) {
            m_msgIdInputBotInlineMessageID.push(out);
        }
        return true;
    }
        break;

    case typeUpdateEditChannelMessage: {
        m_message.push(out);
        out->appendInt(m_pts);
        out->appendInt(m_ptsCount);
        return true;
    }
        break;

    case typeUpdateChannelPinnedMessage: {
        out->appendInt(m_channelId);
        out->appendInt(m_idInt);
        return true;
    }
        break;

    case typeUpdateBotCallbackQuery: {
        out->appendInt(m_flags);
        out->appendLong(m_queryId);
        out->appendInt(m_userId);
        m_peer.push(out);
        out->appendInt(m_msgIdInt);
        out->appendLong(m_chatInstance);
        if(m_flags & 1<<0) {
            out->appendBytes(m_dataBytes);
        }
        if(m_flags & 1<<1) {
            out->appendQString(m_gameShortName);
        }
        return true;
    }
        break;

    case typeUpdateEditMessage: {
        m_message.push(out);
        out->appendInt(m_pts);
        out->appendInt(m_ptsCount);
        return true;
    }
        break;

    case typeUpdateInlineBotCallbackQuery: {
        out->appendInt(m_flags);
        out->appendLong(m_queryId);
        out->appendInt(m_userId);
        m_msgIdInputBotInlineMessageID.push(out);
        out->appendLong(m_chatInstance);
        if(m_flags & 1<<0) {
            out->appendBytes(m_dataBytes);
        }
        if(m_flags & 1<<1) {
            out->appendQString(m_gameShortName);
        }
        return true;
    }
        break;

    case typeUpdateReadChannelOutbox: {
        out->appendInt(m_channelId);
        out->appendInt(m_maxId);
        return true;
    }
        break;

    case typeUpdateDraftMessage: {
        m_peer.push(out);
        m_draft.push(out);
        return true;
    }
        break;

    case typeUpdateReadFeaturedStickers: {
        return true;
    }
        break;

    case typeUpdateRecentStickers: {
        return true;
    }
        break;

    case typeUpdateConfig: {
        return true;
    }
        break;

    case typeUpdatePtsChanged: {
        return true;
    }
        break;

    case typeUpdateChannelWebPage: {
        out->appendInt(m_channelId);
        m_webpage.push(out);
        out->appendInt(m_pts);
        out->appendInt(m_ptsCount);
        return true;
    }
        break;

    case typeUpdateDialogPinned: {
        out->appendInt(m_flags);
        m_peer.push(out);
        return true;
    }
        break;

    case typeUpdatePinnedDialogs: {
        out->appendInt(m_flags);
        if(m_flags & 1<<0) {
            out->appendInt(CoreTypes::typeVector);
            out->appendInt(m_orderVectorPeer.count());
            for (qint32 i = 0; i < m_orderVectorPeer.count(); i++) {
                m_orderVectorPeer[i].push(out);
            }
        }
        return true;
    }
        break;

    case typeUpdateBotWebhookJSON: {
        m_dataJSON.push(out);
        return true;
    }
        break;

    case typeUpdateBotWebhookJSONQuery: {
        out->appendLong(m_queryId);
        m_dataJSON.push(out);
        out->appendInt(m_timeout);
        return true;
    }
        break;

    case typeUpdateBotShippingQuery: {
        out->appendLong(m_queryId);
        out->appendInt(m_userId);
        out->appendBytes(m_payload);
        m_shippingAddress.push(out);
        return true;
    }
        break;

    case typeUpdateBotPrecheckoutQuery: {
        out->appendInt(m_flags);
        out->appendLong(m_queryId);
        out->appendInt(m_userId);
        out->appendBytes(m_payload);
        if(m_flags & 1<<0) {
            m_info.push(out);
        }
        if(m_flags & 1<<1) {
            out->appendQString(m_shippingOptionId);
        }
        out->appendQString(m_currency);
        out->appendLong(m_totalAmount);
        return true;
    }
        break;

    case typeUpdatePhoneCall: {
        m_phoneCall.push(out);
        return true;
    }
        break;

    case typeUpdateLangPackTooLong: {
        return true;
    }
        break;

    case typeUpdateLangPack: {
        m_difference.push(out);
        return true;
    }
        break;

    default:
        return false;
    }
}

QMap<QString, QVariant> Update::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeUpdateNewMessage: {
        result["classType"] = "Update::typeUpdateNewMessage";
        if( !m_message.isNull() ) result["message"] = m_message.toMap();
        if( pts() ) result["pts"] = QString::number(pts());
        if( ptsCount() ) result["ptsCount"] = QString::number(ptsCount());
        return result;
    }
        break;

    case typeUpdateMessageID: {
        result["classType"] = "Update::typeUpdateMessageID";
        if( idInt() ) result["idInt"] = QString::number(idInt());
        if( randomId() ) result["randomId"] = QString::number(randomId());
        return result;
    }
        break;

    case typeUpdateDeleteMessages: {
        result["classType"] = "Update::typeUpdateDeleteMessages";
        QList<QVariant> _messages;
        //for(const qint32 &m__type: m_messages)
        for(int i = 0; i < m_messages.size(); ++i) {
            const qint32 &m__type = m_messages[i];
            _messages << QVariant::fromValue<qint32>(m__type);
        }
        result["messages"] = _messages;
        if( pts() ) result["pts"] = QString::number(pts());
        if( ptsCount() ) result["ptsCount"] = QString::number(ptsCount());
        return result;
    }
        break;

    case typeUpdateUserTyping: {
        result["classType"] = "Update::typeUpdateUserTyping";
        if( userId() ) result["userId"] = QString::number(userId());
        if( !m_action.isNull() ) result["action"] = m_action.toMap();
        return result;
    }
        break;

    case typeUpdateChatUserTyping: {
        result["classType"] = "Update::typeUpdateChatUserTyping";
        if( chatId() ) result["chatId"] = QString::number(chatId());
        if( userId() ) result["userId"] = QString::number(userId());
        if( !m_action.isNull() ) result["action"] = m_action.toMap();
        return result;
    }
        break;

    case typeUpdateChatParticipants: {
        result["classType"] = "Update::typeUpdateChatParticipants";
        if( !m_participants.isNull() ) result["participants"] = m_participants.toMap();
        return result;
    }
        break;

    case typeUpdateUserStatus: {
        result["classType"] = "Update::typeUpdateUserStatus";
        if( userId() ) result["userId"] = QString::number(userId());
        if( !m_status.isNull() ) result["status"] = m_status.toMap();
        return result;
    }
        break;

    case typeUpdateUserName: {
        result["classType"] = "Update::typeUpdateUserName";
        if( userId() ) result["userId"] = QString::number(userId());
        if( !m_firstName.isEmpty() ) result["firstName"] = QVariant::fromValue<QString>(m_firstName);
        if( !m_lastName.isEmpty() ) result["lastName"] = QVariant::fromValue<QString>(m_lastName);
        if( !m_username.isEmpty() ) result["username"] = QVariant::fromValue<QString>(m_username);
        return result;
    }
        break;

    case typeUpdateUserPhoto: {
        result["classType"] = "Update::typeUpdateUserPhoto";
        if( userId() ) result["userId"] = QString::number(userId());
        if( date() ) result["date"] = QString::number(date());
        if( !m_photo.isNull() ) result["photo"] = m_photo.toMap();
        if( previous() ) result["previous"] = QString::number(previous());
        return result;
    }
        break;

    case typeUpdateContactRegistered: {
        result["classType"] = "Update::typeUpdateContactRegistered";
        if( userId() ) result["userId"] = QString::number(userId());
        if( date() ) result["date"] = QString::number(date());
        return result;
    }
        break;

    case typeUpdateContactLink: {
        result["classType"] = "Update::typeUpdateContactLink";
        if( userId() ) result["userId"] = QString::number(userId());
        if( !m_myLink.isNull() ) result["myLink"] = m_myLink.toMap();
        if( !m_foreignLink.isNull() ) result["foreignLink"] = m_foreignLink.toMap();
        return result;
    }
        break;

    case typeUpdateNewEncryptedMessage: {
        result["classType"] = "Update::typeUpdateNewEncryptedMessage";
        if( !m_messageEncrypted.isNull() ) result["messageEncrypted"] = m_messageEncrypted.toMap();
        if( qts() ) result["qts"] = QString::number(qts());
        return result;
    }
        break;

    case typeUpdateEncryptedChatTyping: {
        result["classType"] = "Update::typeUpdateEncryptedChatTyping";
        if( chatId() ) result["chatId"] = QString::number(chatId());
        return result;
    }
        break;

    case typeUpdateEncryption: {
        result["classType"] = "Update::typeUpdateEncryption";
        if( !m_chat.isNull() ) result["chat"] = m_chat.toMap();
        if( date() ) result["date"] = QString::number(date());
        return result;
    }
        break;

    case typeUpdateEncryptedMessagesRead: {
        result["classType"] = "Update::typeUpdateEncryptedMessagesRead";
        if( chatId() ) result["chatId"] = QString::number(chatId());
        if( maxDate() ) result["maxDate"] = QString::number(maxDate());
        if( date() ) result["date"] = QString::number(date());
        return result;
    }
        break;

    case typeUpdateChatParticipantAdd: {
        result["classType"] = "Update::typeUpdateChatParticipantAdd";
        if( chatId() ) result["chatId"] = QString::number(chatId());
        if( userId() ) result["userId"] = QString::number(userId());
        if( inviterId() ) result["inviterId"] = QString::number(inviterId());
        if( date() ) result["date"] = QString::number(date());
        if( version() ) result["version"] = QString::number(version());
        return result;
    }
        break;

    case typeUpdateChatParticipantDelete: {
        result["classType"] = "Update::typeUpdateChatParticipantDelete";
        if( chatId() ) result["chatId"] = QString::number(chatId());
        if( userId() ) result["userId"] = QString::number(userId());
        if( version() ) result["version"] = QString::number(version());
        return result;
    }
        break;

    case typeUpdateDcOptions: {
        result["classType"] = "Update::typeUpdateDcOptions";
        QList<QVariant> _dcOptions;
        //for(const DcOption &m__type: m_dcOptions)
        for(int i = 0; i < m_dcOptions.size(); ++i) {
            const DcOption &m__type = m_dcOptions[i];
            if( !m__type.isNull() ) _dcOptions << m__type.toMap();
        }
        result["dcOptions"] = _dcOptions;
        return result;
    }
        break;

    case typeUpdateUserBlocked: {
        result["classType"] = "Update::typeUpdateUserBlocked";
        if( userId() ) result["userId"] = QString::number(userId());
        if( blocked() ) result["blocked"] = QString::number(blocked());
        return result;
    }
        break;

    case typeUpdateNotifySettings: {
        result["classType"] = "Update::typeUpdateNotifySettings";
        if( !m_peerNotify.isNull() ) result["peerNotify"] = m_peerNotify.toMap();
        if( !m_notifySettings.isNull() ) result["notifySettings"] = m_notifySettings.toMap();
        return result;
    }
        break;

    case typeUpdateServiceNotification: {
        result["classType"] = "Update::typeUpdateServiceNotification";
        if( popup() ) result["popup"] = QString::number(popup());
        if( inboxDate() ) result["inboxDate"] = QString::number(inboxDate());
        if( !m_type.isEmpty() ) result["type"] = QVariant::fromValue<QString>(m_type);
        if( !m_messageString.isEmpty() ) result["messageString"] = QVariant::fromValue<QString>(m_messageString);
        if( !m_media.isNull() ) result["media"] = m_media.toMap();
        QList<QVariant> _entities;
        //for(const MessageEntity &m__type: m_entities)
        for(int i = 0; i < m_entities.size(); ++i) {
            const MessageEntity &m__type = m_entities[i];
            if( !m__type.isNull() ) _entities << m__type.toMap();
        }
        result["entities"] = _entities;
        return result;
    }
        break;

    case typeUpdatePrivacy: {
        result["classType"] = "Update::typeUpdatePrivacy";
        if( !m_key.isNull() ) result["key"] = m_key.toMap();
        QList<QVariant> _rules;
        //for(const PrivacyRule &m__type: m_rules)
        for(int i = 0; i < m_rules.size(); ++i) {
            const PrivacyRule &m__type = m_rules[i];
            if( !m__type.isNull() ) _rules << m__type.toMap();
        }
        result["rules"] = _rules;
        return result;
    }
        break;

    case typeUpdateUserPhone: {
        result["classType"] = "Update::typeUpdateUserPhone";
        if( userId() ) result["userId"] = QString::number(userId());
        if( !m_phone.isEmpty() ) result["phone"] = QVariant::fromValue<QString>(m_phone);
        return result;
    }
        break;

    case typeUpdateReadHistoryInbox: {
        result["classType"] = "Update::typeUpdateReadHistoryInbox";
        if( !m_peer.isNull() ) result["peer"] = m_peer.toMap();
        if( maxId() ) result["maxId"] = QString::number(maxId());
        if( pts() ) result["pts"] = QString::number(pts());
        if( ptsCount() ) result["ptsCount"] = QString::number(ptsCount());
        return result;
    }
        break;

    case typeUpdateReadHistoryOutbox: {
        result["classType"] = "Update::typeUpdateReadHistoryOutbox";
        if( !m_peer.isNull() ) result["peer"] = m_peer.toMap();
        if( maxId() ) result["maxId"] = QString::number(maxId());
        if( pts() ) result["pts"] = QString::number(pts());
        if( ptsCount() ) result["ptsCount"] = QString::number(ptsCount());
        return result;
    }
        break;

    case typeUpdateWebPage: {
        result["classType"] = "Update::typeUpdateWebPage";
        if( !m_webpage.isNull() ) result["webpage"] = m_webpage.toMap();
        if( pts() ) result["pts"] = QString::number(pts());
        if( ptsCount() ) result["ptsCount"] = QString::number(ptsCount());
        return result;
    }
        break;

    case typeUpdateReadMessagesContents: {
        result["classType"] = "Update::typeUpdateReadMessagesContents";
        QList<QVariant> _messages;
        //for(const qint32 &m__type: m_messages)
        for(int i = 0; i < m_messages.size(); ++i) {
            const qint32 &m__type = m_messages[i];
            _messages << QVariant::fromValue<qint32>(m__type);
        }
        result["messages"] = _messages;
        if( pts() ) result["pts"] = QString::number(pts());
        if( ptsCount() ) result["ptsCount"] = QString::number(ptsCount());
        return result;
    }
        break;

    case typeUpdateChannelTooLong: {
        result["classType"] = "Update::typeUpdateChannelTooLong";
        if( channelId() ) result["channelId"] = QString::number(channelId());
        if( pts() ) result["pts"] = QString::number(pts());
        return result;
    }
        break;

    case typeUpdateChannel: {
        result["classType"] = "Update::typeUpdateChannel";
        if( channelId() ) result["channelId"] = QString::number(channelId());
        return result;
    }
        break;

    case typeUpdateNewChannelMessage: {
        result["classType"] = "Update::typeUpdateNewChannelMessage";
        if( !m_message.isNull() ) result["message"] = m_message.toMap();
        if( pts() ) result["pts"] = QString::number(pts());
        if( ptsCount() ) result["ptsCount"] = QString::number(ptsCount());
        return result;
    }
        break;

    case typeUpdateReadChannelInbox: {
        result["classType"] = "Update::typeUpdateReadChannelInbox";
        if( channelId() ) result["channelId"] = QString::number(channelId());
        if( maxId() ) result["maxId"] = QString::number(maxId());
        return result;
    }
        break;

    case typeUpdateDeleteChannelMessages: {
        result["classType"] = "Update::typeUpdateDeleteChannelMessages";
        if( channelId() ) result["channelId"] = QString::number(channelId());
        QList<QVariant> _messages;
        //for(const qint32 &m__type: m_messages)
        for(int i = 0; i < m_messages.size(); ++i) {
            const qint32 &m__type = m_messages[i];
            _messages << QVariant::fromValue<qint32>(m__type);
        }
        result["messages"] = _messages;
        if( pts() ) result["pts"] = QString::number(pts());
        if( ptsCount() ) result["ptsCount"] = QString::number(ptsCount());
        return result;
    }
        break;

    case typeUpdateChannelMessageViews: {
        result["classType"] = "Update::typeUpdateChannelMessageViews";
        if( channelId() ) result["channelId"] = QString::number(channelId());
        if( idInt() ) result["idInt"] = QString::number(idInt());
        if( views() ) result["views"] = QString::number(views());
        return result;
    }
        break;

    case typeUpdateChatAdmins: {
        result["classType"] = "Update::typeUpdateChatAdmins";
        if( chatId() ) result["chatId"] = QString::number(chatId());
        if( enabled() ) result["enabled"] = QString::number(enabled());
        if( version() ) result["version"] = QString::number(version());
        return result;
    }
        break;

    case typeUpdateChatParticipantAdmin: {
        result["classType"] = "Update::typeUpdateChatParticipantAdmin";
        if( chatId() ) result["chatId"] = QString::number(chatId());
        if( userId() ) result["userId"] = QString::number(userId());
        if( isAdmin() ) result["isAdmin"] = QString::number(isAdmin());
        if( version() ) result["version"] = QString::number(version());
        return result;
    }
        break;

    case typeUpdateNewStickerSet: {
        result["classType"] = "Update::typeUpdateNewStickerSet";
        if( !m_stickerset.isNull() ) result["stickerset"] = m_stickerset.toMap();
        return result;
    }
        break;

    case typeUpdateStickerSetsOrder: {
        result["classType"] = "Update::typeUpdateStickerSetsOrder";
        if( masks() ) result["masks"] = QString::number(masks());
        QList<QVariant> _orderVectorlong;
        //for(const qint64 &m__type: m_orderVectorlong)
        for(int i = 0; i < m_orderVectorlong.size(); ++i) {
            const qint64 &m__type = m_orderVectorlong[i];
            _orderVectorlong << QVariant::fromValue<qint64>(m__type);
        }
        result["orderVectorlong"] = _orderVectorlong;
        return result;
    }
        break;

    case typeUpdateStickerSets: {
        result["classType"] = "Update::typeUpdateStickerSets";
        return result;
    }
        break;

    case typeUpdateSavedGifs: {
        result["classType"] = "Update::typeUpdateSavedGifs";
        return result;
    }
        break;

    case typeUpdateBotInlineQuery: {
        result["classType"] = "Update::typeUpdateBotInlineQuery";
        if( queryId() ) result["queryId"] = QString::number(queryId());
        if( userId() ) result["userId"] = QString::number(userId());
        if( !m_query.isEmpty() ) result["query"] = QVariant::fromValue<QString>(m_query);
        if( !m_geo.isNull() ) result["geo"] = m_geo.toMap();
        if( !m_offset.isEmpty() ) result["offset"] = QVariant::fromValue<QString>(m_offset);
        return result;
    }
        break;

    case typeUpdateBotInlineSend: {
        result["classType"] = "Update::typeUpdateBotInlineSend";
        if( userId() ) result["userId"] = QString::number(userId());
        if( !m_query.isEmpty() ) result["query"] = QVariant::fromValue<QString>(m_query);
        if( !m_geo.isNull() ) result["geo"] = m_geo.toMap();
        if( !m_idString.isEmpty() ) result["idString"] = QVariant::fromValue<QString>(m_idString);
        if( !m_msgIdInputBotInlineMessageID.isNull() ) result["msgIdInputBotInlineMessageID"] = m_msgIdInputBotInlineMessageID.toMap();
        return result;
    }
        break;

    case typeUpdateEditChannelMessage: {
        result["classType"] = "Update::typeUpdateEditChannelMessage";
        if( !m_message.isNull() ) result["message"] = m_message.toMap();
        if( pts() ) result["pts"] = QString::number(pts());
        if( ptsCount() ) result["ptsCount"] = QString::number(ptsCount());
        return result;
    }
        break;

    case typeUpdateChannelPinnedMessage: {
        result["classType"] = "Update::typeUpdateChannelPinnedMessage";
        if( channelId() ) result["channelId"] = QString::number(channelId());
        if( idInt() ) result["idInt"] = QString::number(idInt());
        return result;
    }
        break;

    case typeUpdateBotCallbackQuery: {
        result["classType"] = "Update::typeUpdateBotCallbackQuery";
        if( queryId() ) result["queryId"] = QString::number(queryId());
        if( userId() ) result["userId"] = QString::number(userId());
        if( !m_peer.isNull() ) result["peer"] = m_peer.toMap();
        if( msgIdInt() ) result["msgIdInt"] = QString::number(msgIdInt());
        if( chatInstance() ) result["chatInstance"] = QString::number(chatInstance());
        if( !m_dataBytes.isEmpty() ) result["dataBytes"] = QVariant::fromValue<QByteArray>(m_dataBytes);
        if( !m_gameShortName.isEmpty() ) result["gameShortName"] = QVariant::fromValue<QString>(m_gameShortName);
        return result;
    }
        break;

    case typeUpdateEditMessage: {
        result["classType"] = "Update::typeUpdateEditMessage";
        if( !m_message.isNull() ) result["message"] = m_message.toMap();
        if( pts() ) result["pts"] = QString::number(pts());
        if( ptsCount() ) result["ptsCount"] = QString::number(ptsCount());
        return result;
    }
        break;

    case typeUpdateInlineBotCallbackQuery: {
        result["classType"] = "Update::typeUpdateInlineBotCallbackQuery";
        if( queryId() ) result["queryId"] = QString::number(queryId());
        if( userId() ) result["userId"] = QString::number(userId());
        if( !m_msgIdInputBotInlineMessageID.isNull() ) result["msgIdInputBotInlineMessageID"] = m_msgIdInputBotInlineMessageID.toMap();
        if( chatInstance() ) result["chatInstance"] = QString::number(chatInstance());
        if( !m_dataBytes.isEmpty() ) result["dataBytes"] = QVariant::fromValue<QByteArray>(m_dataBytes);
        if( !m_gameShortName.isEmpty() ) result["gameShortName"] = QVariant::fromValue<QString>(m_gameShortName);
        return result;
    }
        break;

    case typeUpdateReadChannelOutbox: {
        result["classType"] = "Update::typeUpdateReadChannelOutbox";
        if( channelId() ) result["channelId"] = QString::number(channelId());
        if( maxId() ) result["maxId"] = QString::number(maxId());
        return result;
    }
        break;

    case typeUpdateDraftMessage: {
        result["classType"] = "Update::typeUpdateDraftMessage";
        if( !m_peer.isNull() ) result["peer"] = m_peer.toMap();
        if( !m_draft.isNull() ) result["draft"] = m_draft.toMap();
        return result;
    }
        break;

    case typeUpdateReadFeaturedStickers: {
        result["classType"] = "Update::typeUpdateReadFeaturedStickers";
        return result;
    }
        break;

    case typeUpdateRecentStickers: {
        result["classType"] = "Update::typeUpdateRecentStickers";
        return result;
    }
        break;

    case typeUpdateConfig: {
        result["classType"] = "Update::typeUpdateConfig";
        return result;
    }
        break;

    case typeUpdatePtsChanged: {
        result["classType"] = "Update::typeUpdatePtsChanged";
        return result;
    }
        break;

    case typeUpdateChannelWebPage: {
        result["classType"] = "Update::typeUpdateChannelWebPage";
        if( channelId() ) result["channelId"] = QString::number(channelId());
        if( !m_webpage.isNull() ) result["webpage"] = m_webpage.toMap();
        if( pts() ) result["pts"] = QString::number(pts());
        if( ptsCount() ) result["ptsCount"] = QString::number(ptsCount());
        return result;
    }
        break;

    case typeUpdateDialogPinned: {
        result["classType"] = "Update::typeUpdateDialogPinned";
        if( pinned() ) result["pinned"] = QString::number(pinned());
        if( !m_peer.isNull() ) result["peer"] = m_peer.toMap();
        return result;
    }
        break;

    case typeUpdatePinnedDialogs: {
        result["classType"] = "Update::typeUpdatePinnedDialogs";
        QList<QVariant> _orderVectorPeer;
        //for(const Peer &m__type: m_orderVectorPeer)
        for(int i = 0; i < m_orderVectorPeer.size(); ++i) {
            const Peer &m__type = m_orderVectorPeer[i];
            if( !m__type.isNull() ) _orderVectorPeer << m__type.toMap();
        }
        result["orderVectorPeer"] = _orderVectorPeer;
        return result;
    }
        break;

    case typeUpdateBotWebhookJSON: {
        result["classType"] = "Update::typeUpdateBotWebhookJSON";
        if( !m_dataJSON.isNull() ) result["dataJSON"] = m_dataJSON.toMap();
        return result;
    }
        break;

    case typeUpdateBotWebhookJSONQuery: {
        result["classType"] = "Update::typeUpdateBotWebhookJSONQuery";
        if( queryId() ) result["queryId"] = QString::number(queryId());
        if( !m_dataJSON.isNull() ) result["dataJSON"] = m_dataJSON.toMap();
        if( timeout() ) result["timeout"] = QString::number(timeout());
        return result;
    }
        break;

    case typeUpdateBotShippingQuery: {
        result["classType"] = "Update::typeUpdateBotShippingQuery";
        if( queryId() ) result["queryId"] = QString::number(queryId());
        if( userId() ) result["userId"] = QString::number(userId());
        if( !m_payload.isEmpty() ) result["payload"] = QVariant::fromValue<QByteArray>(m_payload);
        if( !m_shippingAddress.isNull() ) result["shippingAddress"] = m_shippingAddress.toMap();
        return result;
    }
        break;

    case typeUpdateBotPrecheckoutQuery: {
        result["classType"] = "Update::typeUpdateBotPrecheckoutQuery";
        if( queryId() ) result["queryId"] = QString::number(queryId());
        if( userId() ) result["userId"] = QString::number(userId());
        if( !m_payload.isEmpty() ) result["payload"] = QVariant::fromValue<QByteArray>(m_payload);
        if( !m_info.isNull() ) result["info"] = m_info.toMap();
        if( !m_shippingOptionId.isEmpty() ) result["shippingOptionId"] = QVariant::fromValue<QString>(m_shippingOptionId);
        if( !m_currency.isEmpty() ) result["currency"] = QVariant::fromValue<QString>(m_currency);
        if( totalAmount() ) result["totalAmount"] = QString::number(totalAmount());
        return result;
    }
        break;

    case typeUpdatePhoneCall: {
        result["classType"] = "Update::typeUpdatePhoneCall";
        if( !m_phoneCall.isNull() ) result["phoneCall"] = m_phoneCall.toMap();
        return result;
    }
        break;

    case typeUpdateLangPackTooLong: {
        result["classType"] = "Update::typeUpdateLangPackTooLong";
        return result;
    }
        break;

    case typeUpdateLangPack: {
        result["classType"] = "Update::typeUpdateLangPack";
        if( !m_difference.isNull() ) result["difference"] = m_difference.toMap();
        return result;
    }
        break;

    default:
        return result;
    }
}

Update Update::fromMap(const QMap<QString, QVariant> &map) {
    Update result;
    if(map.value("classType").toString() == "Update::typeUpdateNewMessage") {
        result.setClassType(typeUpdateNewMessage);
        QVariant _message_var = map.value("message");
        if( !_message_var.isNull() )
            result.setMessage( Message::fromMap(_message_var.toMap()) );

        QVariant _pts_var = map.value("pts");
        if( !_pts_var.isNull() ) {
            _pts_var.convert( QVariant::nameToType("qint32") );
            result.setPts( _pts_var.value<qint32>() );
        }

        QVariant _ptsCount_var = map.value("ptsCount");
        if( !_ptsCount_var.isNull() ) {
            _ptsCount_var.convert( QVariant::nameToType("qint32") );
            result.setPtsCount( _ptsCount_var.value<qint32>() );
        }

        return result;
    }
    if(map.value("classType").toString() == "Update::typeUpdateMessageID") {
        result.setClassType(typeUpdateMessageID);
        QVariant _idInt_var = map.value("idInt");
        if( !_idInt_var.isNull() ) {
            _idInt_var.convert( QVariant::nameToType("qint32") );
            result.setIdInt( _idInt_var.value<qint32>() );
        }

        QVariant _randomId_var = map.value("randomId");
        if( !_randomId_var.isNull() ) {
            _randomId_var.convert( QVariant::nameToType("qint64") );
            result.setRandomId( _randomId_var.value<qint64>() );
        }

        return result;
    }
    if(map.value("classType").toString() == "Update::typeUpdateDeleteMessages") {
        result.setClassType(typeUpdateDeleteMessages);
        QList<QVariant> map_messages = map["messages"].toList();
        QList<qint32> _messages;
        //for(const QVariant &var: map_messages)
        for(int i = 0; i < map_messages.size(); ++i) {
            const QVariant &var = map_messages[i];
            _messages << var.value<qint32>();
        }
        result.setMessages(_messages);
        QVariant _pts_var = map.value("pts");
        if( !_pts_var.isNull() ) {
            _pts_var.convert( QVariant::nameToType("qint32") );
            result.setPts( _pts_var.value<qint32>() );
        }

        QVariant _ptsCount_var = map.value("ptsCount");
        if( !_ptsCount_var.isNull() ) {
            _ptsCount_var.convert( QVariant::nameToType("qint32") );
            result.setPtsCount( _ptsCount_var.value<qint32>() );
        }

        return result;
    }
    if(map.value("classType").toString() == "Update::typeUpdateUserTyping") {
        result.setClassType(typeUpdateUserTyping);
        QVariant _userId_var = map.value("userId");
        if( !_userId_var.isNull() ) {
            _userId_var.convert( QVariant::nameToType("qint32") );
            result.setUserId( _userId_var.value<qint32>() );
        }

        QVariant _action_var = map.value("action");
        if( !_action_var.isNull() )
            result.setAction( SendMessageAction::fromMap(_action_var.toMap()) );

        return result;
    }
    if(map.value("classType").toString() == "Update::typeUpdateChatUserTyping") {
        result.setClassType(typeUpdateChatUserTyping);
        QVariant _chatId_var = map.value("chatId");
        if( !_chatId_var.isNull() ) {
            _chatId_var.convert( QVariant::nameToType("qint32") );
            result.setChatId( _chatId_var.value<qint32>() );
        }

        QVariant _userId_var = map.value("userId");
        if( !_userId_var.isNull() ) {
            _userId_var.convert( QVariant::nameToType("qint32") );
            result.setUserId( _userId_var.value<qint32>() );
        }

        QVariant _action_var = map.value("action");
        if( !_action_var.isNull() )
            result.setAction( SendMessageAction::fromMap(_action_var.toMap()) );

        return result;
    }
    if(map.value("classType").toString() == "Update::typeUpdateChatParticipants") {
        result.setClassType(typeUpdateChatParticipants);
        QVariant _participants_var = map.value("participants");
        if( !_participants_var.isNull() )
            result.setParticipants( ChatParticipants::fromMap(_participants_var.toMap()) );

        return result;
    }
    if(map.value("classType").toString() == "Update::typeUpdateUserStatus") {
        result.setClassType(typeUpdateUserStatus);
        QVariant _userId_var = map.value("userId");
        if( !_userId_var.isNull() ) {
            _userId_var.convert( QVariant::nameToType("qint32") );
            result.setUserId( _userId_var.value<qint32>() );
        }

        QVariant _status_var = map.value("status");
        if( !_status_var.isNull() )
            result.setStatus( UserStatus::fromMap(_status_var.toMap()) );

        return result;
    }
    if(map.value("classType").toString() == "Update::typeUpdateUserName") {
        result.setClassType(typeUpdateUserName);
        QVariant _userId_var = map.value("userId");
        if( !_userId_var.isNull() ) {
            _userId_var.convert( QVariant::nameToType("qint32") );
            result.setUserId( _userId_var.value<qint32>() );
        }

        QVariant _firstName_var = map.value("firstName");
        if( !_firstName_var.isNull() ) {
            _firstName_var.convert( QVariant::nameToType("QString") );
            result.setFirstName( _firstName_var.value<QString>() );
        }

        QVariant _lastName_var = map.value("lastName");
        if( !_lastName_var.isNull() ) {
            _lastName_var.convert( QVariant::nameToType("QString") );
            result.setLastName( _lastName_var.value<QString>() );
        }

        QVariant _username_var = map.value("username");
        if( !_username_var.isNull() ) {
            _username_var.convert( QVariant::nameToType("QString") );
            result.setUsername( _username_var.value<QString>() );
        }

        return result;
    }
    if(map.value("classType").toString() == "Update::typeUpdateUserPhoto") {
        result.setClassType(typeUpdateUserPhoto);
        QVariant _userId_var = map.value("userId");
        if( !_userId_var.isNull() ) {
            _userId_var.convert( QVariant::nameToType("qint32") );
            result.setUserId( _userId_var.value<qint32>() );
        }

        QVariant _date_var = map.value("date");
        if( !_date_var.isNull() ) {
            _date_var.convert( QVariant::nameToType("qint32") );
            result.setDate( _date_var.value<qint32>() );
        }

        QVariant _photo_var = map.value("photo");
        if( !_photo_var.isNull() )
            result.setPhoto( UserProfilePhoto::fromMap(_photo_var.toMap()) );

        QVariant _previous_var = map.value("previous");
        if( !_previous_var.isNull() ) {
            _previous_var.convert( QVariant::nameToType("bool") );
            result.setPrevious( _previous_var.value<bool>() );
        }

        return result;
    }
    if(map.value("classType").toString() == "Update::typeUpdateContactRegistered") {
        result.setClassType(typeUpdateContactRegistered);
        QVariant _userId_var = map.value("userId");
        if( !_userId_var.isNull() ) {
            _userId_var.convert( QVariant::nameToType("qint32") );
            result.setUserId( _userId_var.value<qint32>() );
        }

        QVariant _date_var = map.value("date");
        if( !_date_var.isNull() ) {
            _date_var.convert( QVariant::nameToType("qint32") );
            result.setDate( _date_var.value<qint32>() );
        }

        return result;
    }
    if(map.value("classType").toString() == "Update::typeUpdateContactLink") {
        result.setClassType(typeUpdateContactLink);
        QVariant _userId_var = map.value("userId");
        if( !_userId_var.isNull() ) {
            _userId_var.convert( QVariant::nameToType("qint32") );
            result.setUserId( _userId_var.value<qint32>() );
        }

        QVariant _myLink_var = map.value("myLink");
        if( !_myLink_var.isNull() )
            result.setMyLink( ContactLink::fromMap(_myLink_var.toMap()) );

        QVariant _foreignLink_var = map.value("foreignLink");
        if( !_foreignLink_var.isNull() )
            result.setForeignLink( ContactLink::fromMap(_foreignLink_var.toMap()) );

        return result;
    }
    if(map.value("classType").toString() == "Update::typeUpdateNewEncryptedMessage") {
        result.setClassType(typeUpdateNewEncryptedMessage);
        QVariant _messageEncrypted_var = map.value("messageEncrypted");
        if( !_messageEncrypted_var.isNull() )
            result.setMessageEncrypted( EncryptedMessage::fromMap(_messageEncrypted_var.toMap()) );

        QVariant _qts_var = map.value("qts");
        if( !_qts_var.isNull() ) {
            _qts_var.convert( QVariant::nameToType("qint32") );
            result.setQts( _qts_var.value<qint32>() );
        }

        return result;
    }
    if(map.value("classType").toString() == "Update::typeUpdateEncryptedChatTyping") {
        result.setClassType(typeUpdateEncryptedChatTyping);
        QVariant _chatId_var = map.value("chatId");
        if( !_chatId_var.isNull() ) {
            _chatId_var.convert( QVariant::nameToType("qint32") );
            result.setChatId( _chatId_var.value<qint32>() );
        }

        return result;
    }
    if(map.value("classType").toString() == "Update::typeUpdateEncryption") {
        result.setClassType(typeUpdateEncryption);
        QVariant _chat_var = map.value("chat");
        if( !_chat_var.isNull() )
            result.setChat( EncryptedChat::fromMap(_chat_var.toMap()) );

        QVariant _date_var = map.value("date");
        if( !_date_var.isNull() ) {
            _date_var.convert( QVariant::nameToType("qint32") );
            result.setDate( _date_var.value<qint32>() );
        }

        return result;
    }
    if(map.value("classType").toString() == "Update::typeUpdateEncryptedMessagesRead") {
        result.setClassType(typeUpdateEncryptedMessagesRead);
        QVariant _chatId_var = map.value("chatId");
        if( !_chatId_var.isNull() ) {
            _chatId_var.convert( QVariant::nameToType("qint32") );
            result.setChatId( _chatId_var.value<qint32>() );
        }

        QVariant _maxDate_var = map.value("maxDate");
        if( !_maxDate_var.isNull() ) {
            _maxDate_var.convert( QVariant::nameToType("qint32") );
            result.setMaxDate( _maxDate_var.value<qint32>() );
        }

        QVariant _date_var = map.value("date");
        if( !_date_var.isNull() ) {
            _date_var.convert( QVariant::nameToType("qint32") );
            result.setDate( _date_var.value<qint32>() );
        }

        return result;
    }
    if(map.value("classType").toString() == "Update::typeUpdateChatParticipantAdd") {
        result.setClassType(typeUpdateChatParticipantAdd);
        QVariant _chatId_var = map.value("chatId");
        if( !_chatId_var.isNull() ) {
            _chatId_var.convert( QVariant::nameToType("qint32") );
            result.setChatId( _chatId_var.value<qint32>() );
        }

        QVariant _userId_var = map.value("userId");
        if( !_userId_var.isNull() ) {
            _userId_var.convert( QVariant::nameToType("qint32") );
            result.setUserId( _userId_var.value<qint32>() );
        }

        QVariant _inviterId_var = map.value("inviterId");
        if( !_inviterId_var.isNull() ) {
            _inviterId_var.convert( QVariant::nameToType("qint32") );
            result.setInviterId( _inviterId_var.value<qint32>() );
        }

        QVariant _date_var = map.value("date");
        if( !_date_var.isNull() ) {
            _date_var.convert( QVariant::nameToType("qint32") );
            result.setDate( _date_var.value<qint32>() );
        }

        QVariant _version_var = map.value("version");
        if( !_version_var.isNull() ) {
            _version_var.convert( QVariant::nameToType("qint32") );
            result.setVersion( _version_var.value<qint32>() );
        }

        return result;
    }
    if(map.value("classType").toString() == "Update::typeUpdateChatParticipantDelete") {
        result.setClassType(typeUpdateChatParticipantDelete);
        QVariant _chatId_var = map.value("chatId");
        if( !_chatId_var.isNull() ) {
            _chatId_var.convert( QVariant::nameToType("qint32") );
            result.setChatId( _chatId_var.value<qint32>() );
        }

        QVariant _userId_var = map.value("userId");
        if( !_userId_var.isNull() ) {
            _userId_var.convert( QVariant::nameToType("qint32") );
            result.setUserId( _userId_var.value<qint32>() );
        }

        QVariant _version_var = map.value("version");
        if( !_version_var.isNull() ) {
            _version_var.convert( QVariant::nameToType("qint32") );
            result.setVersion( _version_var.value<qint32>() );
        }

        return result;
    }
    if(map.value("classType").toString() == "Update::typeUpdateDcOptions") {
        result.setClassType(typeUpdateDcOptions);
        QList<QVariant> map_dcOptions = map["dcOptions"].toList();
        QList<DcOption> _dcOptions;
        //for(const QVariant &var: map_dcOptions)
        for(int i = 0; i < map_dcOptions.size(); ++i) {
            const QVariant &var = map_dcOptions[i];
            _dcOptions << DcOption::fromMap(var.toMap());
        }
        result.setDcOptions(_dcOptions);
        return result;
    }
    if(map.value("classType").toString() == "Update::typeUpdateUserBlocked") {
        result.setClassType(typeUpdateUserBlocked);
        QVariant _userId_var = map.value("userId");
        if( !_userId_var.isNull() ) {
            _userId_var.convert( QVariant::nameToType("qint32") );
            result.setUserId( _userId_var.value<qint32>() );
        }

        QVariant _blocked_var = map.value("blocked");
        if( !_blocked_var.isNull() ) {
            _blocked_var.convert( QVariant::nameToType("bool") );
            result.setBlocked( _blocked_var.value<bool>() );
        }

        return result;
    }
    if(map.value("classType").toString() == "Update::typeUpdateNotifySettings") {
        result.setClassType(typeUpdateNotifySettings);
        QVariant _peerNotify_var = map.value("peerNotify");
        if( !_peerNotify_var.isNull() )
            result.setPeerNotify( NotifyPeer::fromMap(_peerNotify_var.toMap()) );

        QVariant _notifySettings_var = map.value("notifySettings");
        if( !_notifySettings_var.isNull() )
            result.setNotifySettings( PeerNotifySettings::fromMap(_notifySettings_var.toMap()) );

        return result;
    }
    if(map.value("classType").toString() == "Update::typeUpdateServiceNotification") {
        result.setClassType(typeUpdateServiceNotification);
        QVariant _popup_var = map.value("popup");
        if( !_popup_var.isNull() ) {
            _popup_var.convert( QVariant::nameToType("bool") );
            result.setPopup( _popup_var.value<bool>() );
        }

        QVariant _inboxDate_var = map.value("inboxDate");
        if( !_inboxDate_var.isNull() ) {
            _inboxDate_var.convert( QVariant::nameToType("qint32") );
            result.setInboxDate( _inboxDate_var.value<qint32>() );
        }

        QVariant _type_var = map.value("type");
        if( !_type_var.isNull() ) {
            _type_var.convert( QVariant::nameToType("QString") );
            result.setType( _type_var.value<QString>() );
        }

        QVariant _messageString_var = map.value("messageString");
        if( !_messageString_var.isNull() ) {
            _messageString_var.convert( QVariant::nameToType("QString") );
            result.setMessageString( _messageString_var.value<QString>() );
        }

        QVariant _media_var = map.value("media");
        if( !_media_var.isNull() )
            result.setMedia( MessageMedia::fromMap(_media_var.toMap()) );

        QList<QVariant> map_entities = map["entities"].toList();
        QList<MessageEntity> _entities;
        //for(const QVariant &var: map_entities)
        for(int i = 0; i < map_entities.size(); ++i) {
            const QVariant &var = map_entities[i];
            _entities << MessageEntity::fromMap(var.toMap());
        }
        result.setEntities(_entities);
        return result;
    }
    if(map.value("classType").toString() == "Update::typeUpdatePrivacy") {
        result.setClassType(typeUpdatePrivacy);
        QVariant _key_var = map.value("key");
        if( !_key_var.isNull() )
            result.setKey( PrivacyKey::fromMap(_key_var.toMap()) );

        QList<QVariant> map_rules = map["rules"].toList();
        QList<PrivacyRule> _rules;
        //for(const QVariant &var: map_rules)
        for(int i = 0; i < map_rules.size(); ++i) {
            const QVariant &var = map_rules[i];
            _rules << PrivacyRule::fromMap(var.toMap());
        }
        result.setRules(_rules);
        return result;
    }
    if(map.value("classType").toString() == "Update::typeUpdateUserPhone") {
        result.setClassType(typeUpdateUserPhone);
        QVariant _userId_var = map.value("userId");
        if( !_userId_var.isNull() ) {
            _userId_var.convert( QVariant::nameToType("qint32") );
            result.setUserId( _userId_var.value<qint32>() );
        }

        QVariant _phone_var = map.value("phone");
        if( !_phone_var.isNull() ) {
            _phone_var.convert( QVariant::nameToType("QString") );
            result.setPhone( _phone_var.value<QString>() );
        }

        return result;
    }
    if(map.value("classType").toString() == "Update::typeUpdateReadHistoryInbox") {
        result.setClassType(typeUpdateReadHistoryInbox);
        QVariant _peer_var = map.value("peer");
        if( !_peer_var.isNull() )
            result.setPeer( Peer::fromMap(_peer_var.toMap()) );

        QVariant _maxId_var = map.value("maxId");
        if( !_maxId_var.isNull() ) {
            _maxId_var.convert( QVariant::nameToType("qint32") );
            result.setMaxId( _maxId_var.value<qint32>() );
        }

        QVariant _pts_var = map.value("pts");
        if( !_pts_var.isNull() ) {
            _pts_var.convert( QVariant::nameToType("qint32") );
            result.setPts( _pts_var.value<qint32>() );
        }

        QVariant _ptsCount_var = map.value("ptsCount");
        if( !_ptsCount_var.isNull() ) {
            _ptsCount_var.convert( QVariant::nameToType("qint32") );
            result.setPtsCount( _ptsCount_var.value<qint32>() );
        }

        return result;
    }
    if(map.value("classType").toString() == "Update::typeUpdateReadHistoryOutbox") {
        result.setClassType(typeUpdateReadHistoryOutbox);
        QVariant _peer_var = map.value("peer");
        if( !_peer_var.isNull() )
            result.setPeer( Peer::fromMap(_peer_var.toMap()) );

        QVariant _maxId_var = map.value("maxId");
        if( !_maxId_var.isNull() ) {
            _maxId_var.convert( QVariant::nameToType("qint32") );
            result.setMaxId( _maxId_var.value<qint32>() );
        }

        QVariant _pts_var = map.value("pts");
        if( !_pts_var.isNull() ) {
            _pts_var.convert( QVariant::nameToType("qint32") );
            result.setPts( _pts_var.value<qint32>() );
        }

        QVariant _ptsCount_var = map.value("ptsCount");
        if( !_ptsCount_var.isNull() ) {
            _ptsCount_var.convert( QVariant::nameToType("qint32") );
            result.setPtsCount( _ptsCount_var.value<qint32>() );
        }

        return result;
    }
    if(map.value("classType").toString() == "Update::typeUpdateWebPage") {
        result.setClassType(typeUpdateWebPage);
        QVariant _webpage_var = map.value("webpage");
        if( !_webpage_var.isNull() )
            result.setWebpage( WebPage::fromMap(_webpage_var.toMap()) );

        QVariant _pts_var = map.value("pts");
        if( !_pts_var.isNull() ) {
            _pts_var.convert( QVariant::nameToType("qint32") );
            result.setPts( _pts_var.value<qint32>() );
        }

        QVariant _ptsCount_var = map.value("ptsCount");
        if( !_ptsCount_var.isNull() ) {
            _ptsCount_var.convert( QVariant::nameToType("qint32") );
            result.setPtsCount( _ptsCount_var.value<qint32>() );
        }

        return result;
    }
    if(map.value("classType").toString() == "Update::typeUpdateReadMessagesContents") {
        result.setClassType(typeUpdateReadMessagesContents);
        QList<QVariant> map_messages = map["messages"].toList();
        QList<qint32> _messages;
        //for(const QVariant &var: map_messages)
        for(int i = 0; i < map_messages.size(); ++i) {
            const QVariant &var = map_messages[i];
            _messages << var.value<qint32>();
        }
        result.setMessages(_messages);
        QVariant _pts_var = map.value("pts");
        if( !_pts_var.isNull() ) {
            _pts_var.convert( QVariant::nameToType("qint32") );
            result.setPts( _pts_var.value<qint32>() );
        }

        QVariant _ptsCount_var = map.value("ptsCount");
        if( !_ptsCount_var.isNull() ) {
            _ptsCount_var.convert( QVariant::nameToType("qint32") );
            result.setPtsCount( _ptsCount_var.value<qint32>() );
        }

        return result;
    }
    if(map.value("classType").toString() == "Update::typeUpdateChannelTooLong") {
        result.setClassType(typeUpdateChannelTooLong);
        QVariant _channelId_var = map.value("channelId");
        if( !_channelId_var.isNull() ) {
            _channelId_var.convert( QVariant::nameToType("qint32") );
            result.setChannelId( _channelId_var.value<qint32>() );
        }

        QVariant _pts_var = map.value("pts");
        if( !_pts_var.isNull() ) {
            _pts_var.convert( QVariant::nameToType("qint32") );
            result.setPts( _pts_var.value<qint32>() );
        }

        return result;
    }
    if(map.value("classType").toString() == "Update::typeUpdateChannel") {
        result.setClassType(typeUpdateChannel);
        QVariant _channelId_var = map.value("channelId");
        if( !_channelId_var.isNull() ) {
            _channelId_var.convert( QVariant::nameToType("qint32") );
            result.setChannelId( _channelId_var.value<qint32>() );
        }

        return result;
    }
    if(map.value("classType").toString() == "Update::typeUpdateNewChannelMessage") {
        result.setClassType(typeUpdateNewChannelMessage);
        QVariant _message_var = map.value("message");
        if( !_message_var.isNull() )
            result.setMessage( Message::fromMap(_message_var.toMap()) );

        QVariant _pts_var = map.value("pts");
        if( !_pts_var.isNull() ) {
            _pts_var.convert( QVariant::nameToType("qint32") );
            result.setPts( _pts_var.value<qint32>() );
        }

        QVariant _ptsCount_var = map.value("ptsCount");
        if( !_ptsCount_var.isNull() ) {
            _ptsCount_var.convert( QVariant::nameToType("qint32") );
            result.setPtsCount( _ptsCount_var.value<qint32>() );
        }

        return result;
    }
    if(map.value("classType").toString() == "Update::typeUpdateReadChannelInbox") {
        result.setClassType(typeUpdateReadChannelInbox);
        QVariant _channelId_var = map.value("channelId");
        if( !_channelId_var.isNull() ) {
            _channelId_var.convert( QVariant::nameToType("qint32") );
            result.setChannelId( _channelId_var.value<qint32>() );
        }

        QVariant _maxId_var = map.value("maxId");
        if( !_maxId_var.isNull() ) {
            _maxId_var.convert( QVariant::nameToType("qint32") );
            result.setMaxId( _maxId_var.value<qint32>() );
        }

        return result;
    }
    if(map.value("classType").toString() == "Update::typeUpdateDeleteChannelMessages") {
        result.setClassType(typeUpdateDeleteChannelMessages);
        QVariant _channelId_var = map.value("channelId");
        if( !_channelId_var.isNull() ) {
            _channelId_var.convert( QVariant::nameToType("qint32") );
            result.setChannelId( _channelId_var.value<qint32>() );
        }

        QList<QVariant> map_messages = map["messages"].toList();
        QList<qint32> _messages;
        //for(const QVariant &var: map_messages)
        for(int i = 0; i < map_messages.size(); ++i) {
            const QVariant &var = map_messages[i];
            _messages << var.value<qint32>();
        }
        result.setMessages(_messages);
        QVariant _pts_var = map.value("pts");
        if( !_pts_var.isNull() ) {
            _pts_var.convert( QVariant::nameToType("qint32") );
            result.setPts( _pts_var.value<qint32>() );
        }

        QVariant _ptsCount_var = map.value("ptsCount");
        if( !_ptsCount_var.isNull() ) {
            _ptsCount_var.convert( QVariant::nameToType("qint32") );
            result.setPtsCount( _ptsCount_var.value<qint32>() );
        }

        return result;
    }
    if(map.value("classType").toString() == "Update::typeUpdateChannelMessageViews") {
        result.setClassType(typeUpdateChannelMessageViews);
        QVariant _channelId_var = map.value("channelId");
        if( !_channelId_var.isNull() ) {
            _channelId_var.convert( QVariant::nameToType("qint32") );
            result.setChannelId( _channelId_var.value<qint32>() );
        }

        QVariant _idInt_var = map.value("idInt");
        if( !_idInt_var.isNull() ) {
            _idInt_var.convert( QVariant::nameToType("qint32") );
            result.setIdInt( _idInt_var.value<qint32>() );
        }

        QVariant _views_var = map.value("views");
        if( !_views_var.isNull() ) {
            _views_var.convert( QVariant::nameToType("qint32") );
            result.setViews( _views_var.value<qint32>() );
        }

        return result;
    }
    if(map.value("classType").toString() == "Update::typeUpdateChatAdmins") {
        result.setClassType(typeUpdateChatAdmins);
        QVariant _chatId_var = map.value("chatId");
        if( !_chatId_var.isNull() ) {
            _chatId_var.convert( QVariant::nameToType("qint32") );
            result.setChatId( _chatId_var.value<qint32>() );
        }

        QVariant _enabled_var = map.value("enabled");
        if( !_enabled_var.isNull() ) {
            _enabled_var.convert( QVariant::nameToType("bool") );
            result.setEnabled( _enabled_var.value<bool>() );
        }

        QVariant _version_var = map.value("version");
        if( !_version_var.isNull() ) {
            _version_var.convert( QVariant::nameToType("qint32") );
            result.setVersion( _version_var.value<qint32>() );
        }

        return result;
    }
    if(map.value("classType").toString() == "Update::typeUpdateChatParticipantAdmin") {
        result.setClassType(typeUpdateChatParticipantAdmin);
        QVariant _chatId_var = map.value("chatId");
        if( !_chatId_var.isNull() ) {
            _chatId_var.convert( QVariant::nameToType("qint32") );
            result.setChatId( _chatId_var.value<qint32>() );
        }

        QVariant _userId_var = map.value("userId");
        if( !_userId_var.isNull() ) {
            _userId_var.convert( QVariant::nameToType("qint32") );
            result.setUserId( _userId_var.value<qint32>() );
        }

        QVariant _isAdmin_var = map.value("isAdmin");
        if( !_isAdmin_var.isNull() ) {
            _isAdmin_var.convert( QVariant::nameToType("bool") );
            result.setIsAdmin( _isAdmin_var.value<bool>() );
        }

        QVariant _version_var = map.value("version");
        if( !_version_var.isNull() ) {
            _version_var.convert( QVariant::nameToType("qint32") );
            result.setVersion( _version_var.value<qint32>() );
        }

        return result;
    }
    if(map.value("classType").toString() == "Update::typeUpdateNewStickerSet") {
        result.setClassType(typeUpdateNewStickerSet);
        QVariant _stickerset_var = map.value("stickerset");
        if( !_stickerset_var.isNull() )
            result.setStickerset( MessagesStickerSet::fromMap(_stickerset_var.toMap()) );

        return result;
    }
    if(map.value("classType").toString() == "Update::typeUpdateStickerSetsOrder") {
        result.setClassType(typeUpdateStickerSetsOrder);
        QVariant _masks_var = map.value("masks");
        if( !_masks_var.isNull() ) {
            _masks_var.convert( QVariant::nameToType("bool") );
            result.setMasks( _masks_var.value<bool>() );
        }

        QList<QVariant> map_orderVectorlong = map["orderVectorlong"].toList();
        QList<qint64> _orderVectorlong;
        //for(const QVariant &var: map_orderVectorlong)
        for(int i = 0; i < map_orderVectorlong.size(); ++i) {
            const QVariant &var = map_orderVectorlong[i];
            _orderVectorlong << var.value<qint64>();
        }
        result.setOrderVectorlong(_orderVectorlong);
        return result;
    }
    if(map.value("classType").toString() == "Update::typeUpdateStickerSets") {
        result.setClassType(typeUpdateStickerSets);
        return result;
    }
    if(map.value("classType").toString() == "Update::typeUpdateSavedGifs") {
        result.setClassType(typeUpdateSavedGifs);
        return result;
    }
    if(map.value("classType").toString() == "Update::typeUpdateBotInlineQuery") {
        result.setClassType(typeUpdateBotInlineQuery);
        QVariant _queryId_var = map.value("queryId");
        if( !_queryId_var.isNull() ) {
            _queryId_var.convert( QVariant::nameToType("qint64") );
            result.setQueryId( _queryId_var.value<qint64>() );
        }

        QVariant _userId_var = map.value("userId");
        if( !_userId_var.isNull() ) {
            _userId_var.convert( QVariant::nameToType("qint32") );
            result.setUserId( _userId_var.value<qint32>() );
        }

        QVariant _query_var = map.value("query");
        if( !_query_var.isNull() ) {
            _query_var.convert( QVariant::nameToType("QString") );
            result.setQuery( _query_var.value<QString>() );
        }

        QVariant _geo_var = map.value("geo");
        if( !_geo_var.isNull() )
            result.setGeo( GeoPoint::fromMap(_geo_var.toMap()) );

        QVariant _offset_var = map.value("offset");
        if( !_offset_var.isNull() ) {
            _offset_var.convert( QVariant::nameToType("QString") );
            result.setOffset( _offset_var.value<QString>() );
        }

        return result;
    }
    if(map.value("classType").toString() == "Update::typeUpdateBotInlineSend") {
        result.setClassType(typeUpdateBotInlineSend);
        QVariant _userId_var = map.value("userId");
        if( !_userId_var.isNull() ) {
            _userId_var.convert( QVariant::nameToType("qint32") );
            result.setUserId( _userId_var.value<qint32>() );
        }

        QVariant _query_var = map.value("query");
        if( !_query_var.isNull() ) {
            _query_var.convert( QVariant::nameToType("QString") );
            result.setQuery( _query_var.value<QString>() );
        }

        QVariant _geo_var = map.value("geo");
        if( !_geo_var.isNull() )
            result.setGeo( GeoPoint::fromMap(_geo_var.toMap()) );

        QVariant _idString_var = map.value("idString");
        if( !_idString_var.isNull() ) {
            _idString_var.convert( QVariant::nameToType("QString") );
            result.setIdString( _idString_var.value<QString>() );
        }

        QVariant _msgIdInputBotInlineMessageID_var = map.value("msgIdInputBotInlineMessageID");
        if( !_msgIdInputBotInlineMessageID_var.isNull() )
            result.setMsgIdInputBotInlineMessageID( InputBotInlineMessageID::fromMap(_msgIdInputBotInlineMessageID_var.toMap()) );

        return result;
    }
    if(map.value("classType").toString() == "Update::typeUpdateEditChannelMessage") {
        result.setClassType(typeUpdateEditChannelMessage);
        QVariant _message_var = map.value("message");
        if( !_message_var.isNull() )
            result.setMessage( Message::fromMap(_message_var.toMap()) );

        QVariant _pts_var = map.value("pts");
        if( !_pts_var.isNull() ) {
            _pts_var.convert( QVariant::nameToType("qint32") );
            result.setPts( _pts_var.value<qint32>() );
        }

        QVariant _ptsCount_var = map.value("ptsCount");
        if( !_ptsCount_var.isNull() ) {
            _ptsCount_var.convert( QVariant::nameToType("qint32") );
            result.setPtsCount( _ptsCount_var.value<qint32>() );
        }

        return result;
    }
    if(map.value("classType").toString() == "Update::typeUpdateChannelPinnedMessage") {
        result.setClassType(typeUpdateChannelPinnedMessage);
        QVariant _channelId_var = map.value("channelId");
        if( !_channelId_var.isNull() ) {
            _channelId_var.convert( QVariant::nameToType("qint32") );
            result.setChannelId( _channelId_var.value<qint32>() );
        }

        QVariant _idInt_var = map.value("idInt");
        if( !_idInt_var.isNull() ) {
            _idInt_var.convert( QVariant::nameToType("qint32") );
            result.setIdInt( _idInt_var.value<qint32>() );
        }

        return result;
    }
    if(map.value("classType").toString() == "Update::typeUpdateBotCallbackQuery") {
        result.setClassType(typeUpdateBotCallbackQuery);
        QVariant _queryId_var = map.value("queryId");
        if( !_queryId_var.isNull() ) {
            _queryId_var.convert( QVariant::nameToType("qint64") );
            result.setQueryId( _queryId_var.value<qint64>() );
        }

        QVariant _userId_var = map.value("userId");
        if( !_userId_var.isNull() ) {
            _userId_var.convert( QVariant::nameToType("qint32") );
            result.setUserId( _userId_var.value<qint32>() );
        }

        QVariant _peer_var = map.value("peer");
        if( !_peer_var.isNull() )
            result.setPeer( Peer::fromMap(_peer_var.toMap()) );

        QVariant _msgIdInt_var = map.value("msgIdInt");
        if( !_msgIdInt_var.isNull() ) {
            _msgIdInt_var.convert( QVariant::nameToType("qint32") );
            result.setMsgIdInt( _msgIdInt_var.value<qint32>() );
        }

        QVariant _chatInstance_var = map.value("chatInstance");
        if( !_chatInstance_var.isNull() ) {
            _chatInstance_var.convert( QVariant::nameToType("qint64") );
            result.setChatInstance( _chatInstance_var.value<qint64>() );
        }

        QVariant _dataBytes_var = map.value("dataBytes");
        if( !_dataBytes_var.isNull() ) {
            _dataBytes_var.convert( QVariant::nameToType("QByteArray") );
            result.setDataBytes( _dataBytes_var.value<QByteArray>() );
        }

        QVariant _gameShortName_var = map.value("gameShortName");
        if( !_gameShortName_var.isNull() ) {
            _gameShortName_var.convert( QVariant::nameToType("QString") );
            result.setGameShortName( _gameShortName_var.value<QString>() );
        }

        return result;
    }
    if(map.value("classType").toString() == "Update::typeUpdateEditMessage") {
        result.setClassType(typeUpdateEditMessage);
        QVariant _message_var = map.value("message");
        if( !_message_var.isNull() )
            result.setMessage( Message::fromMap(_message_var.toMap()) );

        QVariant _pts_var = map.value("pts");
        if( !_pts_var.isNull() ) {
            _pts_var.convert( QVariant::nameToType("qint32") );
            result.setPts( _pts_var.value<qint32>() );
        }

        QVariant _ptsCount_var = map.value("ptsCount");
        if( !_ptsCount_var.isNull() ) {
            _ptsCount_var.convert( QVariant::nameToType("qint32") );
            result.setPtsCount( _ptsCount_var.value<qint32>() );
        }

        return result;
    }
    if(map.value("classType").toString() == "Update::typeUpdateInlineBotCallbackQuery") {
        result.setClassType(typeUpdateInlineBotCallbackQuery);
        QVariant _queryId_var = map.value("queryId");
        if( !_queryId_var.isNull() ) {
            _queryId_var.convert( QVariant::nameToType("qint64") );
            result.setQueryId( _queryId_var.value<qint64>() );
        }

        QVariant _userId_var = map.value("userId");
        if( !_userId_var.isNull() ) {
            _userId_var.convert( QVariant::nameToType("qint32") );
            result.setUserId( _userId_var.value<qint32>() );
        }

        QVariant _msgIdInputBotInlineMessageID_var = map.value("msgIdInputBotInlineMessageID");
        if( !_msgIdInputBotInlineMessageID_var.isNull() )
            result.setMsgIdInputBotInlineMessageID( InputBotInlineMessageID::fromMap(_msgIdInputBotInlineMessageID_var.toMap()) );

        QVariant _chatInstance_var = map.value("chatInstance");
        if( !_chatInstance_var.isNull() ) {
            _chatInstance_var.convert( QVariant::nameToType("qint64") );
            result.setChatInstance( _chatInstance_var.value<qint64>() );
        }

        QVariant _dataBytes_var = map.value("dataBytes");
        if( !_dataBytes_var.isNull() ) {
            _dataBytes_var.convert( QVariant::nameToType("QByteArray") );
            result.setDataBytes( _dataBytes_var.value<QByteArray>() );
        }

        QVariant _gameShortName_var = map.value("gameShortName");
        if( !_gameShortName_var.isNull() ) {
            _gameShortName_var.convert( QVariant::nameToType("QString") );
            result.setGameShortName( _gameShortName_var.value<QString>() );
        }

        return result;
    }
    if(map.value("classType").toString() == "Update::typeUpdateReadChannelOutbox") {
        result.setClassType(typeUpdateReadChannelOutbox);
        QVariant _channelId_var = map.value("channelId");
        if( !_channelId_var.isNull() ) {
            _channelId_var.convert( QVariant::nameToType("qint32") );
            result.setChannelId( _channelId_var.value<qint32>() );
        }

        QVariant _maxId_var = map.value("maxId");
        if( !_maxId_var.isNull() ) {
            _maxId_var.convert( QVariant::nameToType("qint32") );
            result.setMaxId( _maxId_var.value<qint32>() );
        }

        return result;
    }
    if(map.value("classType").toString() == "Update::typeUpdateDraftMessage") {
        result.setClassType(typeUpdateDraftMessage);
        QVariant _peer_var = map.value("peer");
        if( !_peer_var.isNull() )
            result.setPeer( Peer::fromMap(_peer_var.toMap()) );

        QVariant _draft_var = map.value("draft");
        if( !_draft_var.isNull() )
            result.setDraft( DraftMessage::fromMap(_draft_var.toMap()) );

        return result;
    }
    if(map.value("classType").toString() == "Update::typeUpdateReadFeaturedStickers") {
        result.setClassType(typeUpdateReadFeaturedStickers);
        return result;
    }
    if(map.value("classType").toString() == "Update::typeUpdateRecentStickers") {
        result.setClassType(typeUpdateRecentStickers);
        return result;
    }
    if(map.value("classType").toString() == "Update::typeUpdateConfig") {
        result.setClassType(typeUpdateConfig);
        return result;
    }
    if(map.value("classType").toString() == "Update::typeUpdatePtsChanged") {
        result.setClassType(typeUpdatePtsChanged);
        return result;
    }
    if(map.value("classType").toString() == "Update::typeUpdateChannelWebPage") {
        result.setClassType(typeUpdateChannelWebPage);
        QVariant _channelId_var = map.value("channelId");
        if( !_channelId_var.isNull() ) {
            _channelId_var.convert( QVariant::nameToType("qint32") );
            result.setChannelId( _channelId_var.value<qint32>() );
        }

        QVariant _webpage_var = map.value("webpage");
        if( !_webpage_var.isNull() )
            result.setWebpage( WebPage::fromMap(_webpage_var.toMap()) );

        QVariant _pts_var = map.value("pts");
        if( !_pts_var.isNull() ) {
            _pts_var.convert( QVariant::nameToType("qint32") );
            result.setPts( _pts_var.value<qint32>() );
        }

        QVariant _ptsCount_var = map.value("ptsCount");
        if( !_ptsCount_var.isNull() ) {
            _ptsCount_var.convert( QVariant::nameToType("qint32") );
            result.setPtsCount( _ptsCount_var.value<qint32>() );
        }

        return result;
    }
    if(map.value("classType").toString() == "Update::typeUpdateDialogPinned") {
        result.setClassType(typeUpdateDialogPinned);
        QVariant _pinned_var = map.value("pinned");
        if( !_pinned_var.isNull() ) {
            _pinned_var.convert( QVariant::nameToType("bool") );
            result.setPinned( _pinned_var.value<bool>() );
        }

        QVariant _peer_var = map.value("peer");
        if( !_peer_var.isNull() )
            result.setPeer( Peer::fromMap(_peer_var.toMap()) );

        return result;
    }
    if(map.value("classType").toString() == "Update::typeUpdatePinnedDialogs") {
        result.setClassType(typeUpdatePinnedDialogs);
        QList<QVariant> map_orderVectorPeer = map["orderVectorPeer"].toList();
        QList<Peer> _orderVectorPeer;
        //for(const QVariant &var: map_orderVectorPeer)
        for(int i = 0; i < map_orderVectorPeer.size(); ++i) {
            const QVariant &var = map_orderVectorPeer[i];
            _orderVectorPeer << Peer::fromMap(var.toMap());
        }
        result.setOrderVectorPeer(_orderVectorPeer);
        return result;
    }
    if(map.value("classType").toString() == "Update::typeUpdateBotWebhookJSON") {
        result.setClassType(typeUpdateBotWebhookJSON);
        QVariant _dataJSON_var = map.value("dataJSON");
        if( !_dataJSON_var.isNull() )
            result.setDataJSON( DataJSON::fromMap(_dataJSON_var.toMap()) );

        return result;
    }
    if(map.value("classType").toString() == "Update::typeUpdateBotWebhookJSONQuery") {
        result.setClassType(typeUpdateBotWebhookJSONQuery);
        QVariant _queryId_var = map.value("queryId");
        if( !_queryId_var.isNull() ) {
            _queryId_var.convert( QVariant::nameToType("qint64") );
            result.setQueryId( _queryId_var.value<qint64>() );
        }

        QVariant _dataJSON_var = map.value("dataJSON");
        if( !_dataJSON_var.isNull() )
            result.setDataJSON( DataJSON::fromMap(_dataJSON_var.toMap()) );

        QVariant _timeout_var = map.value("timeout");
        if( !_timeout_var.isNull() ) {
            _timeout_var.convert( QVariant::nameToType("qint32") );
            result.setTimeout( _timeout_var.value<qint32>() );
        }

        return result;
    }
    if(map.value("classType").toString() == "Update::typeUpdateBotShippingQuery") {
        result.setClassType(typeUpdateBotShippingQuery);
        QVariant _queryId_var = map.value("queryId");
        if( !_queryId_var.isNull() ) {
            _queryId_var.convert( QVariant::nameToType("qint64") );
            result.setQueryId( _queryId_var.value<qint64>() );
        }

        QVariant _userId_var = map.value("userId");
        if( !_userId_var.isNull() ) {
            _userId_var.convert( QVariant::nameToType("qint32") );
            result.setUserId( _userId_var.value<qint32>() );
        }

        QVariant _payload_var = map.value("payload");
        if( !_payload_var.isNull() ) {
            _payload_var.convert( QVariant::nameToType("QByteArray") );
            result.setPayload( _payload_var.value<QByteArray>() );
        }

        QVariant _shippingAddress_var = map.value("shippingAddress");
        if( !_shippingAddress_var.isNull() )
            result.setShippingAddress( PostAddress::fromMap(_shippingAddress_var.toMap()) );

        return result;
    }
    if(map.value("classType").toString() == "Update::typeUpdateBotPrecheckoutQuery") {
        result.setClassType(typeUpdateBotPrecheckoutQuery);
        QVariant _queryId_var = map.value("queryId");
        if( !_queryId_var.isNull() ) {
            _queryId_var.convert( QVariant::nameToType("qint64") );
            result.setQueryId( _queryId_var.value<qint64>() );
        }

        QVariant _userId_var = map.value("userId");
        if( !_userId_var.isNull() ) {
            _userId_var.convert( QVariant::nameToType("qint32") );
            result.setUserId( _userId_var.value<qint32>() );
        }

        QVariant _payload_var = map.value("payload");
        if( !_payload_var.isNull() ) {
            _payload_var.convert( QVariant::nameToType("QByteArray") );
            result.setPayload( _payload_var.value<QByteArray>() );
        }

        QVariant _info_var = map.value("info");
        if( !_info_var.isNull() )
            result.setInfo( PaymentRequestedInfo::fromMap(_info_var.toMap()) );

        QVariant _shippingOptionId_var = map.value("shippingOptionId");
        if( !_shippingOptionId_var.isNull() ) {
            _shippingOptionId_var.convert( QVariant::nameToType("QString") );
            result.setShippingOptionId( _shippingOptionId_var.value<QString>() );
        }

        QVariant _currency_var = map.value("currency");
        if( !_currency_var.isNull() ) {
            _currency_var.convert( QVariant::nameToType("QString") );
            result.setCurrency( _currency_var.value<QString>() );
        }

        QVariant _totalAmount_var = map.value("totalAmount");
        if( !_totalAmount_var.isNull() ) {
            _totalAmount_var.convert( QVariant::nameToType("qint64") );
            result.setTotalAmount( _totalAmount_var.value<qint64>() );
        }

        return result;
    }
    if(map.value("classType").toString() == "Update::typeUpdatePhoneCall") {
        result.setClassType(typeUpdatePhoneCall);
        QVariant _phoneCall_var = map.value("phoneCall");
        if( !_phoneCall_var.isNull() )
            result.setPhoneCall( PhoneCall::fromMap(_phoneCall_var.toMap()) );

        return result;
    }
    if(map.value("classType").toString() == "Update::typeUpdateLangPackTooLong") {
        result.setClassType(typeUpdateLangPackTooLong);
        return result;
    }
    if(map.value("classType").toString() == "Update::typeUpdateLangPack") {
        result.setClassType(typeUpdateLangPack);
        QVariant _difference_var = map.value("difference");
        if( !_difference_var.isNull() )
            result.setDifference( LangPackDifference::fromMap(_difference_var.toMap()) );

        return result;
    }
    return result;
}

Update Update::fromJson(const QString &json) {
    return Update::fromMap(QJsonDocument::fromJson(json.toUtf8()).toVariant().toMap());
}

QByteArray Update::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const Update &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case Update::typeUpdateNewMessage:
        stream << item.message();
        stream << item.pts();
        stream << item.ptsCount();
        break;
    case Update::typeUpdateMessageID:
        stream << item.idInt();
        stream << item.randomId();
        break;
    case Update::typeUpdateDeleteMessages:
        stream << item.messages();
        stream << item.pts();
        stream << item.ptsCount();
        break;
    case Update::typeUpdateUserTyping:
        stream << item.userId();
        stream << item.action();
        break;
    case Update::typeUpdateChatUserTyping:
        stream << item.chatId();
        stream << item.userId();
        stream << item.action();
        break;
    case Update::typeUpdateChatParticipants:
        stream << item.participants();
        break;
    case Update::typeUpdateUserStatus:
        stream << item.userId();
        stream << item.status();
        break;
    case Update::typeUpdateUserName:
        stream << item.userId();
        stream << item.firstName();
        stream << item.lastName();
        stream << item.username();
        break;
    case Update::typeUpdateUserPhoto:
        stream << item.userId();
        stream << item.date();
        stream << item.photo();
        stream << item.previous();
        break;
    case Update::typeUpdateContactRegistered:
        stream << item.userId();
        stream << item.date();
        break;
    case Update::typeUpdateContactLink:
        stream << item.userId();
        stream << item.myLink();
        stream << item.foreignLink();
        break;
    case Update::typeUpdateNewEncryptedMessage:
        stream << item.messageEncrypted();
        stream << item.qts();
        break;
    case Update::typeUpdateEncryptedChatTyping:
        stream << item.chatId();
        break;
    case Update::typeUpdateEncryption:
        stream << item.chat();
        stream << item.date();
        break;
    case Update::typeUpdateEncryptedMessagesRead:
        stream << item.chatId();
        stream << item.maxDate();
        stream << item.date();
        break;
    case Update::typeUpdateChatParticipantAdd:
        stream << item.chatId();
        stream << item.userId();
        stream << item.inviterId();
        stream << item.date();
        stream << item.version();
        break;
    case Update::typeUpdateChatParticipantDelete:
        stream << item.chatId();
        stream << item.userId();
        stream << item.version();
        break;
    case Update::typeUpdateDcOptions:
        stream << item.dcOptions();
        break;
    case Update::typeUpdateUserBlocked:
        stream << item.userId();
        stream << item.blocked();
        break;
    case Update::typeUpdateNotifySettings:
        stream << item.peerNotify();
        stream << item.notifySettings();
        break;
    case Update::typeUpdateServiceNotification:
        stream << item.flags();
        stream << item.inboxDate();
        stream << item.type();
        stream << item.messageString();
        stream << item.media();
        stream << item.entities();
        break;
    case Update::typeUpdatePrivacy:
        stream << item.key();
        stream << item.rules();
        break;
    case Update::typeUpdateUserPhone:
        stream << item.userId();
        stream << item.phone();
        break;
    case Update::typeUpdateReadHistoryInbox:
        stream << item.peer();
        stream << item.maxId();
        stream << item.pts();
        stream << item.ptsCount();
        break;
    case Update::typeUpdateReadHistoryOutbox:
        stream << item.peer();
        stream << item.maxId();
        stream << item.pts();
        stream << item.ptsCount();
        break;
    case Update::typeUpdateWebPage:
        stream << item.webpage();
        stream << item.pts();
        stream << item.ptsCount();
        break;
    case Update::typeUpdateReadMessagesContents:
        stream << item.messages();
        stream << item.pts();
        stream << item.ptsCount();
        break;
    case Update::typeUpdateChannelTooLong:
        stream << item.flags();
        stream << item.channelId();
        stream << item.pts();
        break;
    case Update::typeUpdateChannel:
        stream << item.channelId();
        break;
    case Update::typeUpdateNewChannelMessage:
        stream << item.message();
        stream << item.pts();
        stream << item.ptsCount();
        break;
    case Update::typeUpdateReadChannelInbox:
        stream << item.channelId();
        stream << item.maxId();
        break;
    case Update::typeUpdateDeleteChannelMessages:
        stream << item.channelId();
        stream << item.messages();
        stream << item.pts();
        stream << item.ptsCount();
        break;
    case Update::typeUpdateChannelMessageViews:
        stream << item.channelId();
        stream << item.idInt();
        stream << item.views();
        break;
    case Update::typeUpdateChatAdmins:
        stream << item.chatId();
        stream << item.enabled();
        stream << item.version();
        break;
    case Update::typeUpdateChatParticipantAdmin:
        stream << item.chatId();
        stream << item.userId();
        stream << item.isAdmin();
        stream << item.version();
        break;
    case Update::typeUpdateNewStickerSet:
        stream << item.stickerset();
        break;
    case Update::typeUpdateStickerSetsOrder:
        stream << item.flags();
        stream << item.orderVectorlong();
        break;
    case Update::typeUpdateStickerSets:

        break;
    case Update::typeUpdateSavedGifs:

        break;
    case Update::typeUpdateBotInlineQuery:
        stream << item.flags();
        stream << item.queryId();
        stream << item.userId();
        stream << item.query();
        stream << item.geo();
        stream << item.offset();
        break;
    case Update::typeUpdateBotInlineSend:
        stream << item.flags();
        stream << item.userId();
        stream << item.query();
        stream << item.geo();
        stream << item.idString();
        stream << item.msgIdInputBotInlineMessageID();
        break;
    case Update::typeUpdateEditChannelMessage:
        stream << item.message();
        stream << item.pts();
        stream << item.ptsCount();
        break;
    case Update::typeUpdateChannelPinnedMessage:
        stream << item.channelId();
        stream << item.idInt();
        break;
    case Update::typeUpdateBotCallbackQuery:
        stream << item.flags();
        stream << item.queryId();
        stream << item.userId();
        stream << item.peer();
        stream << item.msgIdInt();
        stream << item.chatInstance();
        stream << item.dataBytes();
        stream << item.gameShortName();
        break;
    case Update::typeUpdateEditMessage:
        stream << item.message();
        stream << item.pts();
        stream << item.ptsCount();
        break;
    case Update::typeUpdateInlineBotCallbackQuery:
        stream << item.flags();
        stream << item.queryId();
        stream << item.userId();
        stream << item.msgIdInputBotInlineMessageID();
        stream << item.chatInstance();
        stream << item.dataBytes();
        stream << item.gameShortName();
        break;
    case Update::typeUpdateReadChannelOutbox:
        stream << item.channelId();
        stream << item.maxId();
        break;
    case Update::typeUpdateDraftMessage:
        stream << item.peer();
        stream << item.draft();
        break;
    case Update::typeUpdateReadFeaturedStickers:

        break;
    case Update::typeUpdateRecentStickers:

        break;
    case Update::typeUpdateConfig:

        break;
    case Update::typeUpdatePtsChanged:

        break;
    case Update::typeUpdateChannelWebPage:
        stream << item.channelId();
        stream << item.webpage();
        stream << item.pts();
        stream << item.ptsCount();
        break;
    case Update::typeUpdateDialogPinned:
        stream << item.flags();
        stream << item.peer();
        break;
    case Update::typeUpdatePinnedDialogs:
        stream << item.flags();
        stream << item.orderVectorPeer();
        break;
    case Update::typeUpdateBotWebhookJSON:
        stream << item.dataJSON();
        break;
    case Update::typeUpdateBotWebhookJSONQuery:
        stream << item.queryId();
        stream << item.dataJSON();
        stream << item.timeout();
        break;
    case Update::typeUpdateBotShippingQuery:
        stream << item.queryId();
        stream << item.userId();
        stream << item.payload();
        stream << item.shippingAddress();
        break;
    case Update::typeUpdateBotPrecheckoutQuery:
        stream << item.flags();
        stream << item.queryId();
        stream << item.userId();
        stream << item.payload();
        stream << item.info();
        stream << item.shippingOptionId();
        stream << item.currency();
        stream << item.totalAmount();
        break;
    case Update::typeUpdatePhoneCall:
        stream << item.phoneCall();
        break;
    case Update::typeUpdateLangPackTooLong:

        break;
    case Update::typeUpdateLangPack:
        stream << item.difference();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, Update &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<Update::UpdateClassType>(type));
    switch(type) {
    case Update::typeUpdateNewMessage: {
        Message m_message;
        stream >> m_message;
        item.setMessage(m_message);
        qint32 m_pts;
        stream >> m_pts;
        item.setPts(m_pts);
        qint32 m_pts_count;
        stream >> m_pts_count;
        item.setPtsCount(m_pts_count);
    }
        break;
    case Update::typeUpdateMessageID: {
        qint32 m_id_int;
        stream >> m_id_int;
        item.setIdInt(m_id_int);
        qint64 m_random_id;
        stream >> m_random_id;
        item.setRandomId(m_random_id);
    }
        break;
    case Update::typeUpdateDeleteMessages: {
        QList<qint32> m_messages;
        stream >> m_messages;
        item.setMessages(m_messages);
        qint32 m_pts;
        stream >> m_pts;
        item.setPts(m_pts);
        qint32 m_pts_count;
        stream >> m_pts_count;
        item.setPtsCount(m_pts_count);
    }
        break;
    case Update::typeUpdateUserTyping: {
        qint32 m_user_id;
        stream >> m_user_id;
        item.setUserId(m_user_id);
        SendMessageAction m_action;
        stream >> m_action;
        item.setAction(m_action);
    }
        break;
    case Update::typeUpdateChatUserTyping: {
        qint32 m_chat_id;
        stream >> m_chat_id;
        item.setChatId(m_chat_id);
        qint32 m_user_id;
        stream >> m_user_id;
        item.setUserId(m_user_id);
        SendMessageAction m_action;
        stream >> m_action;
        item.setAction(m_action);
    }
        break;
    case Update::typeUpdateChatParticipants: {
        ChatParticipants m_participants;
        stream >> m_participants;
        item.setParticipants(m_participants);
    }
        break;
    case Update::typeUpdateUserStatus: {
        qint32 m_user_id;
        stream >> m_user_id;
        item.setUserId(m_user_id);
        UserStatus m_status;
        stream >> m_status;
        item.setStatus(m_status);
    }
        break;
    case Update::typeUpdateUserName: {
        qint32 m_user_id;
        stream >> m_user_id;
        item.setUserId(m_user_id);
        QString m_first_name;
        stream >> m_first_name;
        item.setFirstName(m_first_name);
        QString m_last_name;
        stream >> m_last_name;
        item.setLastName(m_last_name);
        QString m_username;
        stream >> m_username;
        item.setUsername(m_username);
    }
        break;
    case Update::typeUpdateUserPhoto: {
        qint32 m_user_id;
        stream >> m_user_id;
        item.setUserId(m_user_id);
        qint32 m_date;
        stream >> m_date;
        item.setDate(m_date);
        UserProfilePhoto m_photo;
        stream >> m_photo;
        item.setPhoto(m_photo);
        bool m_previous;
        stream >> m_previous;
        item.setPrevious(m_previous);
    }
        break;
    case Update::typeUpdateContactRegistered: {
        qint32 m_user_id;
        stream >> m_user_id;
        item.setUserId(m_user_id);
        qint32 m_date;
        stream >> m_date;
        item.setDate(m_date);
    }
        break;
    case Update::typeUpdateContactLink: {
        qint32 m_user_id;
        stream >> m_user_id;
        item.setUserId(m_user_id);
        ContactLink m_my_link;
        stream >> m_my_link;
        item.setMyLink(m_my_link);
        ContactLink m_foreign_link;
        stream >> m_foreign_link;
        item.setForeignLink(m_foreign_link);
    }
        break;
    case Update::typeUpdateNewEncryptedMessage: {
        EncryptedMessage m_message_Encrypted;
        stream >> m_message_Encrypted;
        item.setMessageEncrypted(m_message_Encrypted);
        qint32 m_qts;
        stream >> m_qts;
        item.setQts(m_qts);
    }
        break;
    case Update::typeUpdateEncryptedChatTyping: {
        qint32 m_chat_id;
        stream >> m_chat_id;
        item.setChatId(m_chat_id);
    }
        break;
    case Update::typeUpdateEncryption: {
        EncryptedChat m_chat;
        stream >> m_chat;
        item.setChat(m_chat);
        qint32 m_date;
        stream >> m_date;
        item.setDate(m_date);
    }
        break;
    case Update::typeUpdateEncryptedMessagesRead: {
        qint32 m_chat_id;
        stream >> m_chat_id;
        item.setChatId(m_chat_id);
        qint32 m_max_date;
        stream >> m_max_date;
        item.setMaxDate(m_max_date);
        qint32 m_date;
        stream >> m_date;
        item.setDate(m_date);
    }
        break;
    case Update::typeUpdateChatParticipantAdd: {
        qint32 m_chat_id;
        stream >> m_chat_id;
        item.setChatId(m_chat_id);
        qint32 m_user_id;
        stream >> m_user_id;
        item.setUserId(m_user_id);
        qint32 m_inviter_id;
        stream >> m_inviter_id;
        item.setInviterId(m_inviter_id);
        qint32 m_date;
        stream >> m_date;
        item.setDate(m_date);
        qint32 m_version;
        stream >> m_version;
        item.setVersion(m_version);
    }
        break;
    case Update::typeUpdateChatParticipantDelete: {
        qint32 m_chat_id;
        stream >> m_chat_id;
        item.setChatId(m_chat_id);
        qint32 m_user_id;
        stream >> m_user_id;
        item.setUserId(m_user_id);
        qint32 m_version;
        stream >> m_version;
        item.setVersion(m_version);
    }
        break;
    case Update::typeUpdateDcOptions: {
        QList<DcOption> m_dc_options;
        stream >> m_dc_options;
        item.setDcOptions(m_dc_options);
    }
        break;
    case Update::typeUpdateUserBlocked: {
        qint32 m_user_id;
        stream >> m_user_id;
        item.setUserId(m_user_id);
        bool m_blocked;
        stream >> m_blocked;
        item.setBlocked(m_blocked);
    }
        break;
    case Update::typeUpdateNotifySettings: {
        NotifyPeer m_peer_Notify;
        stream >> m_peer_Notify;
        item.setPeerNotify(m_peer_Notify);
        PeerNotifySettings m_notify_settings;
        stream >> m_notify_settings;
        item.setNotifySettings(m_notify_settings);
    }
        break;
    case Update::typeUpdateServiceNotification: {
        qint32 m_flags;
        stream >> m_flags;
        item.setFlags(m_flags);
        qint32 m_inbox_date;
        stream >> m_inbox_date;
        item.setInboxDate(m_inbox_date);
        QString m_type;
        stream >> m_type;
        item.setType(m_type);
        QString m_message_string;
        stream >> m_message_string;
        item.setMessageString(m_message_string);
        MessageMedia m_media;
        stream >> m_media;
        item.setMedia(m_media);
        QList<MessageEntity> m_entities;
        stream >> m_entities;
        item.setEntities(m_entities);
    }
        break;
    case Update::typeUpdatePrivacy: {
        PrivacyKey m_key;
        stream >> m_key;
        item.setKey(m_key);
        QList<PrivacyRule> m_rules;
        stream >> m_rules;
        item.setRules(m_rules);
    }
        break;
    case Update::typeUpdateUserPhone: {
        qint32 m_user_id;
        stream >> m_user_id;
        item.setUserId(m_user_id);
        QString m_phone;
        stream >> m_phone;
        item.setPhone(m_phone);
    }
        break;
    case Update::typeUpdateReadHistoryInbox: {
        Peer m_peer;
        stream >> m_peer;
        item.setPeer(m_peer);
        qint32 m_max_id;
        stream >> m_max_id;
        item.setMaxId(m_max_id);
        qint32 m_pts;
        stream >> m_pts;
        item.setPts(m_pts);
        qint32 m_pts_count;
        stream >> m_pts_count;
        item.setPtsCount(m_pts_count);
    }
        break;
    case Update::typeUpdateReadHistoryOutbox: {
        Peer m_peer;
        stream >> m_peer;
        item.setPeer(m_peer);
        qint32 m_max_id;
        stream >> m_max_id;
        item.setMaxId(m_max_id);
        qint32 m_pts;
        stream >> m_pts;
        item.setPts(m_pts);
        qint32 m_pts_count;
        stream >> m_pts_count;
        item.setPtsCount(m_pts_count);
    }
        break;
    case Update::typeUpdateWebPage: {
        WebPage m_webpage;
        stream >> m_webpage;
        item.setWebpage(m_webpage);
        qint32 m_pts;
        stream >> m_pts;
        item.setPts(m_pts);
        qint32 m_pts_count;
        stream >> m_pts_count;
        item.setPtsCount(m_pts_count);
    }
        break;
    case Update::typeUpdateReadMessagesContents: {
        QList<qint32> m_messages;
        stream >> m_messages;
        item.setMessages(m_messages);
        qint32 m_pts;
        stream >> m_pts;
        item.setPts(m_pts);
        qint32 m_pts_count;
        stream >> m_pts_count;
        item.setPtsCount(m_pts_count);
    }
        break;
    case Update::typeUpdateChannelTooLong: {
        qint32 m_flags;
        stream >> m_flags;
        item.setFlags(m_flags);
        qint32 m_channel_id;
        stream >> m_channel_id;
        item.setChannelId(m_channel_id);
        qint32 m_pts;
        stream >> m_pts;
        item.setPts(m_pts);
    }
        break;
    case Update::typeUpdateChannel: {
        qint32 m_channel_id;
        stream >> m_channel_id;
        item.setChannelId(m_channel_id);
    }
        break;
    case Update::typeUpdateNewChannelMessage: {
        Message m_message;
        stream >> m_message;
        item.setMessage(m_message);
        qint32 m_pts;
        stream >> m_pts;
        item.setPts(m_pts);
        qint32 m_pts_count;
        stream >> m_pts_count;
        item.setPtsCount(m_pts_count);
    }
        break;
    case Update::typeUpdateReadChannelInbox: {
        qint32 m_channel_id;
        stream >> m_channel_id;
        item.setChannelId(m_channel_id);
        qint32 m_max_id;
        stream >> m_max_id;
        item.setMaxId(m_max_id);
    }
        break;
    case Update::typeUpdateDeleteChannelMessages: {
        qint32 m_channel_id;
        stream >> m_channel_id;
        item.setChannelId(m_channel_id);
        QList<qint32> m_messages;
        stream >> m_messages;
        item.setMessages(m_messages);
        qint32 m_pts;
        stream >> m_pts;
        item.setPts(m_pts);
        qint32 m_pts_count;
        stream >> m_pts_count;
        item.setPtsCount(m_pts_count);
    }
        break;
    case Update::typeUpdateChannelMessageViews: {
        qint32 m_channel_id;
        stream >> m_channel_id;
        item.setChannelId(m_channel_id);
        qint32 m_id_int;
        stream >> m_id_int;
        item.setIdInt(m_id_int);
        qint32 m_views;
        stream >> m_views;
        item.setViews(m_views);
    }
        break;
    case Update::typeUpdateChatAdmins: {
        qint32 m_chat_id;
        stream >> m_chat_id;
        item.setChatId(m_chat_id);
        bool m_enabled;
        stream >> m_enabled;
        item.setEnabled(m_enabled);
        qint32 m_version;
        stream >> m_version;
        item.setVersion(m_version);
    }
        break;
    case Update::typeUpdateChatParticipantAdmin: {
        qint32 m_chat_id;
        stream >> m_chat_id;
        item.setChatId(m_chat_id);
        qint32 m_user_id;
        stream >> m_user_id;
        item.setUserId(m_user_id);
        bool m_is_admin;
        stream >> m_is_admin;
        item.setIsAdmin(m_is_admin);
        qint32 m_version;
        stream >> m_version;
        item.setVersion(m_version);
    }
        break;
    case Update::typeUpdateNewStickerSet: {
        MessagesStickerSet m_stickerset;
        stream >> m_stickerset;
        item.setStickerset(m_stickerset);
    }
        break;
    case Update::typeUpdateStickerSetsOrder: {
        qint32 m_flags;
        stream >> m_flags;
        item.setFlags(m_flags);
        QList<qint64> m_order_Vectorlong;
        stream >> m_order_Vectorlong;
        item.setOrderVectorlong(m_order_Vectorlong);
    }
        break;
    case Update::typeUpdateStickerSets: {

    }
        break;
    case Update::typeUpdateSavedGifs: {

    }
        break;
    case Update::typeUpdateBotInlineQuery: {
        qint32 m_flags;
        stream >> m_flags;
        item.setFlags(m_flags);
        qint64 m_query_id;
        stream >> m_query_id;
        item.setQueryId(m_query_id);
        qint32 m_user_id;
        stream >> m_user_id;
        item.setUserId(m_user_id);
        QString m_query;
        stream >> m_query;
        item.setQuery(m_query);
        GeoPoint m_geo;
        stream >> m_geo;
        item.setGeo(m_geo);
        QString m_offset;
        stream >> m_offset;
        item.setOffset(m_offset);
    }
        break;
    case Update::typeUpdateBotInlineSend: {
        qint32 m_flags;
        stream >> m_flags;
        item.setFlags(m_flags);
        qint32 m_user_id;
        stream >> m_user_id;
        item.setUserId(m_user_id);
        QString m_query;
        stream >> m_query;
        item.setQuery(m_query);
        GeoPoint m_geo;
        stream >> m_geo;
        item.setGeo(m_geo);
        QString m_id_string;
        stream >> m_id_string;
        item.setIdString(m_id_string);
        InputBotInlineMessageID m_msg_id_InputBotInlineMessageID;
        stream >> m_msg_id_InputBotInlineMessageID;
        item.setMsgIdInputBotInlineMessageID(m_msg_id_InputBotInlineMessageID);
    }
        break;
    case Update::typeUpdateEditChannelMessage: {
        Message m_message;
        stream >> m_message;
        item.setMessage(m_message);
        qint32 m_pts;
        stream >> m_pts;
        item.setPts(m_pts);
        qint32 m_pts_count;
        stream >> m_pts_count;
        item.setPtsCount(m_pts_count);
    }
        break;
    case Update::typeUpdateChannelPinnedMessage: {
        qint32 m_channel_id;
        stream >> m_channel_id;
        item.setChannelId(m_channel_id);
        qint32 m_id_int;
        stream >> m_id_int;
        item.setIdInt(m_id_int);
    }
        break;
    case Update::typeUpdateBotCallbackQuery: {
        qint32 m_flags;
        stream >> m_flags;
        item.setFlags(m_flags);
        qint64 m_query_id;
        stream >> m_query_id;
        item.setQueryId(m_query_id);
        qint32 m_user_id;
        stream >> m_user_id;
        item.setUserId(m_user_id);
        Peer m_peer;
        stream >> m_peer;
        item.setPeer(m_peer);
        qint32 m_msg_id_int;
        stream >> m_msg_id_int;
        item.setMsgIdInt(m_msg_id_int);
        qint64 m_chat_instance;
        stream >> m_chat_instance;
        item.setChatInstance(m_chat_instance);
        QByteArray m_data_bytes;
        stream >> m_data_bytes;
        item.setDataBytes(m_data_bytes);
        QString m_game_short_name;
        stream >> m_game_short_name;
        item.setGameShortName(m_game_short_name);
    }
        break;
    case Update::typeUpdateEditMessage: {
        Message m_message;
        stream >> m_message;
        item.setMessage(m_message);
        qint32 m_pts;
        stream >> m_pts;
        item.setPts(m_pts);
        qint32 m_pts_count;
        stream >> m_pts_count;
        item.setPtsCount(m_pts_count);
    }
        break;
    case Update::typeUpdateInlineBotCallbackQuery: {
        qint32 m_flags;
        stream >> m_flags;
        item.setFlags(m_flags);
        qint64 m_query_id;
        stream >> m_query_id;
        item.setQueryId(m_query_id);
        qint32 m_user_id;
        stream >> m_user_id;
        item.setUserId(m_user_id);
        InputBotInlineMessageID m_msg_id_InputBotInlineMessageID;
        stream >> m_msg_id_InputBotInlineMessageID;
        item.setMsgIdInputBotInlineMessageID(m_msg_id_InputBotInlineMessageID);
        qint64 m_chat_instance;
        stream >> m_chat_instance;
        item.setChatInstance(m_chat_instance);
        QByteArray m_data_bytes;
        stream >> m_data_bytes;
        item.setDataBytes(m_data_bytes);
        QString m_game_short_name;
        stream >> m_game_short_name;
        item.setGameShortName(m_game_short_name);
    }
        break;
    case Update::typeUpdateReadChannelOutbox: {
        qint32 m_channel_id;
        stream >> m_channel_id;
        item.setChannelId(m_channel_id);
        qint32 m_max_id;
        stream >> m_max_id;
        item.setMaxId(m_max_id);
    }
        break;
    case Update::typeUpdateDraftMessage: {
        Peer m_peer;
        stream >> m_peer;
        item.setPeer(m_peer);
        DraftMessage m_draft;
        stream >> m_draft;
        item.setDraft(m_draft);
    }
        break;
    case Update::typeUpdateReadFeaturedStickers: {

    }
        break;
    case Update::typeUpdateRecentStickers: {

    }
        break;
    case Update::typeUpdateConfig: {

    }
        break;
    case Update::typeUpdatePtsChanged: {

    }
        break;
    case Update::typeUpdateChannelWebPage: {
        qint32 m_channel_id;
        stream >> m_channel_id;
        item.setChannelId(m_channel_id);
        WebPage m_webpage;
        stream >> m_webpage;
        item.setWebpage(m_webpage);
        qint32 m_pts;
        stream >> m_pts;
        item.setPts(m_pts);
        qint32 m_pts_count;
        stream >> m_pts_count;
        item.setPtsCount(m_pts_count);
    }
        break;
    case Update::typeUpdateDialogPinned: {
        qint32 m_flags;
        stream >> m_flags;
        item.setFlags(m_flags);
        Peer m_peer;
        stream >> m_peer;
        item.setPeer(m_peer);
    }
        break;
    case Update::typeUpdatePinnedDialogs: {
        qint32 m_flags;
        stream >> m_flags;
        item.setFlags(m_flags);
        QList<Peer> m_order_VectorPeer;
        stream >> m_order_VectorPeer;
        item.setOrderVectorPeer(m_order_VectorPeer);
    }
        break;
    case Update::typeUpdateBotWebhookJSON: {
        DataJSON m_data_JSON;
        stream >> m_data_JSON;
        item.setDataJSON(m_data_JSON);
    }
        break;
    case Update::typeUpdateBotWebhookJSONQuery: {
        qint64 m_query_id;
        stream >> m_query_id;
        item.setQueryId(m_query_id);
        DataJSON m_data_JSON;
        stream >> m_data_JSON;
        item.setDataJSON(m_data_JSON);
        qint32 m_timeout;
        stream >> m_timeout;
        item.setTimeout(m_timeout);
    }
        break;
    case Update::typeUpdateBotShippingQuery: {
        qint64 m_query_id;
        stream >> m_query_id;
        item.setQueryId(m_query_id);
        qint32 m_user_id;
        stream >> m_user_id;
        item.setUserId(m_user_id);
        QByteArray m_payload;
        stream >> m_payload;
        item.setPayload(m_payload);
        PostAddress m_shipping_address;
        stream >> m_shipping_address;
        item.setShippingAddress(m_shipping_address);
    }
        break;
    case Update::typeUpdateBotPrecheckoutQuery: {
        qint32 m_flags;
        stream >> m_flags;
        item.setFlags(m_flags);
        qint64 m_query_id;
        stream >> m_query_id;
        item.setQueryId(m_query_id);
        qint32 m_user_id;
        stream >> m_user_id;
        item.setUserId(m_user_id);
        QByteArray m_payload;
        stream >> m_payload;
        item.setPayload(m_payload);
        PaymentRequestedInfo m_info;
        stream >> m_info;
        item.setInfo(m_info);
        QString m_shipping_option_id;
        stream >> m_shipping_option_id;
        item.setShippingOptionId(m_shipping_option_id);
        QString m_currency;
        stream >> m_currency;
        item.setCurrency(m_currency);
        qint64 m_total_amount;
        stream >> m_total_amount;
        item.setTotalAmount(m_total_amount);
    }
        break;
    case Update::typeUpdatePhoneCall: {
        PhoneCall m_phone_call;
        stream >> m_phone_call;
        item.setPhoneCall(m_phone_call);
    }
        break;
    case Update::typeUpdateLangPackTooLong: {

    }
        break;
    case Update::typeUpdateLangPack: {
        LangPackDifference m_difference;
        stream >> m_difference;
        item.setDifference(m_difference);
    }
        break;
    }
    return stream;
}

/*QDebug operator<<(QDebug debug,  const Update &item) {
    QDebugStateSaver saver(debug);
    Q_UNUSED(saver)
    debug.nospace() << "Telegram.Update(";
    switch(item.classType()) {
    case Update::typeUpdateNewMessage:
        debug.nospace() << "classType: typeUpdateNewMessage";
        debug.nospace() << ", message: " << item.message();
        debug.nospace() << ", pts: " << item.pts();
        debug.nospace() << ", ptsCount: " << item.ptsCount();
        break;
    case Update::typeUpdateMessageID:
        debug.nospace() << "classType: typeUpdateMessageID";
        debug.nospace() << ", idInt: " << item.idInt();
        debug.nospace() << ", randomId: " << item.randomId();
        break;
    case Update::typeUpdateDeleteMessages:
        debug.nospace() << "classType: typeUpdateDeleteMessages";
        debug.nospace() << ", messages: " << item.messages();
        debug.nospace() << ", pts: " << item.pts();
        debug.nospace() << ", ptsCount: " << item.ptsCount();
        break;
    case Update::typeUpdateUserTyping:
        debug.nospace() << "classType: typeUpdateUserTyping";
        debug.nospace() << ", userId: " << item.userId();
        debug.nospace() << ", action: " << item.action();
        break;
    case Update::typeUpdateChatUserTyping:
        debug.nospace() << "classType: typeUpdateChatUserTyping";
        debug.nospace() << ", chatId: " << item.chatId();
        debug.nospace() << ", userId: " << item.userId();
        debug.nospace() << ", action: " << item.action();
        break;
    case Update::typeUpdateChatParticipants:
        debug.nospace() << "classType: typeUpdateChatParticipants";
        debug.nospace() << ", participants: " << item.participants();
        break;
    case Update::typeUpdateUserStatus:
        debug.nospace() << "classType: typeUpdateUserStatus";
        debug.nospace() << ", userId: " << item.userId();
        debug.nospace() << ", status: " << item.status();
        break;
    case Update::typeUpdateUserName:
        debug.nospace() << "classType: typeUpdateUserName";
        debug.nospace() << ", userId: " << item.userId();
        debug.nospace() << ", firstName: " << item.firstName();
        debug.nospace() << ", lastName: " << item.lastName();
        debug.nospace() << ", username: " << item.username();
        break;
    case Update::typeUpdateUserPhoto:
        debug.nospace() << "classType: typeUpdateUserPhoto";
        debug.nospace() << ", userId: " << item.userId();
        debug.nospace() << ", date: " << item.date();
        debug.nospace() << ", photo: " << item.photo();
        debug.nospace() << ", previous: " << item.previous();
        break;
    case Update::typeUpdateContactRegistered:
        debug.nospace() << "classType: typeUpdateContactRegistered";
        debug.nospace() << ", userId: " << item.userId();
        debug.nospace() << ", date: " << item.date();
        break;
    case Update::typeUpdateContactLink:
        debug.nospace() << "classType: typeUpdateContactLink";
        debug.nospace() << ", userId: " << item.userId();
        debug.nospace() << ", myLink: " << item.myLink();
        debug.nospace() << ", foreignLink: " << item.foreignLink();
        break;
    case Update::typeUpdateNewEncryptedMessage:
        debug.nospace() << "classType: typeUpdateNewEncryptedMessage";
        debug.nospace() << ", messageEncrypted: " << item.messageEncrypted();
        debug.nospace() << ", qts: " << item.qts();
        break;
    case Update::typeUpdateEncryptedChatTyping:
        debug.nospace() << "classType: typeUpdateEncryptedChatTyping";
        debug.nospace() << ", chatId: " << item.chatId();
        break;
    case Update::typeUpdateEncryption:
        debug.nospace() << "classType: typeUpdateEncryption";
        debug.nospace() << ", chat: " << item.chat();
        debug.nospace() << ", date: " << item.date();
        break;
    case Update::typeUpdateEncryptedMessagesRead:
        debug.nospace() << "classType: typeUpdateEncryptedMessagesRead";
        debug.nospace() << ", chatId: " << item.chatId();
        debug.nospace() << ", maxDate: " << item.maxDate();
        debug.nospace() << ", date: " << item.date();
        break;
    case Update::typeUpdateChatParticipantAdd:
        debug.nospace() << "classType: typeUpdateChatParticipantAdd";
        debug.nospace() << ", chatId: " << item.chatId();
        debug.nospace() << ", userId: " << item.userId();
        debug.nospace() << ", inviterId: " << item.inviterId();
        debug.nospace() << ", date: " << item.date();
        debug.nospace() << ", version: " << item.version();
        break;
    case Update::typeUpdateChatParticipantDelete:
        debug.nospace() << "classType: typeUpdateChatParticipantDelete";
        debug.nospace() << ", chatId: " << item.chatId();
        debug.nospace() << ", userId: " << item.userId();
        debug.nospace() << ", version: " << item.version();
        break;
    case Update::typeUpdateDcOptions:
        debug.nospace() << "classType: typeUpdateDcOptions";
        debug.nospace() << ", dcOptions: " << item.dcOptions();
        break;
    case Update::typeUpdateUserBlocked:
        debug.nospace() << "classType: typeUpdateUserBlocked";
        debug.nospace() << ", userId: " << item.userId();
        debug.nospace() << ", blocked: " << item.blocked();
        break;
    case Update::typeUpdateNotifySettings:
        debug.nospace() << "classType: typeUpdateNotifySettings";
        debug.nospace() << ", peerNotify: " << item.peerNotify();
        debug.nospace() << ", notifySettings: " << item.notifySettings();
        break;
    case Update::typeUpdateServiceNotification:
        debug.nospace() << "classType: typeUpdateServiceNotification";
        debug.nospace() << ", flags: " << item.flags();
        debug.nospace() << ", inboxDate: " << item.inboxDate();
        debug.nospace() << ", type: " << item.type();
        debug.nospace() << ", messageString: " << item.messageString();
        debug.nospace() << ", media: " << item.media();
        debug.nospace() << ", entities: " << item.entities();
        break;
    case Update::typeUpdatePrivacy:
        debug.nospace() << "classType: typeUpdatePrivacy";
        debug.nospace() << ", key: " << item.key();
        debug.nospace() << ", rules: " << item.rules();
        break;
    case Update::typeUpdateUserPhone:
        debug.nospace() << "classType: typeUpdateUserPhone";
        debug.nospace() << ", userId: " << item.userId();
        debug.nospace() << ", phone: " << item.phone();
        break;
    case Update::typeUpdateReadHistoryInbox:
        debug.nospace() << "classType: typeUpdateReadHistoryInbox";
        debug.nospace() << ", peer: " << item.peer();
        debug.nospace() << ", maxId: " << item.maxId();
        debug.nospace() << ", pts: " << item.pts();
        debug.nospace() << ", ptsCount: " << item.ptsCount();
        break;
    case Update::typeUpdateReadHistoryOutbox:
        debug.nospace() << "classType: typeUpdateReadHistoryOutbox";
        debug.nospace() << ", peer: " << item.peer();
        debug.nospace() << ", maxId: " << item.maxId();
        debug.nospace() << ", pts: " << item.pts();
        debug.nospace() << ", ptsCount: " << item.ptsCount();
        break;
    case Update::typeUpdateWebPage:
        debug.nospace() << "classType: typeUpdateWebPage";
        debug.nospace() << ", webpage: " << item.webpage();
        debug.nospace() << ", pts: " << item.pts();
        debug.nospace() << ", ptsCount: " << item.ptsCount();
        break;
    case Update::typeUpdateReadMessagesContents:
        debug.nospace() << "classType: typeUpdateReadMessagesContents";
        debug.nospace() << ", messages: " << item.messages();
        debug.nospace() << ", pts: " << item.pts();
        debug.nospace() << ", ptsCount: " << item.ptsCount();
        break;
    case Update::typeUpdateChannelTooLong:
        debug.nospace() << "classType: typeUpdateChannelTooLong";
        debug.nospace() << ", flags: " << item.flags();
        debug.nospace() << ", channelId: " << item.channelId();
        debug.nospace() << ", pts: " << item.pts();
        break;
    case Update::typeUpdateChannel:
        debug.nospace() << "classType: typeUpdateChannel";
        debug.nospace() << ", channelId: " << item.channelId();
        break;
    case Update::typeUpdateNewChannelMessage:
        debug.nospace() << "classType: typeUpdateNewChannelMessage";
        debug.nospace() << ", message: " << item.message();
        debug.nospace() << ", pts: " << item.pts();
        debug.nospace() << ", ptsCount: " << item.ptsCount();
        break;
    case Update::typeUpdateReadChannelInbox:
        debug.nospace() << "classType: typeUpdateReadChannelInbox";
        debug.nospace() << ", channelId: " << item.channelId();
        debug.nospace() << ", maxId: " << item.maxId();
        break;
    case Update::typeUpdateDeleteChannelMessages:
        debug.nospace() << "classType: typeUpdateDeleteChannelMessages";
        debug.nospace() << ", channelId: " << item.channelId();
        debug.nospace() << ", messages: " << item.messages();
        debug.nospace() << ", pts: " << item.pts();
        debug.nospace() << ", ptsCount: " << item.ptsCount();
        break;
    case Update::typeUpdateChannelMessageViews:
        debug.nospace() << "classType: typeUpdateChannelMessageViews";
        debug.nospace() << ", channelId: " << item.channelId();
        debug.nospace() << ", idInt: " << item.idInt();
        debug.nospace() << ", views: " << item.views();
        break;
    case Update::typeUpdateChatAdmins:
        debug.nospace() << "classType: typeUpdateChatAdmins";
        debug.nospace() << ", chatId: " << item.chatId();
        debug.nospace() << ", enabled: " << item.enabled();
        debug.nospace() << ", version: " << item.version();
        break;
    case Update::typeUpdateChatParticipantAdmin:
        debug.nospace() << "classType: typeUpdateChatParticipantAdmin";
        debug.nospace() << ", chatId: " << item.chatId();
        debug.nospace() << ", userId: " << item.userId();
        debug.nospace() << ", isAdmin: " << item.isAdmin();
        debug.nospace() << ", version: " << item.version();
        break;
    case Update::typeUpdateNewStickerSet:
        debug.nospace() << "classType: typeUpdateNewStickerSet";
        debug.nospace() << ", stickerset: " << item.stickerset();
        break;
    case Update::typeUpdateStickerSetsOrder:
        debug.nospace() << "classType: typeUpdateStickerSetsOrder";
        debug.nospace() << ", flags: " << item.flags();
        debug.nospace() << ", orderVectorlong: " << item.orderVectorlong();
        break;
    case Update::typeUpdateStickerSets:
        debug.nospace() << "classType: typeUpdateStickerSets";
        break;
    case Update::typeUpdateSavedGifs:
        debug.nospace() << "classType: typeUpdateSavedGifs";
        break;
    case Update::typeUpdateBotInlineQuery:
        debug.nospace() << "classType: typeUpdateBotInlineQuery";
        debug.nospace() << ", flags: " << item.flags();
        debug.nospace() << ", queryId: " << item.queryId();
        debug.nospace() << ", userId: " << item.userId();
        debug.nospace() << ", query: " << item.query();
        debug.nospace() << ", geo: " << item.geo();
        debug.nospace() << ", offset: " << item.offset();
        break;
    case Update::typeUpdateBotInlineSend:
        debug.nospace() << "classType: typeUpdateBotInlineSend";
        debug.nospace() << ", flags: " << item.flags();
        debug.nospace() << ", userId: " << item.userId();
        debug.nospace() << ", query: " << item.query();
        debug.nospace() << ", geo: " << item.geo();
        debug.nospace() << ", idString: " << item.idString();
        debug.nospace() << ", msgIdInputBotInlineMessageID: " << item.msgIdInputBotInlineMessageID();
        break;
    case Update::typeUpdateEditChannelMessage:
        debug.nospace() << "classType: typeUpdateEditChannelMessage";
        debug.nospace() << ", message: " << item.message();
        debug.nospace() << ", pts: " << item.pts();
        debug.nospace() << ", ptsCount: " << item.ptsCount();
        break;
    case Update::typeUpdateChannelPinnedMessage:
        debug.nospace() << "classType: typeUpdateChannelPinnedMessage";
        debug.nospace() << ", channelId: " << item.channelId();
        debug.nospace() << ", idInt: " << item.idInt();
        break;
    case Update::typeUpdateBotCallbackQuery:
        debug.nospace() << "classType: typeUpdateBotCallbackQuery";
        debug.nospace() << ", flags: " << item.flags();
        debug.nospace() << ", queryId: " << item.queryId();
        debug.nospace() << ", userId: " << item.userId();
        debug.nospace() << ", peer: " << item.peer();
        debug.nospace() << ", msgIdInt: " << item.msgIdInt();
        debug.nospace() << ", chatInstance: " << item.chatInstance();
        debug.nospace() << ", dataBytes: " << item.dataBytes();
        debug.nospace() << ", gameShortName: " << item.gameShortName();
        break;
    case Update::typeUpdateEditMessage:
        debug.nospace() << "classType: typeUpdateEditMessage";
        debug.nospace() << ", message: " << item.message();
        debug.nospace() << ", pts: " << item.pts();
        debug.nospace() << ", ptsCount: " << item.ptsCount();
        break;
    case Update::typeUpdateInlineBotCallbackQuery:
        debug.nospace() << "classType: typeUpdateInlineBotCallbackQuery";
        debug.nospace() << ", flags: " << item.flags();
        debug.nospace() << ", queryId: " << item.queryId();
        debug.nospace() << ", userId: " << item.userId();
        debug.nospace() << ", msgIdInputBotInlineMessageID: " << item.msgIdInputBotInlineMessageID();
        debug.nospace() << ", chatInstance: " << item.chatInstance();
        debug.nospace() << ", dataBytes: " << item.dataBytes();
        debug.nospace() << ", gameShortName: " << item.gameShortName();
        break;
    case Update::typeUpdateReadChannelOutbox:
        debug.nospace() << "classType: typeUpdateReadChannelOutbox";
        debug.nospace() << ", channelId: " << item.channelId();
        debug.nospace() << ", maxId: " << item.maxId();
        break;
    case Update::typeUpdateDraftMessage:
        debug.nospace() << "classType: typeUpdateDraftMessage";
        debug.nospace() << ", peer: " << item.peer();
        debug.nospace() << ", draft: " << item.draft();
        break;
    case Update::typeUpdateReadFeaturedStickers:
        debug.nospace() << "classType: typeUpdateReadFeaturedStickers";
        break;
    case Update::typeUpdateRecentStickers:
        debug.nospace() << "classType: typeUpdateRecentStickers";
        break;
    case Update::typeUpdateConfig:
        debug.nospace() << "classType: typeUpdateConfig";
        break;
    case Update::typeUpdatePtsChanged:
        debug.nospace() << "classType: typeUpdatePtsChanged";
        break;
    case Update::typeUpdateChannelWebPage:
        debug.nospace() << "classType: typeUpdateChannelWebPage";
        debug.nospace() << ", channelId: " << item.channelId();
        debug.nospace() << ", webpage: " << item.webpage();
        debug.nospace() << ", pts: " << item.pts();
        debug.nospace() << ", ptsCount: " << item.ptsCount();
        break;
    case Update::typeUpdateDialogPinned:
        debug.nospace() << "classType: typeUpdateDialogPinned";
        debug.nospace() << ", flags: " << item.flags();
        debug.nospace() << ", peer: " << item.peer();
        break;
    case Update::typeUpdatePinnedDialogs:
        debug.nospace() << "classType: typeUpdatePinnedDialogs";
        debug.nospace() << ", flags: " << item.flags();
        debug.nospace() << ", orderVectorPeer: " << item.orderVectorPeer();
        break;
    case Update::typeUpdateBotWebhookJSON:
        debug.nospace() << "classType: typeUpdateBotWebhookJSON";
        debug.nospace() << ", dataJSON: " << item.dataJSON();
        break;
    case Update::typeUpdateBotWebhookJSONQuery:
        debug.nospace() << "classType: typeUpdateBotWebhookJSONQuery";
        debug.nospace() << ", queryId: " << item.queryId();
        debug.nospace() << ", dataJSON: " << item.dataJSON();
        debug.nospace() << ", timeout: " << item.timeout();
        break;
    case Update::typeUpdateBotShippingQuery:
        debug.nospace() << "classType: typeUpdateBotShippingQuery";
        debug.nospace() << ", queryId: " << item.queryId();
        debug.nospace() << ", userId: " << item.userId();
        debug.nospace() << ", payload: " << item.payload();
        debug.nospace() << ", shippingAddress: " << item.shippingAddress();
        break;
    case Update::typeUpdateBotPrecheckoutQuery:
        debug.nospace() << "classType: typeUpdateBotPrecheckoutQuery";
        debug.nospace() << ", flags: " << item.flags();
        debug.nospace() << ", queryId: " << item.queryId();
        debug.nospace() << ", userId: " << item.userId();
        debug.nospace() << ", payload: " << item.payload();
        debug.nospace() << ", info: " << item.info();
        debug.nospace() << ", shippingOptionId: " << item.shippingOptionId();
        debug.nospace() << ", currency: " << item.currency();
        debug.nospace() << ", totalAmount: " << item.totalAmount();
        break;
    case Update::typeUpdatePhoneCall:
        debug.nospace() << "classType: typeUpdatePhoneCall";
        debug.nospace() << ", phoneCall: " << item.phoneCall();
        break;
    case Update::typeUpdateLangPackTooLong:
        debug.nospace() << "classType: typeUpdateLangPackTooLong";
        break;
    case Update::typeUpdateLangPack:
        debug.nospace() << "classType: typeUpdateLangPack";
        debug.nospace() << ", difference: " << item.difference();
        break;
    }
    debug.nospace() << ")";
    return debug;
}
*/
