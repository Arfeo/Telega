// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "updatesstate.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

UpdatesState::UpdatesState(UpdatesStateClassType classType, InboundPkt *in) :
    m_date(0),
    m_pts(0),
    m_qts(0),
    m_seq(0),
    m_unreadCount(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

UpdatesState::UpdatesState(InboundPkt *in) :
    m_date(0),
    m_pts(0),
    m_qts(0),
    m_seq(0),
    m_unreadCount(0),
    m_classType(typeUpdatesState)
{
    fetch(in);
}

UpdatesState::UpdatesState(const UpdatesState &another) :
    TelegramTypeObject(),
    m_date(0),
    m_pts(0),
    m_qts(0),
    m_seq(0),
    m_unreadCount(0),
    m_classType(typeUpdatesState)
{
    operator=(another);
}

UpdatesState::UpdatesState(const Null &null) :
    TelegramTypeObject(null),
    m_date(0),
    m_pts(0),
    m_qts(0),
    m_seq(0),
    m_unreadCount(0),
    m_classType(typeUpdatesState)
{
}

UpdatesState::~UpdatesState() {

}

void UpdatesState::setDate(qint32 date) {
    m_date = date;
}

qint32 UpdatesState::date() const {
    return m_date;
}

void UpdatesState::setPts(qint32 pts) {
    m_pts = pts;
}

qint32 UpdatesState::pts() const {
    return m_pts;
}

void UpdatesState::setQts(qint32 qts) {
    m_qts = qts;
}

qint32 UpdatesState::qts() const {
    return m_qts;
}

void UpdatesState::setSeq(qint32 seq) {
    m_seq = seq;
}

qint32 UpdatesState::seq() const {
    return m_seq;
}

void UpdatesState::setUnreadCount(qint32 unreadCount) {
    m_unreadCount = unreadCount;
}

qint32 UpdatesState::unreadCount() const {
    return m_unreadCount;
}

bool UpdatesState::operator ==(const UpdatesState &b) const {
    return m_classType == b.m_classType &&
           m_date == b.m_date &&
           m_pts == b.m_pts &&
           m_qts == b.m_qts &&
           m_seq == b.m_seq &&
           m_unreadCount == b.m_unreadCount;
}

UpdatesState &UpdatesState::operator =(const UpdatesState &b) {
    m_classType = b.m_classType;
    m_date = b.m_date;
    m_pts = b.m_pts;
    m_qts = b.m_qts;
    m_seq = b.m_seq;
    m_unreadCount = b.m_unreadCount;
    setNull(b.isNull());
    return *this;
}

void UpdatesState::setClassType(UpdatesState::UpdatesStateClassType classType) {
    m_classType = classType;
}

UpdatesState::UpdatesStateClassType UpdatesState::classType() const {
    return m_classType;
}

bool UpdatesState::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeUpdatesState: {
        m_pts = in->fetchInt();
        m_qts = in->fetchInt();
        m_date = in->fetchInt();
        m_seq = in->fetchInt();
        m_unreadCount = in->fetchInt();
        m_classType = static_cast<UpdatesStateClassType>(x);
        return true;
    }
        break;

    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool UpdatesState::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeUpdatesState: {
        out->appendInt(m_pts);
        out->appendInt(m_qts);
        out->appendInt(m_date);
        out->appendInt(m_seq);
        out->appendInt(m_unreadCount);
        return true;
    }
        break;

    default:
        return false;
    }
}

QMap<QString, QVariant> UpdatesState::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeUpdatesState: {
        result["classType"] = "UpdatesState::typeUpdatesState";
        if( pts() ) result["pts"] = QString::number(pts());
        if( qts() ) result["qts"] = QString::number(qts());
        if( date() ) result["date"] = QString::number(date());
        if( seq() ) result["seq"] = QString::number(seq());
        if( unreadCount() ) result["unreadCount"] = QString::number(unreadCount());
        return result;
    }
        break;

    default:
        return result;
    }
}

UpdatesState UpdatesState::fromMap(const QMap<QString, QVariant> &map) {
    UpdatesState result;
    if(map.value("classType").toString() == "UpdatesState::typeUpdatesState") {
        result.setClassType(typeUpdatesState);
        QVariant _pts_var = map.value("pts");
        if( !_pts_var.isNull() ) {
            _pts_var.convert( QVariant::nameToType("qint32") );
            result.setPts( _pts_var.value<qint32>() );
        }

        QVariant _qts_var = map.value("qts");
        if( !_qts_var.isNull() ) {
            _qts_var.convert( QVariant::nameToType("qint32") );
            result.setQts( _qts_var.value<qint32>() );
        }

        QVariant _date_var = map.value("date");
        if( !_date_var.isNull() ) {
            _date_var.convert( QVariant::nameToType("qint32") );
            result.setDate( _date_var.value<qint32>() );
        }

        QVariant _seq_var = map.value("seq");
        if( !_seq_var.isNull() ) {
            _seq_var.convert( QVariant::nameToType("qint32") );
            result.setSeq( _seq_var.value<qint32>() );
        }

        QVariant _unreadCount_var = map.value("unreadCount");
        if( !_unreadCount_var.isNull() ) {
            _unreadCount_var.convert( QVariant::nameToType("qint32") );
            result.setUnreadCount( _unreadCount_var.value<qint32>() );
        }

        return result;
    }
    return result;
}

UpdatesState UpdatesState::fromJson(const QString &json) {
    return UpdatesState::fromMap(QJsonDocument::fromJson(json.toUtf8()).toVariant().toMap());
}

QByteArray UpdatesState::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const UpdatesState &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case UpdatesState::typeUpdatesState:
        stream << item.pts();
        stream << item.qts();
        stream << item.date();
        stream << item.seq();
        stream << item.unreadCount();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, UpdatesState &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<UpdatesState::UpdatesStateClassType>(type));
    switch(type) {
    case UpdatesState::typeUpdatesState: {
        qint32 m_pts;
        stream >> m_pts;
        item.setPts(m_pts);
        qint32 m_qts;
        stream >> m_qts;
        item.setQts(m_qts);
        qint32 m_date;
        stream >> m_date;
        item.setDate(m_date);
        qint32 m_seq;
        stream >> m_seq;
        item.setSeq(m_seq);
        qint32 m_unread_count;
        stream >> m_unread_count;
        item.setUnreadCount(m_unread_count);
    }
        break;
    }
    return stream;
}

/*QDebug operator<<(QDebug debug,  const UpdatesState &item) {
    QDebugStateSaver saver(debug);
    Q_UNUSED(saver)
    debug.nospace() << "Telegram.UpdatesState(";
    switch(item.classType()) {
    case UpdatesState::typeUpdatesState:
        debug.nospace() << "classType: typeUpdatesState";
        debug.nospace() << ", pts: " << item.pts();
        debug.nospace() << ", qts: " << item.qts();
        debug.nospace() << ", date: " << item.date();
        debug.nospace() << ", seq: " << item.seq();
        debug.nospace() << ", unreadCount: " << item.unreadCount();
        break;
    }
    debug.nospace() << ")";
    return debug;
}
*/
