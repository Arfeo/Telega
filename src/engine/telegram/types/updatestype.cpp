// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "updatestype.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

UpdatesType::UpdatesType(UpdatesTypeClassType classType, InboundPkt *in) :
    m_chatId(0),
    m_date(0),
    m_flags(0),
    m_fromId(0),
    m_id(0),
    m_pts(0),
    m_ptsCount(0),
    m_replyToMsgId(0),
    m_seq(0),
    m_seqStart(0),
    m_userId(0),
    m_viaBotId(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

UpdatesType::UpdatesType(InboundPkt *in) :
    m_chatId(0),
    m_date(0),
    m_flags(0),
    m_fromId(0),
    m_id(0),
    m_pts(0),
    m_ptsCount(0),
    m_replyToMsgId(0),
    m_seq(0),
    m_seqStart(0),
    m_userId(0),
    m_viaBotId(0),
    m_classType(typeUpdatesTooLong)
{
    fetch(in);
}

UpdatesType::UpdatesType(const UpdatesType &another) :
    TelegramTypeObject(),
    m_chatId(0),
    m_date(0),
    m_flags(0),
    m_fromId(0),
    m_id(0),
    m_pts(0),
    m_ptsCount(0),
    m_replyToMsgId(0),
    m_seq(0),
    m_seqStart(0),
    m_userId(0),
    m_viaBotId(0),
    m_classType(typeUpdatesTooLong)
{
    operator=(another);
}

UpdatesType::UpdatesType(const Null &null) :
    TelegramTypeObject(null),
    m_chatId(0),
    m_date(0),
    m_flags(0),
    m_fromId(0),
    m_id(0),
    m_pts(0),
    m_ptsCount(0),
    m_replyToMsgId(0),
    m_seq(0),
    m_seqStart(0),
    m_userId(0),
    m_viaBotId(0),
    m_classType(typeUpdatesTooLong)
{
}

UpdatesType::~UpdatesType() {

}

void UpdatesType::setChatId(qint32 chatId) {
    m_chatId = chatId;
}

qint32 UpdatesType::chatId() const {
    return m_chatId;
}

void UpdatesType::setChats(const QList<Chat> &chats) {
    m_chats = chats;
}

QList<Chat> UpdatesType::chats() const {
    return m_chats;
}

void UpdatesType::setDate(qint32 date) {
    m_date = date;
}

qint32 UpdatesType::date() const {
    return m_date;
}

void UpdatesType::setEntities(const QList<MessageEntity> &entities) {
    if(entities.length()) m_flags = (m_flags | (1<<7));
    else m_flags = (m_flags & ~(1<<7));
    m_entities = entities;
}

QList<MessageEntity> UpdatesType::entities() const {
    return m_entities;
}

void UpdatesType::setFlags(qint32 flags) {
    m_flags = flags;
}

qint32 UpdatesType::flags() const {
    return m_flags;
}

void UpdatesType::setFromId(qint32 fromId) {
    m_fromId = fromId;
}

qint32 UpdatesType::fromId() const {
    return m_fromId;
}

void UpdatesType::setFwdFrom(const MessageFwdHeader &fwdFrom) {
    if(!fwdFrom.isNull()) m_flags = (m_flags | (1<<2));
    else m_flags = (m_flags & ~(1<<2));
    m_fwdFrom = fwdFrom;
}

MessageFwdHeader UpdatesType::fwdFrom() const {
    return m_fwdFrom;
}

void UpdatesType::setId(qint32 id) {
    m_id = id;
}

qint32 UpdatesType::id() const {
    return m_id;
}

void UpdatesType::setMedia(const MessageMedia &media) {
    if(!media.isNull()) m_flags = (m_flags | (1<<9));
    else m_flags = (m_flags & ~(1<<9));
    m_media = media;
}

MessageMedia UpdatesType::media() const {
    return m_media;
}

void UpdatesType::setMediaUnread(bool mediaUnread) {
    if(mediaUnread) m_flags = (m_flags | (1<<5));
    else m_flags = (m_flags & ~(1<<5));
}

bool UpdatesType::mediaUnread() const {
    return (m_flags & 1<<5);
}

void UpdatesType::setMentioned(bool mentioned) {
    if(mentioned) m_flags = (m_flags | (1<<4));
    else m_flags = (m_flags & ~(1<<4));
}

bool UpdatesType::mentioned() const {
    return (m_flags & 1<<4);
}

void UpdatesType::setMessage(const QString &message) {
    m_message = message;
}

QString UpdatesType::message() const {
    return m_message;
}

void UpdatesType::setOut(bool out) {
    if(out) m_flags = (m_flags | (1<<1));
    else m_flags = (m_flags & ~(1<<1));
}

bool UpdatesType::out() const {
    return (m_flags & 1<<1);
}

void UpdatesType::setPts(qint32 pts) {
    m_pts = pts;
}

qint32 UpdatesType::pts() const {
    return m_pts;
}

void UpdatesType::setPtsCount(qint32 ptsCount) {
    m_ptsCount = ptsCount;
}

qint32 UpdatesType::ptsCount() const {
    return m_ptsCount;
}

void UpdatesType::setReplyToMsgId(qint32 replyToMsgId) {
    if(replyToMsgId) m_flags = (m_flags | (1<<3));
    else m_flags = (m_flags & ~(1<<3));
    m_replyToMsgId = replyToMsgId;
}

qint32 UpdatesType::replyToMsgId() const {
    return m_replyToMsgId;
}

void UpdatesType::setSeq(qint32 seq) {
    m_seq = seq;
}

qint32 UpdatesType::seq() const {
    return m_seq;
}

void UpdatesType::setSeqStart(qint32 seqStart) {
    m_seqStart = seqStart;
}

qint32 UpdatesType::seqStart() const {
    return m_seqStart;
}

void UpdatesType::setSilent(bool silent) {
    if(silent) m_flags = (m_flags | (1<<13));
    else m_flags = (m_flags & ~(1<<13));
}

bool UpdatesType::silent() const {
    return (m_flags & 1<<13);
}

void UpdatesType::setUpdate(const Update &update) {
    m_update = update;
}

Update UpdatesType::update() const {
    return m_update;
}

void UpdatesType::setUpdates(const QList<Update> &updates) {
    m_updates = updates;
}

QList<Update> UpdatesType::updates() const {
    return m_updates;
}

void UpdatesType::setUserId(qint32 userId) {
    m_userId = userId;
}

qint32 UpdatesType::userId() const {
    return m_userId;
}

void UpdatesType::setUsers(const QList<User> &users) {
    m_users = users;
}

QList<User> UpdatesType::users() const {
    return m_users;
}

void UpdatesType::setViaBotId(qint32 viaBotId) {
    if(viaBotId) m_flags = (m_flags | (1<<11));
    else m_flags = (m_flags & ~(1<<11));
    m_viaBotId = viaBotId;
}

qint32 UpdatesType::viaBotId() const {
    return m_viaBotId;
}

bool UpdatesType::operator ==(const UpdatesType &b) const {
    return m_classType == b.m_classType &&
           m_chatId == b.m_chatId &&
           m_chats == b.m_chats &&
           m_date == b.m_date &&
           m_entities == b.m_entities &&
           m_flags == b.m_flags &&
           m_fromId == b.m_fromId &&
           m_fwdFrom == b.m_fwdFrom &&
           m_id == b.m_id &&
           m_media == b.m_media &&
           m_message == b.m_message &&
           m_pts == b.m_pts &&
           m_ptsCount == b.m_ptsCount &&
           m_replyToMsgId == b.m_replyToMsgId &&
           m_seq == b.m_seq &&
           m_seqStart == b.m_seqStart &&
           m_update == b.m_update &&
           m_updates == b.m_updates &&
           m_userId == b.m_userId &&
           m_users == b.m_users &&
           m_viaBotId == b.m_viaBotId;
}

UpdatesType &UpdatesType::operator =(const UpdatesType &b) {
    m_classType = b.m_classType;
    m_chatId = b.m_chatId;
    m_chats = b.m_chats;
    m_date = b.m_date;
    m_entities = b.m_entities;
    m_flags = b.m_flags;
    m_fromId = b.m_fromId;
    m_fwdFrom = b.m_fwdFrom;
    m_id = b.m_id;
    m_media = b.m_media;
    m_message = b.m_message;
    m_pts = b.m_pts;
    m_ptsCount = b.m_ptsCount;
    m_replyToMsgId = b.m_replyToMsgId;
    m_seq = b.m_seq;
    m_seqStart = b.m_seqStart;
    m_update = b.m_update;
    m_updates = b.m_updates;
    m_userId = b.m_userId;
    m_users = b.m_users;
    m_viaBotId = b.m_viaBotId;
    setNull(b.isNull());
    return *this;
}

void UpdatesType::setClassType(UpdatesType::UpdatesTypeClassType classType) {
    m_classType = classType;
}

UpdatesType::UpdatesTypeClassType UpdatesType::classType() const {
    return m_classType;
}

bool UpdatesType::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeUpdatesTooLong: {
        m_classType = static_cast<UpdatesTypeClassType>(x);
        return true;
    }
        break;

    case typeUpdateShortMessage: {
        m_flags = in->fetchInt();
        m_id = in->fetchInt();
        m_userId = in->fetchInt();
        m_message = in->fetchQString();
        m_pts = in->fetchInt();
        m_ptsCount = in->fetchInt();
        m_date = in->fetchInt();
        if(m_flags & 1<<2) {
            m_fwdFrom.fetch(in);
        }
        if(m_flags & 1<<11) {
            m_viaBotId = in->fetchInt();
        }
        if(m_flags & 1<<3) {
            m_replyToMsgId = in->fetchInt();
        }
        if(m_flags & 1<<7) {
            if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
            qint32 m_entities_length = in->fetchInt();
            m_entities.clear();
            for (qint32 i = 0; i < m_entities_length; i++) {
                MessageEntity type;
                if(m_flags & 1<<7) {
                type.fetch(in);
            }
                m_entities.append(type);
            }
        }
        m_classType = static_cast<UpdatesTypeClassType>(x);
        return true;
    }
        break;

    case typeUpdateShortChatMessage: {
        m_flags = in->fetchInt();
        m_id = in->fetchInt();
        m_fromId = in->fetchInt();
        m_chatId = in->fetchInt();
        m_message = in->fetchQString();
        m_pts = in->fetchInt();
        m_ptsCount = in->fetchInt();
        m_date = in->fetchInt();
        if(m_flags & 1<<2) {
            m_fwdFrom.fetch(in);
        }
        if(m_flags & 1<<11) {
            m_viaBotId = in->fetchInt();
        }
        if(m_flags & 1<<3) {
            m_replyToMsgId = in->fetchInt();
        }
        if(m_flags & 1<<7) {
            if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
            qint32 m_entities_length = in->fetchInt();
            m_entities.clear();
            for (qint32 i = 0; i < m_entities_length; i++) {
                MessageEntity type;
                if(m_flags & 1<<7) {
                type.fetch(in);
            }
                m_entities.append(type);
            }
        }
        m_classType = static_cast<UpdatesTypeClassType>(x);
        return true;
    }
        break;

    case typeUpdateShort: {
        m_update.fetch(in);
        m_date = in->fetchInt();
        m_classType = static_cast<UpdatesTypeClassType>(x);
        return true;
    }
        break;

    case typeUpdatesCombined: {
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_updates_length = in->fetchInt();
        m_updates.clear();
        for (qint32 i = 0; i < m_updates_length; i++) {
            Update type;
            type.fetch(in);
            m_updates.append(type);
        }
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_users_length = in->fetchInt();
        m_users.clear();
        for (qint32 i = 0; i < m_users_length; i++) {
            User type;
            type.fetch(in);
            m_users.append(type);
        }
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_chats_length = in->fetchInt();
        m_chats.clear();
        for (qint32 i = 0; i < m_chats_length; i++) {
            Chat type;
            type.fetch(in);
            m_chats.append(type);
        }
        m_date = in->fetchInt();
        m_seqStart = in->fetchInt();
        m_seq = in->fetchInt();
        m_classType = static_cast<UpdatesTypeClassType>(x);
        return true;
    }
        break;

    case typeUpdates: {
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_updates_length = in->fetchInt();
        m_updates.clear();
        for (qint32 i = 0; i < m_updates_length; i++) {
            Update type;
            type.fetch(in);
            m_updates.append(type);
        }
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_users_length = in->fetchInt();
        m_users.clear();
        for (qint32 i = 0; i < m_users_length; i++) {
            User type;
            type.fetch(in);
            m_users.append(type);
        }
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_chats_length = in->fetchInt();
        m_chats.clear();
        for (qint32 i = 0; i < m_chats_length; i++) {
            Chat type;
            type.fetch(in);
            m_chats.append(type);
        }
        m_date = in->fetchInt();
        m_seq = in->fetchInt();
        m_classType = static_cast<UpdatesTypeClassType>(x);
        return true;
    }
        break;

    case typeUpdateShortSentMessage: {
        m_flags = in->fetchInt();
        m_id = in->fetchInt();
        m_pts = in->fetchInt();
        m_ptsCount = in->fetchInt();
        m_date = in->fetchInt();
        if(m_flags & 1<<9) {
            m_media.fetch(in);
        }
        if(m_flags & 1<<7) {
            if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
            qint32 m_entities_length = in->fetchInt();
            m_entities.clear();
            for (qint32 i = 0; i < m_entities_length; i++) {
                MessageEntity type;
                if(m_flags & 1<<7) {
                type.fetch(in);
            }
                m_entities.append(type);
            }
        }
        m_classType = static_cast<UpdatesTypeClassType>(x);
        return true;
    }
        break;

    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool UpdatesType::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeUpdatesTooLong: {
        return true;
    }
        break;

    case typeUpdateShortMessage: {
        out->appendInt(m_flags);
        out->appendInt(m_id);
        out->appendInt(m_userId);
        out->appendQString(m_message);
        out->appendInt(m_pts);
        out->appendInt(m_ptsCount);
        out->appendInt(m_date);
        if(m_flags & 1<<2) {
            m_fwdFrom.push(out);
        }
        if(m_flags & 1<<11) {
            out->appendInt(m_viaBotId);
        }
        if(m_flags & 1<<3) {
            out->appendInt(m_replyToMsgId);
        }
        if(m_flags & 1<<7) {
            out->appendInt(CoreTypes::typeVector);
            out->appendInt(m_entities.count());
            for (qint32 i = 0; i < m_entities.count(); i++) {
                m_entities[i].push(out);
            }
        }
        return true;
    }
        break;

    case typeUpdateShortChatMessage: {
        out->appendInt(m_flags);
        out->appendInt(m_id);
        out->appendInt(m_fromId);
        out->appendInt(m_chatId);
        out->appendQString(m_message);
        out->appendInt(m_pts);
        out->appendInt(m_ptsCount);
        out->appendInt(m_date);
        if(m_flags & 1<<2) {
            m_fwdFrom.push(out);
        }
        if(m_flags & 1<<11) {
            out->appendInt(m_viaBotId);
        }
        if(m_flags & 1<<3) {
            out->appendInt(m_replyToMsgId);
        }
        if(m_flags & 1<<7) {
            out->appendInt(CoreTypes::typeVector);
            out->appendInt(m_entities.count());
            for (qint32 i = 0; i < m_entities.count(); i++) {
                m_entities[i].push(out);
            }
        }
        return true;
    }
        break;

    case typeUpdateShort: {
        m_update.push(out);
        out->appendInt(m_date);
        return true;
    }
        break;

    case typeUpdatesCombined: {
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_updates.count());
        for (qint32 i = 0; i < m_updates.count(); i++) {
            m_updates[i].push(out);
        }
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_users.count());
        for (qint32 i = 0; i < m_users.count(); i++) {
            m_users[i].push(out);
        }
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_chats.count());
        for (qint32 i = 0; i < m_chats.count(); i++) {
            m_chats[i].push(out);
        }
        out->appendInt(m_date);
        out->appendInt(m_seqStart);
        out->appendInt(m_seq);
        return true;
    }
        break;

    case typeUpdates: {
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_updates.count());
        for (qint32 i = 0; i < m_updates.count(); i++) {
            m_updates[i].push(out);
        }
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_users.count());
        for (qint32 i = 0; i < m_users.count(); i++) {
            m_users[i].push(out);
        }
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_chats.count());
        for (qint32 i = 0; i < m_chats.count(); i++) {
            m_chats[i].push(out);
        }
        out->appendInt(m_date);
        out->appendInt(m_seq);
        return true;
    }
        break;

    case typeUpdateShortSentMessage: {
        out->appendInt(m_flags);
        out->appendInt(m_id);
        out->appendInt(m_pts);
        out->appendInt(m_ptsCount);
        out->appendInt(m_date);
        if(m_flags & 1<<9) {
            m_media.push(out);
        }
        if(m_flags & 1<<7) {
            out->appendInt(CoreTypes::typeVector);
            out->appendInt(m_entities.count());
            for (qint32 i = 0; i < m_entities.count(); i++) {
                m_entities[i].push(out);
            }
        }
        return true;
    }
        break;

    default:
        return false;
    }
}

QMap<QString, QVariant> UpdatesType::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeUpdatesTooLong: {
        result["classType"] = "UpdatesType::typeUpdatesTooLong";
        return result;
    }
        break;

    case typeUpdateShortMessage: {
        result["classType"] = "UpdatesType::typeUpdateShortMessage";
        if( out() ) result["out"] = QString::number(out());
        if( mentioned() ) result["mentioned"] = QString::number(mentioned());
        if( mediaUnread() ) result["mediaUnread"] = QString::number(mediaUnread());
        if( silent() ) result["silent"] = QString::number(silent());
        if( id() ) result["id"] = QString::number(id());
        if( userId() ) result["userId"] = QString::number(userId());
        if( !m_message.isEmpty() ) result["message"] = QVariant::fromValue<QString>(m_message);
        if( pts() ) result["pts"] = QString::number(pts());
        if( ptsCount() ) result["ptsCount"] = QString::number(ptsCount());
        if( date() ) result["date"] = QString::number(date());
        if( !m_fwdFrom.isNull() ) result["fwdFrom"] = m_fwdFrom.toMap();
        if( viaBotId() ) result["viaBotId"] = QString::number(viaBotId());
        if( replyToMsgId() ) result["replyToMsgId"] = QString::number(replyToMsgId());
        QList<QVariant> _entities;
        //for(const MessageEntity &m__type: m_entities)
        for(int i = 0; i < m_entities.size(); ++i) {
            const MessageEntity &m__type = m_entities[i];
            if( !m__type.isNull() ) _entities << m__type.toMap();
        }
        result["entities"] = _entities;
        return result;
    }
        break;

    case typeUpdateShortChatMessage: {
        result["classType"] = "UpdatesType::typeUpdateShortChatMessage";
        if( out() ) result["out"] = QString::number(out());
        if( mentioned() ) result["mentioned"] = QString::number(mentioned());
        if( mediaUnread() ) result["mediaUnread"] = QString::number(mediaUnread());
        if( silent() ) result["silent"] = QString::number(silent());
        if( id() ) result["id"] = QString::number(id());
        if( fromId() ) result["fromId"] = QString::number(fromId());
        if( chatId() ) result["chatId"] = QString::number(chatId());
        if( !m_message.isEmpty() ) result["message"] = QVariant::fromValue<QString>(m_message);
        if( pts() ) result["pts"] = QString::number(pts());
        if( ptsCount() ) result["ptsCount"] = QString::number(ptsCount());
        if( date() ) result["date"] = QString::number(date());
        if( !m_fwdFrom.isNull() ) result["fwdFrom"] = m_fwdFrom.toMap();
        if( viaBotId() ) result["viaBotId"] = QString::number(viaBotId());
        if( replyToMsgId() ) result["replyToMsgId"] = QString::number(replyToMsgId());
        QList<QVariant> _entities;
        //for(const MessageEntity &m__type: m_entities)
        for(int i = 0; i < m_entities.size(); ++i) {
            const MessageEntity &m__type = m_entities[i];
            if( !m__type.isNull() ) _entities << m__type.toMap();
        }
        result["entities"] = _entities;
        return result;
    }
        break;

    case typeUpdateShort: {
        result["classType"] = "UpdatesType::typeUpdateShort";
        if( !m_update.isNull() ) result["update"] = m_update.toMap();
        if( date() ) result["date"] = QString::number(date());
        return result;
    }
        break;

    case typeUpdatesCombined: {
        result["classType"] = "UpdatesType::typeUpdatesCombined";
        QList<QVariant> _updates;
        //for(const Update &m__type: m_updates)
        for(int i = 0; i < m_updates.size(); ++i) {
            const Update &m__type = m_updates[i];
            if( !m__type.isNull() ) _updates << m__type.toMap();
        }
        result["updates"] = _updates;
        QList<QVariant> _users;
        //for(const User &m__type: m_users)
        for(int i = 0; i < m_users.size(); ++i) {
            const User &m__type = m_users[i];
            if( !m__type.isNull() ) _users << m__type.toMap();
        }
        result["users"] = _users;
        QList<QVariant> _chats;
        //for(const Chat &m__type: m_chats)
        for(int i = 0; i < m_chats.size(); ++i) {
            const Chat &m__type = m_chats[i];
            if( !m__type.isNull() ) _chats << m__type.toMap();
        }
        result["chats"] = _chats;
        if( date() ) result["date"] = QString::number(date());
        if( seqStart() ) result["seqStart"] = QString::number(seqStart());
        if( seq() ) result["seq"] = QString::number(seq());
        return result;
    }
        break;

    case typeUpdates: {
        result["classType"] = "UpdatesType::typeUpdates";
        QList<QVariant> _updates;
        //for(const Update &m__type: m_updates)
        for(int i = 0; i < m_updates.size(); ++i) {
            const Update &m__type = m_updates[i];
            if( !m__type.isNull() ) _updates << m__type.toMap();
        }
        result["updates"] = _updates;
        QList<QVariant> _users;
        //for(const User &m__type: m_users)
        for(int i = 0; i < m_users.size(); ++i) {
            const User &m__type = m_users[i];
            if( !m__type.isNull() ) _users << m__type.toMap();
        }
        result["users"] = _users;
        QList<QVariant> _chats;
        //for(const Chat &m__type: m_chats)
        for(int i = 0; i < m_chats.size(); ++i) {
            const Chat &m__type = m_chats[i];
            if( !m__type.isNull() ) _chats << m__type.toMap();
        }
        result["chats"] = _chats;
        if( date() ) result["date"] = QString::number(date());
        if( seq() ) result["seq"] = QString::number(seq());
        return result;
    }
        break;

    case typeUpdateShortSentMessage: {
        result["classType"] = "UpdatesType::typeUpdateShortSentMessage";
        if( out() ) result["out"] = QString::number(out());
        if( id() ) result["id"] = QString::number(id());
        if( pts() ) result["pts"] = QString::number(pts());
        if( ptsCount() ) result["ptsCount"] = QString::number(ptsCount());
        if( date() ) result["date"] = QString::number(date());
        if( !m_media.isNull() ) result["media"] = m_media.toMap();
        QList<QVariant> _entities;
        //for(const MessageEntity &m__type: m_entities)
        for(int i = 0; i < m_entities.size(); ++i) {
            const MessageEntity &m__type = m_entities[i];
            if( !m__type.isNull() ) _entities << m__type.toMap();
        }
        result["entities"] = _entities;
        return result;
    }
        break;

    default:
        return result;
    }
}

UpdatesType UpdatesType::fromMap(const QMap<QString, QVariant> &map) {
    UpdatesType result;
    if(map.value("classType").toString() == "UpdatesType::typeUpdatesTooLong") {
        result.setClassType(typeUpdatesTooLong);
        return result;
    }
    if(map.value("classType").toString() == "UpdatesType::typeUpdateShortMessage") {
        result.setClassType(typeUpdateShortMessage);
        QVariant _out_var = map.value("out");
        if( !_out_var.isNull() ) {
            _out_var.convert( QVariant::nameToType("bool") );
            result.setOut( _out_var.value<bool>() );
        }

        QVariant _mentioned_var = map.value("mentioned");
        if( !_mentioned_var.isNull() ) {
            _mentioned_var.convert( QVariant::nameToType("bool") );
            result.setMentioned( _mentioned_var.value<bool>() );
        }

        QVariant _mediaUnread_var = map.value("mediaUnread");
        if( !_mediaUnread_var.isNull() ) {
            _mediaUnread_var.convert( QVariant::nameToType("bool") );
            result.setMediaUnread( _mediaUnread_var.value<bool>() );
        }

        QVariant _silent_var = map.value("silent");
        if( !_silent_var.isNull() ) {
            _silent_var.convert( QVariant::nameToType("bool") );
            result.setSilent( _silent_var.value<bool>() );
        }

        QVariant _id_var = map.value("id");
        if( !_id_var.isNull() ) {
            _id_var.convert( QVariant::nameToType("qint32") );
            result.setId( _id_var.value<qint32>() );
        }

        QVariant _userId_var = map.value("userId");
        if( !_userId_var.isNull() ) {
            _userId_var.convert( QVariant::nameToType("qint32") );
            result.setUserId( _userId_var.value<qint32>() );
        }

        QVariant _message_var = map.value("message");
        if( !_message_var.isNull() ) {
            _message_var.convert( QVariant::nameToType("QString") );
            result.setMessage( _message_var.value<QString>() );
        }

        QVariant _pts_var = map.value("pts");
        if( !_pts_var.isNull() ) {
            _pts_var.convert( QVariant::nameToType("qint32") );
            result.setPts( _pts_var.value<qint32>() );
        }

        QVariant _ptsCount_var = map.value("ptsCount");
        if( !_ptsCount_var.isNull() ) {
            _ptsCount_var.convert( QVariant::nameToType("qint32") );
            result.setPtsCount( _ptsCount_var.value<qint32>() );
        }

        QVariant _date_var = map.value("date");
        if( !_date_var.isNull() ) {
            _date_var.convert( QVariant::nameToType("qint32") );
            result.setDate( _date_var.value<qint32>() );
        }

        QVariant _fwdFrom_var = map.value("fwdFrom");
        if( !_fwdFrom_var.isNull() )
            result.setFwdFrom( MessageFwdHeader::fromMap(_fwdFrom_var.toMap()) );

        QVariant _viaBotId_var = map.value("viaBotId");
        if( !_viaBotId_var.isNull() ) {
            _viaBotId_var.convert( QVariant::nameToType("qint32") );
            result.setViaBotId( _viaBotId_var.value<qint32>() );
        }

        QVariant _replyToMsgId_var = map.value("replyToMsgId");
        if( !_replyToMsgId_var.isNull() ) {
            _replyToMsgId_var.convert( QVariant::nameToType("qint32") );
            result.setReplyToMsgId( _replyToMsgId_var.value<qint32>() );
        }

        QList<QVariant> map_entities = map["entities"].toList();
        QList<MessageEntity> _entities;
        //for(const QVariant &var: map_entities)
        for(int i = 0; i < map_entities.size(); ++i) {
            const QVariant &var = map_entities[i];
            _entities << MessageEntity::fromMap(var.toMap());
        }
        result.setEntities(_entities);
        return result;
    }
    if(map.value("classType").toString() == "UpdatesType::typeUpdateShortChatMessage") {
        result.setClassType(typeUpdateShortChatMessage);
        QVariant _out_var = map.value("out");
        if( !_out_var.isNull() ) {
            _out_var.convert( QVariant::nameToType("bool") );
            result.setOut( _out_var.value<bool>() );
        }

        QVariant _mentioned_var = map.value("mentioned");
        if( !_mentioned_var.isNull() ) {
            _mentioned_var.convert( QVariant::nameToType("bool") );
            result.setMentioned( _mentioned_var.value<bool>() );
        }

        QVariant _mediaUnread_var = map.value("mediaUnread");
        if( !_mediaUnread_var.isNull() ) {
            _mediaUnread_var.convert( QVariant::nameToType("bool") );
            result.setMediaUnread( _mediaUnread_var.value<bool>() );
        }

        QVariant _silent_var = map.value("silent");
        if( !_silent_var.isNull() ) {
            _silent_var.convert( QVariant::nameToType("bool") );
            result.setSilent( _silent_var.value<bool>() );
        }

        QVariant _id_var = map.value("id");
        if( !_id_var.isNull() ) {
            _id_var.convert( QVariant::nameToType("qint32") );
            result.setId( _id_var.value<qint32>() );
        }

        QVariant _fromId_var = map.value("fromId");
        if( !_fromId_var.isNull() ) {
            _fromId_var.convert( QVariant::nameToType("qint32") );
            result.setFromId( _fromId_var.value<qint32>() );
        }

        QVariant _chatId_var = map.value("chatId");
        if( !_chatId_var.isNull() ) {
            _chatId_var.convert( QVariant::nameToType("qint32") );
            result.setChatId( _chatId_var.value<qint32>() );
        }

        QVariant _message_var = map.value("message");
        if( !_message_var.isNull() ) {
            _message_var.convert( QVariant::nameToType("QString") );
            result.setMessage( _message_var.value<QString>() );
        }

        QVariant _pts_var = map.value("pts");
        if( !_pts_var.isNull() ) {
            _pts_var.convert( QVariant::nameToType("qint32") );
            result.setPts( _pts_var.value<qint32>() );
        }

        QVariant _ptsCount_var = map.value("ptsCount");
        if( !_ptsCount_var.isNull() ) {
            _ptsCount_var.convert( QVariant::nameToType("qint32") );
            result.setPtsCount( _ptsCount_var.value<qint32>() );
        }

        QVariant _date_var = map.value("date");
        if( !_date_var.isNull() ) {
            _date_var.convert( QVariant::nameToType("qint32") );
            result.setDate( _date_var.value<qint32>() );
        }

        QVariant _fwdFrom_var = map.value("fwdFrom");
        if( !_fwdFrom_var.isNull() )
            result.setFwdFrom( MessageFwdHeader::fromMap(_fwdFrom_var.toMap()) );

        QVariant _viaBotId_var = map.value("viaBotId");
        if( !_viaBotId_var.isNull() ) {
            _viaBotId_var.convert( QVariant::nameToType("qint32") );
            result.setViaBotId( _viaBotId_var.value<qint32>() );
        }

        QVariant _replyToMsgId_var = map.value("replyToMsgId");
        if( !_replyToMsgId_var.isNull() ) {
            _replyToMsgId_var.convert( QVariant::nameToType("qint32") );
            result.setReplyToMsgId( _replyToMsgId_var.value<qint32>() );
        }

        QList<QVariant> map_entities = map["entities"].toList();
        QList<MessageEntity> _entities;
        //for(const QVariant &var: map_entities)
        for(int i = 0; i < map_entities.size(); ++i) {
            const QVariant &var = map_entities[i];
            _entities << MessageEntity::fromMap(var.toMap());
        }
        result.setEntities(_entities);
        return result;
    }
    if(map.value("classType").toString() == "UpdatesType::typeUpdateShort") {
        result.setClassType(typeUpdateShort);
        QVariant _update_var = map.value("update");
        if( !_update_var.isNull() )
            result.setUpdate( Update::fromMap(_update_var.toMap()) );

        QVariant _date_var = map.value("date");
        if( !_date_var.isNull() ) {
            _date_var.convert( QVariant::nameToType("qint32") );
            result.setDate( _date_var.value<qint32>() );
        }

        return result;
    }
    if(map.value("classType").toString() == "UpdatesType::typeUpdatesCombined") {
        result.setClassType(typeUpdatesCombined);
        QList<QVariant> map_updates = map["updates"].toList();
        QList<Update> _updates;
        //for(const QVariant &var: map_updates)
        for(int i = 0; i < map_updates.size(); ++i) {
            const QVariant &var = map_updates[i];
            _updates << Update::fromMap(var.toMap());
        }
        result.setUpdates(_updates);
        QList<QVariant> map_users = map["users"].toList();
        QList<User> _users;
        //for(const QVariant &var: map_users)
        for(int i = 0; i < map_users.size(); ++i) {
            const QVariant &var = map_users[i];
            _users << User::fromMap(var.toMap());
        }
        result.setUsers(_users);
        QList<QVariant> map_chats = map["chats"].toList();
        QList<Chat> _chats;
        //for(const QVariant &var: map_chats)
        for(int i = 0; i < map_chats.size(); ++i) {
            const QVariant &var = map_chats[i];
            _chats << Chat::fromMap(var.toMap());
        }
        result.setChats(_chats);
        QVariant _date_var = map.value("date");
        if( !_date_var.isNull() ) {
            _date_var.convert( QVariant::nameToType("qint32") );
            result.setDate( _date_var.value<qint32>() );
        }

        QVariant _seqStart_var = map.value("seqStart");
        if( !_seqStart_var.isNull() ) {
            _seqStart_var.convert( QVariant::nameToType("qint32") );
            result.setSeqStart( _seqStart_var.value<qint32>() );
        }

        QVariant _seq_var = map.value("seq");
        if( !_seq_var.isNull() ) {
            _seq_var.convert( QVariant::nameToType("qint32") );
            result.setSeq( _seq_var.value<qint32>() );
        }

        return result;
    }
    if(map.value("classType").toString() == "UpdatesType::typeUpdates") {
        result.setClassType(typeUpdates);
        QList<QVariant> map_updates = map["updates"].toList();
        QList<Update> _updates;
        //for(const QVariant &var: map_updates)
        for(int i = 0; i < map_updates.size(); ++i) {
            const QVariant &var = map_updates[i];
            _updates << Update::fromMap(var.toMap());
        }
        result.setUpdates(_updates);
        QList<QVariant> map_users = map["users"].toList();
        QList<User> _users;
        //for(const QVariant &var: map_users)
        for(int i = 0; i < map_users.size(); ++i) {
            const QVariant &var = map_users[i];
            _users << User::fromMap(var.toMap());
        }
        result.setUsers(_users);
        QList<QVariant> map_chats = map["chats"].toList();
        QList<Chat> _chats;
        //for(const QVariant &var: map_chats)
        for(int i = 0; i < map_chats.size(); ++i) {
            const QVariant &var = map_chats[i];
            _chats << Chat::fromMap(var.toMap());
        }
        result.setChats(_chats);
        QVariant _date_var = map.value("date");
        if( !_date_var.isNull() ) {
            _date_var.convert( QVariant::nameToType("qint32") );
            result.setDate( _date_var.value<qint32>() );
        }

        QVariant _seq_var = map.value("seq");
        if( !_seq_var.isNull() ) {
            _seq_var.convert( QVariant::nameToType("qint32") );
            result.setSeq( _seq_var.value<qint32>() );
        }

        return result;
    }
    if(map.value("classType").toString() == "UpdatesType::typeUpdateShortSentMessage") {
        result.setClassType(typeUpdateShortSentMessage);
        QVariant _out_var = map.value("out");
        if( !_out_var.isNull() ) {
            _out_var.convert( QVariant::nameToType("bool") );
            result.setOut( _out_var.value<bool>() );
        }

        QVariant _id_var = map.value("id");
        if( !_id_var.isNull() ) {
            _id_var.convert( QVariant::nameToType("qint32") );
            result.setId( _id_var.value<qint32>() );
        }

        QVariant _pts_var = map.value("pts");
        if( !_pts_var.isNull() ) {
            _pts_var.convert( QVariant::nameToType("qint32") );
            result.setPts( _pts_var.value<qint32>() );
        }

        QVariant _ptsCount_var = map.value("ptsCount");
        if( !_ptsCount_var.isNull() ) {
            _ptsCount_var.convert( QVariant::nameToType("qint32") );
            result.setPtsCount( _ptsCount_var.value<qint32>() );
        }

        QVariant _date_var = map.value("date");
        if( !_date_var.isNull() ) {
            _date_var.convert( QVariant::nameToType("qint32") );
            result.setDate( _date_var.value<qint32>() );
        }

        QVariant _media_var = map.value("media");
        if( !_media_var.isNull() )
            result.setMedia( MessageMedia::fromMap(_media_var.toMap()) );

        QList<QVariant> map_entities = map["entities"].toList();
        QList<MessageEntity> _entities;
        //for(const QVariant &var: map_entities)
        for(int i = 0; i < map_entities.size(); ++i) {
            const QVariant &var = map_entities[i];
            _entities << MessageEntity::fromMap(var.toMap());
        }
        result.setEntities(_entities);
        return result;
    }
    return result;
}

UpdatesType UpdatesType::fromJson(const QString &json) {
    return UpdatesType::fromMap(QJsonDocument::fromJson(json.toUtf8()).toVariant().toMap());
}

QByteArray UpdatesType::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const UpdatesType &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case UpdatesType::typeUpdatesTooLong:

        break;
    case UpdatesType::typeUpdateShortMessage:
        stream << item.flags();
        stream << item.id();
        stream << item.userId();
        stream << item.message();
        stream << item.pts();
        stream << item.ptsCount();
        stream << item.date();
        stream << item.fwdFrom();
        stream << item.viaBotId();
        stream << item.replyToMsgId();
        stream << item.entities();
        break;
    case UpdatesType::typeUpdateShortChatMessage:
        stream << item.flags();
        stream << item.id();
        stream << item.fromId();
        stream << item.chatId();
        stream << item.message();
        stream << item.pts();
        stream << item.ptsCount();
        stream << item.date();
        stream << item.fwdFrom();
        stream << item.viaBotId();
        stream << item.replyToMsgId();
        stream << item.entities();
        break;
    case UpdatesType::typeUpdateShort:
        stream << item.update();
        stream << item.date();
        break;
    case UpdatesType::typeUpdatesCombined:
        stream << item.updates();
        stream << item.users();
        stream << item.chats();
        stream << item.date();
        stream << item.seqStart();
        stream << item.seq();
        break;
    case UpdatesType::typeUpdates:
        stream << item.updates();
        stream << item.users();
        stream << item.chats();
        stream << item.date();
        stream << item.seq();
        break;
    case UpdatesType::typeUpdateShortSentMessage:
        stream << item.flags();
        stream << item.id();
        stream << item.pts();
        stream << item.ptsCount();
        stream << item.date();
        stream << item.media();
        stream << item.entities();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, UpdatesType &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<UpdatesType::UpdatesTypeClassType>(type));
    switch(type) {
    case UpdatesType::typeUpdatesTooLong: {

    }
        break;
    case UpdatesType::typeUpdateShortMessage: {
        qint32 m_flags;
        stream >> m_flags;
        item.setFlags(m_flags);
        qint32 m_id;
        stream >> m_id;
        item.setId(m_id);
        qint32 m_user_id;
        stream >> m_user_id;
        item.setUserId(m_user_id);
        QString m_message;
        stream >> m_message;
        item.setMessage(m_message);
        qint32 m_pts;
        stream >> m_pts;
        item.setPts(m_pts);
        qint32 m_pts_count;
        stream >> m_pts_count;
        item.setPtsCount(m_pts_count);
        qint32 m_date;
        stream >> m_date;
        item.setDate(m_date);
        MessageFwdHeader m_fwd_from;
        stream >> m_fwd_from;
        item.setFwdFrom(m_fwd_from);
        qint32 m_via_bot_id;
        stream >> m_via_bot_id;
        item.setViaBotId(m_via_bot_id);
        qint32 m_reply_to_msg_id;
        stream >> m_reply_to_msg_id;
        item.setReplyToMsgId(m_reply_to_msg_id);
        QList<MessageEntity> m_entities;
        stream >> m_entities;
        item.setEntities(m_entities);
    }
        break;
    case UpdatesType::typeUpdateShortChatMessage: {
        qint32 m_flags;
        stream >> m_flags;
        item.setFlags(m_flags);
        qint32 m_id;
        stream >> m_id;
        item.setId(m_id);
        qint32 m_from_id;
        stream >> m_from_id;
        item.setFromId(m_from_id);
        qint32 m_chat_id;
        stream >> m_chat_id;
        item.setChatId(m_chat_id);
        QString m_message;
        stream >> m_message;
        item.setMessage(m_message);
        qint32 m_pts;
        stream >> m_pts;
        item.setPts(m_pts);
        qint32 m_pts_count;
        stream >> m_pts_count;
        item.setPtsCount(m_pts_count);
        qint32 m_date;
        stream >> m_date;
        item.setDate(m_date);
        MessageFwdHeader m_fwd_from;
        stream >> m_fwd_from;
        item.setFwdFrom(m_fwd_from);
        qint32 m_via_bot_id;
        stream >> m_via_bot_id;
        item.setViaBotId(m_via_bot_id);
        qint32 m_reply_to_msg_id;
        stream >> m_reply_to_msg_id;
        item.setReplyToMsgId(m_reply_to_msg_id);
        QList<MessageEntity> m_entities;
        stream >> m_entities;
        item.setEntities(m_entities);
    }
        break;
    case UpdatesType::typeUpdateShort: {
        Update m_update;
        stream >> m_update;
        item.setUpdate(m_update);
        qint32 m_date;
        stream >> m_date;
        item.setDate(m_date);
    }
        break;
    case UpdatesType::typeUpdatesCombined: {
        QList<Update> m_updates;
        stream >> m_updates;
        item.setUpdates(m_updates);
        QList<User> m_users;
        stream >> m_users;
        item.setUsers(m_users);
        QList<Chat> m_chats;
        stream >> m_chats;
        item.setChats(m_chats);
        qint32 m_date;
        stream >> m_date;
        item.setDate(m_date);
        qint32 m_seq_start;
        stream >> m_seq_start;
        item.setSeqStart(m_seq_start);
        qint32 m_seq;
        stream >> m_seq;
        item.setSeq(m_seq);
    }
        break;
    case UpdatesType::typeUpdates: {
        QList<Update> m_updates;
        stream >> m_updates;
        item.setUpdates(m_updates);
        QList<User> m_users;
        stream >> m_users;
        item.setUsers(m_users);
        QList<Chat> m_chats;
        stream >> m_chats;
        item.setChats(m_chats);
        qint32 m_date;
        stream >> m_date;
        item.setDate(m_date);
        qint32 m_seq;
        stream >> m_seq;
        item.setSeq(m_seq);
    }
        break;
    case UpdatesType::typeUpdateShortSentMessage: {
        qint32 m_flags;
        stream >> m_flags;
        item.setFlags(m_flags);
        qint32 m_id;
        stream >> m_id;
        item.setId(m_id);
        qint32 m_pts;
        stream >> m_pts;
        item.setPts(m_pts);
        qint32 m_pts_count;
        stream >> m_pts_count;
        item.setPtsCount(m_pts_count);
        qint32 m_date;
        stream >> m_date;
        item.setDate(m_date);
        MessageMedia m_media;
        stream >> m_media;
        item.setMedia(m_media);
        QList<MessageEntity> m_entities;
        stream >> m_entities;
        item.setEntities(m_entities);
    }
        break;
    }
    return stream;
}

/*QDebug operator<<(QDebug debug,  const UpdatesType &item) {
    QDebugStateSaver saver(debug);
    Q_UNUSED(saver)
    debug.nospace() << "Telegram.UpdatesType(";
    switch(item.classType()) {
    case UpdatesType::typeUpdatesTooLong:
        debug.nospace() << "classType: typeUpdatesTooLong";
        break;
    case UpdatesType::typeUpdateShortMessage:
        debug.nospace() << "classType: typeUpdateShortMessage";
        debug.nospace() << ", flags: " << item.flags();
        debug.nospace() << ", id: " << item.id();
        debug.nospace() << ", userId: " << item.userId();
        debug.nospace() << ", message: " << item.message();
        debug.nospace() << ", pts: " << item.pts();
        debug.nospace() << ", ptsCount: " << item.ptsCount();
        debug.nospace() << ", date: " << item.date();
        debug.nospace() << ", fwdFrom: " << item.fwdFrom();
        debug.nospace() << ", viaBotId: " << item.viaBotId();
        debug.nospace() << ", replyToMsgId: " << item.replyToMsgId();
        debug.nospace() << ", entities: " << item.entities();
        break;
    case UpdatesType::typeUpdateShortChatMessage:
        debug.nospace() << "classType: typeUpdateShortChatMessage";
        debug.nospace() << ", flags: " << item.flags();
        debug.nospace() << ", id: " << item.id();
        debug.nospace() << ", fromId: " << item.fromId();
        debug.nospace() << ", chatId: " << item.chatId();
        debug.nospace() << ", message: " << item.message();
        debug.nospace() << ", pts: " << item.pts();
        debug.nospace() << ", ptsCount: " << item.ptsCount();
        debug.nospace() << ", date: " << item.date();
        debug.nospace() << ", fwdFrom: " << item.fwdFrom();
        debug.nospace() << ", viaBotId: " << item.viaBotId();
        debug.nospace() << ", replyToMsgId: " << item.replyToMsgId();
        debug.nospace() << ", entities: " << item.entities();
        break;
    case UpdatesType::typeUpdateShort:
        debug.nospace() << "classType: typeUpdateShort";
        debug.nospace() << ", update: " << item.update();
        debug.nospace() << ", date: " << item.date();
        break;
    case UpdatesType::typeUpdatesCombined:
        debug.nospace() << "classType: typeUpdatesCombined";
        debug.nospace() << ", updates: " << item.updates();
        debug.nospace() << ", users: " << item.users();
        debug.nospace() << ", chats: " << item.chats();
        debug.nospace() << ", date: " << item.date();
        debug.nospace() << ", seqStart: " << item.seqStart();
        debug.nospace() << ", seq: " << item.seq();
        break;
    case UpdatesType::typeUpdates:
        debug.nospace() << "classType: typeUpdates";
        debug.nospace() << ", updates: " << item.updates();
        debug.nospace() << ", users: " << item.users();
        debug.nospace() << ", chats: " << item.chats();
        debug.nospace() << ", date: " << item.date();
        debug.nospace() << ", seq: " << item.seq();
        break;
    case UpdatesType::typeUpdateShortSentMessage:
        debug.nospace() << "classType: typeUpdateShortSentMessage";
        debug.nospace() << ", flags: " << item.flags();
        debug.nospace() << ", id: " << item.id();
        debug.nospace() << ", pts: " << item.pts();
        debug.nospace() << ", ptsCount: " << item.ptsCount();
        debug.nospace() << ", date: " << item.date();
        debug.nospace() << ", media: " << item.media();
        debug.nospace() << ", entities: " << item.entities();
        break;
    }
    debug.nospace() << ")";
    return debug;
}
*/
