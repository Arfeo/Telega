// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "uploadcdnfile.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

UploadCdnFile::UploadCdnFile(UploadCdnFileClassType classType, InboundPkt *in) :
    m_classType(classType)
{
    if(in) fetch(in);
}

UploadCdnFile::UploadCdnFile(InboundPkt *in) :
    m_classType(typeUploadCdnFileReuploadNeeded)
{
    fetch(in);
}

UploadCdnFile::UploadCdnFile(const UploadCdnFile &another) :
    TelegramTypeObject(),
    m_classType(typeUploadCdnFileReuploadNeeded)
{
    operator=(another);
}

UploadCdnFile::UploadCdnFile(const Null &null) :
    TelegramTypeObject(null),
    m_classType(typeUploadCdnFileReuploadNeeded)
{
}

UploadCdnFile::~UploadCdnFile() {
    
}

void UploadCdnFile::setBytes(const QByteArray &bytes) {
    m_bytes = bytes;
}

QByteArray UploadCdnFile::bytes() const {
    return m_bytes;
}

void UploadCdnFile::setRequestToken(const QByteArray &requestToken) {
    m_requestToken = requestToken;
}

QByteArray UploadCdnFile::requestToken() const {
    return m_requestToken;
}

bool UploadCdnFile::operator ==(const UploadCdnFile &b) const {
    return m_classType == b.m_classType &&
           m_bytes == b.m_bytes &&
           m_requestToken == b.m_requestToken;
}

UploadCdnFile &UploadCdnFile::operator =(const UploadCdnFile &b) {
    m_classType = b.m_classType;
    m_bytes = b.m_bytes;
    m_requestToken = b.m_requestToken;
    setNull(b.isNull());
    return *this;
}

void UploadCdnFile::setClassType(UploadCdnFile::UploadCdnFileClassType classType) {
    m_classType = classType;
}

UploadCdnFile::UploadCdnFileClassType UploadCdnFile::classType() const {
    return m_classType;
}

bool UploadCdnFile::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeUploadCdnFileReuploadNeeded: {
        m_requestToken = in->fetchBytes();
        m_classType = static_cast<UploadCdnFileClassType>(x);
        return true;
    }
        break;
    
    case typeUploadCdnFile: {
        m_bytes = in->fetchBytes();
        m_classType = static_cast<UploadCdnFileClassType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool UploadCdnFile::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeUploadCdnFileReuploadNeeded: {
        out->appendBytes(m_requestToken);
        return true;
    }
        break;
    
    case typeUploadCdnFile: {
        out->appendBytes(m_bytes);
        return true;
    }
        break;
    
    default:
        return false;
    }
}

QMap<QString, QVariant> UploadCdnFile::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeUploadCdnFileReuploadNeeded: {
        result["classType"] = "UploadCdnFile::typeUploadCdnFileReuploadNeeded";
        if( !m_requestToken.isEmpty() ) result["requestToken"] = QVariant::fromValue<QByteArray>(m_requestToken);
        return result;
    }
        break;
    
    case typeUploadCdnFile: {
        result["classType"] = "UploadCdnFile::typeUploadCdnFile";
        if( !m_bytes.isEmpty() ) result["bytes"] = QVariant::fromValue<QByteArray>(m_bytes);
        return result;
    }
        break;
    
    default:
        return result;
    }
}

UploadCdnFile UploadCdnFile::fromMap(const QMap<QString, QVariant> &map) {
    UploadCdnFile result;
    if(map.value("classType").toString() == "UploadCdnFile::typeUploadCdnFileReuploadNeeded") {
        result.setClassType(typeUploadCdnFileReuploadNeeded);
        QVariant _requestToken_var = map.value("requestToken");
        if( !_requestToken_var.isNull() ) {
            _requestToken_var.convert( QVariant::nameToType("QByteArray") );
            result.setRequestToken( _requestToken_var.value<QByteArray>() );
        }
        
        return result;
    }
    if(map.value("classType").toString() == "UploadCdnFile::typeUploadCdnFile") {
        result.setClassType(typeUploadCdnFile);
        QVariant _bytes_var = map.value("bytes");
        if( !_bytes_var.isNull() ) {
            _bytes_var.convert( QVariant::nameToType("QByteArray") );
            result.setBytes( _bytes_var.value<QByteArray>() );
        }
        
        return result;
    }
    return result;
}

UploadCdnFile UploadCdnFile::fromJson(const QString &json) {
    return UploadCdnFile::fromMap(QJsonDocument::fromJson(json.toUtf8()).toVariant().toMap());
}

QByteArray UploadCdnFile::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const UploadCdnFile &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case UploadCdnFile::typeUploadCdnFileReuploadNeeded:
        stream << item.requestToken();
        break;
    case UploadCdnFile::typeUploadCdnFile:
        stream << item.bytes();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, UploadCdnFile &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<UploadCdnFile::UploadCdnFileClassType>(type));
    switch(type) {
    case UploadCdnFile::typeUploadCdnFileReuploadNeeded: {
        QByteArray m_request_token;
        stream >> m_request_token;
        item.setRequestToken(m_request_token);
    }
        break;
    case UploadCdnFile::typeUploadCdnFile: {
        QByteArray m_bytes;
        stream >> m_bytes;
        item.setBytes(m_bytes);
    }
        break;
    }
    return stream;
}

QDebug operator<<(QDebug debug,  const UploadCdnFile &item) {
    QDebugStateSaver saver(debug);
    Q_UNUSED(saver)
    debug.nospace() << "Telegram.UploadCdnFile(";
    switch(item.classType()) {
    case UploadCdnFile::typeUploadCdnFileReuploadNeeded:
        debug.nospace() << "classType: typeUploadCdnFileReuploadNeeded";
        debug.nospace() << ", requestToken: " << item.requestToken();
        break;
    case UploadCdnFile::typeUploadCdnFile:
        debug.nospace() << "classType: typeUploadCdnFile";
        debug.nospace() << ", bytes: " << item.bytes();
        break;
    }
    debug.nospace() << ")";
    return debug;
}

