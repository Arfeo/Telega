// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "uploadfile.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

UploadFile::UploadFile(UploadFileClassType classType, InboundPkt *in) :
    m_dcId(0),
    m_mtime(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

UploadFile::UploadFile(InboundPkt *in) :
    m_dcId(0),
    m_mtime(0),
    m_classType(typeUploadFile)
{
    fetch(in);
}

UploadFile::UploadFile(const UploadFile &another) :
    TelegramTypeObject(),
    m_dcId(0),
    m_mtime(0),
    m_classType(typeUploadFile)
{
    operator=(another);
}

UploadFile::UploadFile(const Null &null) :
    TelegramTypeObject(null),
    m_dcId(0),
    m_mtime(0),
    m_classType(typeUploadFile)
{
}

UploadFile::~UploadFile() {

}

void UploadFile::setBytes(const QByteArray &bytes) {
    m_bytes = bytes;
}

QByteArray UploadFile::bytes() const {
    return m_bytes;
}

void UploadFile::setDcId(qint32 dcId) {
    m_dcId = dcId;
}

qint32 UploadFile::dcId() const {
    return m_dcId;
}

void UploadFile::setEncryptionIv(const QByteArray &encryptionIv) {
    m_encryptionIv = encryptionIv;
}

QByteArray UploadFile::encryptionIv() const {
    return m_encryptionIv;
}

void UploadFile::setEncryptionKey(const QByteArray &encryptionKey) {
    m_encryptionKey = encryptionKey;
}

QByteArray UploadFile::encryptionKey() const {
    return m_encryptionKey;
}

void UploadFile::setFileToken(const QByteArray &fileToken) {
    m_fileToken = fileToken;
}

QByteArray UploadFile::fileToken() const {
    return m_fileToken;
}

void UploadFile::setMtime(qint32 mtime) {
    m_mtime = mtime;
}

qint32 UploadFile::mtime() const {
    return m_mtime;
}

void UploadFile::setType(const StorageFileType &type) {
    m_type = type;
}

StorageFileType UploadFile::type() const {
    return m_type;
}

bool UploadFile::operator ==(const UploadFile &b) const {
    return m_classType == b.m_classType &&
           m_bytes == b.m_bytes &&
           m_dcId == b.m_dcId &&
           m_encryptionIv == b.m_encryptionIv &&
           m_encryptionKey == b.m_encryptionKey &&
           m_fileToken == b.m_fileToken &&
           m_mtime == b.m_mtime &&
           m_type == b.m_type;
}

UploadFile &UploadFile::operator =(const UploadFile &b) {
    m_classType = b.m_classType;
    m_bytes = b.m_bytes;
    m_dcId = b.m_dcId;
    m_encryptionIv = b.m_encryptionIv;
    m_encryptionKey = b.m_encryptionKey;
    m_fileToken = b.m_fileToken;
    m_mtime = b.m_mtime;
    m_type = b.m_type;
    setNull(b.isNull());
    return *this;
}

void UploadFile::setClassType(UploadFile::UploadFileClassType classType) {
    m_classType = classType;
}

UploadFile::UploadFileClassType UploadFile::classType() const {
    return m_classType;
}

bool UploadFile::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeUploadFile: {
        m_type.fetch(in);
        m_mtime = in->fetchInt();
        m_bytes = in->fetchBytes();
        m_classType = static_cast<UploadFileClassType>(x);
        return true;
    }
        break;

    case typeUploadFileCdnRedirect: {
        m_dcId = in->fetchInt();
        m_fileToken = in->fetchBytes();
        m_encryptionKey = in->fetchBytes();
        m_encryptionIv = in->fetchBytes();
        m_classType = static_cast<UploadFileClassType>(x);
        return true;
    }
        break;

    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool UploadFile::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeUploadFile: {
        m_type.push(out);
        out->appendInt(m_mtime);
        out->appendBytes(m_bytes);
        return true;
    }
        break;

    case typeUploadFileCdnRedirect: {
        out->appendInt(m_dcId);
        out->appendBytes(m_fileToken);
        out->appendBytes(m_encryptionKey);
        out->appendBytes(m_encryptionIv);
        return true;
    }
        break;

    default:
        return false;
    }
}

QMap<QString, QVariant> UploadFile::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeUploadFile: {
        result["classType"] = "UploadFile::typeUploadFile";
        if( !m_type.isNull() ) result["type"] = m_type.toMap();
        if( mtime() ) result["mtime"] = QString::number(mtime());
        if( !m_bytes.isEmpty() ) result["bytes"] = QVariant::fromValue<QByteArray>(m_bytes);
        return result;
    }
        break;

    case typeUploadFileCdnRedirect: {
        result["classType"] = "UploadFile::typeUploadFileCdnRedirect";
        if( dcId() ) result["dcId"] = QString::number(dcId());
        if( !m_fileToken.isEmpty() ) result["fileToken"] = QVariant::fromValue<QByteArray>(m_fileToken);
        if( !m_encryptionKey.isEmpty() ) result["encryptionKey"] = QVariant::fromValue<QByteArray>(m_encryptionKey);
        if( !m_encryptionIv.isEmpty() ) result["encryptionIv"] = QVariant::fromValue<QByteArray>(m_encryptionIv);
        return result;
    }
        break;

    default:
        return result;
    }
}

UploadFile UploadFile::fromMap(const QMap<QString, QVariant> &map) {
    UploadFile result;
    if(map.value("classType").toString() == "UploadFile::typeUploadFile") {
        result.setClassType(typeUploadFile);
        QVariant _type_var = map.value("type");
        if( !_type_var.isNull() )
            result.setType( StorageFileType::fromMap(_type_var.toMap()) );

        QVariant _mtime_var = map.value("mtime");
        if( !_mtime_var.isNull() ) {
            _mtime_var.convert( QVariant::nameToType("qint32") );
            result.setMtime( _mtime_var.value<qint32>() );
        }

        QVariant _bytes_var = map.value("bytes");
        if( !_bytes_var.isNull() ) {
            _bytes_var.convert( QVariant::nameToType("QByteArray") );
            result.setBytes( _bytes_var.value<QByteArray>() );
        }

        return result;
    }
    if(map.value("classType").toString() == "UploadFile::typeUploadFileCdnRedirect") {
        result.setClassType(typeUploadFileCdnRedirect);
        QVariant _dcId_var = map.value("dcId");
        if( !_dcId_var.isNull() ) {
            _dcId_var.convert( QVariant::nameToType("qint32") );
            result.setDcId( _dcId_var.value<qint32>() );
        }

        QVariant _fileToken_var = map.value("fileToken");
        if( !_fileToken_var.isNull() ) {
            _fileToken_var.convert( QVariant::nameToType("QByteArray") );
            result.setFileToken( _fileToken_var.value<QByteArray>() );
        }

        QVariant _encryptionKey_var = map.value("encryptionKey");
        if( !_encryptionKey_var.isNull() ) {
            _encryptionKey_var.convert( QVariant::nameToType("QByteArray") );
            result.setEncryptionKey( _encryptionKey_var.value<QByteArray>() );
        }

        QVariant _encryptionIv_var = map.value("encryptionIv");
        if( !_encryptionIv_var.isNull() ) {
            _encryptionIv_var.convert( QVariant::nameToType("QByteArray") );
            result.setEncryptionIv( _encryptionIv_var.value<QByteArray>() );
        }

        return result;
    }
    return result;
}

UploadFile UploadFile::fromJson(const QString &json) {
    return UploadFile::fromMap(QJsonDocument::fromJson(json.toUtf8()).toVariant().toMap());
}

QByteArray UploadFile::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const UploadFile &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case UploadFile::typeUploadFile:
        stream << item.type();
        stream << item.mtime();
        stream << item.bytes();
        break;
    case UploadFile::typeUploadFileCdnRedirect:
        stream << item.dcId();
        stream << item.fileToken();
        stream << item.encryptionKey();
        stream << item.encryptionIv();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, UploadFile &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<UploadFile::UploadFileClassType>(type));
    switch(type) {
    case UploadFile::typeUploadFile: {
        StorageFileType m_type;
        stream >> m_type;
        item.setType(m_type);
        qint32 m_mtime;
        stream >> m_mtime;
        item.setMtime(m_mtime);
        QByteArray m_bytes;
        stream >> m_bytes;
        item.setBytes(m_bytes);
    }
        break;
    case UploadFile::typeUploadFileCdnRedirect: {
        qint32 m_dc_id;
        stream >> m_dc_id;
        item.setDcId(m_dc_id);
        QByteArray m_file_token;
        stream >> m_file_token;
        item.setFileToken(m_file_token);
        QByteArray m_encryption_key;
        stream >> m_encryption_key;
        item.setEncryptionKey(m_encryption_key);
        QByteArray m_encryption_iv;
        stream >> m_encryption_iv;
        item.setEncryptionIv(m_encryption_iv);
    }
        break;
    }
    return stream;
}

/*QDebug operator<<(QDebug debug,  const UploadFile &item) {
    QDebugStateSaver saver(debug);
    Q_UNUSED(saver)
    debug.nospace() << "Telegram.UploadFile(";
    switch(item.classType()) {
    case UploadFile::typeUploadFile:
        debug.nospace() << "classType: typeUploadFile";
        debug.nospace() << ", type: " << item.type();
        debug.nospace() << ", mtime: " << item.mtime();
        debug.nospace() << ", bytes: " << item.bytes();
        break;
    case UploadFile::typeUploadFileCdnRedirect:
        debug.nospace() << "classType: typeUploadFileCdnRedirect";
        debug.nospace() << ", dcId: " << item.dcId();
        debug.nospace() << ", fileToken: " << item.fileToken();
        debug.nospace() << ", encryptionKey: " << item.encryptionKey();
        debug.nospace() << ", encryptionIv: " << item.encryptionIv();
        break;
    }
    debug.nospace() << ")";
    return debug;
}
*/
