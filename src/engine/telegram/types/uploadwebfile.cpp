// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "uploadwebfile.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

UploadWebFile::UploadWebFile(UploadWebFileClassType classType, InboundPkt *in) :
    m_mtime(0),
    m_size(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

UploadWebFile::UploadWebFile(InboundPkt *in) :
    m_mtime(0),
    m_size(0),
    m_classType(typeUploadWebFile)
{
    fetch(in);
}

UploadWebFile::UploadWebFile(const UploadWebFile &another) :
    TelegramTypeObject(),
    m_mtime(0),
    m_size(0),
    m_classType(typeUploadWebFile)
{
    operator=(another);
}

UploadWebFile::UploadWebFile(const Null &null) :
    TelegramTypeObject(null),
    m_mtime(0),
    m_size(0),
    m_classType(typeUploadWebFile)
{
}

UploadWebFile::~UploadWebFile() {

}

void UploadWebFile::setBytes(const QByteArray &bytes) {
    m_bytes = bytes;
}

QByteArray UploadWebFile::bytes() const {
    return m_bytes;
}

void UploadWebFile::setFileType(const StorageFileType &fileType) {
    m_fileType = fileType;
}

StorageFileType UploadWebFile::fileType() const {
    return m_fileType;
}

void UploadWebFile::setMimeType(const QString &mimeType) {
    m_mimeType = mimeType;
}

QString UploadWebFile::mimeType() const {
    return m_mimeType;
}

void UploadWebFile::setMtime(qint32 mtime) {
    m_mtime = mtime;
}

qint32 UploadWebFile::mtime() const {
    return m_mtime;
}

void UploadWebFile::setSize(qint32 size) {
    m_size = size;
}

qint32 UploadWebFile::size() const {
    return m_size;
}

bool UploadWebFile::operator ==(const UploadWebFile &b) const {
    return m_classType == b.m_classType &&
           m_bytes == b.m_bytes &&
           m_fileType == b.m_fileType &&
           m_mimeType == b.m_mimeType &&
           m_mtime == b.m_mtime &&
           m_size == b.m_size;
}

UploadWebFile &UploadWebFile::operator =(const UploadWebFile &b) {
    m_classType = b.m_classType;
    m_bytes = b.m_bytes;
    m_fileType = b.m_fileType;
    m_mimeType = b.m_mimeType;
    m_mtime = b.m_mtime;
    m_size = b.m_size;
    setNull(b.isNull());
    return *this;
}

void UploadWebFile::setClassType(UploadWebFile::UploadWebFileClassType classType) {
    m_classType = classType;
}

UploadWebFile::UploadWebFileClassType UploadWebFile::classType() const {
    return m_classType;
}

bool UploadWebFile::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeUploadWebFile: {
        m_size = in->fetchInt();
        m_mimeType = in->fetchQString();
        m_fileType.fetch(in);
        m_mtime = in->fetchInt();
        m_bytes = in->fetchBytes();
        m_classType = static_cast<UploadWebFileClassType>(x);
        return true;
    }
        break;

    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool UploadWebFile::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeUploadWebFile: {
        out->appendInt(m_size);
        out->appendQString(m_mimeType);
        m_fileType.push(out);
        out->appendInt(m_mtime);
        out->appendBytes(m_bytes);
        return true;
    }
        break;

    default:
        return false;
    }
}

QMap<QString, QVariant> UploadWebFile::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeUploadWebFile: {
        result["classType"] = "UploadWebFile::typeUploadWebFile";
        if( size() ) result["size"] = QString::number(size());
        if( !m_mimeType.isEmpty() ) result["mimeType"] = QVariant::fromValue<QString>(m_mimeType);
        if( !m_fileType.isNull() ) result["fileType"] = m_fileType.toMap();
        if( mtime() ) result["mtime"] = QString::number(mtime());
        if( !m_bytes.isEmpty() ) result["bytes"] = QVariant::fromValue<QByteArray>(m_bytes);
        return result;
    }
        break;

    default:
        return result;
    }
}

UploadWebFile UploadWebFile::fromMap(const QMap<QString, QVariant> &map) {
    UploadWebFile result;
    if(map.value("classType").toString() == "UploadWebFile::typeUploadWebFile") {
        result.setClassType(typeUploadWebFile);
        QVariant _size_var = map.value("size");
        if( !_size_var.isNull() ) {
            _size_var.convert( QVariant::nameToType("qint32") );
            result.setSize( _size_var.value<qint32>() );
        }

        QVariant _mimeType_var = map.value("mimeType");
        if( !_mimeType_var.isNull() ) {
            _mimeType_var.convert( QVariant::nameToType("QString") );
            result.setMimeType( _mimeType_var.value<QString>() );
        }

        QVariant _fileType_var = map.value("fileType");
        if( !_fileType_var.isNull() )
            result.setFileType( StorageFileType::fromMap(_fileType_var.toMap()) );

        QVariant _mtime_var = map.value("mtime");
        if( !_mtime_var.isNull() ) {
            _mtime_var.convert( QVariant::nameToType("qint32") );
            result.setMtime( _mtime_var.value<qint32>() );
        }

        QVariant _bytes_var = map.value("bytes");
        if( !_bytes_var.isNull() ) {
            _bytes_var.convert( QVariant::nameToType("QByteArray") );
            result.setBytes( _bytes_var.value<QByteArray>() );
        }

        return result;
    }
    return result;
}

UploadWebFile UploadWebFile::fromJson(const QString &json) {
    return UploadWebFile::fromMap(QJsonDocument::fromJson(json.toUtf8()).toVariant().toMap());
}

QByteArray UploadWebFile::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const UploadWebFile &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case UploadWebFile::typeUploadWebFile:
        stream << item.size();
        stream << item.mimeType();
        stream << item.fileType();
        stream << item.mtime();
        stream << item.bytes();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, UploadWebFile &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<UploadWebFile::UploadWebFileClassType>(type));
    switch(type) {
    case UploadWebFile::typeUploadWebFile: {
        qint32 m_size;
        stream >> m_size;
        item.setSize(m_size);
        QString m_mime_type;
        stream >> m_mime_type;
        item.setMimeType(m_mime_type);
        StorageFileType m_file_type;
        stream >> m_file_type;
        item.setFileType(m_file_type);
        qint32 m_mtime;
        stream >> m_mtime;
        item.setMtime(m_mtime);
        QByteArray m_bytes;
        stream >> m_bytes;
        item.setBytes(m_bytes);
    }
        break;
    }
    return stream;
}

/*QDebug operator<<(QDebug debug,  const UploadWebFile &item) {
    QDebugStateSaver saver(debug);
    Q_UNUSED(saver)
    debug.nospace() << "Telegram.UploadWebFile(";
    switch(item.classType()) {
    case UploadWebFile::typeUploadWebFile:
        debug.nospace() << "classType: typeUploadWebFile";
        debug.nospace() << ", size: " << item.size();
        debug.nospace() << ", mimeType: " << item.mimeType();
        debug.nospace() << ", fileType: " << item.fileType();
        debug.nospace() << ", mtime: " << item.mtime();
        debug.nospace() << ", bytes: " << item.bytes();
        break;
    }
    debug.nospace() << ")";
    return debug;
}
*/
