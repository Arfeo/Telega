// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "userfull.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

UserFull::UserFull(UserFullClassType classType, InboundPkt *in) :
    m_commonChatsCount(0),
    m_flags(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

UserFull::UserFull(InboundPkt *in) :
    m_commonChatsCount(0),
    m_flags(0),
    m_classType(typeUserFull)
{
    fetch(in);
}

UserFull::UserFull(const UserFull &another) :
    TelegramTypeObject(),
    m_commonChatsCount(0),
    m_flags(0),
    m_classType(typeUserFull)
{
    operator=(another);
}

UserFull::UserFull(const Null &null) :
    TelegramTypeObject(null),
    m_commonChatsCount(0),
    m_flags(0),
    m_classType(typeUserFull)
{
}

UserFull::~UserFull() {
    
}

void UserFull::setAbout(const QString &about) {
    if(!about.isNull()) m_flags = (m_flags | (1<<1));
    else m_flags = (m_flags & ~(1<<1));
    m_about = about;
}

QString UserFull::about() const {
    return m_about;
}

void UserFull::setBlocked(bool blocked) {
    if(blocked) m_flags = (m_flags | (1<<0));
    else m_flags = (m_flags & ~(1<<0));
}

bool UserFull::blocked() const {
    return (m_flags & 1<<0);
}

void UserFull::setBotInfo(const BotInfo &botInfo) {
    if(!botInfo.isNull()) m_flags = (m_flags | (1<<3));
    else m_flags = (m_flags & ~(1<<3));
    m_botInfo = botInfo;
}

BotInfo UserFull::botInfo() const {
    return m_botInfo;
}

void UserFull::setCommonChatsCount(qint32 commonChatsCount) {
    m_commonChatsCount = commonChatsCount;
}

qint32 UserFull::commonChatsCount() const {
    return m_commonChatsCount;
}

void UserFull::setFlags(qint32 flags) {
    m_flags = flags;
}

qint32 UserFull::flags() const {
    return m_flags;
}

void UserFull::setLink(const ContactsLink &link) {
    m_link = link;
}

ContactsLink UserFull::link() const {
    return m_link;
}

void UserFull::setNotifySettings(const PeerNotifySettings &notifySettings) {
    m_notifySettings = notifySettings;
}

PeerNotifySettings UserFull::notifySettings() const {
    return m_notifySettings;
}

void UserFull::setPhoneCallsAvailable(bool phoneCallsAvailable) {
    if(phoneCallsAvailable) m_flags = (m_flags | (1<<4));
    else m_flags = (m_flags & ~(1<<4));
}

bool UserFull::phoneCallsAvailable() const {
    return (m_flags & 1<<4);
}

void UserFull::setPhoneCallsPrivate(bool phoneCallsPrivate) {
    if(phoneCallsPrivate) m_flags = (m_flags | (1<<5));
    else m_flags = (m_flags & ~(1<<5));
}

bool UserFull::phoneCallsPrivate() const {
    return (m_flags & 1<<5);
}

void UserFull::setProfilePhoto(const Photo &profilePhoto) {
    if(!profilePhoto.isNull()) m_flags = (m_flags | (1<<2));
    else m_flags = (m_flags & ~(1<<2));
    m_profilePhoto = profilePhoto;
}

Photo UserFull::profilePhoto() const {
    return m_profilePhoto;
}

void UserFull::setUser(const User &user) {
    m_user = user;
}

User UserFull::user() const {
    return m_user;
}

bool UserFull::operator ==(const UserFull &b) const {
    return m_classType == b.m_classType &&
           m_about == b.m_about &&
           m_botInfo == b.m_botInfo &&
           m_commonChatsCount == b.m_commonChatsCount &&
           m_flags == b.m_flags &&
           m_link == b.m_link &&
           m_notifySettings == b.m_notifySettings &&
           m_profilePhoto == b.m_profilePhoto &&
           m_user == b.m_user;
}

UserFull &UserFull::operator =(const UserFull &b) {
    m_classType = b.m_classType;
    m_about = b.m_about;
    m_botInfo = b.m_botInfo;
    m_commonChatsCount = b.m_commonChatsCount;
    m_flags = b.m_flags;
    m_link = b.m_link;
    m_notifySettings = b.m_notifySettings;
    m_profilePhoto = b.m_profilePhoto;
    m_user = b.m_user;
    setNull(b.isNull());
    return *this;
}

void UserFull::setClassType(UserFull::UserFullClassType classType) {
    m_classType = classType;
}

UserFull::UserFullClassType UserFull::classType() const {
    return m_classType;
}

bool UserFull::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeUserFull: {
        m_flags = in->fetchInt();
        m_user.fetch(in);
        if(m_flags & 1<<1) {
            m_about = in->fetchQString();
        }
        m_link.fetch(in);
        if(m_flags & 1<<2) {
            m_profilePhoto.fetch(in);
        }
        m_notifySettings.fetch(in);
        if(m_flags & 1<<3) {
            m_botInfo.fetch(in);
        }
        m_commonChatsCount = in->fetchInt();
        m_classType = static_cast<UserFullClassType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool UserFull::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeUserFull: {
        out->appendInt(m_flags);
        m_user.push(out);
        if(m_flags & 1<<1) {
            out->appendQString(m_about);
        }
        m_link.push(out);
        if(m_flags & 1<<2) {
            m_profilePhoto.push(out);
        }
        m_notifySettings.push(out);
        if(m_flags & 1<<3) {
            m_botInfo.push(out);
        }
        out->appendInt(m_commonChatsCount);
        return true;
    }
        break;
    
    default:
        return false;
    }
}

QMap<QString, QVariant> UserFull::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeUserFull: {
        result["classType"] = "UserFull::typeUserFull";
        if( blocked() ) result["blocked"] = QString::number(blocked());
        if( phoneCallsAvailable() ) result["phoneCallsAvailable"] = QString::number(phoneCallsAvailable());
        if( phoneCallsPrivate() ) result["phoneCallsPrivate"] = QString::number(phoneCallsPrivate());
        if( !m_user.isNull() ) result["user"] = m_user.toMap();
        if( !m_about.isEmpty() ) result["about"] = QVariant::fromValue<QString>(m_about);
        if( !m_link.isNull() ) result["link"] = m_link.toMap();
        if( !m_profilePhoto.isNull() ) result["profilePhoto"] = m_profilePhoto.toMap();
        if( !m_notifySettings.isNull() ) result["notifySettings"] = m_notifySettings.toMap();
        if( !m_botInfo.isNull() ) result["botInfo"] = m_botInfo.toMap();
        if( commonChatsCount() ) result["commonChatsCount"] = QString::number(commonChatsCount());
        return result;
    }
        break;
    
    default:
        return result;
    }
}

UserFull UserFull::fromMap(const QMap<QString, QVariant> &map) {
    UserFull result;
    if(map.value("classType").toString() == "UserFull::typeUserFull") {
        result.setClassType(typeUserFull);
        QVariant _blocked_var = map.value("blocked");
        if( !_blocked_var.isNull() ) {
            _blocked_var.convert( QVariant::nameToType("bool") );
            result.setBlocked( _blocked_var.value<bool>() );
        }
        
        QVariant _phoneCallsAvailable_var = map.value("phoneCallsAvailable");
        if( !_phoneCallsAvailable_var.isNull() ) {
            _phoneCallsAvailable_var.convert( QVariant::nameToType("bool") );
            result.setPhoneCallsAvailable( _phoneCallsAvailable_var.value<bool>() );
        }
        
        QVariant _phoneCallsPrivate_var = map.value("phoneCallsPrivate");
        if( !_phoneCallsPrivate_var.isNull() ) {
            _phoneCallsPrivate_var.convert( QVariant::nameToType("bool") );
            result.setPhoneCallsPrivate( _phoneCallsPrivate_var.value<bool>() );
        }
        
        QVariant _user_var = map.value("user");
        if( !_user_var.isNull() )
            result.setUser( User::fromMap(_user_var.toMap()) );
        
        QVariant _about_var = map.value("about");
        if( !_about_var.isNull() ) {
            _about_var.convert( QVariant::nameToType("QString") );
            result.setAbout( _about_var.value<QString>() );
        }
        
        QVariant _link_var = map.value("link");
        if( !_link_var.isNull() )
            result.setLink( ContactsLink::fromMap(_link_var.toMap()) );
        
        QVariant _profilePhoto_var = map.value("profilePhoto");
        if( !_profilePhoto_var.isNull() )
            result.setProfilePhoto( Photo::fromMap(_profilePhoto_var.toMap()) );
        
        QVariant _notifySettings_var = map.value("notifySettings");
        if( !_notifySettings_var.isNull() )
            result.setNotifySettings( PeerNotifySettings::fromMap(_notifySettings_var.toMap()) );
        
        QVariant _botInfo_var = map.value("botInfo");
        if( !_botInfo_var.isNull() )
            result.setBotInfo( BotInfo::fromMap(_botInfo_var.toMap()) );
        
        QVariant _commonChatsCount_var = map.value("commonChatsCount");
        if( !_commonChatsCount_var.isNull() ) {
            _commonChatsCount_var.convert( QVariant::nameToType("qint32") );
            result.setCommonChatsCount( _commonChatsCount_var.value<qint32>() );
        }
        
        return result;
    }
    return result;
}

UserFull UserFull::fromJson(const QString &json) {
    return UserFull::fromMap(QJsonDocument::fromJson(json.toUtf8()).toVariant().toMap());
}

QByteArray UserFull::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const UserFull &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case UserFull::typeUserFull:
        stream << item.flags();
        stream << item.user();
        stream << item.about();
        stream << item.link();
        stream << item.profilePhoto();
        stream << item.notifySettings();
        stream << item.botInfo();
        stream << item.commonChatsCount();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, UserFull &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<UserFull::UserFullClassType>(type));
    switch(type) {
    case UserFull::typeUserFull: {
        qint32 m_flags;
        stream >> m_flags;
        item.setFlags(m_flags);
        User m_user;
        stream >> m_user;
        item.setUser(m_user);
        QString m_about;
        stream >> m_about;
        item.setAbout(m_about);
        ContactsLink m_link;
        stream >> m_link;
        item.setLink(m_link);
        Photo m_profile_photo;
        stream >> m_profile_photo;
        item.setProfilePhoto(m_profile_photo);
        PeerNotifySettings m_notify_settings;
        stream >> m_notify_settings;
        item.setNotifySettings(m_notify_settings);
        BotInfo m_bot_info;
        stream >> m_bot_info;
        item.setBotInfo(m_bot_info);
        qint32 m_common_chats_count;
        stream >> m_common_chats_count;
        item.setCommonChatsCount(m_common_chats_count);
    }
        break;
    }
    return stream;
}

QDebug operator<<(QDebug debug,  const UserFull &item) {
    QDebugStateSaver saver(debug);
    Q_UNUSED(saver)
    debug.nospace() << "Telegram.UserFull(";
    switch(item.classType()) {
    case UserFull::typeUserFull:
        debug.nospace() << "classType: typeUserFull";
        debug.nospace() << ", flags: " << item.flags();
        debug.nospace() << ", user: " << item.user();
        debug.nospace() << ", about: " << item.about();
        debug.nospace() << ", link: " << item.link();
        debug.nospace() << ", profilePhoto: " << item.profilePhoto();
        debug.nospace() << ", notifySettings: " << item.notifySettings();
        debug.nospace() << ", botInfo: " << item.botInfo();
        debug.nospace() << ", commonChatsCount: " << item.commonChatsCount();
        break;
    }
    debug.nospace() << ")";
    return debug;
}

