// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "userprofilephoto.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

UserProfilePhoto::UserProfilePhoto(UserProfilePhotoClassType classType, InboundPkt *in) :
    m_photoId(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

UserProfilePhoto::UserProfilePhoto(InboundPkt *in) :
    m_photoId(0),
    m_classType(typeUserProfilePhotoEmpty)
{
    fetch(in);
}

UserProfilePhoto::UserProfilePhoto(const UserProfilePhoto &another) :
    TelegramTypeObject(),
    m_photoId(0),
    m_classType(typeUserProfilePhotoEmpty)
{
    operator=(another);
}

UserProfilePhoto::UserProfilePhoto(const Null &null) :
    TelegramTypeObject(null),
    m_photoId(0),
    m_classType(typeUserProfilePhotoEmpty)
{
}

UserProfilePhoto::~UserProfilePhoto() {

}

void UserProfilePhoto::setPhotoBig(const FileLocation &photoBig) {
    m_photoBig = photoBig;
}

FileLocation UserProfilePhoto::photoBig() const {
    return m_photoBig;
}

void UserProfilePhoto::setPhotoId(qint64 photoId) {
    m_photoId = photoId;
}

qint64 UserProfilePhoto::photoId() const {
    return m_photoId;
}

void UserProfilePhoto::setPhotoSmall(const FileLocation &photoSmall) {
    m_photoSmall = photoSmall;
}

FileLocation UserProfilePhoto::photoSmall() const {
    return m_photoSmall;
}

bool UserProfilePhoto::operator ==(const UserProfilePhoto &b) const {
    return m_classType == b.m_classType &&
           m_photoBig == b.m_photoBig &&
           m_photoId == b.m_photoId &&
           m_photoSmall == b.m_photoSmall;
}

UserProfilePhoto &UserProfilePhoto::operator =(const UserProfilePhoto &b) {
    m_classType = b.m_classType;
    m_photoBig = b.m_photoBig;
    m_photoId = b.m_photoId;
    m_photoSmall = b.m_photoSmall;
    setNull(b.isNull());
    return *this;
}

void UserProfilePhoto::setClassType(UserProfilePhoto::UserProfilePhotoClassType classType) {
    m_classType = classType;
}

UserProfilePhoto::UserProfilePhotoClassType UserProfilePhoto::classType() const {
    return m_classType;
}

bool UserProfilePhoto::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeUserProfilePhotoEmpty: {
        m_classType = static_cast<UserProfilePhotoClassType>(x);
        return true;
    }
        break;

    case typeUserProfilePhoto: {
        m_photoId = in->fetchLong();
        m_photoSmall.fetch(in);
        m_photoBig.fetch(in);
        m_classType = static_cast<UserProfilePhotoClassType>(x);
        return true;
    }
        break;

    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool UserProfilePhoto::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeUserProfilePhotoEmpty: {
        return true;
    }
        break;

    case typeUserProfilePhoto: {
        out->appendLong(m_photoId);
        m_photoSmall.push(out);
        m_photoBig.push(out);
        return true;
    }
        break;

    default:
        return false;
    }
}

QMap<QString, QVariant> UserProfilePhoto::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeUserProfilePhotoEmpty: {
        result["classType"] = "UserProfilePhoto::typeUserProfilePhotoEmpty";
        return result;
    }
        break;

    case typeUserProfilePhoto: {
        result["classType"] = "UserProfilePhoto::typeUserProfilePhoto";
        if( photoId() ) result["photoId"] = QString::number(photoId());
        if( !m_photoSmall.isNull() ) result["photoSmall"] = m_photoSmall.toMap();
        if( !m_photoBig.isNull() ) result["photoBig"] = m_photoBig.toMap();
        return result;
    }
        break;

    default:
        return result;
    }
}

UserProfilePhoto UserProfilePhoto::fromMap(const QMap<QString, QVariant> &map) {
    UserProfilePhoto result;
    if(map.value("classType").toString() == "UserProfilePhoto::typeUserProfilePhotoEmpty") {
        result.setClassType(typeUserProfilePhotoEmpty);
        return result;
    }
    if(map.value("classType").toString() == "UserProfilePhoto::typeUserProfilePhoto") {
        result.setClassType(typeUserProfilePhoto);
        QVariant _photoId_var = map.value("photoId");
        if( !_photoId_var.isNull() ) {
            _photoId_var.convert( QVariant::nameToType("qint64") );
            result.setPhotoId( _photoId_var.value<qint64>() );
        }

        QVariant _photoSmall_var = map.value("photoSmall");
        if( !_photoSmall_var.isNull() )
            result.setPhotoSmall( FileLocation::fromMap(_photoSmall_var.toMap()) );

        QVariant _photoBig_var = map.value("photoBig");
        if( !_photoBig_var.isNull() )
            result.setPhotoBig( FileLocation::fromMap(_photoBig_var.toMap()) );

        return result;
    }
    return result;
}

UserProfilePhoto UserProfilePhoto::fromJson(const QString &json) {
    return UserProfilePhoto::fromMap(QJsonDocument::fromJson(json.toUtf8()).toVariant().toMap());
}

QByteArray UserProfilePhoto::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const UserProfilePhoto &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case UserProfilePhoto::typeUserProfilePhotoEmpty:

        break;
    case UserProfilePhoto::typeUserProfilePhoto:
        stream << item.photoId();
        stream << item.photoSmall();
        stream << item.photoBig();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, UserProfilePhoto &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<UserProfilePhoto::UserProfilePhotoClassType>(type));
    switch(type) {
    case UserProfilePhoto::typeUserProfilePhotoEmpty: {

    }
        break;
    case UserProfilePhoto::typeUserProfilePhoto: {
        qint64 m_photo_id;
        stream >> m_photo_id;
        item.setPhotoId(m_photo_id);
        FileLocation m_photo_small;
        stream >> m_photo_small;
        item.setPhotoSmall(m_photo_small);
        FileLocation m_photo_big;
        stream >> m_photo_big;
        item.setPhotoBig(m_photo_big);
    }
        break;
    }
    return stream;
}

/*QDebug operator<<(QDebug debug,  const UserProfilePhoto &item) {
    QDebugStateSaver saver(debug);
    Q_UNUSED(saver)
    debug.nospace() << "Telegram.UserProfilePhoto(";
    switch(item.classType()) {
    case UserProfilePhoto::typeUserProfilePhotoEmpty:
        debug.nospace() << "classType: typeUserProfilePhotoEmpty";
        break;
    case UserProfilePhoto::typeUserProfilePhoto:
        debug.nospace() << "classType: typeUserProfilePhoto";
        debug.nospace() << ", photoId: " << item.photoId();
        debug.nospace() << ", photoSmall: " << item.photoSmall();
        debug.nospace() << ", photoBig: " << item.photoBig();
        break;
    }
    debug.nospace() << ")";
    return debug;
}
*/
